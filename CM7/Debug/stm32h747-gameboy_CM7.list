
stm32h747-gameboy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009670  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009d68  08009908  08009908  00019908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013670  08013670  00031074  2**0
                  CONTENTS
  4 .ARM          00000000  08013670  08013670  00031074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013670  08013670  00031074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013670  08013670  00023670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013674  08013674  00023674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001074  24000000  08013678  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010574  24001078  080146ec  00031078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240115ec  080146ec  000315ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00031074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a259c  00000000  00000000  000310a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000070eb  00000000  00000000  000d363e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001a8ce  00000000  00000000  000da729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002570  00000000  00000000  000f4ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000046b8  00000000  00000000  000f7568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000486d1  00000000  00000000  000fbc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000310b8  00000000  00000000  001442f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c8805  00000000  00000000  001753a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0033dbae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006dcc  00000000  00000000  0033dc04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24001078 	.word	0x24001078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080098f0 	.word	0x080098f0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400107c 	.word	0x2400107c
 80002d4:	080098f0 	.word	0x080098f0

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002da:	492e      	ldr	r1, [pc, #184]	; (8000394 <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80002e4:	b430      	push	{r4, r5}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	f042 0210 	orr.w	r2, r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f2:	680b      	ldr	r3, [r1, #0]
 80002f4:	f003 030f 	and.w	r3, r3, #15
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	d805      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fc:	680b      	ldr	r3, [r1, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030c:	4a23      	ldr	r2, [pc, #140]	; (800039c <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800030e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000310:	4820      	ldr	r0, [pc, #128]	; (8000394 <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 8000312:	f041 0101 	orr.w	r1, r1, #1
 8000316:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000318:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000320:	6803      	ldr	r3, [r0, #0]
 8000322:	071b      	lsls	r3, r3, #28
 8000324:	d505      	bpl.n	8000332 <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000326:	6803      	ldr	r3, [r0, #0]
 8000328:	f023 030f 	bic.w	r3, r3, #15
 800032c:	f043 0307 	orr.w	r3, r3, #7
 8000330:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <SystemInit+0xc0>)
 8000334:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000336:	491a      	ldr	r1, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
  RCC->PLLCKSELR = 0x02020200;
 8000338:	4c1a      	ldr	r4, [pc, #104]	; (80003a4 <SystemInit+0xcc>)
  RCC->PLLCFGR = 0x01FF0000;
 800033a:	481b      	ldr	r0, [pc, #108]	; (80003a8 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 800033c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800033e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000340:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000342:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000346:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800034a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800034c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800034e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000350:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000352:	6818      	ldr	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000354:	4c15      	ldr	r4, [pc, #84]	; (80003ac <SystemInit+0xd4>)
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800035a:	4d15      	ldr	r5, [pc, #84]	; (80003b0 <SystemInit+0xd8>)
 800035c:	4915      	ldr	r1, [pc, #84]	; (80003b4 <SystemInit+0xdc>)
  RCC->CR &= 0xFFFBFFFFU;
 800035e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000360:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8000362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000368:	6263      	str	r3, [r4, #36]	; 0x24
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800036a:	682b      	ldr	r3, [r5, #0]
 800036c:	4019      	ands	r1, r3
 800036e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000372:	d202      	bcs.n	800037a <SystemInit+0xa2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <SystemInit+0xe0>)
 8000376:	2201      	movs	r2, #1
 8000378:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800037a:	4910      	ldr	r1, [pc, #64]	; (80003bc <SystemInit+0xe4>)
 800037c:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <SystemInit+0xb8>)
 8000382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000386:	6008      	str	r0, [r1, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000388:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800038a:	bc30      	pop	{r4, r5}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	01010280 	.word	0x01010280
 80003a4:	02020200 	.word	0x02020200
 80003a8:	01ff0000 	.word	0x01ff0000
 80003ac:	580000c0 	.word	0x580000c0
 80003b0:	5c001000 	.word	0x5c001000
 80003b4:	ffff0000 	.word	0xffff0000
 80003b8:	51008108 	.word	0x51008108
 80003bc:	52004000 	.word	0x52004000

080003c0 <vNOP>:
};

/* Implementation*/

/*********************0x0X*/
void vNOP(){          }
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop

080003c4 <vINCs_BC>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
void vINCs_BC(){      reg.BC++;}
 80003c4:	4a02      	ldr	r2, [pc, #8]	; (80003d0 <vINCs_BC+0xc>)
 80003c6:	8853      	ldrh	r3, [r2, #2]
 80003c8:	3301      	adds	r3, #1
 80003ca:	8053      	strh	r3, [r2, #2]
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	2400125c 	.word	0x2400125c

080003d4 <vDECs_BC>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
void vLDs_a16_SP(){   vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
void vDECs_BC(){      reg.BC--;}
 80003d4:	4a02      	ldr	r2, [pc, #8]	; (80003e0 <vDECs_BC+0xc>)
 80003d6:	8853      	ldrh	r3, [r2, #2]
 80003d8:	3b01      	subs	r3, #1
 80003da:	8053      	strh	r3, [r2, #2]
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	2400125c 	.word	0x2400125c

080003e4 <vSTOP>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}

/*********************0x1X*/
void vSTOP(){         ucSTOPPED = 1;}                                    // MORE NEEDED TO IMPLEMENT LATER
 80003e4:	4b01      	ldr	r3, [pc, #4]	; (80003ec <vSTOP+0x8>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
 80003ea:	4770      	bx	lr
 80003ec:	240010a1 	.word	0x240010a1

080003f0 <vINCs_DE>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
void vINCs_DE(){      reg.DE++;}
 80003f0:	4a02      	ldr	r2, [pc, #8]	; (80003fc <vINCs_DE+0xc>)
 80003f2:	8893      	ldrh	r3, [r2, #4]
 80003f4:	3301      	adds	r3, #1
 80003f6:	8093      	strh	r3, [r2, #4]
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	2400125c 	.word	0x2400125c

08000400 <vDECs_DE>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
void vDECs_DE(){      reg.DE--;}
 8000400:	4a02      	ldr	r2, [pc, #8]	; (800040c <vDECs_DE+0xc>)
 8000402:	8893      	ldrh	r3, [r2, #4]
 8000404:	3b01      	subs	r3, #1
 8000406:	8093      	strh	r3, [r2, #4]
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	2400125c 	.word	0x2400125c

08000410 <vINCs_HL>:

/*********************0x2X*/
void vJR_NZ_r8(){     customDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
void vINCs_HL(){      reg.HL++;}
 8000410:	4a02      	ldr	r2, [pc, #8]	; (800041c <vINCs_HL+0xc>)
 8000412:	88d3      	ldrh	r3, [r2, #6]
 8000414:	3301      	adds	r3, #1
 8000416:	80d3      	strh	r3, [r2, #6]
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	2400125c 	.word	0x2400125c

08000420 <vDECs_HL>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
void vJR_Z_r8(){      customDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
void vDECs_HL(){      reg.HL--;}
 8000420:	4a02      	ldr	r2, [pc, #8]	; (800042c <vDECs_HL+0xc>)
 8000422:	88d3      	ldrh	r3, [r2, #6]
 8000424:	3b01      	subs	r3, #1
 8000426:	80d3      	strh	r3, [r2, #6]
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	2400125c 	.word	0x2400125c

08000430 <vINCs_SP>:

/*********************0x3X*/
void vJR_NC_r8(){     customDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
void vINCs_SP(){      reg.SP++;}
 8000430:	4a02      	ldr	r2, [pc, #8]	; (800043c <vINCs_SP+0xc>)
 8000432:	8913      	ldrh	r3, [r2, #8]
 8000434:	3301      	adds	r3, #1
 8000436:	8113      	strh	r3, [r2, #8]
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	2400125c 	.word	0x2400125c

08000440 <vDECs_SP>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
void vSCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); setbit(&reg.F, C_FLAG);}
void vJR_C_r8(){      customDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
void vDECs_SP(){      reg.SP--;}
 8000440:	4a02      	ldr	r2, [pc, #8]	; (800044c <vDECs_SP+0xc>)
 8000442:	8913      	ldrh	r3, [r2, #8]
 8000444:	3b01      	subs	r3, #1
 8000446:	8113      	strh	r3, [r2, #8]
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	2400125c 	.word	0x2400125c

08000450 <vLD_B_C>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
void vCCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); (checkbit(reg.F, C_FLAG)) ? resetbit(&reg.F, C_FLAG) : setbit(&reg.F, C_FLAG);}

/*********************0x4X*/
void vLD_B_B(){       reg.B = reg.B;}
void vLD_B_C(){       reg.B = reg.C;}
 8000450:	4b01      	ldr	r3, [pc, #4]	; (8000458 <vLD_B_C+0x8>)
 8000452:	789a      	ldrb	r2, [r3, #2]
 8000454:	70da      	strb	r2, [r3, #3]
 8000456:	4770      	bx	lr
 8000458:	2400125c 	.word	0x2400125c

0800045c <vLD_B_D>:
void vLD_B_D(){       reg.B = reg.D;}
 800045c:	4b01      	ldr	r3, [pc, #4]	; (8000464 <vLD_B_D+0x8>)
 800045e:	795a      	ldrb	r2, [r3, #5]
 8000460:	70da      	strb	r2, [r3, #3]
 8000462:	4770      	bx	lr
 8000464:	2400125c 	.word	0x2400125c

08000468 <vLD_B_E>:
void vLD_B_E(){       reg.B = reg.E;}
 8000468:	4b01      	ldr	r3, [pc, #4]	; (8000470 <vLD_B_E+0x8>)
 800046a:	791a      	ldrb	r2, [r3, #4]
 800046c:	70da      	strb	r2, [r3, #3]
 800046e:	4770      	bx	lr
 8000470:	2400125c 	.word	0x2400125c

08000474 <vLD_B_H>:
void vLD_B_H(){       reg.B = reg.H;}
 8000474:	4b01      	ldr	r3, [pc, #4]	; (800047c <vLD_B_H+0x8>)
 8000476:	79da      	ldrb	r2, [r3, #7]
 8000478:	70da      	strb	r2, [r3, #3]
 800047a:	4770      	bx	lr
 800047c:	2400125c 	.word	0x2400125c

08000480 <vLD_B_L>:
void vLD_B_L(){       reg.B = reg.L;}
 8000480:	4b01      	ldr	r3, [pc, #4]	; (8000488 <vLD_B_L+0x8>)
 8000482:	799a      	ldrb	r2, [r3, #6]
 8000484:	70da      	strb	r2, [r3, #3]
 8000486:	4770      	bx	lr
 8000488:	2400125c 	.word	0x2400125c

0800048c <vLD_B_A>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
void vLD_B_A(){       reg.B = reg.A;}
 800048c:	4b01      	ldr	r3, [pc, #4]	; (8000494 <vLD_B_A+0x8>)
 800048e:	785a      	ldrb	r2, [r3, #1]
 8000490:	70da      	strb	r2, [r3, #3]
 8000492:	4770      	bx	lr
 8000494:	2400125c 	.word	0x2400125c

08000498 <vLD_C_B>:
void vLD_C_B(){       reg.C = reg.B;}
 8000498:	4b01      	ldr	r3, [pc, #4]	; (80004a0 <vLD_C_B+0x8>)
 800049a:	78da      	ldrb	r2, [r3, #3]
 800049c:	709a      	strb	r2, [r3, #2]
 800049e:	4770      	bx	lr
 80004a0:	2400125c 	.word	0x2400125c

080004a4 <vLD_C_D>:
void vLD_C_C(){       reg.C = reg.C;}
void vLD_C_D(){       reg.C = reg.D;}
 80004a4:	4b01      	ldr	r3, [pc, #4]	; (80004ac <vLD_C_D+0x8>)
 80004a6:	795a      	ldrb	r2, [r3, #5]
 80004a8:	709a      	strb	r2, [r3, #2]
 80004aa:	4770      	bx	lr
 80004ac:	2400125c 	.word	0x2400125c

080004b0 <vLD_C_E>:
void vLD_C_E(){       reg.C = reg.E;}
 80004b0:	4b01      	ldr	r3, [pc, #4]	; (80004b8 <vLD_C_E+0x8>)
 80004b2:	791a      	ldrb	r2, [r3, #4]
 80004b4:	709a      	strb	r2, [r3, #2]
 80004b6:	4770      	bx	lr
 80004b8:	2400125c 	.word	0x2400125c

080004bc <vLD_C_H>:
void vLD_C_H(){       reg.C = reg.H;}
 80004bc:	4b01      	ldr	r3, [pc, #4]	; (80004c4 <vLD_C_H+0x8>)
 80004be:	79da      	ldrb	r2, [r3, #7]
 80004c0:	709a      	strb	r2, [r3, #2]
 80004c2:	4770      	bx	lr
 80004c4:	2400125c 	.word	0x2400125c

080004c8 <vLD_C_L>:
void vLD_C_L(){       reg.C = reg.L;}
 80004c8:	4b01      	ldr	r3, [pc, #4]	; (80004d0 <vLD_C_L+0x8>)
 80004ca:	799a      	ldrb	r2, [r3, #6]
 80004cc:	709a      	strb	r2, [r3, #2]
 80004ce:	4770      	bx	lr
 80004d0:	2400125c 	.word	0x2400125c

080004d4 <vLD_C_A>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
void vLD_C_A(){       reg.C = reg.A;}
 80004d4:	4b01      	ldr	r3, [pc, #4]	; (80004dc <vLD_C_A+0x8>)
 80004d6:	785a      	ldrb	r2, [r3, #1]
 80004d8:	709a      	strb	r2, [r3, #2]
 80004da:	4770      	bx	lr
 80004dc:	2400125c 	.word	0x2400125c

080004e0 <vLD_D_B>:

/*********************0x5X*/
void vLD_D_B(){       reg.D = reg.B;}
 80004e0:	4b01      	ldr	r3, [pc, #4]	; (80004e8 <vLD_D_B+0x8>)
 80004e2:	78da      	ldrb	r2, [r3, #3]
 80004e4:	715a      	strb	r2, [r3, #5]
 80004e6:	4770      	bx	lr
 80004e8:	2400125c 	.word	0x2400125c

080004ec <vLD_D_C>:
void vLD_D_C(){       reg.D = reg.C;}
 80004ec:	4b01      	ldr	r3, [pc, #4]	; (80004f4 <vLD_D_C+0x8>)
 80004ee:	789a      	ldrb	r2, [r3, #2]
 80004f0:	715a      	strb	r2, [r3, #5]
 80004f2:	4770      	bx	lr
 80004f4:	2400125c 	.word	0x2400125c

080004f8 <vLD_D_E>:
void vLD_D_D(){       reg.D = reg.D;}
void vLD_D_E(){       reg.D = reg.E;}
 80004f8:	4b01      	ldr	r3, [pc, #4]	; (8000500 <vLD_D_E+0x8>)
 80004fa:	791a      	ldrb	r2, [r3, #4]
 80004fc:	715a      	strb	r2, [r3, #5]
 80004fe:	4770      	bx	lr
 8000500:	2400125c 	.word	0x2400125c

08000504 <vLD_D_H>:
void vLD_D_H(){       reg.D = reg.H;}
 8000504:	4b01      	ldr	r3, [pc, #4]	; (800050c <vLD_D_H+0x8>)
 8000506:	79da      	ldrb	r2, [r3, #7]
 8000508:	715a      	strb	r2, [r3, #5]
 800050a:	4770      	bx	lr
 800050c:	2400125c 	.word	0x2400125c

08000510 <vLD_D_L>:
void vLD_D_L(){       reg.D = reg.L;}
 8000510:	4b01      	ldr	r3, [pc, #4]	; (8000518 <vLD_D_L+0x8>)
 8000512:	799a      	ldrb	r2, [r3, #6]
 8000514:	715a      	strb	r2, [r3, #5]
 8000516:	4770      	bx	lr
 8000518:	2400125c 	.word	0x2400125c

0800051c <vLD_D_A>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
void vLD_D_A(){       reg.D = reg.A;}
 800051c:	4b01      	ldr	r3, [pc, #4]	; (8000524 <vLD_D_A+0x8>)
 800051e:	785a      	ldrb	r2, [r3, #1]
 8000520:	715a      	strb	r2, [r3, #5]
 8000522:	4770      	bx	lr
 8000524:	2400125c 	.word	0x2400125c

08000528 <vLD_E_B>:
void vLD_E_B(){       reg.E = reg.B;}
 8000528:	4b01      	ldr	r3, [pc, #4]	; (8000530 <vLD_E_B+0x8>)
 800052a:	78da      	ldrb	r2, [r3, #3]
 800052c:	711a      	strb	r2, [r3, #4]
 800052e:	4770      	bx	lr
 8000530:	2400125c 	.word	0x2400125c

08000534 <vLD_E_C>:
void vLD_E_C(){       reg.E = reg.C;}
 8000534:	4b01      	ldr	r3, [pc, #4]	; (800053c <vLD_E_C+0x8>)
 8000536:	789a      	ldrb	r2, [r3, #2]
 8000538:	711a      	strb	r2, [r3, #4]
 800053a:	4770      	bx	lr
 800053c:	2400125c 	.word	0x2400125c

08000540 <vLD_E_D>:
void vLD_E_D(){       reg.E = reg.D;}
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <vLD_E_D+0x8>)
 8000542:	795a      	ldrb	r2, [r3, #5]
 8000544:	711a      	strb	r2, [r3, #4]
 8000546:	4770      	bx	lr
 8000548:	2400125c 	.word	0x2400125c

0800054c <vLD_E_H>:
void vLD_E_E(){       reg.E = reg.E;}
void vLD_E_H(){       reg.E = reg.H;}
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <vLD_E_H+0x8>)
 800054e:	79da      	ldrb	r2, [r3, #7]
 8000550:	711a      	strb	r2, [r3, #4]
 8000552:	4770      	bx	lr
 8000554:	2400125c 	.word	0x2400125c

08000558 <vLD_E_L>:
void vLD_E_L(){       reg.E = reg.L;}
 8000558:	4b01      	ldr	r3, [pc, #4]	; (8000560 <vLD_E_L+0x8>)
 800055a:	799a      	ldrb	r2, [r3, #6]
 800055c:	711a      	strb	r2, [r3, #4]
 800055e:	4770      	bx	lr
 8000560:	2400125c 	.word	0x2400125c

08000564 <vLD_E_A>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
void vLD_E_A(){       reg.E = reg.A;}
 8000564:	4b01      	ldr	r3, [pc, #4]	; (800056c <vLD_E_A+0x8>)
 8000566:	785a      	ldrb	r2, [r3, #1]
 8000568:	711a      	strb	r2, [r3, #4]
 800056a:	4770      	bx	lr
 800056c:	2400125c 	.word	0x2400125c

08000570 <vLD_H_B>:

/*********************0x6X*/
void vLD_H_B(){       reg.H = reg.B;}
 8000570:	4b01      	ldr	r3, [pc, #4]	; (8000578 <vLD_H_B+0x8>)
 8000572:	78da      	ldrb	r2, [r3, #3]
 8000574:	71da      	strb	r2, [r3, #7]
 8000576:	4770      	bx	lr
 8000578:	2400125c 	.word	0x2400125c

0800057c <vLD_H_C>:
void vLD_H_C(){       reg.H = reg.C;}
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <vLD_H_C+0x8>)
 800057e:	789a      	ldrb	r2, [r3, #2]
 8000580:	71da      	strb	r2, [r3, #7]
 8000582:	4770      	bx	lr
 8000584:	2400125c 	.word	0x2400125c

08000588 <vLD_H_D>:
void vLD_H_D(){       reg.H = reg.D;}
 8000588:	4b01      	ldr	r3, [pc, #4]	; (8000590 <vLD_H_D+0x8>)
 800058a:	795a      	ldrb	r2, [r3, #5]
 800058c:	71da      	strb	r2, [r3, #7]
 800058e:	4770      	bx	lr
 8000590:	2400125c 	.word	0x2400125c

08000594 <vLD_H_E>:
void vLD_H_E(){       reg.H = reg.E;}
 8000594:	4b01      	ldr	r3, [pc, #4]	; (800059c <vLD_H_E+0x8>)
 8000596:	791a      	ldrb	r2, [r3, #4]
 8000598:	71da      	strb	r2, [r3, #7]
 800059a:	4770      	bx	lr
 800059c:	2400125c 	.word	0x2400125c

080005a0 <vLD_H_L>:
void vLD_H_H(){       reg.H = reg.H;}
void vLD_H_L(){       reg.H = reg.L;}
 80005a0:	4b01      	ldr	r3, [pc, #4]	; (80005a8 <vLD_H_L+0x8>)
 80005a2:	799a      	ldrb	r2, [r3, #6]
 80005a4:	71da      	strb	r2, [r3, #7]
 80005a6:	4770      	bx	lr
 80005a8:	2400125c 	.word	0x2400125c

080005ac <vLD_H_A>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
void vLD_H_A(){       reg.H = reg.A;}
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <vLD_H_A+0x8>)
 80005ae:	785a      	ldrb	r2, [r3, #1]
 80005b0:	71da      	strb	r2, [r3, #7]
 80005b2:	4770      	bx	lr
 80005b4:	2400125c 	.word	0x2400125c

080005b8 <vLD_L_B>:
void vLD_L_B(){       reg.L = reg.B;}
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <vLD_L_B+0x8>)
 80005ba:	78da      	ldrb	r2, [r3, #3]
 80005bc:	719a      	strb	r2, [r3, #6]
 80005be:	4770      	bx	lr
 80005c0:	2400125c 	.word	0x2400125c

080005c4 <vLD_L_C>:
void vLD_L_C(){       reg.L = reg.C;}
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <vLD_L_C+0x8>)
 80005c6:	789a      	ldrb	r2, [r3, #2]
 80005c8:	719a      	strb	r2, [r3, #6]
 80005ca:	4770      	bx	lr
 80005cc:	2400125c 	.word	0x2400125c

080005d0 <vLD_L_D>:
void vLD_L_D(){       reg.L = reg.D;}
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <vLD_L_D+0x8>)
 80005d2:	795a      	ldrb	r2, [r3, #5]
 80005d4:	719a      	strb	r2, [r3, #6]
 80005d6:	4770      	bx	lr
 80005d8:	2400125c 	.word	0x2400125c

080005dc <vLD_L_E>:
void vLD_L_E(){       reg.L = reg.E;}
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <vLD_L_E+0x8>)
 80005de:	791a      	ldrb	r2, [r3, #4]
 80005e0:	719a      	strb	r2, [r3, #6]
 80005e2:	4770      	bx	lr
 80005e4:	2400125c 	.word	0x2400125c

080005e8 <vLD_L_H>:
void vLD_L_H(){       reg.L = reg.H;}
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <vLD_L_H+0x8>)
 80005ea:	79da      	ldrb	r2, [r3, #7]
 80005ec:	719a      	strb	r2, [r3, #6]
 80005ee:	4770      	bx	lr
 80005f0:	2400125c 	.word	0x2400125c

080005f4 <vLD_L_A>:
void vLD_L_L(){       reg.L = reg.L;}
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
void vLD_L_A(){       reg.L = reg.A;}
 80005f4:	4b01      	ldr	r3, [pc, #4]	; (80005fc <vLD_L_A+0x8>)
 80005f6:	785a      	ldrb	r2, [r3, #1]
 80005f8:	719a      	strb	r2, [r3, #6]
 80005fa:	4770      	bx	lr
 80005fc:	2400125c 	.word	0x2400125c

08000600 <vHALT>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
void vHALT(){         ucHALTED = 1;}
 8000600:	4b01      	ldr	r3, [pc, #4]	; (8000608 <vHALT+0x8>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	4770      	bx	lr
 8000608:	2400109e 	.word	0x2400109e

0800060c <vLD_A_B>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
void vLD_A_B(){       reg.A = reg.B;}
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <vLD_A_B+0x8>)
 800060e:	78da      	ldrb	r2, [r3, #3]
 8000610:	705a      	strb	r2, [r3, #1]
 8000612:	4770      	bx	lr
 8000614:	2400125c 	.word	0x2400125c

08000618 <vLD_A_C>:
void vLD_A_C(){       reg.A = reg.C;}
 8000618:	4b01      	ldr	r3, [pc, #4]	; (8000620 <vLD_A_C+0x8>)
 800061a:	789a      	ldrb	r2, [r3, #2]
 800061c:	705a      	strb	r2, [r3, #1]
 800061e:	4770      	bx	lr
 8000620:	2400125c 	.word	0x2400125c

08000624 <vLD_A_D>:
void vLD_A_D(){       reg.A = reg.D;}
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <vLD_A_D+0x8>)
 8000626:	795a      	ldrb	r2, [r3, #5]
 8000628:	705a      	strb	r2, [r3, #1]
 800062a:	4770      	bx	lr
 800062c:	2400125c 	.word	0x2400125c

08000630 <vLD_A_E>:
void vLD_A_E(){       reg.A = reg.E;}
 8000630:	4b01      	ldr	r3, [pc, #4]	; (8000638 <vLD_A_E+0x8>)
 8000632:	791a      	ldrb	r2, [r3, #4]
 8000634:	705a      	strb	r2, [r3, #1]
 8000636:	4770      	bx	lr
 8000638:	2400125c 	.word	0x2400125c

0800063c <vLD_A_H>:
void vLD_A_H(){       reg.A = reg.H;}
 800063c:	4b01      	ldr	r3, [pc, #4]	; (8000644 <vLD_A_H+0x8>)
 800063e:	79da      	ldrb	r2, [r3, #7]
 8000640:	705a      	strb	r2, [r3, #1]
 8000642:	4770      	bx	lr
 8000644:	2400125c 	.word	0x2400125c

08000648 <vLD_A_L>:
void vLD_A_L(){       reg.A = reg.L;}
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <vLD_A_L+0x8>)
 800064a:	799a      	ldrb	r2, [r3, #6]
 800064c:	705a      	strb	r2, [r3, #1]
 800064e:	4770      	bx	lr
 8000650:	2400125c 	.word	0x2400125c

08000654 <vAND_B>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}

/*********************0xAX*/
void vAND_B(){        reg.A &= reg.B; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <vAND_B+0x18>)
 8000656:	785a      	ldrb	r2, [r3, #1]
 8000658:	78d9      	ldrb	r1, [r3, #3]
 800065a:	400a      	ands	r2, r1
 800065c:	2a00      	cmp	r2, #0
 800065e:	705a      	strb	r2, [r3, #1]
 8000660:	bf0c      	ite	eq
 8000662:	22a0      	moveq	r2, #160	; 0xa0
 8000664:	2220      	movne	r2, #32
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	2400125c 	.word	0x2400125c

08000670 <vAND_C>:
void vAND_C(){        reg.A &= reg.C; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <vAND_C+0x18>)
 8000672:	785a      	ldrb	r2, [r3, #1]
 8000674:	7899      	ldrb	r1, [r3, #2]
 8000676:	400a      	ands	r2, r1
 8000678:	2a00      	cmp	r2, #0
 800067a:	705a      	strb	r2, [r3, #1]
 800067c:	bf0c      	ite	eq
 800067e:	22a0      	moveq	r2, #160	; 0xa0
 8000680:	2220      	movne	r2, #32
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	2400125c 	.word	0x2400125c

0800068c <vAND_D>:
void vAND_D(){        reg.A &= reg.D; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <vAND_D+0x18>)
 800068e:	785a      	ldrb	r2, [r3, #1]
 8000690:	7959      	ldrb	r1, [r3, #5]
 8000692:	400a      	ands	r2, r1
 8000694:	2a00      	cmp	r2, #0
 8000696:	705a      	strb	r2, [r3, #1]
 8000698:	bf0c      	ite	eq
 800069a:	22a0      	moveq	r2, #160	; 0xa0
 800069c:	2220      	movne	r2, #32
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	2400125c 	.word	0x2400125c

080006a8 <vAND_E>:
void vAND_E(){        reg.A &= reg.E; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <vAND_E+0x18>)
 80006aa:	785a      	ldrb	r2, [r3, #1]
 80006ac:	7919      	ldrb	r1, [r3, #4]
 80006ae:	400a      	ands	r2, r1
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	705a      	strb	r2, [r3, #1]
 80006b4:	bf0c      	ite	eq
 80006b6:	22a0      	moveq	r2, #160	; 0xa0
 80006b8:	2220      	movne	r2, #32
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	2400125c 	.word	0x2400125c

080006c4 <vAND_H>:
void vAND_H(){        reg.A &= reg.H; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <vAND_H+0x18>)
 80006c6:	785a      	ldrb	r2, [r3, #1]
 80006c8:	79d9      	ldrb	r1, [r3, #7]
 80006ca:	400a      	ands	r2, r1
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	705a      	strb	r2, [r3, #1]
 80006d0:	bf0c      	ite	eq
 80006d2:	22a0      	moveq	r2, #160	; 0xa0
 80006d4:	2220      	movne	r2, #32
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	2400125c 	.word	0x2400125c

080006e0 <vAND_L>:
void vAND_L(){        reg.A &= reg.L; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <vAND_L+0x18>)
 80006e2:	785a      	ldrb	r2, [r3, #1]
 80006e4:	7999      	ldrb	r1, [r3, #6]
 80006e6:	400a      	ands	r2, r1
 80006e8:	2a00      	cmp	r2, #0
 80006ea:	705a      	strb	r2, [r3, #1]
 80006ec:	bf0c      	ite	eq
 80006ee:	22a0      	moveq	r2, #160	; 0xa0
 80006f0:	2220      	movne	r2, #32
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	2400125c 	.word	0x2400125c

080006fc <vAND_A>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vAND_A(){        reg.A &= reg.A; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <vAND_A+0x10>)
 80006fe:	785a      	ldrb	r2, [r3, #1]
 8000700:	2a00      	cmp	r2, #0
 8000702:	bf0c      	ite	eq
 8000704:	22a0      	moveq	r2, #160	; 0xa0
 8000706:	2220      	movne	r2, #32
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	4770      	bx	lr
 800070c:	2400125c 	.word	0x2400125c

08000710 <vXOR_B>:
void vXOR_B(){        reg.A ^= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <vXOR_B+0x18>)
 8000712:	785a      	ldrb	r2, [r3, #1]
 8000714:	78d9      	ldrb	r1, [r3, #3]
 8000716:	ea82 0001 	eor.w	r0, r2, r1
 800071a:	428a      	cmp	r2, r1
 800071c:	bf0c      	ite	eq
 800071e:	2280      	moveq	r2, #128	; 0x80
 8000720:	2200      	movne	r2, #0
 8000722:	7058      	strb	r0, [r3, #1]
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	4770      	bx	lr
 8000728:	2400125c 	.word	0x2400125c

0800072c <vXOR_C>:
void vXOR_C(){        reg.A ^= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <vXOR_C+0x18>)
 800072e:	785a      	ldrb	r2, [r3, #1]
 8000730:	7899      	ldrb	r1, [r3, #2]
 8000732:	ea82 0001 	eor.w	r0, r2, r1
 8000736:	428a      	cmp	r2, r1
 8000738:	bf0c      	ite	eq
 800073a:	2280      	moveq	r2, #128	; 0x80
 800073c:	2200      	movne	r2, #0
 800073e:	7058      	strb	r0, [r3, #1]
 8000740:	701a      	strb	r2, [r3, #0]
 8000742:	4770      	bx	lr
 8000744:	2400125c 	.word	0x2400125c

08000748 <vXOR_D>:
void vXOR_D(){        reg.A ^= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <vXOR_D+0x18>)
 800074a:	785a      	ldrb	r2, [r3, #1]
 800074c:	7959      	ldrb	r1, [r3, #5]
 800074e:	ea82 0001 	eor.w	r0, r2, r1
 8000752:	428a      	cmp	r2, r1
 8000754:	bf0c      	ite	eq
 8000756:	2280      	moveq	r2, #128	; 0x80
 8000758:	2200      	movne	r2, #0
 800075a:	7058      	strb	r0, [r3, #1]
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	4770      	bx	lr
 8000760:	2400125c 	.word	0x2400125c

08000764 <vXOR_E>:
void vXOR_E(){        reg.A ^= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <vXOR_E+0x18>)
 8000766:	785a      	ldrb	r2, [r3, #1]
 8000768:	7919      	ldrb	r1, [r3, #4]
 800076a:	ea82 0001 	eor.w	r0, r2, r1
 800076e:	428a      	cmp	r2, r1
 8000770:	bf0c      	ite	eq
 8000772:	2280      	moveq	r2, #128	; 0x80
 8000774:	2200      	movne	r2, #0
 8000776:	7058      	strb	r0, [r3, #1]
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	4770      	bx	lr
 800077c:	2400125c 	.word	0x2400125c

08000780 <vXOR_H>:
void vXOR_H(){        reg.A ^= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <vXOR_H+0x18>)
 8000782:	785a      	ldrb	r2, [r3, #1]
 8000784:	79d9      	ldrb	r1, [r3, #7]
 8000786:	ea82 0001 	eor.w	r0, r2, r1
 800078a:	428a      	cmp	r2, r1
 800078c:	bf0c      	ite	eq
 800078e:	2280      	moveq	r2, #128	; 0x80
 8000790:	2200      	movne	r2, #0
 8000792:	7058      	strb	r0, [r3, #1]
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	4770      	bx	lr
 8000798:	2400125c 	.word	0x2400125c

0800079c <vXOR_L>:
void vXOR_L(){        reg.A ^= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <vXOR_L+0x18>)
 800079e:	785a      	ldrb	r2, [r3, #1]
 80007a0:	7999      	ldrb	r1, [r3, #6]
 80007a2:	ea82 0001 	eor.w	r0, r2, r1
 80007a6:	428a      	cmp	r2, r1
 80007a8:	bf0c      	ite	eq
 80007aa:	2280      	moveq	r2, #128	; 0x80
 80007ac:	2200      	movne	r2, #0
 80007ae:	7058      	strb	r0, [r3, #1]
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	4770      	bx	lr
 80007b4:	2400125c 	.word	0x2400125c

080007b8 <vXOR_A>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vXOR_A(){        reg.A ^= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007b8:	4b01      	ldr	r3, [pc, #4]	; (80007c0 <vXOR_A+0x8>)
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	801a      	strh	r2, [r3, #0]
 80007be:	4770      	bx	lr
 80007c0:	2400125c 	.word	0x2400125c

080007c4 <vOR_B>:

/*********************0xBX*/
void vOR_B(){         reg.A |= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <vOR_B+0x18>)
 80007c6:	785a      	ldrb	r2, [r3, #1]
 80007c8:	78d9      	ldrb	r1, [r3, #3]
 80007ca:	430a      	orrs	r2, r1
 80007cc:	2a00      	cmp	r2, #0
 80007ce:	705a      	strb	r2, [r3, #1]
 80007d0:	bf0c      	ite	eq
 80007d2:	2280      	moveq	r2, #128	; 0x80
 80007d4:	2200      	movne	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	2400125c 	.word	0x2400125c

080007e0 <vOR_C>:
void vOR_C(){         reg.A |= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <vOR_C+0x18>)
 80007e2:	785a      	ldrb	r2, [r3, #1]
 80007e4:	7899      	ldrb	r1, [r3, #2]
 80007e6:	430a      	orrs	r2, r1
 80007e8:	2a00      	cmp	r2, #0
 80007ea:	705a      	strb	r2, [r3, #1]
 80007ec:	bf0c      	ite	eq
 80007ee:	2280      	moveq	r2, #128	; 0x80
 80007f0:	2200      	movne	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	2400125c 	.word	0x2400125c

080007fc <vOR_D>:
void vOR_D(){         reg.A |= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <vOR_D+0x18>)
 80007fe:	785a      	ldrb	r2, [r3, #1]
 8000800:	7959      	ldrb	r1, [r3, #5]
 8000802:	430a      	orrs	r2, r1
 8000804:	2a00      	cmp	r2, #0
 8000806:	705a      	strb	r2, [r3, #1]
 8000808:	bf0c      	ite	eq
 800080a:	2280      	moveq	r2, #128	; 0x80
 800080c:	2200      	movne	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	2400125c 	.word	0x2400125c

08000818 <vOR_E>:
void vOR_E(){         reg.A |= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <vOR_E+0x18>)
 800081a:	785a      	ldrb	r2, [r3, #1]
 800081c:	7919      	ldrb	r1, [r3, #4]
 800081e:	430a      	orrs	r2, r1
 8000820:	2a00      	cmp	r2, #0
 8000822:	705a      	strb	r2, [r3, #1]
 8000824:	bf0c      	ite	eq
 8000826:	2280      	moveq	r2, #128	; 0x80
 8000828:	2200      	movne	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	2400125c 	.word	0x2400125c

08000834 <vOR_H>:
void vOR_H(){         reg.A |= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <vOR_H+0x18>)
 8000836:	785a      	ldrb	r2, [r3, #1]
 8000838:	79d9      	ldrb	r1, [r3, #7]
 800083a:	430a      	orrs	r2, r1
 800083c:	2a00      	cmp	r2, #0
 800083e:	705a      	strb	r2, [r3, #1]
 8000840:	bf0c      	ite	eq
 8000842:	2280      	moveq	r2, #128	; 0x80
 8000844:	2200      	movne	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	2400125c 	.word	0x2400125c

08000850 <vOR_L>:
void vOR_L(){         reg.A |= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <vOR_L+0x18>)
 8000852:	785a      	ldrb	r2, [r3, #1]
 8000854:	7999      	ldrb	r1, [r3, #6]
 8000856:	430a      	orrs	r2, r1
 8000858:	2a00      	cmp	r2, #0
 800085a:	705a      	strb	r2, [r3, #1]
 800085c:	bf0c      	ite	eq
 800085e:	2280      	moveq	r2, #128	; 0x80
 8000860:	2200      	movne	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	2400125c 	.word	0x2400125c

0800086c <vOR_A>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vOR_A(){         reg.A |= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <vOR_A+0x10>)
 800086e:	785a      	ldrb	r2, [r3, #1]
 8000870:	2a00      	cmp	r2, #0
 8000872:	bf0c      	ite	eq
 8000874:	2280      	moveq	r2, #128	; 0x80
 8000876:	2200      	movne	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	4770      	bx	lr
 800087c:	2400125c 	.word	0x2400125c

08000880 <vJP_HL>:
// -----------
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vJP_HL(){        reg.PC = reg.HL;}
 8000880:	4b01      	ldr	r3, [pc, #4]	; (8000888 <vJP_HL+0x8>)
 8000882:	88da      	ldrh	r2, [r3, #6]
 8000884:	815a      	strh	r2, [r3, #10]
 8000886:	4770      	bx	lr
 8000888:	2400125c 	.word	0x2400125c

0800088c <vDI>:

/*********************0xFX*/
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
void vDI(){           ucInterruptMasterEnable = 0;}
 800088c:	4b01      	ldr	r3, [pc, #4]	; (8000894 <vDI+0x8>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	4770      	bx	lr
 8000894:	2400109f 	.word	0x2400109f

08000898 <vLDs_SP_HL>:
// -----------
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_HL(){    reg.SP = reg.HL;}
 8000898:	4b01      	ldr	r3, [pc, #4]	; (80008a0 <vLDs_SP_HL+0x8>)
 800089a:	88da      	ldrh	r2, [r3, #6]
 800089c:	811a      	strh	r2, [r3, #8]
 800089e:	4770      	bx	lr
 80008a0:	2400125c 	.word	0x2400125c

080008a4 <vEI>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
void vEI(){           ucInterruptMasterEnable = 1;}
 80008a4:	4b01      	ldr	r3, [pc, #4]	; (80008ac <vEI+0x8>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
 80008aa:	4770      	bx	lr
 80008ac:	2400109f 	.word	0x2400109f

080008b0 <vLD_B_d8>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
 80008b0:	b510      	push	{r4, lr}
 80008b2:	4c04      	ldr	r4, [pc, #16]	; (80008c4 <vLD_B_d8+0x14>)
 80008b4:	8960      	ldrh	r0, [r4, #10]
 80008b6:	3801      	subs	r0, #1
 80008b8:	b280      	uxth	r0, r0
 80008ba:	f002 fe5f 	bl	800357c <ucGBMemoryRead>
 80008be:	70e0      	strb	r0, [r4, #3]
 80008c0:	bd10      	pop	{r4, pc}
 80008c2:	bf00      	nop
 80008c4:	2400125c 	.word	0x2400125c

080008c8 <vLD_A_BC>:
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
 80008c8:	b510      	push	{r4, lr}
 80008ca:	4c03      	ldr	r4, [pc, #12]	; (80008d8 <vLD_A_BC+0x10>)
 80008cc:	8860      	ldrh	r0, [r4, #2]
 80008ce:	f002 fe55 	bl	800357c <ucGBMemoryRead>
 80008d2:	7060      	strb	r0, [r4, #1]
 80008d4:	bd10      	pop	{r4, pc}
 80008d6:	bf00      	nop
 80008d8:	2400125c 	.word	0x2400125c

080008dc <vLD_C_d8>:
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
 80008dc:	b510      	push	{r4, lr}
 80008de:	4c04      	ldr	r4, [pc, #16]	; (80008f0 <vLD_C_d8+0x14>)
 80008e0:	8960      	ldrh	r0, [r4, #10]
 80008e2:	3801      	subs	r0, #1
 80008e4:	b280      	uxth	r0, r0
 80008e6:	f002 fe49 	bl	800357c <ucGBMemoryRead>
 80008ea:	70a0      	strb	r0, [r4, #2]
 80008ec:	bd10      	pop	{r4, pc}
 80008ee:	bf00      	nop
 80008f0:	2400125c 	.word	0x2400125c

080008f4 <vLD_D_d8>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
 80008f4:	b510      	push	{r4, lr}
 80008f6:	4c04      	ldr	r4, [pc, #16]	; (8000908 <vLD_D_d8+0x14>)
 80008f8:	8960      	ldrh	r0, [r4, #10]
 80008fa:	3801      	subs	r0, #1
 80008fc:	b280      	uxth	r0, r0
 80008fe:	f002 fe3d 	bl	800357c <ucGBMemoryRead>
 8000902:	7160      	strb	r0, [r4, #5]
 8000904:	bd10      	pop	{r4, pc}
 8000906:	bf00      	nop
 8000908:	2400125c 	.word	0x2400125c

0800090c <vJR_r8>:
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
 800090c:	b510      	push	{r4, lr}
 800090e:	4c05      	ldr	r4, [pc, #20]	; (8000924 <vJR_r8+0x18>)
 8000910:	8960      	ldrh	r0, [r4, #10]
 8000912:	3801      	subs	r0, #1
 8000914:	b280      	uxth	r0, r0
 8000916:	f002 fe31 	bl	800357c <ucGBMemoryRead>
 800091a:	8963      	ldrh	r3, [r4, #10]
 800091c:	fa43 f080 	sxtab	r0, r3, r0
 8000920:	8160      	strh	r0, [r4, #10]
 8000922:	bd10      	pop	{r4, pc}
 8000924:	2400125c 	.word	0x2400125c

08000928 <vLD_A_DE>:
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
 8000928:	b510      	push	{r4, lr}
 800092a:	4c03      	ldr	r4, [pc, #12]	; (8000938 <vLD_A_DE+0x10>)
 800092c:	88a0      	ldrh	r0, [r4, #4]
 800092e:	f002 fe25 	bl	800357c <ucGBMemoryRead>
 8000932:	7060      	strb	r0, [r4, #1]
 8000934:	bd10      	pop	{r4, pc}
 8000936:	bf00      	nop
 8000938:	2400125c 	.word	0x2400125c

0800093c <vLD_E_d8>:
void vLD_E_d8(){      reg.E = ucGBMemoryRead(reg.PC - 1);}
 800093c:	b510      	push	{r4, lr}
 800093e:	4c04      	ldr	r4, [pc, #16]	; (8000950 <vLD_E_d8+0x14>)
 8000940:	8960      	ldrh	r0, [r4, #10]
 8000942:	3801      	subs	r0, #1
 8000944:	b280      	uxth	r0, r0
 8000946:	f002 fe19 	bl	800357c <ucGBMemoryRead>
 800094a:	7120      	strb	r0, [r4, #4]
 800094c:	bd10      	pop	{r4, pc}
 800094e:	bf00      	nop
 8000950:	2400125c 	.word	0x2400125c

08000954 <vLD_H_d8>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
 8000954:	b510      	push	{r4, lr}
 8000956:	4c04      	ldr	r4, [pc, #16]	; (8000968 <vLD_H_d8+0x14>)
 8000958:	8960      	ldrh	r0, [r4, #10]
 800095a:	3801      	subs	r0, #1
 800095c:	b280      	uxth	r0, r0
 800095e:	f002 fe0d 	bl	800357c <ucGBMemoryRead>
 8000962:	71e0      	strb	r0, [r4, #7]
 8000964:	bd10      	pop	{r4, pc}
 8000966:	bf00      	nop
 8000968:	2400125c 	.word	0x2400125c

0800096c <vLD_A_HLI>:
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
 800096c:	b510      	push	{r4, lr}
 800096e:	4c04      	ldr	r4, [pc, #16]	; (8000980 <vLD_A_HLI+0x14>)
 8000970:	88e0      	ldrh	r0, [r4, #6]
 8000972:	f002 fe03 	bl	800357c <ucGBMemoryRead>
 8000976:	88e3      	ldrh	r3, [r4, #6]
 8000978:	7060      	strb	r0, [r4, #1]
 800097a:	3301      	adds	r3, #1
 800097c:	80e3      	strh	r3, [r4, #6]
 800097e:	bd10      	pop	{r4, pc}
 8000980:	2400125c 	.word	0x2400125c

08000984 <vLD_L_d8>:
void vLD_L_d8(){      reg.L = ucGBMemoryRead(reg.PC - 1);}
 8000984:	b510      	push	{r4, lr}
 8000986:	4c04      	ldr	r4, [pc, #16]	; (8000998 <vLD_L_d8+0x14>)
 8000988:	8960      	ldrh	r0, [r4, #10]
 800098a:	3801      	subs	r0, #1
 800098c:	b280      	uxth	r0, r0
 800098e:	f002 fdf5 	bl	800357c <ucGBMemoryRead>
 8000992:	71a0      	strb	r0, [r4, #6]
 8000994:	bd10      	pop	{r4, pc}
 8000996:	bf00      	nop
 8000998:	2400125c 	.word	0x2400125c

0800099c <vLD_A_HLD>:
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
 800099c:	b510      	push	{r4, lr}
 800099e:	4c04      	ldr	r4, [pc, #16]	; (80009b0 <vLD_A_HLD+0x14>)
 80009a0:	88e0      	ldrh	r0, [r4, #6]
 80009a2:	f002 fdeb 	bl	800357c <ucGBMemoryRead>
 80009a6:	88e3      	ldrh	r3, [r4, #6]
 80009a8:	7060      	strb	r0, [r4, #1]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	80e3      	strh	r3, [r4, #6]
 80009ae:	bd10      	pop	{r4, pc}
 80009b0:	2400125c 	.word	0x2400125c

080009b4 <vLD_A_d8>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
 80009b4:	b510      	push	{r4, lr}
 80009b6:	4c04      	ldr	r4, [pc, #16]	; (80009c8 <vLD_A_d8+0x14>)
 80009b8:	8960      	ldrh	r0, [r4, #10]
 80009ba:	3801      	subs	r0, #1
 80009bc:	b280      	uxth	r0, r0
 80009be:	f002 fddd 	bl	800357c <ucGBMemoryRead>
 80009c2:	7060      	strb	r0, [r4, #1]
 80009c4:	bd10      	pop	{r4, pc}
 80009c6:	bf00      	nop
 80009c8:	2400125c 	.word	0x2400125c

080009cc <vLD_B_HL>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
 80009cc:	b510      	push	{r4, lr}
 80009ce:	4c03      	ldr	r4, [pc, #12]	; (80009dc <vLD_B_HL+0x10>)
 80009d0:	88e0      	ldrh	r0, [r4, #6]
 80009d2:	f002 fdd3 	bl	800357c <ucGBMemoryRead>
 80009d6:	70e0      	strb	r0, [r4, #3]
 80009d8:	bd10      	pop	{r4, pc}
 80009da:	bf00      	nop
 80009dc:	2400125c 	.word	0x2400125c

080009e0 <vLD_C_HL>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
 80009e0:	b510      	push	{r4, lr}
 80009e2:	4c03      	ldr	r4, [pc, #12]	; (80009f0 <vLD_C_HL+0x10>)
 80009e4:	88e0      	ldrh	r0, [r4, #6]
 80009e6:	f002 fdc9 	bl	800357c <ucGBMemoryRead>
 80009ea:	70a0      	strb	r0, [r4, #2]
 80009ec:	bd10      	pop	{r4, pc}
 80009ee:	bf00      	nop
 80009f0:	2400125c 	.word	0x2400125c

080009f4 <vLD_D_HL>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
 80009f4:	b510      	push	{r4, lr}
 80009f6:	4c03      	ldr	r4, [pc, #12]	; (8000a04 <vLD_D_HL+0x10>)
 80009f8:	88e0      	ldrh	r0, [r4, #6]
 80009fa:	f002 fdbf 	bl	800357c <ucGBMemoryRead>
 80009fe:	7160      	strb	r0, [r4, #5]
 8000a00:	bd10      	pop	{r4, pc}
 8000a02:	bf00      	nop
 8000a04:	2400125c 	.word	0x2400125c

08000a08 <vLD_E_HL>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
 8000a08:	b510      	push	{r4, lr}
 8000a0a:	4c03      	ldr	r4, [pc, #12]	; (8000a18 <vLD_E_HL+0x10>)
 8000a0c:	88e0      	ldrh	r0, [r4, #6]
 8000a0e:	f002 fdb5 	bl	800357c <ucGBMemoryRead>
 8000a12:	7120      	strb	r0, [r4, #4]
 8000a14:	bd10      	pop	{r4, pc}
 8000a16:	bf00      	nop
 8000a18:	2400125c 	.word	0x2400125c

08000a1c <vLD_H_HL>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
 8000a1c:	b510      	push	{r4, lr}
 8000a1e:	4c03      	ldr	r4, [pc, #12]	; (8000a2c <vLD_H_HL+0x10>)
 8000a20:	88e0      	ldrh	r0, [r4, #6]
 8000a22:	f002 fdab 	bl	800357c <ucGBMemoryRead>
 8000a26:	71e0      	strb	r0, [r4, #7]
 8000a28:	bd10      	pop	{r4, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2400125c 	.word	0x2400125c

08000a30 <vLD_L_HL>:
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
 8000a30:	b510      	push	{r4, lr}
 8000a32:	4c03      	ldr	r4, [pc, #12]	; (8000a40 <vLD_L_HL+0x10>)
 8000a34:	88e0      	ldrh	r0, [r4, #6]
 8000a36:	f002 fda1 	bl	800357c <ucGBMemoryRead>
 8000a3a:	71a0      	strb	r0, [r4, #6]
 8000a3c:	bd10      	pop	{r4, pc}
 8000a3e:	bf00      	nop
 8000a40:	2400125c 	.word	0x2400125c

08000a44 <vLD_A_HL>:
void vLD_A_HL(){      reg.A = ucGBMemoryRead(reg.HL);}
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4c03      	ldr	r4, [pc, #12]	; (8000a54 <vLD_A_HL+0x10>)
 8000a48:	88e0      	ldrh	r0, [r4, #6]
 8000a4a:	f002 fd97 	bl	800357c <ucGBMemoryRead>
 8000a4e:	7060      	strb	r0, [r4, #1]
 8000a50:	bd10      	pop	{r4, pc}
 8000a52:	bf00      	nop
 8000a54:	2400125c 	.word	0x2400125c

08000a58 <vAND_HL>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000a58:	b510      	push	{r4, lr}
 8000a5a:	4c06      	ldr	r4, [pc, #24]	; (8000a74 <vAND_HL+0x1c>)
 8000a5c:	88e0      	ldrh	r0, [r4, #6]
 8000a5e:	f002 fd8d 	bl	800357c <ucGBMemoryRead>
 8000a62:	7863      	ldrb	r3, [r4, #1]
 8000a64:	4018      	ands	r0, r3
 8000a66:	2800      	cmp	r0, #0
 8000a68:	7060      	strb	r0, [r4, #1]
 8000a6a:	bf0c      	ite	eq
 8000a6c:	23a0      	moveq	r3, #160	; 0xa0
 8000a6e:	2320      	movne	r3, #32
 8000a70:	7023      	strb	r3, [r4, #0]
 8000a72:	bd10      	pop	{r4, pc}
 8000a74:	2400125c 	.word	0x2400125c

08000a78 <vXOR_HL>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000a78:	b510      	push	{r4, lr}
 8000a7a:	4c07      	ldr	r4, [pc, #28]	; (8000a98 <vXOR_HL+0x20>)
 8000a7c:	88e0      	ldrh	r0, [r4, #6]
 8000a7e:	f002 fd7d 	bl	800357c <ucGBMemoryRead>
 8000a82:	7863      	ldrb	r3, [r4, #1]
 8000a84:	ea83 0200 	eor.w	r2, r3, r0
 8000a88:	4283      	cmp	r3, r0
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2080      	moveq	r0, #128	; 0x80
 8000a8e:	2000      	movne	r0, #0
 8000a90:	7062      	strb	r2, [r4, #1]
 8000a92:	7020      	strb	r0, [r4, #0]
 8000a94:	bd10      	pop	{r4, pc}
 8000a96:	bf00      	nop
 8000a98:	2400125c 	.word	0x2400125c

08000a9c <vOR_HL>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000a9c:	b510      	push	{r4, lr}
 8000a9e:	4c07      	ldr	r4, [pc, #28]	; (8000abc <vOR_HL+0x20>)
 8000aa0:	88e0      	ldrh	r0, [r4, #6]
 8000aa2:	f002 fd6b 	bl	800357c <ucGBMemoryRead>
 8000aa6:	7863      	ldrb	r3, [r4, #1]
 8000aa8:	4318      	orrs	r0, r3
 8000aaa:	b2c0      	uxtb	r0, r0
 8000aac:	2800      	cmp	r0, #0
 8000aae:	7060      	strb	r0, [r4, #1]
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2380      	moveq	r3, #128	; 0x80
 8000ab4:	2300      	movne	r3, #0
 8000ab6:	7023      	strb	r3, [r4, #0]
 8000ab8:	bd10      	pop	{r4, pc}
 8000aba:	bf00      	nop
 8000abc:	2400125c 	.word	0x2400125c

08000ac0 <vPREFIX>:
void vPREFIX(){       ((void (*)(void))prefix_instructions[ucGBMemoryRead(reg.PC - 1)].instr)();}
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <vPREFIX+0x1c>)
 8000ac2:	8958      	ldrh	r0, [r3, #10]
 8000ac4:	3801      	subs	r0, #1
 8000ac6:	b510      	push	{r4, lr}
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	f002 fd57 	bl	800357c <ucGBMemoryRead>
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <vPREFIX+0x20>)
 8000ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ad4:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000ad8:	4718      	bx	r3
 8000ada:	bf00      	nop
 8000adc:	2400125c 	.word	0x2400125c
 8000ae0:	24000808 	.word	0x24000808

08000ae4 <vAND_d8>:
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000ae4:	b510      	push	{r4, lr}
 8000ae6:	4c07      	ldr	r4, [pc, #28]	; (8000b04 <vAND_d8+0x20>)
 8000ae8:	8960      	ldrh	r0, [r4, #10]
 8000aea:	3801      	subs	r0, #1
 8000aec:	b280      	uxth	r0, r0
 8000aee:	f002 fd45 	bl	800357c <ucGBMemoryRead>
 8000af2:	7863      	ldrb	r3, [r4, #1]
 8000af4:	4018      	ands	r0, r3
 8000af6:	2800      	cmp	r0, #0
 8000af8:	7060      	strb	r0, [r4, #1]
 8000afa:	bf0c      	ite	eq
 8000afc:	23a0      	moveq	r3, #160	; 0xa0
 8000afe:	2320      	movne	r3, #32
 8000b00:	7023      	strb	r3, [r4, #0]
 8000b02:	bd10      	pop	{r4, pc}
 8000b04:	2400125c 	.word	0x2400125c

08000b08 <vXOR_d8>:
void vXOR_d8(){       reg.A ^= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	4c08      	ldr	r4, [pc, #32]	; (8000b2c <vXOR_d8+0x24>)
 8000b0c:	8960      	ldrh	r0, [r4, #10]
 8000b0e:	3801      	subs	r0, #1
 8000b10:	b280      	uxth	r0, r0
 8000b12:	f002 fd33 	bl	800357c <ucGBMemoryRead>
 8000b16:	7863      	ldrb	r3, [r4, #1]
 8000b18:	ea83 0200 	eor.w	r2, r3, r0
 8000b1c:	4283      	cmp	r3, r0
 8000b1e:	bf0c      	ite	eq
 8000b20:	2080      	moveq	r0, #128	; 0x80
 8000b22:	2000      	movne	r0, #0
 8000b24:	7062      	strb	r2, [r4, #1]
 8000b26:	7020      	strb	r0, [r4, #0]
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2400125c 	.word	0x2400125c

08000b30 <vLDH_A_a8>:
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
 8000b30:	b510      	push	{r4, lr}
 8000b32:	4c06      	ldr	r4, [pc, #24]	; (8000b4c <vLDH_A_a8+0x1c>)
 8000b34:	8960      	ldrh	r0, [r4, #10]
 8000b36:	3801      	subs	r0, #1
 8000b38:	b280      	uxth	r0, r0
 8000b3a:	f002 fd1f 	bl	800357c <ucGBMemoryRead>
 8000b3e:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000b42:	b280      	uxth	r0, r0
 8000b44:	f002 fd1a 	bl	800357c <ucGBMemoryRead>
 8000b48:	7060      	strb	r0, [r4, #1]
 8000b4a:	bd10      	pop	{r4, pc}
 8000b4c:	2400125c 	.word	0x2400125c

08000b50 <vLD_A_fC>:
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4c04      	ldr	r4, [pc, #16]	; (8000b64 <vLD_A_fC+0x14>)
 8000b54:	78a0      	ldrb	r0, [r4, #2]
 8000b56:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000b5a:	b280      	uxth	r0, r0
 8000b5c:	f002 fd0e 	bl	800357c <ucGBMemoryRead>
 8000b60:	7060      	strb	r0, [r4, #1]
 8000b62:	bd10      	pop	{r4, pc}
 8000b64:	2400125c 	.word	0x2400125c

08000b68 <vOR_d8>:
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	4c08      	ldr	r4, [pc, #32]	; (8000b8c <vOR_d8+0x24>)
 8000b6c:	8960      	ldrh	r0, [r4, #10]
 8000b6e:	3801      	subs	r0, #1
 8000b70:	b280      	uxth	r0, r0
 8000b72:	f002 fd03 	bl	800357c <ucGBMemoryRead>
 8000b76:	7863      	ldrb	r3, [r4, #1]
 8000b78:	4318      	orrs	r0, r3
 8000b7a:	b2c0      	uxtb	r0, r0
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	7060      	strb	r0, [r4, #1]
 8000b80:	bf0c      	ite	eq
 8000b82:	2380      	moveq	r3, #128	; 0x80
 8000b84:	2300      	movne	r3, #0
 8000b86:	7023      	strb	r3, [r4, #0]
 8000b88:	bd10      	pop	{r4, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2400125c 	.word	0x2400125c

08000b90 <vLDs_BC_d16>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000b90:	b538      	push	{r3, r4, r5, lr}
 8000b92:	4c09      	ldr	r4, [pc, #36]	; (8000bb8 <vLDs_BC_d16+0x28>)
 8000b94:	8960      	ldrh	r0, [r4, #10]
 8000b96:	3802      	subs	r0, #2
 8000b98:	b280      	uxth	r0, r0
 8000b9a:	f002 fcef 	bl	800357c <ucGBMemoryRead>
 8000b9e:	8963      	ldrh	r3, [r4, #10]
 8000ba0:	4605      	mov	r5, r0
 8000ba2:	1e58      	subs	r0, r3, #1
 8000ba4:	b280      	uxth	r0, r0
 8000ba6:	f002 fce9 	bl	800357c <ucGBMemoryRead>
 8000baa:	4601      	mov	r1, r0
 8000bac:	4628      	mov	r0, r5
 8000bae:	f001 ffdb 	bl	8002b68 <concat_16bit_bigEndian>
 8000bb2:	8060      	strh	r0, [r4, #2]
 8000bb4:	bd38      	pop	{r3, r4, r5, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2400125c 	.word	0x2400125c

08000bbc <vLDs_DE_d16>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	4c09      	ldr	r4, [pc, #36]	; (8000be4 <vLDs_DE_d16+0x28>)
 8000bc0:	8960      	ldrh	r0, [r4, #10]
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	b280      	uxth	r0, r0
 8000bc6:	f002 fcd9 	bl	800357c <ucGBMemoryRead>
 8000bca:	8963      	ldrh	r3, [r4, #10]
 8000bcc:	4605      	mov	r5, r0
 8000bce:	1e58      	subs	r0, r3, #1
 8000bd0:	b280      	uxth	r0, r0
 8000bd2:	f002 fcd3 	bl	800357c <ucGBMemoryRead>
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	4628      	mov	r0, r5
 8000bda:	f001 ffc5 	bl	8002b68 <concat_16bit_bigEndian>
 8000bde:	80a0      	strh	r0, [r4, #4]
 8000be0:	bd38      	pop	{r3, r4, r5, pc}
 8000be2:	bf00      	nop
 8000be4:	2400125c 	.word	0x2400125c

08000be8 <vLDs_HL_d16>:
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000be8:	b538      	push	{r3, r4, r5, lr}
 8000bea:	4c09      	ldr	r4, [pc, #36]	; (8000c10 <vLDs_HL_d16+0x28>)
 8000bec:	8960      	ldrh	r0, [r4, #10]
 8000bee:	3802      	subs	r0, #2
 8000bf0:	b280      	uxth	r0, r0
 8000bf2:	f002 fcc3 	bl	800357c <ucGBMemoryRead>
 8000bf6:	8963      	ldrh	r3, [r4, #10]
 8000bf8:	4605      	mov	r5, r0
 8000bfa:	1e58      	subs	r0, r3, #1
 8000bfc:	b280      	uxth	r0, r0
 8000bfe:	f002 fcbd 	bl	800357c <ucGBMemoryRead>
 8000c02:	4601      	mov	r1, r0
 8000c04:	4628      	mov	r0, r5
 8000c06:	f001 ffaf 	bl	8002b68 <concat_16bit_bigEndian>
 8000c0a:	80e0      	strh	r0, [r4, #6]
 8000c0c:	bd38      	pop	{r3, r4, r5, pc}
 8000c0e:	bf00      	nop
 8000c10:	2400125c 	.word	0x2400125c

08000c14 <vLDs_SP_d16>:
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c14:	b538      	push	{r3, r4, r5, lr}
 8000c16:	4c09      	ldr	r4, [pc, #36]	; (8000c3c <vLDs_SP_d16+0x28>)
 8000c18:	8960      	ldrh	r0, [r4, #10]
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	b280      	uxth	r0, r0
 8000c1e:	f002 fcad 	bl	800357c <ucGBMemoryRead>
 8000c22:	8963      	ldrh	r3, [r4, #10]
 8000c24:	4605      	mov	r5, r0
 8000c26:	1e58      	subs	r0, r3, #1
 8000c28:	b280      	uxth	r0, r0
 8000c2a:	f002 fca7 	bl	800357c <ucGBMemoryRead>
 8000c2e:	4601      	mov	r1, r0
 8000c30:	4628      	mov	r0, r5
 8000c32:	f001 ff99 	bl	8002b68 <concat_16bit_bigEndian>
 8000c36:	8120      	strh	r0, [r4, #8]
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2400125c 	.word	0x2400125c

08000c40 <vJP_a16>:
void vJP_a16(){       reg.PC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4c09      	ldr	r4, [pc, #36]	; (8000c68 <vJP_a16+0x28>)
 8000c44:	8960      	ldrh	r0, [r4, #10]
 8000c46:	3802      	subs	r0, #2
 8000c48:	b280      	uxth	r0, r0
 8000c4a:	f002 fc97 	bl	800357c <ucGBMemoryRead>
 8000c4e:	8963      	ldrh	r3, [r4, #10]
 8000c50:	4605      	mov	r5, r0
 8000c52:	1e58      	subs	r0, r3, #1
 8000c54:	b280      	uxth	r0, r0
 8000c56:	f002 fc91 	bl	800357c <ucGBMemoryRead>
 8000c5a:	4601      	mov	r1, r0
 8000c5c:	4628      	mov	r0, r5
 8000c5e:	f001 ff83 	bl	8002b68 <concat_16bit_bigEndian>
 8000c62:	8160      	strh	r0, [r4, #10]
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop
 8000c68:	2400125c 	.word	0x2400125c

08000c6c <vLD_A_a16>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	4c0a      	ldr	r4, [pc, #40]	; (8000c98 <vLD_A_a16+0x2c>)
 8000c70:	8960      	ldrh	r0, [r4, #10]
 8000c72:	3802      	subs	r0, #2
 8000c74:	b280      	uxth	r0, r0
 8000c76:	f002 fc81 	bl	800357c <ucGBMemoryRead>
 8000c7a:	8963      	ldrh	r3, [r4, #10]
 8000c7c:	4605      	mov	r5, r0
 8000c7e:	1e58      	subs	r0, r3, #1
 8000c80:	b280      	uxth	r0, r0
 8000c82:	f002 fc7b 	bl	800357c <ucGBMemoryRead>
 8000c86:	4601      	mov	r1, r0
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f001 ff6d 	bl	8002b68 <concat_16bit_bigEndian>
 8000c8e:	f002 fc75 	bl	800357c <ucGBMemoryRead>
 8000c92:	7060      	strb	r0, [r4, #1]
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop
 8000c98:	2400125c 	.word	0x2400125c

08000c9c <vLD_BC_A>:
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <vLD_BC_A+0xc>)
 8000c9e:	7859      	ldrb	r1, [r3, #1]
 8000ca0:	8858      	ldrh	r0, [r3, #2]
 8000ca2:	f002 bc09 	b.w	80034b8 <vGBMemoryWrite>
 8000ca6:	bf00      	nop
 8000ca8:	2400125c 	.word	0x2400125c

08000cac <vLDs_a16_SP>:
void vLDs_a16_SP(){   vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
 8000cac:	b538      	push	{r3, r4, r5, lr}
 8000cae:	4c0a      	ldr	r4, [pc, #40]	; (8000cd8 <vLDs_a16_SP+0x2c>)
 8000cb0:	8960      	ldrh	r0, [r4, #10]
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	b280      	uxth	r0, r0
 8000cb6:	f002 fc61 	bl	800357c <ucGBMemoryRead>
 8000cba:	8963      	ldrh	r3, [r4, #10]
 8000cbc:	4605      	mov	r5, r0
 8000cbe:	1e58      	subs	r0, r3, #1
 8000cc0:	b280      	uxth	r0, r0
 8000cc2:	f002 fc5b 	bl	800357c <ucGBMemoryRead>
 8000cc6:	4601      	mov	r1, r0
 8000cc8:	4628      	mov	r0, r5
 8000cca:	f001 ff4d 	bl	8002b68 <concat_16bit_bigEndian>
 8000cce:	7a21      	ldrb	r1, [r4, #8]
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f002 bbf0 	b.w	80034b8 <vGBMemoryWrite>
 8000cd8:	2400125c 	.word	0x2400125c

08000cdc <vLD_DE_A>:
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
 8000cdc:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <vLD_DE_A+0xc>)
 8000cde:	7859      	ldrb	r1, [r3, #1]
 8000ce0:	8898      	ldrh	r0, [r3, #4]
 8000ce2:	f002 bbe9 	b.w	80034b8 <vGBMemoryWrite>
 8000ce6:	bf00      	nop
 8000ce8:	2400125c 	.word	0x2400125c

08000cec <vLD_HLI_A>:
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
 8000cec:	b510      	push	{r4, lr}
 8000cee:	4c04      	ldr	r4, [pc, #16]	; (8000d00 <vLD_HLI_A+0x14>)
 8000cf0:	7861      	ldrb	r1, [r4, #1]
 8000cf2:	88e0      	ldrh	r0, [r4, #6]
 8000cf4:	f002 fbe0 	bl	80034b8 <vGBMemoryWrite>
 8000cf8:	88e3      	ldrh	r3, [r4, #6]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	80e3      	strh	r3, [r4, #6]
 8000cfe:	bd10      	pop	{r4, pc}
 8000d00:	2400125c 	.word	0x2400125c

08000d04 <vLD_HLD_A>:
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
 8000d04:	b510      	push	{r4, lr}
 8000d06:	4c04      	ldr	r4, [pc, #16]	; (8000d18 <vLD_HLD_A+0x14>)
 8000d08:	7861      	ldrb	r1, [r4, #1]
 8000d0a:	88e0      	ldrh	r0, [r4, #6]
 8000d0c:	f002 fbd4 	bl	80034b8 <vGBMemoryWrite>
 8000d10:	88e3      	ldrh	r3, [r4, #6]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	80e3      	strh	r3, [r4, #6]
 8000d16:	bd10      	pop	{r4, pc}
 8000d18:	2400125c 	.word	0x2400125c

08000d1c <vLD_HL_d8>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <vLD_HL_d8+0x1c>)
 8000d1e:	8958      	ldrh	r0, [r3, #10]
 8000d20:	3801      	subs	r0, #1
 8000d22:	b510      	push	{r4, lr}
 8000d24:	88dc      	ldrh	r4, [r3, #6]
 8000d26:	b280      	uxth	r0, r0
 8000d28:	f002 fc28 	bl	800357c <ucGBMemoryRead>
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	4620      	mov	r0, r4
 8000d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d34:	f002 bbc0 	b.w	80034b8 <vGBMemoryWrite>
 8000d38:	2400125c 	.word	0x2400125c

08000d3c <vLD_HL_B>:
void vLD_HL_B(){      vGBMemoryWrite(reg.HL, reg.B);}
 8000d3c:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <vLD_HL_B+0xc>)
 8000d3e:	78d9      	ldrb	r1, [r3, #3]
 8000d40:	88d8      	ldrh	r0, [r3, #6]
 8000d42:	f002 bbb9 	b.w	80034b8 <vGBMemoryWrite>
 8000d46:	bf00      	nop
 8000d48:	2400125c 	.word	0x2400125c

08000d4c <vLD_HL_C>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <vLD_HL_C+0xc>)
 8000d4e:	7899      	ldrb	r1, [r3, #2]
 8000d50:	88d8      	ldrh	r0, [r3, #6]
 8000d52:	f002 bbb1 	b.w	80034b8 <vGBMemoryWrite>
 8000d56:	bf00      	nop
 8000d58:	2400125c 	.word	0x2400125c

08000d5c <vLD_HL_D>:
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <vLD_HL_D+0xc>)
 8000d5e:	7959      	ldrb	r1, [r3, #5]
 8000d60:	88d8      	ldrh	r0, [r3, #6]
 8000d62:	f002 bba9 	b.w	80034b8 <vGBMemoryWrite>
 8000d66:	bf00      	nop
 8000d68:	2400125c 	.word	0x2400125c

08000d6c <vLD_HL_E>:
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <vLD_HL_E+0xc>)
 8000d6e:	7919      	ldrb	r1, [r3, #4]
 8000d70:	88d8      	ldrh	r0, [r3, #6]
 8000d72:	f002 bba1 	b.w	80034b8 <vGBMemoryWrite>
 8000d76:	bf00      	nop
 8000d78:	2400125c 	.word	0x2400125c

08000d7c <vLD_HL_H>:
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
 8000d7c:	4b02      	ldr	r3, [pc, #8]	; (8000d88 <vLD_HL_H+0xc>)
 8000d7e:	79d9      	ldrb	r1, [r3, #7]
 8000d80:	88d8      	ldrh	r0, [r3, #6]
 8000d82:	f002 bb99 	b.w	80034b8 <vGBMemoryWrite>
 8000d86:	bf00      	nop
 8000d88:	2400125c 	.word	0x2400125c

08000d8c <vLD_HL_L>:
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
 8000d8c:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <vLD_HL_L+0xc>)
 8000d8e:	7999      	ldrb	r1, [r3, #6]
 8000d90:	88d8      	ldrh	r0, [r3, #6]
 8000d92:	f002 bb91 	b.w	80034b8 <vGBMemoryWrite>
 8000d96:	bf00      	nop
 8000d98:	2400125c 	.word	0x2400125c

08000d9c <vLD_HL_A>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <vLD_HL_A+0xc>)
 8000d9e:	7859      	ldrb	r1, [r3, #1]
 8000da0:	88d8      	ldrh	r0, [r3, #6]
 8000da2:	f002 bb89 	b.w	80034b8 <vGBMemoryWrite>
 8000da6:	bf00      	nop
 8000da8:	2400125c 	.word	0x2400125c

08000dac <vLDH_a8_A>:
void vLDH_a8_A(){     vGBMemoryWrite(0xFF00 + ucGBMemoryRead(reg.PC - 1), reg.A);}
 8000dac:	b510      	push	{r4, lr}
 8000dae:	4c07      	ldr	r4, [pc, #28]	; (8000dcc <vLDH_a8_A+0x20>)
 8000db0:	8960      	ldrh	r0, [r4, #10]
 8000db2:	3801      	subs	r0, #1
 8000db4:	b280      	uxth	r0, r0
 8000db6:	f002 fbe1 	bl	800357c <ucGBMemoryRead>
 8000dba:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000dbe:	7861      	ldrb	r1, [r4, #1]
 8000dc0:	b280      	uxth	r0, r0
 8000dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dc6:	f002 bb77 	b.w	80034b8 <vGBMemoryWrite>
 8000dca:	bf00      	nop
 8000dcc:	2400125c 	.word	0x2400125c

08000dd0 <vLD_fC_A>:
void vLD_fC_A(){      vGBMemoryWrite(0xFF00 + reg.C, reg.A);}
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <vLD_fC_A+0x10>)
 8000dd2:	7898      	ldrb	r0, [r3, #2]
 8000dd4:	7859      	ldrb	r1, [r3, #1]
 8000dd6:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000dda:	b280      	uxth	r0, r0
 8000ddc:	f002 bb6c 	b.w	80034b8 <vGBMemoryWrite>
 8000de0:	2400125c 	.word	0x2400125c

08000de4 <vLD_a16_A>:
void vLD_a16_A(){     vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)), reg.A);}
 8000de4:	b538      	push	{r3, r4, r5, lr}
 8000de6:	4c0a      	ldr	r4, [pc, #40]	; (8000e10 <vLD_a16_A+0x2c>)
 8000de8:	8960      	ldrh	r0, [r4, #10]
 8000dea:	3802      	subs	r0, #2
 8000dec:	b280      	uxth	r0, r0
 8000dee:	f002 fbc5 	bl	800357c <ucGBMemoryRead>
 8000df2:	8963      	ldrh	r3, [r4, #10]
 8000df4:	4605      	mov	r5, r0
 8000df6:	1e58      	subs	r0, r3, #1
 8000df8:	b280      	uxth	r0, r0
 8000dfa:	f002 fbbf 	bl	800357c <ucGBMemoryRead>
 8000dfe:	4601      	mov	r1, r0
 8000e00:	4628      	mov	r0, r5
 8000e02:	f001 feb1 	bl	8002b68 <concat_16bit_bigEndian>
 8000e06:	7861      	ldrb	r1, [r4, #1]
 8000e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e0c:	f002 bb54 	b.w	80034b8 <vGBMemoryWrite>
 8000e10:	2400125c 	.word	0x2400125c

08000e14 <vINC_B>:
void vINC_B(){        v8bitRegisterINC(&reg.B, &reg.F);}
 8000e14:	4901      	ldr	r1, [pc, #4]	; (8000e1c <vINC_B+0x8>)
 8000e16:	1cc8      	adds	r0, r1, #3
 8000e18:	f001 bebe 	b.w	8002b98 <v8bitRegisterINC>
 8000e1c:	2400125c 	.word	0x2400125c

08000e20 <vINC_C>:
void vINC_C(){        v8bitRegisterINC(&reg.C, &reg.F);}
 8000e20:	4901      	ldr	r1, [pc, #4]	; (8000e28 <vINC_C+0x8>)
 8000e22:	1c88      	adds	r0, r1, #2
 8000e24:	f001 beb8 	b.w	8002b98 <v8bitRegisterINC>
 8000e28:	2400125c 	.word	0x2400125c

08000e2c <vINC_D>:
void vINC_D(){        v8bitRegisterINC(&reg.D, &reg.F);}
 8000e2c:	4901      	ldr	r1, [pc, #4]	; (8000e34 <vINC_D+0x8>)
 8000e2e:	1d48      	adds	r0, r1, #5
 8000e30:	f001 beb2 	b.w	8002b98 <v8bitRegisterINC>
 8000e34:	2400125c 	.word	0x2400125c

08000e38 <vINC_E>:
void vINC_E(){        v8bitRegisterINC(&reg.E, &reg.F);}
 8000e38:	4901      	ldr	r1, [pc, #4]	; (8000e40 <vINC_E+0x8>)
 8000e3a:	1d08      	adds	r0, r1, #4
 8000e3c:	f001 beac 	b.w	8002b98 <v8bitRegisterINC>
 8000e40:	2400125c 	.word	0x2400125c

08000e44 <vINC_H>:
void vINC_H(){        v8bitRegisterINC(&reg.H, &reg.F);}
 8000e44:	4901      	ldr	r1, [pc, #4]	; (8000e4c <vINC_H+0x8>)
 8000e46:	1dc8      	adds	r0, r1, #7
 8000e48:	f001 bea6 	b.w	8002b98 <v8bitRegisterINC>
 8000e4c:	2400125c 	.word	0x2400125c

08000e50 <vINC_L>:
void vINC_L(){        v8bitRegisterINC(&reg.L, &reg.F);}
 8000e50:	4901      	ldr	r1, [pc, #4]	; (8000e58 <vINC_L+0x8>)
 8000e52:	1d88      	adds	r0, r1, #6
 8000e54:	f001 bea0 	b.w	8002b98 <v8bitRegisterINC>
 8000e58:	2400125c 	.word	0x2400125c

08000e5c <vINC_A>:
void vINC_A(){        v8bitRegisterINC(&reg.A, &reg.F);}
 8000e5c:	4901      	ldr	r1, [pc, #4]	; (8000e64 <vINC_A+0x8>)
 8000e5e:	1c48      	adds	r0, r1, #1
 8000e60:	f001 be9a 	b.w	8002b98 <v8bitRegisterINC>
 8000e64:	2400125c 	.word	0x2400125c

08000e68 <vDEC_B>:
void vDEC_B(){        v8bitRegisterDEC(&reg.B, &reg.F);}
 8000e68:	4901      	ldr	r1, [pc, #4]	; (8000e70 <vDEC_B+0x8>)
 8000e6a:	1cc8      	adds	r0, r1, #3
 8000e6c:	f001 beb2 	b.w	8002bd4 <v8bitRegisterDEC>
 8000e70:	2400125c 	.word	0x2400125c

08000e74 <vDEC_C>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
 8000e74:	4901      	ldr	r1, [pc, #4]	; (8000e7c <vDEC_C+0x8>)
 8000e76:	1c88      	adds	r0, r1, #2
 8000e78:	f001 beac 	b.w	8002bd4 <v8bitRegisterDEC>
 8000e7c:	2400125c 	.word	0x2400125c

08000e80 <vDEC_D>:
void vDEC_D(){        v8bitRegisterDEC(&reg.D, &reg.F);}
 8000e80:	4901      	ldr	r1, [pc, #4]	; (8000e88 <vDEC_D+0x8>)
 8000e82:	1d48      	adds	r0, r1, #5
 8000e84:	f001 bea6 	b.w	8002bd4 <v8bitRegisterDEC>
 8000e88:	2400125c 	.word	0x2400125c

08000e8c <vDEC_E>:
void vDEC_E(){        v8bitRegisterDEC(&reg.E, &reg.F);}
 8000e8c:	4901      	ldr	r1, [pc, #4]	; (8000e94 <vDEC_E+0x8>)
 8000e8e:	1d08      	adds	r0, r1, #4
 8000e90:	f001 bea0 	b.w	8002bd4 <v8bitRegisterDEC>
 8000e94:	2400125c 	.word	0x2400125c

08000e98 <vDEC_H>:
void vDEC_H(){        v8bitRegisterDEC(&reg.H, &reg.F);}
 8000e98:	4901      	ldr	r1, [pc, #4]	; (8000ea0 <vDEC_H+0x8>)
 8000e9a:	1dc8      	adds	r0, r1, #7
 8000e9c:	f001 be9a 	b.w	8002bd4 <v8bitRegisterDEC>
 8000ea0:	2400125c 	.word	0x2400125c

08000ea4 <vDEC_L>:
void vDEC_L(){        v8bitRegisterDEC(&reg.L, &reg.F);}
 8000ea4:	4901      	ldr	r1, [pc, #4]	; (8000eac <vDEC_L+0x8>)
 8000ea6:	1d88      	adds	r0, r1, #6
 8000ea8:	f001 be94 	b.w	8002bd4 <v8bitRegisterDEC>
 8000eac:	2400125c 	.word	0x2400125c

08000eb0 <vDEC_A>:
void vDEC_A(){        v8bitRegisterDEC(&reg.A, &reg.F);}
 8000eb0:	4901      	ldr	r1, [pc, #4]	; (8000eb8 <vDEC_A+0x8>)
 8000eb2:	1c48      	adds	r0, r1, #1
 8000eb4:	f001 be8e 	b.w	8002bd4 <v8bitRegisterDEC>
 8000eb8:	2400125c 	.word	0x2400125c

08000ebc <vRLCA>:
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
 8000ebc:	4901      	ldr	r1, [pc, #4]	; (8000ec4 <vRLCA+0x8>)
 8000ebe:	1c48      	adds	r0, r1, #1
 8000ec0:	f001 bea8 	b.w	8002c14 <vGBFunctionRLCA>
 8000ec4:	2400125c 	.word	0x2400125c

08000ec8 <vADDs_HL_BC>:
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
 8000ec8:	4a02      	ldr	r2, [pc, #8]	; (8000ed4 <vADDs_HL_BC+0xc>)
 8000eca:	8851      	ldrh	r1, [r2, #2]
 8000ecc:	1d90      	adds	r0, r2, #6
 8000ece:	f001 bebf 	b.w	8002c50 <vGBFunction16bitADD>
 8000ed2:	bf00      	nop
 8000ed4:	2400125c 	.word	0x2400125c

08000ed8 <vADDs_HL_DE>:
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
 8000ed8:	4a02      	ldr	r2, [pc, #8]	; (8000ee4 <vADDs_HL_DE+0xc>)
 8000eda:	8891      	ldrh	r1, [r2, #4]
 8000edc:	1d90      	adds	r0, r2, #6
 8000ede:	f001 beb7 	b.w	8002c50 <vGBFunction16bitADD>
 8000ee2:	bf00      	nop
 8000ee4:	2400125c 	.word	0x2400125c

08000ee8 <vADDs_HL_HL>:
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <vADDs_HL_HL+0xc>)
 8000eea:	4602      	mov	r2, r0
 8000eec:	f830 1f06 	ldrh.w	r1, [r0, #6]!
 8000ef0:	f001 beae 	b.w	8002c50 <vGBFunction16bitADD>
 8000ef4:	2400125c 	.word	0x2400125c

08000ef8 <vADDs_HL_SP>:
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
 8000ef8:	4a02      	ldr	r2, [pc, #8]	; (8000f04 <vADDs_HL_SP+0xc>)
 8000efa:	8911      	ldrh	r1, [r2, #8]
 8000efc:	1d90      	adds	r0, r2, #6
 8000efe:	f001 bea7 	b.w	8002c50 <vGBFunction16bitADD>
 8000f02:	bf00      	nop
 8000f04:	2400125c 	.word	0x2400125c

08000f08 <vRRCA>:
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}
 8000f08:	4901      	ldr	r1, [pc, #4]	; (8000f10 <vRRCA+0x8>)
 8000f0a:	1c48      	adds	r0, r1, #1
 8000f0c:	f001 be8e 	b.w	8002c2c <vGBFunctionRRCA>
 8000f10:	2400125c 	.word	0x2400125c

08000f14 <vRLA>:
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
 8000f14:	4901      	ldr	r1, [pc, #4]	; (8000f1c <vRLA+0x8>)
 8000f16:	1c48      	adds	r0, r1, #1
 8000f18:	f001 bec2 	b.w	8002ca0 <vGBFunctionRLA>
 8000f1c:	2400125c 	.word	0x2400125c

08000f20 <vRRA>:
void vRRA(){          vGBFunctionRRA(&reg.A, &reg.F);}
 8000f20:	4901      	ldr	r1, [pc, #4]	; (8000f28 <vRRA+0x8>)
 8000f22:	1c48      	adds	r0, r1, #1
 8000f24:	f001 beca 	b.w	8002cbc <vGBFunctionRRA>
 8000f28:	2400125c 	.word	0x2400125c

08000f2c <vJR_NZ_r8>:
void vJR_NZ_r8(){     customDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	4d08      	ldr	r5, [pc, #32]	; (8000f50 <vJR_NZ_r8+0x24>)
 8000f30:	462c      	mov	r4, r5
 8000f32:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000f36:	3801      	subs	r0, #1
 8000f38:	b280      	uxth	r0, r0
 8000f3a:	f002 fb1f 	bl	800357c <ucGBMemoryRead>
 8000f3e:	4629      	mov	r1, r5
 8000f40:	4602      	mov	r2, r0
 8000f42:	4620      	mov	r0, r4
 8000f44:	f001 fec8 	bl	8002cd8 <vGBFunctionJR_NZ>
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <vJR_NZ_r8+0x28>)
 8000f4a:	7018      	strb	r0, [r3, #0]
 8000f4c:	bd38      	pop	{r3, r4, r5, pc}
 8000f4e:	bf00      	nop
 8000f50:	2400125c 	.word	0x2400125c
 8000f54:	24001094 	.word	0x24001094

08000f58 <vDAA>:
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
 8000f58:	4901      	ldr	r1, [pc, #4]	; (8000f60 <vDAA+0x8>)
 8000f5a:	1c48      	adds	r0, r1, #1
 8000f5c:	f001 bec8 	b.w	8002cf0 <vGBFunctionDAA>
 8000f60:	2400125c 	.word	0x2400125c

08000f64 <vJR_Z_r8>:
void vJR_Z_r8(){      customDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000f64:	b538      	push	{r3, r4, r5, lr}
 8000f66:	4d08      	ldr	r5, [pc, #32]	; (8000f88 <vJR_Z_r8+0x24>)
 8000f68:	462c      	mov	r4, r5
 8000f6a:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000f6e:	3801      	subs	r0, #1
 8000f70:	b280      	uxth	r0, r0
 8000f72:	f002 fb03 	bl	800357c <ucGBMemoryRead>
 8000f76:	4629      	mov	r1, r5
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f001 fef6 	bl	8002d6c <vGBFunctionJR_Z>
 8000f80:	4b02      	ldr	r3, [pc, #8]	; (8000f8c <vJR_Z_r8+0x28>)
 8000f82:	7018      	strb	r0, [r3, #0]
 8000f84:	bd38      	pop	{r3, r4, r5, pc}
 8000f86:	bf00      	nop
 8000f88:	2400125c 	.word	0x2400125c
 8000f8c:	24001094 	.word	0x24001094

08000f90 <vCPL>:
void vCPL(){          reg.A = ~(reg.A); setbit(&reg.F, N_FLAG); setbit(&reg.F, H_FLAG);}
 8000f90:	b510      	push	{r4, lr}
 8000f92:	4c07      	ldr	r4, [pc, #28]	; (8000fb0 <vCPL+0x20>)
 8000f94:	2106      	movs	r1, #6
 8000f96:	7863      	ldrb	r3, [r4, #1]
 8000f98:	4620      	mov	r0, r4
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	7063      	strb	r3, [r4, #1]
 8000f9e:	f001 fde7 	bl	8002b70 <setbit>
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000faa:	f001 bde1 	b.w	8002b70 <setbit>
 8000fae:	bf00      	nop
 8000fb0:	2400125c 	.word	0x2400125c

08000fb4 <vSET_0_B>:
void vRES_7_L(){      resetbit(&reg.L, 7);}
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
void vRES_7_A(){      resetbit(&reg.A, 7);}

/*********************0xCX*/
void vSET_0_B(){      setbit(&reg.B, 0);}
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4801      	ldr	r0, [pc, #4]	; (8000fbc <vSET_0_B+0x8>)
 8000fb8:	f001 bdda 	b.w	8002b70 <setbit>
 8000fbc:	2400125f 	.word	0x2400125f

08000fc0 <vSET_0_C>:
void vSET_0_C(){      setbit(&reg.C, 0);}
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4801      	ldr	r0, [pc, #4]	; (8000fc8 <vSET_0_C+0x8>)
 8000fc4:	f001 bdd4 	b.w	8002b70 <setbit>
 8000fc8:	2400125e 	.word	0x2400125e

08000fcc <vSET_0_D>:
void vSET_0_D(){      setbit(&reg.D, 0);}
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4801      	ldr	r0, [pc, #4]	; (8000fd4 <vSET_0_D+0x8>)
 8000fd0:	f001 bdce 	b.w	8002b70 <setbit>
 8000fd4:	24001261 	.word	0x24001261

08000fd8 <vSET_0_E>:
void vSET_0_E(){      setbit(&reg.E, 0);}
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4801      	ldr	r0, [pc, #4]	; (8000fe0 <vSET_0_E+0x8>)
 8000fdc:	f001 bdc8 	b.w	8002b70 <setbit>
 8000fe0:	24001260 	.word	0x24001260

08000fe4 <vSET_0_H>:
void vSET_0_H(){      setbit(&reg.H, 0);}
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4801      	ldr	r0, [pc, #4]	; (8000fec <vSET_0_H+0x8>)
 8000fe8:	f001 bdc2 	b.w	8002b70 <setbit>
 8000fec:	24001263 	.word	0x24001263

08000ff0 <vSET_0_L>:
void vSET_0_L(){      setbit(&reg.L, 0);}
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4801      	ldr	r0, [pc, #4]	; (8000ff8 <vSET_0_L+0x8>)
 8000ff4:	f001 bdbc 	b.w	8002b70 <setbit>
 8000ff8:	24001262 	.word	0x24001262

08000ffc <vSET_0_A>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
void vSET_0_A(){      setbit(&reg.A, 0);}
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4801      	ldr	r0, [pc, #4]	; (8001004 <vSET_0_A+0x8>)
 8001000:	f001 bdb6 	b.w	8002b70 <setbit>
 8001004:	2400125d 	.word	0x2400125d

08001008 <vSET_1_B>:
void vSET_1_B(){      setbit(&reg.B, 1);}
 8001008:	2101      	movs	r1, #1
 800100a:	4801      	ldr	r0, [pc, #4]	; (8001010 <vSET_1_B+0x8>)
 800100c:	f001 bdb0 	b.w	8002b70 <setbit>
 8001010:	2400125f 	.word	0x2400125f

08001014 <vSET_1_C>:
void vSET_1_C(){      setbit(&reg.C, 1);}
 8001014:	2101      	movs	r1, #1
 8001016:	4801      	ldr	r0, [pc, #4]	; (800101c <vSET_1_C+0x8>)
 8001018:	f001 bdaa 	b.w	8002b70 <setbit>
 800101c:	2400125e 	.word	0x2400125e

08001020 <vSET_1_D>:
void vSET_1_D(){      setbit(&reg.D, 1);}
 8001020:	2101      	movs	r1, #1
 8001022:	4801      	ldr	r0, [pc, #4]	; (8001028 <vSET_1_D+0x8>)
 8001024:	f001 bda4 	b.w	8002b70 <setbit>
 8001028:	24001261 	.word	0x24001261

0800102c <vSET_1_E>:
void vSET_1_E(){      setbit(&reg.E, 1);}
 800102c:	2101      	movs	r1, #1
 800102e:	4801      	ldr	r0, [pc, #4]	; (8001034 <vSET_1_E+0x8>)
 8001030:	f001 bd9e 	b.w	8002b70 <setbit>
 8001034:	24001260 	.word	0x24001260

08001038 <vSET_1_H>:
void vSET_1_H(){      setbit(&reg.H, 1);}
 8001038:	2101      	movs	r1, #1
 800103a:	4801      	ldr	r0, [pc, #4]	; (8001040 <vSET_1_H+0x8>)
 800103c:	f001 bd98 	b.w	8002b70 <setbit>
 8001040:	24001263 	.word	0x24001263

08001044 <vSET_1_L>:
void vSET_1_L(){      setbit(&reg.L, 1);}
 8001044:	2101      	movs	r1, #1
 8001046:	4801      	ldr	r0, [pc, #4]	; (800104c <vSET_1_L+0x8>)
 8001048:	f001 bd92 	b.w	8002b70 <setbit>
 800104c:	24001262 	.word	0x24001262

08001050 <vSET_1_A>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
void vSET_1_A(){      setbit(&reg.A, 1);}
 8001050:	2101      	movs	r1, #1
 8001052:	4801      	ldr	r0, [pc, #4]	; (8001058 <vSET_1_A+0x8>)
 8001054:	f001 bd8c 	b.w	8002b70 <setbit>
 8001058:	2400125d 	.word	0x2400125d

0800105c <vSET_2_B>:

/*********************0xDX*/
void vSET_2_B(){      setbit(&reg.B, 2);}
 800105c:	2102      	movs	r1, #2
 800105e:	4801      	ldr	r0, [pc, #4]	; (8001064 <vSET_2_B+0x8>)
 8001060:	f001 bd86 	b.w	8002b70 <setbit>
 8001064:	2400125f 	.word	0x2400125f

08001068 <vSET_2_C>:
void vSET_2_C(){      setbit(&reg.C, 2);}
 8001068:	2102      	movs	r1, #2
 800106a:	4801      	ldr	r0, [pc, #4]	; (8001070 <vSET_2_C+0x8>)
 800106c:	f001 bd80 	b.w	8002b70 <setbit>
 8001070:	2400125e 	.word	0x2400125e

08001074 <vSET_2_D>:
void vSET_2_D(){      setbit(&reg.D, 2);}
 8001074:	2102      	movs	r1, #2
 8001076:	4801      	ldr	r0, [pc, #4]	; (800107c <vSET_2_D+0x8>)
 8001078:	f001 bd7a 	b.w	8002b70 <setbit>
 800107c:	24001261 	.word	0x24001261

08001080 <vSET_2_E>:
void vSET_2_E(){      setbit(&reg.E, 2);}
 8001080:	2102      	movs	r1, #2
 8001082:	4801      	ldr	r0, [pc, #4]	; (8001088 <vSET_2_E+0x8>)
 8001084:	f001 bd74 	b.w	8002b70 <setbit>
 8001088:	24001260 	.word	0x24001260

0800108c <vSET_2_H>:
void vSET_2_H(){      setbit(&reg.H, 2);}
 800108c:	2102      	movs	r1, #2
 800108e:	4801      	ldr	r0, [pc, #4]	; (8001094 <vSET_2_H+0x8>)
 8001090:	f001 bd6e 	b.w	8002b70 <setbit>
 8001094:	24001263 	.word	0x24001263

08001098 <vSET_2_L>:
void vSET_2_L(){      setbit(&reg.L, 2);}
 8001098:	2102      	movs	r1, #2
 800109a:	4801      	ldr	r0, [pc, #4]	; (80010a0 <vSET_2_L+0x8>)
 800109c:	f001 bd68 	b.w	8002b70 <setbit>
 80010a0:	24001262 	.word	0x24001262

080010a4 <vSET_2_A>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
void vSET_2_A(){      setbit(&reg.A, 2);}
 80010a4:	2102      	movs	r1, #2
 80010a6:	4801      	ldr	r0, [pc, #4]	; (80010ac <vSET_2_A+0x8>)
 80010a8:	f001 bd62 	b.w	8002b70 <setbit>
 80010ac:	2400125d 	.word	0x2400125d

080010b0 <vSET_3_B>:
void vSET_3_B(){      setbit(&reg.B, 3);}
 80010b0:	2103      	movs	r1, #3
 80010b2:	4801      	ldr	r0, [pc, #4]	; (80010b8 <vSET_3_B+0x8>)
 80010b4:	f001 bd5c 	b.w	8002b70 <setbit>
 80010b8:	2400125f 	.word	0x2400125f

080010bc <vSET_3_C>:
void vSET_3_C(){      setbit(&reg.C, 3);}
 80010bc:	2103      	movs	r1, #3
 80010be:	4801      	ldr	r0, [pc, #4]	; (80010c4 <vSET_3_C+0x8>)
 80010c0:	f001 bd56 	b.w	8002b70 <setbit>
 80010c4:	2400125e 	.word	0x2400125e

080010c8 <vSET_3_D>:
void vSET_3_D(){      setbit(&reg.D, 3);}
 80010c8:	2103      	movs	r1, #3
 80010ca:	4801      	ldr	r0, [pc, #4]	; (80010d0 <vSET_3_D+0x8>)
 80010cc:	f001 bd50 	b.w	8002b70 <setbit>
 80010d0:	24001261 	.word	0x24001261

080010d4 <vSET_3_E>:
void vSET_3_E(){      setbit(&reg.E, 3);}
 80010d4:	2103      	movs	r1, #3
 80010d6:	4801      	ldr	r0, [pc, #4]	; (80010dc <vSET_3_E+0x8>)
 80010d8:	f001 bd4a 	b.w	8002b70 <setbit>
 80010dc:	24001260 	.word	0x24001260

080010e0 <vSET_3_H>:
void vSET_3_H(){      setbit(&reg.H, 3);}
 80010e0:	2103      	movs	r1, #3
 80010e2:	4801      	ldr	r0, [pc, #4]	; (80010e8 <vSET_3_H+0x8>)
 80010e4:	f001 bd44 	b.w	8002b70 <setbit>
 80010e8:	24001263 	.word	0x24001263

080010ec <vSET_3_L>:
void vSET_3_L(){      setbit(&reg.L, 3);}
 80010ec:	2103      	movs	r1, #3
 80010ee:	4801      	ldr	r0, [pc, #4]	; (80010f4 <vSET_3_L+0x8>)
 80010f0:	f001 bd3e 	b.w	8002b70 <setbit>
 80010f4:	24001262 	.word	0x24001262

080010f8 <vSET_3_A>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
void vSET_3_A(){      setbit(&reg.A, 3);}
 80010f8:	2103      	movs	r1, #3
 80010fa:	4801      	ldr	r0, [pc, #4]	; (8001100 <vSET_3_A+0x8>)
 80010fc:	f001 bd38 	b.w	8002b70 <setbit>
 8001100:	2400125d 	.word	0x2400125d

08001104 <vSET_4_B>:

/*********************0xEX*/
void vSET_4_B(){      setbit(&reg.B, 4);}
 8001104:	2104      	movs	r1, #4
 8001106:	4801      	ldr	r0, [pc, #4]	; (800110c <vSET_4_B+0x8>)
 8001108:	f001 bd32 	b.w	8002b70 <setbit>
 800110c:	2400125f 	.word	0x2400125f

08001110 <vSET_4_C>:
void vSET_4_C(){      setbit(&reg.C, 4);}
 8001110:	2104      	movs	r1, #4
 8001112:	4801      	ldr	r0, [pc, #4]	; (8001118 <vSET_4_C+0x8>)
 8001114:	f001 bd2c 	b.w	8002b70 <setbit>
 8001118:	2400125e 	.word	0x2400125e

0800111c <vSET_4_D>:
void vSET_4_D(){      setbit(&reg.D, 4);}
 800111c:	2104      	movs	r1, #4
 800111e:	4801      	ldr	r0, [pc, #4]	; (8001124 <vSET_4_D+0x8>)
 8001120:	f001 bd26 	b.w	8002b70 <setbit>
 8001124:	24001261 	.word	0x24001261

08001128 <vSET_4_E>:
void vSET_4_E(){      setbit(&reg.E, 4);}
 8001128:	2104      	movs	r1, #4
 800112a:	4801      	ldr	r0, [pc, #4]	; (8001130 <vSET_4_E+0x8>)
 800112c:	f001 bd20 	b.w	8002b70 <setbit>
 8001130:	24001260 	.word	0x24001260

08001134 <vSET_4_H>:
void vSET_4_H(){      setbit(&reg.H, 4);}
 8001134:	2104      	movs	r1, #4
 8001136:	4801      	ldr	r0, [pc, #4]	; (800113c <vSET_4_H+0x8>)
 8001138:	f001 bd1a 	b.w	8002b70 <setbit>
 800113c:	24001263 	.word	0x24001263

08001140 <vSET_4_L>:
void vSET_4_L(){      setbit(&reg.L, 4);}
 8001140:	2104      	movs	r1, #4
 8001142:	4801      	ldr	r0, [pc, #4]	; (8001148 <vSET_4_L+0x8>)
 8001144:	f001 bd14 	b.w	8002b70 <setbit>
 8001148:	24001262 	.word	0x24001262

0800114c <vSET_4_A>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
void vSET_4_A(){      setbit(&reg.A, 4);}
 800114c:	2104      	movs	r1, #4
 800114e:	4801      	ldr	r0, [pc, #4]	; (8001154 <vSET_4_A+0x8>)
 8001150:	f001 bd0e 	b.w	8002b70 <setbit>
 8001154:	2400125d 	.word	0x2400125d

08001158 <vSET_5_B>:
void vSET_5_B(){      setbit(&reg.B, 5);}
 8001158:	2105      	movs	r1, #5
 800115a:	4801      	ldr	r0, [pc, #4]	; (8001160 <vSET_5_B+0x8>)
 800115c:	f001 bd08 	b.w	8002b70 <setbit>
 8001160:	2400125f 	.word	0x2400125f

08001164 <vSET_5_C>:
void vSET_5_C(){      setbit(&reg.C, 5);}
 8001164:	2105      	movs	r1, #5
 8001166:	4801      	ldr	r0, [pc, #4]	; (800116c <vSET_5_C+0x8>)
 8001168:	f001 bd02 	b.w	8002b70 <setbit>
 800116c:	2400125e 	.word	0x2400125e

08001170 <vSET_5_D>:
void vSET_5_D(){      setbit(&reg.D, 5);}
 8001170:	2105      	movs	r1, #5
 8001172:	4801      	ldr	r0, [pc, #4]	; (8001178 <vSET_5_D+0x8>)
 8001174:	f001 bcfc 	b.w	8002b70 <setbit>
 8001178:	24001261 	.word	0x24001261

0800117c <vSET_5_E>:
void vSET_5_E(){      setbit(&reg.E, 5);}
 800117c:	2105      	movs	r1, #5
 800117e:	4801      	ldr	r0, [pc, #4]	; (8001184 <vSET_5_E+0x8>)
 8001180:	f001 bcf6 	b.w	8002b70 <setbit>
 8001184:	24001260 	.word	0x24001260

08001188 <vSET_5_H>:
void vSET_5_H(){      setbit(&reg.H, 5);}
 8001188:	2105      	movs	r1, #5
 800118a:	4801      	ldr	r0, [pc, #4]	; (8001190 <vSET_5_H+0x8>)
 800118c:	f001 bcf0 	b.w	8002b70 <setbit>
 8001190:	24001263 	.word	0x24001263

08001194 <vSET_5_L>:
void vSET_5_L(){      setbit(&reg.L, 5);}
 8001194:	2105      	movs	r1, #5
 8001196:	4801      	ldr	r0, [pc, #4]	; (800119c <vSET_5_L+0x8>)
 8001198:	f001 bcea 	b.w	8002b70 <setbit>
 800119c:	24001262 	.word	0x24001262

080011a0 <vSET_5_A>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
void vSET_5_A(){      setbit(&reg.A, 5);}
 80011a0:	2105      	movs	r1, #5
 80011a2:	4801      	ldr	r0, [pc, #4]	; (80011a8 <vSET_5_A+0x8>)
 80011a4:	f001 bce4 	b.w	8002b70 <setbit>
 80011a8:	2400125d 	.word	0x2400125d

080011ac <vSET_6_B>:

/*********************0xFX*/
void vSET_6_B(){      setbit(&reg.B, 6);}
 80011ac:	2106      	movs	r1, #6
 80011ae:	4801      	ldr	r0, [pc, #4]	; (80011b4 <vSET_6_B+0x8>)
 80011b0:	f001 bcde 	b.w	8002b70 <setbit>
 80011b4:	2400125f 	.word	0x2400125f

080011b8 <vSET_6_C>:
void vSET_6_C(){      setbit(&reg.C, 6);}
 80011b8:	2106      	movs	r1, #6
 80011ba:	4801      	ldr	r0, [pc, #4]	; (80011c0 <vSET_6_C+0x8>)
 80011bc:	f001 bcd8 	b.w	8002b70 <setbit>
 80011c0:	2400125e 	.word	0x2400125e

080011c4 <vSET_6_D>:
void vSET_6_D(){      setbit(&reg.D, 6);}
 80011c4:	2106      	movs	r1, #6
 80011c6:	4801      	ldr	r0, [pc, #4]	; (80011cc <vSET_6_D+0x8>)
 80011c8:	f001 bcd2 	b.w	8002b70 <setbit>
 80011cc:	24001261 	.word	0x24001261

080011d0 <vSET_6_E>:
void vSET_6_E(){      setbit(&reg.E, 6);}
 80011d0:	2106      	movs	r1, #6
 80011d2:	4801      	ldr	r0, [pc, #4]	; (80011d8 <vSET_6_E+0x8>)
 80011d4:	f001 bccc 	b.w	8002b70 <setbit>
 80011d8:	24001260 	.word	0x24001260

080011dc <vSET_6_H>:
void vSET_6_H(){      setbit(&reg.H, 6);}
 80011dc:	2106      	movs	r1, #6
 80011de:	4801      	ldr	r0, [pc, #4]	; (80011e4 <vSET_6_H+0x8>)
 80011e0:	f001 bcc6 	b.w	8002b70 <setbit>
 80011e4:	24001263 	.word	0x24001263

080011e8 <vSET_6_L>:
void vSET_6_L(){      setbit(&reg.L, 6);}
 80011e8:	2106      	movs	r1, #6
 80011ea:	4801      	ldr	r0, [pc, #4]	; (80011f0 <vSET_6_L+0x8>)
 80011ec:	f001 bcc0 	b.w	8002b70 <setbit>
 80011f0:	24001262 	.word	0x24001262

080011f4 <vSET_6_A>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
void vSET_6_A(){      setbit(&reg.A, 6);}
 80011f4:	2106      	movs	r1, #6
 80011f6:	4801      	ldr	r0, [pc, #4]	; (80011fc <vSET_6_A+0x8>)
 80011f8:	f001 bcba 	b.w	8002b70 <setbit>
 80011fc:	2400125d 	.word	0x2400125d

08001200 <vSET_7_B>:
void vSET_7_B(){      setbit(&reg.B, 7);}
 8001200:	2107      	movs	r1, #7
 8001202:	4801      	ldr	r0, [pc, #4]	; (8001208 <vSET_7_B+0x8>)
 8001204:	f001 bcb4 	b.w	8002b70 <setbit>
 8001208:	2400125f 	.word	0x2400125f

0800120c <vSET_7_C>:
void vSET_7_C(){      setbit(&reg.C, 7);}
 800120c:	2107      	movs	r1, #7
 800120e:	4801      	ldr	r0, [pc, #4]	; (8001214 <vSET_7_C+0x8>)
 8001210:	f001 bcae 	b.w	8002b70 <setbit>
 8001214:	2400125e 	.word	0x2400125e

08001218 <vSET_7_D>:
void vSET_7_D(){      setbit(&reg.D, 7);}
 8001218:	2107      	movs	r1, #7
 800121a:	4801      	ldr	r0, [pc, #4]	; (8001220 <vSET_7_D+0x8>)
 800121c:	f001 bca8 	b.w	8002b70 <setbit>
 8001220:	24001261 	.word	0x24001261

08001224 <vSET_7_E>:
void vSET_7_E(){      setbit(&reg.E, 7);}
 8001224:	2107      	movs	r1, #7
 8001226:	4801      	ldr	r0, [pc, #4]	; (800122c <vSET_7_E+0x8>)
 8001228:	f001 bca2 	b.w	8002b70 <setbit>
 800122c:	24001260 	.word	0x24001260

08001230 <vSET_7_H>:
void vSET_7_H(){      setbit(&reg.H, 7);}
 8001230:	2107      	movs	r1, #7
 8001232:	4801      	ldr	r0, [pc, #4]	; (8001238 <vSET_7_H+0x8>)
 8001234:	f001 bc9c 	b.w	8002b70 <setbit>
 8001238:	24001263 	.word	0x24001263

0800123c <vSET_7_L>:
void vSET_7_L(){      setbit(&reg.L, 7);}
 800123c:	2107      	movs	r1, #7
 800123e:	4801      	ldr	r0, [pc, #4]	; (8001244 <vSET_7_L+0x8>)
 8001240:	f001 bc96 	b.w	8002b70 <setbit>
 8001244:	24001262 	.word	0x24001262

08001248 <vSET_7_A>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
void vSET_7_A(){      setbit(&reg.A, 7);}
 8001248:	2107      	movs	r1, #7
 800124a:	4801      	ldr	r0, [pc, #4]	; (8001250 <vSET_7_A+0x8>)
 800124c:	f001 bc90 	b.w	8002b70 <setbit>
 8001250:	2400125d 	.word	0x2400125d

08001254 <vJR_NC_r8>:
void vJR_NC_r8(){     customDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001254:	b538      	push	{r3, r4, r5, lr}
 8001256:	4d08      	ldr	r5, [pc, #32]	; (8001278 <vJR_NC_r8+0x24>)
 8001258:	462c      	mov	r4, r5
 800125a:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 800125e:	3801      	subs	r0, #1
 8001260:	b280      	uxth	r0, r0
 8001262:	f002 f98b 	bl	800357c <ucGBMemoryRead>
 8001266:	4629      	mov	r1, r5
 8001268:	4602      	mov	r2, r0
 800126a:	4620      	mov	r0, r4
 800126c:	f001 fd8a 	bl	8002d84 <vGBFunctionJR_NC>
 8001270:	4b02      	ldr	r3, [pc, #8]	; (800127c <vJR_NC_r8+0x28>)
 8001272:	7018      	strb	r0, [r3, #0]
 8001274:	bd38      	pop	{r3, r4, r5, pc}
 8001276:	bf00      	nop
 8001278:	2400125c 	.word	0x2400125c
 800127c:	24001094 	.word	0x24001094

08001280 <vINC_HL>:
void vINC_HL(){       vMemoryLocationINC(reg.HL, &reg.F);}
 8001280:	4901      	ldr	r1, [pc, #4]	; (8001288 <vINC_HL+0x8>)
 8001282:	88c8      	ldrh	r0, [r1, #6]
 8001284:	f001 bd8a 	b.w	8002d9c <vMemoryLocationINC>
 8001288:	2400125c 	.word	0x2400125c

0800128c <vDEC_HL>:
void vDEC_HL(){       vMemoryLocationDEC(reg.HL, &reg.F);}
 800128c:	4901      	ldr	r1, [pc, #4]	; (8001294 <vDEC_HL+0x8>)
 800128e:	88c8      	ldrh	r0, [r1, #6]
 8001290:	f001 bdae 	b.w	8002df0 <vMemoryLocationDEC>
 8001294:	2400125c 	.word	0x2400125c

08001298 <vSCF>:
void vSCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); setbit(&reg.F, C_FLAG);}
 8001298:	b508      	push	{r3, lr}
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <vSCF+0x20>)
 800129c:	2106      	movs	r1, #6
 800129e:	f001 fc6f 	bl	8002b80 <resetbit>
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <vSCF+0x20>)
 80012a4:	2105      	movs	r1, #5
 80012a6:	f001 fc6b 	bl	8002b80 <resetbit>
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <vSCF+0x20>)
 80012ac:	2104      	movs	r1, #4
 80012ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80012b2:	f001 bc5d 	b.w	8002b70 <setbit>
 80012b6:	bf00      	nop
 80012b8:	2400125c 	.word	0x2400125c

080012bc <vRES_0_B>:
void vRES_0_B(){      resetbit(&reg.B, 0);}
 80012bc:	2100      	movs	r1, #0
 80012be:	4801      	ldr	r0, [pc, #4]	; (80012c4 <vRES_0_B+0x8>)
 80012c0:	f001 bc5e 	b.w	8002b80 <resetbit>
 80012c4:	2400125f 	.word	0x2400125f

080012c8 <vRES_0_C>:
void vRES_0_C(){      resetbit(&reg.C, 0);}
 80012c8:	2100      	movs	r1, #0
 80012ca:	4801      	ldr	r0, [pc, #4]	; (80012d0 <vRES_0_C+0x8>)
 80012cc:	f001 bc58 	b.w	8002b80 <resetbit>
 80012d0:	2400125e 	.word	0x2400125e

080012d4 <vRES_0_D>:
void vRES_0_D(){      resetbit(&reg.D, 0);}
 80012d4:	2100      	movs	r1, #0
 80012d6:	4801      	ldr	r0, [pc, #4]	; (80012dc <vRES_0_D+0x8>)
 80012d8:	f001 bc52 	b.w	8002b80 <resetbit>
 80012dc:	24001261 	.word	0x24001261

080012e0 <vRES_0_E>:
void vRES_0_E(){      resetbit(&reg.E, 0);}
 80012e0:	2100      	movs	r1, #0
 80012e2:	4801      	ldr	r0, [pc, #4]	; (80012e8 <vRES_0_E+0x8>)
 80012e4:	f001 bc4c 	b.w	8002b80 <resetbit>
 80012e8:	24001260 	.word	0x24001260

080012ec <vRES_0_H>:
void vRES_0_H(){      resetbit(&reg.H, 0);}
 80012ec:	2100      	movs	r1, #0
 80012ee:	4801      	ldr	r0, [pc, #4]	; (80012f4 <vRES_0_H+0x8>)
 80012f0:	f001 bc46 	b.w	8002b80 <resetbit>
 80012f4:	24001263 	.word	0x24001263

080012f8 <vRES_0_L>:
void vRES_0_L(){      resetbit(&reg.L, 0);}
 80012f8:	2100      	movs	r1, #0
 80012fa:	4801      	ldr	r0, [pc, #4]	; (8001300 <vRES_0_L+0x8>)
 80012fc:	f001 bc40 	b.w	8002b80 <resetbit>
 8001300:	24001262 	.word	0x24001262

08001304 <vRES_0_A>:
void vRES_0_A(){      resetbit(&reg.A, 0);}
 8001304:	2100      	movs	r1, #0
 8001306:	4801      	ldr	r0, [pc, #4]	; (800130c <vRES_0_A+0x8>)
 8001308:	f001 bc3a 	b.w	8002b80 <resetbit>
 800130c:	2400125d 	.word	0x2400125d

08001310 <vRES_1_B>:
void vRES_1_B(){      resetbit(&reg.B, 1);}
 8001310:	2101      	movs	r1, #1
 8001312:	4801      	ldr	r0, [pc, #4]	; (8001318 <vRES_1_B+0x8>)
 8001314:	f001 bc34 	b.w	8002b80 <resetbit>
 8001318:	2400125f 	.word	0x2400125f

0800131c <vRES_1_C>:
void vRES_1_C(){      resetbit(&reg.C, 1);}
 800131c:	2101      	movs	r1, #1
 800131e:	4801      	ldr	r0, [pc, #4]	; (8001324 <vRES_1_C+0x8>)
 8001320:	f001 bc2e 	b.w	8002b80 <resetbit>
 8001324:	2400125e 	.word	0x2400125e

08001328 <vRES_1_D>:
void vRES_1_D(){      resetbit(&reg.D, 1);}
 8001328:	2101      	movs	r1, #1
 800132a:	4801      	ldr	r0, [pc, #4]	; (8001330 <vRES_1_D+0x8>)
 800132c:	f001 bc28 	b.w	8002b80 <resetbit>
 8001330:	24001261 	.word	0x24001261

08001334 <vRES_1_E>:
void vRES_1_E(){      resetbit(&reg.E, 1);}
 8001334:	2101      	movs	r1, #1
 8001336:	4801      	ldr	r0, [pc, #4]	; (800133c <vRES_1_E+0x8>)
 8001338:	f001 bc22 	b.w	8002b80 <resetbit>
 800133c:	24001260 	.word	0x24001260

08001340 <vRES_1_H>:
void vRES_1_H(){      resetbit(&reg.H, 1);}
 8001340:	2101      	movs	r1, #1
 8001342:	4801      	ldr	r0, [pc, #4]	; (8001348 <vRES_1_H+0x8>)
 8001344:	f001 bc1c 	b.w	8002b80 <resetbit>
 8001348:	24001263 	.word	0x24001263

0800134c <vRES_1_L>:
void vRES_1_L(){      resetbit(&reg.L, 1);}
 800134c:	2101      	movs	r1, #1
 800134e:	4801      	ldr	r0, [pc, #4]	; (8001354 <vRES_1_L+0x8>)
 8001350:	f001 bc16 	b.w	8002b80 <resetbit>
 8001354:	24001262 	.word	0x24001262

08001358 <vRES_1_A>:
void vRES_1_A(){      resetbit(&reg.A, 1);}
 8001358:	2101      	movs	r1, #1
 800135a:	4801      	ldr	r0, [pc, #4]	; (8001360 <vRES_1_A+0x8>)
 800135c:	f001 bc10 	b.w	8002b80 <resetbit>
 8001360:	2400125d 	.word	0x2400125d

08001364 <vRES_2_B>:
void vRES_2_B(){      resetbit(&reg.B, 2);}
 8001364:	2102      	movs	r1, #2
 8001366:	4801      	ldr	r0, [pc, #4]	; (800136c <vRES_2_B+0x8>)
 8001368:	f001 bc0a 	b.w	8002b80 <resetbit>
 800136c:	2400125f 	.word	0x2400125f

08001370 <vRES_2_C>:
void vRES_2_C(){      resetbit(&reg.C, 2);}
 8001370:	2102      	movs	r1, #2
 8001372:	4801      	ldr	r0, [pc, #4]	; (8001378 <vRES_2_C+0x8>)
 8001374:	f001 bc04 	b.w	8002b80 <resetbit>
 8001378:	2400125e 	.word	0x2400125e

0800137c <vRES_2_D>:
void vRES_2_D(){      resetbit(&reg.D, 2);}
 800137c:	2102      	movs	r1, #2
 800137e:	4801      	ldr	r0, [pc, #4]	; (8001384 <vRES_2_D+0x8>)
 8001380:	f001 bbfe 	b.w	8002b80 <resetbit>
 8001384:	24001261 	.word	0x24001261

08001388 <vRES_2_E>:
void vRES_2_E(){      resetbit(&reg.E, 2);}
 8001388:	2102      	movs	r1, #2
 800138a:	4801      	ldr	r0, [pc, #4]	; (8001390 <vRES_2_E+0x8>)
 800138c:	f001 bbf8 	b.w	8002b80 <resetbit>
 8001390:	24001260 	.word	0x24001260

08001394 <vRES_2_H>:
void vRES_2_H(){      resetbit(&reg.H, 2);}
 8001394:	2102      	movs	r1, #2
 8001396:	4801      	ldr	r0, [pc, #4]	; (800139c <vRES_2_H+0x8>)
 8001398:	f001 bbf2 	b.w	8002b80 <resetbit>
 800139c:	24001263 	.word	0x24001263

080013a0 <vRES_2_L>:
void vRES_2_L(){      resetbit(&reg.L, 2);}
 80013a0:	2102      	movs	r1, #2
 80013a2:	4801      	ldr	r0, [pc, #4]	; (80013a8 <vRES_2_L+0x8>)
 80013a4:	f001 bbec 	b.w	8002b80 <resetbit>
 80013a8:	24001262 	.word	0x24001262

080013ac <vRES_2_A>:
void vRES_2_A(){      resetbit(&reg.A, 2);}
 80013ac:	2102      	movs	r1, #2
 80013ae:	4801      	ldr	r0, [pc, #4]	; (80013b4 <vRES_2_A+0x8>)
 80013b0:	f001 bbe6 	b.w	8002b80 <resetbit>
 80013b4:	2400125d 	.word	0x2400125d

080013b8 <vRES_3_B>:
void vRES_3_B(){      resetbit(&reg.B, 3);}
 80013b8:	2103      	movs	r1, #3
 80013ba:	4801      	ldr	r0, [pc, #4]	; (80013c0 <vRES_3_B+0x8>)
 80013bc:	f001 bbe0 	b.w	8002b80 <resetbit>
 80013c0:	2400125f 	.word	0x2400125f

080013c4 <vRES_3_C>:
void vRES_3_C(){      resetbit(&reg.C, 3);}
 80013c4:	2103      	movs	r1, #3
 80013c6:	4801      	ldr	r0, [pc, #4]	; (80013cc <vRES_3_C+0x8>)
 80013c8:	f001 bbda 	b.w	8002b80 <resetbit>
 80013cc:	2400125e 	.word	0x2400125e

080013d0 <vRES_3_D>:
void vRES_3_D(){      resetbit(&reg.D, 3);}
 80013d0:	2103      	movs	r1, #3
 80013d2:	4801      	ldr	r0, [pc, #4]	; (80013d8 <vRES_3_D+0x8>)
 80013d4:	f001 bbd4 	b.w	8002b80 <resetbit>
 80013d8:	24001261 	.word	0x24001261

080013dc <vRES_3_E>:
void vRES_3_E(){      resetbit(&reg.E, 3);}
 80013dc:	2103      	movs	r1, #3
 80013de:	4801      	ldr	r0, [pc, #4]	; (80013e4 <vRES_3_E+0x8>)
 80013e0:	f001 bbce 	b.w	8002b80 <resetbit>
 80013e4:	24001260 	.word	0x24001260

080013e8 <vRES_3_H>:
void vRES_3_H(){      resetbit(&reg.H, 3);}
 80013e8:	2103      	movs	r1, #3
 80013ea:	4801      	ldr	r0, [pc, #4]	; (80013f0 <vRES_3_H+0x8>)
 80013ec:	f001 bbc8 	b.w	8002b80 <resetbit>
 80013f0:	24001263 	.word	0x24001263

080013f4 <vRES_3_L>:
void vRES_3_L(){      resetbit(&reg.L, 3);}
 80013f4:	2103      	movs	r1, #3
 80013f6:	4801      	ldr	r0, [pc, #4]	; (80013fc <vRES_3_L+0x8>)
 80013f8:	f001 bbc2 	b.w	8002b80 <resetbit>
 80013fc:	24001262 	.word	0x24001262

08001400 <vRES_3_A>:
void vRES_3_A(){      resetbit(&reg.A, 3);}
 8001400:	2103      	movs	r1, #3
 8001402:	4801      	ldr	r0, [pc, #4]	; (8001408 <vRES_3_A+0x8>)
 8001404:	f001 bbbc 	b.w	8002b80 <resetbit>
 8001408:	2400125d 	.word	0x2400125d

0800140c <vRES_4_B>:
void vRES_4_B(){      resetbit(&reg.B, 4);}
 800140c:	2104      	movs	r1, #4
 800140e:	4801      	ldr	r0, [pc, #4]	; (8001414 <vRES_4_B+0x8>)
 8001410:	f001 bbb6 	b.w	8002b80 <resetbit>
 8001414:	2400125f 	.word	0x2400125f

08001418 <vRES_4_C>:
void vRES_4_C(){      resetbit(&reg.C, 4);}
 8001418:	2104      	movs	r1, #4
 800141a:	4801      	ldr	r0, [pc, #4]	; (8001420 <vRES_4_C+0x8>)
 800141c:	f001 bbb0 	b.w	8002b80 <resetbit>
 8001420:	2400125e 	.word	0x2400125e

08001424 <vRES_4_D>:
void vRES_4_D(){      resetbit(&reg.D, 4);}
 8001424:	2104      	movs	r1, #4
 8001426:	4801      	ldr	r0, [pc, #4]	; (800142c <vRES_4_D+0x8>)
 8001428:	f001 bbaa 	b.w	8002b80 <resetbit>
 800142c:	24001261 	.word	0x24001261

08001430 <vRES_4_E>:
void vRES_4_E(){      resetbit(&reg.E, 4);}
 8001430:	2104      	movs	r1, #4
 8001432:	4801      	ldr	r0, [pc, #4]	; (8001438 <vRES_4_E+0x8>)
 8001434:	f001 bba4 	b.w	8002b80 <resetbit>
 8001438:	24001260 	.word	0x24001260

0800143c <vRES_4_H>:
void vRES_4_H(){      resetbit(&reg.H, 4);}
 800143c:	2104      	movs	r1, #4
 800143e:	4801      	ldr	r0, [pc, #4]	; (8001444 <vRES_4_H+0x8>)
 8001440:	f001 bb9e 	b.w	8002b80 <resetbit>
 8001444:	24001263 	.word	0x24001263

08001448 <vRES_4_L>:
void vRES_4_L(){      resetbit(&reg.L, 4);}
 8001448:	2104      	movs	r1, #4
 800144a:	4801      	ldr	r0, [pc, #4]	; (8001450 <vRES_4_L+0x8>)
 800144c:	f001 bb98 	b.w	8002b80 <resetbit>
 8001450:	24001262 	.word	0x24001262

08001454 <vRES_4_A>:
void vRES_4_A(){      resetbit(&reg.A, 4);}
 8001454:	2104      	movs	r1, #4
 8001456:	4801      	ldr	r0, [pc, #4]	; (800145c <vRES_4_A+0x8>)
 8001458:	f001 bb92 	b.w	8002b80 <resetbit>
 800145c:	2400125d 	.word	0x2400125d

08001460 <vRES_5_B>:
void vRES_5_B(){      resetbit(&reg.B, 5);}
 8001460:	2105      	movs	r1, #5
 8001462:	4801      	ldr	r0, [pc, #4]	; (8001468 <vRES_5_B+0x8>)
 8001464:	f001 bb8c 	b.w	8002b80 <resetbit>
 8001468:	2400125f 	.word	0x2400125f

0800146c <vRES_5_C>:
void vRES_5_C(){      resetbit(&reg.C, 5);}
 800146c:	2105      	movs	r1, #5
 800146e:	4801      	ldr	r0, [pc, #4]	; (8001474 <vRES_5_C+0x8>)
 8001470:	f001 bb86 	b.w	8002b80 <resetbit>
 8001474:	2400125e 	.word	0x2400125e

08001478 <vRES_5_D>:
void vRES_5_D(){      resetbit(&reg.D, 5);}
 8001478:	2105      	movs	r1, #5
 800147a:	4801      	ldr	r0, [pc, #4]	; (8001480 <vRES_5_D+0x8>)
 800147c:	f001 bb80 	b.w	8002b80 <resetbit>
 8001480:	24001261 	.word	0x24001261

08001484 <vRES_5_E>:
void vRES_5_E(){      resetbit(&reg.E, 5);}
 8001484:	2105      	movs	r1, #5
 8001486:	4801      	ldr	r0, [pc, #4]	; (800148c <vRES_5_E+0x8>)
 8001488:	f001 bb7a 	b.w	8002b80 <resetbit>
 800148c:	24001260 	.word	0x24001260

08001490 <vRES_5_H>:
void vRES_5_H(){      resetbit(&reg.H, 5);}
 8001490:	2105      	movs	r1, #5
 8001492:	4801      	ldr	r0, [pc, #4]	; (8001498 <vRES_5_H+0x8>)
 8001494:	f001 bb74 	b.w	8002b80 <resetbit>
 8001498:	24001263 	.word	0x24001263

0800149c <vRES_5_L>:
void vRES_5_L(){      resetbit(&reg.L, 5);}
 800149c:	2105      	movs	r1, #5
 800149e:	4801      	ldr	r0, [pc, #4]	; (80014a4 <vRES_5_L+0x8>)
 80014a0:	f001 bb6e 	b.w	8002b80 <resetbit>
 80014a4:	24001262 	.word	0x24001262

080014a8 <vRES_5_A>:
void vRES_5_A(){      resetbit(&reg.A, 5);}
 80014a8:	2105      	movs	r1, #5
 80014aa:	4801      	ldr	r0, [pc, #4]	; (80014b0 <vRES_5_A+0x8>)
 80014ac:	f001 bb68 	b.w	8002b80 <resetbit>
 80014b0:	2400125d 	.word	0x2400125d

080014b4 <vRES_6_B>:
void vRES_6_B(){      resetbit(&reg.B, 6);}
 80014b4:	2106      	movs	r1, #6
 80014b6:	4801      	ldr	r0, [pc, #4]	; (80014bc <vRES_6_B+0x8>)
 80014b8:	f001 bb62 	b.w	8002b80 <resetbit>
 80014bc:	2400125f 	.word	0x2400125f

080014c0 <vRES_6_C>:
void vRES_6_C(){      resetbit(&reg.C, 6);}
 80014c0:	2106      	movs	r1, #6
 80014c2:	4801      	ldr	r0, [pc, #4]	; (80014c8 <vRES_6_C+0x8>)
 80014c4:	f001 bb5c 	b.w	8002b80 <resetbit>
 80014c8:	2400125e 	.word	0x2400125e

080014cc <vRES_6_D>:
void vRES_6_D(){      resetbit(&reg.D, 6);}
 80014cc:	2106      	movs	r1, #6
 80014ce:	4801      	ldr	r0, [pc, #4]	; (80014d4 <vRES_6_D+0x8>)
 80014d0:	f001 bb56 	b.w	8002b80 <resetbit>
 80014d4:	24001261 	.word	0x24001261

080014d8 <vRES_6_E>:
void vRES_6_E(){      resetbit(&reg.E, 6);}
 80014d8:	2106      	movs	r1, #6
 80014da:	4801      	ldr	r0, [pc, #4]	; (80014e0 <vRES_6_E+0x8>)
 80014dc:	f001 bb50 	b.w	8002b80 <resetbit>
 80014e0:	24001260 	.word	0x24001260

080014e4 <vRES_6_H>:
void vRES_6_H(){      resetbit(&reg.H, 6);}
 80014e4:	2106      	movs	r1, #6
 80014e6:	4801      	ldr	r0, [pc, #4]	; (80014ec <vRES_6_H+0x8>)
 80014e8:	f001 bb4a 	b.w	8002b80 <resetbit>
 80014ec:	24001263 	.word	0x24001263

080014f0 <vRES_6_L>:
void vRES_6_L(){      resetbit(&reg.L, 6);}
 80014f0:	2106      	movs	r1, #6
 80014f2:	4801      	ldr	r0, [pc, #4]	; (80014f8 <vRES_6_L+0x8>)
 80014f4:	f001 bb44 	b.w	8002b80 <resetbit>
 80014f8:	24001262 	.word	0x24001262

080014fc <vRES_6_A>:
void vRES_6_A(){      resetbit(&reg.A, 6);}
 80014fc:	2106      	movs	r1, #6
 80014fe:	4801      	ldr	r0, [pc, #4]	; (8001504 <vRES_6_A+0x8>)
 8001500:	f001 bb3e 	b.w	8002b80 <resetbit>
 8001504:	2400125d 	.word	0x2400125d

08001508 <vRES_7_B>:
void vRES_7_B(){      resetbit(&reg.B, 7);}
 8001508:	2107      	movs	r1, #7
 800150a:	4801      	ldr	r0, [pc, #4]	; (8001510 <vRES_7_B+0x8>)
 800150c:	f001 bb38 	b.w	8002b80 <resetbit>
 8001510:	2400125f 	.word	0x2400125f

08001514 <vRES_7_C>:
void vRES_7_C(){      resetbit(&reg.C, 7);}
 8001514:	2107      	movs	r1, #7
 8001516:	4801      	ldr	r0, [pc, #4]	; (800151c <vRES_7_C+0x8>)
 8001518:	f001 bb32 	b.w	8002b80 <resetbit>
 800151c:	2400125e 	.word	0x2400125e

08001520 <vRES_7_D>:
void vRES_7_D(){      resetbit(&reg.D, 7);}
 8001520:	2107      	movs	r1, #7
 8001522:	4801      	ldr	r0, [pc, #4]	; (8001528 <vRES_7_D+0x8>)
 8001524:	f001 bb2c 	b.w	8002b80 <resetbit>
 8001528:	24001261 	.word	0x24001261

0800152c <vRES_7_E>:
void vRES_7_E(){      resetbit(&reg.E, 7);}
 800152c:	2107      	movs	r1, #7
 800152e:	4801      	ldr	r0, [pc, #4]	; (8001534 <vRES_7_E+0x8>)
 8001530:	f001 bb26 	b.w	8002b80 <resetbit>
 8001534:	24001260 	.word	0x24001260

08001538 <vRES_7_H>:
void vRES_7_H(){      resetbit(&reg.H, 7);}
 8001538:	2107      	movs	r1, #7
 800153a:	4801      	ldr	r0, [pc, #4]	; (8001540 <vRES_7_H+0x8>)
 800153c:	f001 bb20 	b.w	8002b80 <resetbit>
 8001540:	24001263 	.word	0x24001263

08001544 <vRES_7_L>:
void vRES_7_L(){      resetbit(&reg.L, 7);}
 8001544:	2107      	movs	r1, #7
 8001546:	4801      	ldr	r0, [pc, #4]	; (800154c <vRES_7_L+0x8>)
 8001548:	f001 bb1a 	b.w	8002b80 <resetbit>
 800154c:	24001262 	.word	0x24001262

08001550 <vRES_7_A>:
void vRES_7_A(){      resetbit(&reg.A, 7);}
 8001550:	2107      	movs	r1, #7
 8001552:	4801      	ldr	r0, [pc, #4]	; (8001558 <vRES_7_A+0x8>)
 8001554:	f001 bb14 	b.w	8002b80 <resetbit>
 8001558:	2400125d 	.word	0x2400125d

0800155c <vJR_C_r8>:
void vJR_C_r8(){      customDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4d08      	ldr	r5, [pc, #32]	; (8001580 <vJR_C_r8+0x24>)
 8001560:	462c      	mov	r4, r5
 8001562:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8001566:	3801      	subs	r0, #1
 8001568:	b280      	uxth	r0, r0
 800156a:	f002 f807 	bl	800357c <ucGBMemoryRead>
 800156e:	4629      	mov	r1, r5
 8001570:	4602      	mov	r2, r0
 8001572:	4620      	mov	r0, r4
 8001574:	f001 fc64 	bl	8002e40 <vGBFunctionJR_C>
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <vJR_C_r8+0x28>)
 800157a:	7018      	strb	r0, [r3, #0]
 800157c:	bd38      	pop	{r3, r4, r5, pc}
 800157e:	bf00      	nop
 8001580:	2400125c 	.word	0x2400125c
 8001584:	24001094 	.word	0x24001094

08001588 <vADD_A_B>:
void vADD_A_B(){      vGBFunctionADD(&reg.A, &reg.F, reg.B);}
 8001588:	4902      	ldr	r1, [pc, #8]	; (8001594 <vADD_A_B+0xc>)
 800158a:	78ca      	ldrb	r2, [r1, #3]
 800158c:	1c48      	adds	r0, r1, #1
 800158e:	f001 bc63 	b.w	8002e58 <vGBFunctionADD>
 8001592:	bf00      	nop
 8001594:	2400125c 	.word	0x2400125c

08001598 <vADD_A_C>:
void vADD_A_C(){      vGBFunctionADD(&reg.A, &reg.F, reg.C);}
 8001598:	4902      	ldr	r1, [pc, #8]	; (80015a4 <vADD_A_C+0xc>)
 800159a:	788a      	ldrb	r2, [r1, #2]
 800159c:	1c48      	adds	r0, r1, #1
 800159e:	f001 bc5b 	b.w	8002e58 <vGBFunctionADD>
 80015a2:	bf00      	nop
 80015a4:	2400125c 	.word	0x2400125c

080015a8 <vADD_A_D>:
void vADD_A_D(){      vGBFunctionADD(&reg.A, &reg.F, reg.D);}
 80015a8:	4902      	ldr	r1, [pc, #8]	; (80015b4 <vADD_A_D+0xc>)
 80015aa:	794a      	ldrb	r2, [r1, #5]
 80015ac:	1c48      	adds	r0, r1, #1
 80015ae:	f001 bc53 	b.w	8002e58 <vGBFunctionADD>
 80015b2:	bf00      	nop
 80015b4:	2400125c 	.word	0x2400125c

080015b8 <vADD_A_E>:
void vADD_A_E(){      vGBFunctionADD(&reg.A, &reg.F, reg.E);}
 80015b8:	4902      	ldr	r1, [pc, #8]	; (80015c4 <vADD_A_E+0xc>)
 80015ba:	790a      	ldrb	r2, [r1, #4]
 80015bc:	1c48      	adds	r0, r1, #1
 80015be:	f001 bc4b 	b.w	8002e58 <vGBFunctionADD>
 80015c2:	bf00      	nop
 80015c4:	2400125c 	.word	0x2400125c

080015c8 <vADD_A_H>:
void vADD_A_H(){      vGBFunctionADD(&reg.A, &reg.F, reg.H);}
 80015c8:	4902      	ldr	r1, [pc, #8]	; (80015d4 <vADD_A_H+0xc>)
 80015ca:	79ca      	ldrb	r2, [r1, #7]
 80015cc:	1c48      	adds	r0, r1, #1
 80015ce:	f001 bc43 	b.w	8002e58 <vGBFunctionADD>
 80015d2:	bf00      	nop
 80015d4:	2400125c 	.word	0x2400125c

080015d8 <vADD_A_L>:
void vADD_A_L(){      vGBFunctionADD(&reg.A, &reg.F, reg.L);}
 80015d8:	4902      	ldr	r1, [pc, #8]	; (80015e4 <vADD_A_L+0xc>)
 80015da:	798a      	ldrb	r2, [r1, #6]
 80015dc:	1c48      	adds	r0, r1, #1
 80015de:	f001 bc3b 	b.w	8002e58 <vGBFunctionADD>
 80015e2:	bf00      	nop
 80015e4:	2400125c 	.word	0x2400125c

080015e8 <vADD_A_HL>:
void vADD_A_HL(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80015e8:	b510      	push	{r4, lr}
 80015ea:	4c05      	ldr	r4, [pc, #20]	; (8001600 <vADD_A_HL+0x18>)
 80015ec:	88e0      	ldrh	r0, [r4, #6]
 80015ee:	f001 ffc5 	bl	800357c <ucGBMemoryRead>
 80015f2:	4621      	mov	r1, r4
 80015f4:	4602      	mov	r2, r0
 80015f6:	1c60      	adds	r0, r4, #1
 80015f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015fc:	f001 bc2c 	b.w	8002e58 <vGBFunctionADD>
 8001600:	2400125c 	.word	0x2400125c

08001604 <vADD_A_A>:
void vADD_A_A(){      vGBFunctionADD(&reg.A, &reg.F, reg.A);}
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <vADD_A_A+0xc>)
 8001606:	4601      	mov	r1, r0
 8001608:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800160c:	f001 bc24 	b.w	8002e58 <vGBFunctionADD>
 8001610:	2400125c 	.word	0x2400125c

08001614 <vADD_A_d8>:
void vADD_A_d8(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001614:	b510      	push	{r4, lr}
 8001616:	4c06      	ldr	r4, [pc, #24]	; (8001630 <vADD_A_d8+0x1c>)
 8001618:	8960      	ldrh	r0, [r4, #10]
 800161a:	3801      	subs	r0, #1
 800161c:	b280      	uxth	r0, r0
 800161e:	f001 ffad 	bl	800357c <ucGBMemoryRead>
 8001622:	4621      	mov	r1, r4
 8001624:	4602      	mov	r2, r0
 8001626:	1c60      	adds	r0, r4, #1
 8001628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800162c:	f001 bc14 	b.w	8002e58 <vGBFunctionADD>
 8001630:	2400125c 	.word	0x2400125c

08001634 <vADC_A_B>:
void vADC_A_B(){      vGBFunctionADC(&reg.A, &reg.F, reg.B);}
 8001634:	4902      	ldr	r1, [pc, #8]	; (8001640 <vADC_A_B+0xc>)
 8001636:	78ca      	ldrb	r2, [r1, #3]
 8001638:	1c48      	adds	r0, r1, #1
 800163a:	f001 bc3b 	b.w	8002eb4 <vGBFunctionADC>
 800163e:	bf00      	nop
 8001640:	2400125c 	.word	0x2400125c

08001644 <vADC_A_C>:
void vADC_A_C(){      vGBFunctionADC(&reg.A, &reg.F, reg.C);}
 8001644:	4902      	ldr	r1, [pc, #8]	; (8001650 <vADC_A_C+0xc>)
 8001646:	788a      	ldrb	r2, [r1, #2]
 8001648:	1c48      	adds	r0, r1, #1
 800164a:	f001 bc33 	b.w	8002eb4 <vGBFunctionADC>
 800164e:	bf00      	nop
 8001650:	2400125c 	.word	0x2400125c

08001654 <vADC_A_D>:
void vADC_A_D(){      vGBFunctionADC(&reg.A, &reg.F, reg.D);}
 8001654:	4902      	ldr	r1, [pc, #8]	; (8001660 <vADC_A_D+0xc>)
 8001656:	794a      	ldrb	r2, [r1, #5]
 8001658:	1c48      	adds	r0, r1, #1
 800165a:	f001 bc2b 	b.w	8002eb4 <vGBFunctionADC>
 800165e:	bf00      	nop
 8001660:	2400125c 	.word	0x2400125c

08001664 <vADC_A_E>:
void vADC_A_E(){      vGBFunctionADC(&reg.A, &reg.F, reg.E);}
 8001664:	4902      	ldr	r1, [pc, #8]	; (8001670 <vADC_A_E+0xc>)
 8001666:	790a      	ldrb	r2, [r1, #4]
 8001668:	1c48      	adds	r0, r1, #1
 800166a:	f001 bc23 	b.w	8002eb4 <vGBFunctionADC>
 800166e:	bf00      	nop
 8001670:	2400125c 	.word	0x2400125c

08001674 <vADC_A_H>:
void vADC_A_H(){      vGBFunctionADC(&reg.A, &reg.F, reg.H);}
 8001674:	4902      	ldr	r1, [pc, #8]	; (8001680 <vADC_A_H+0xc>)
 8001676:	79ca      	ldrb	r2, [r1, #7]
 8001678:	1c48      	adds	r0, r1, #1
 800167a:	f001 bc1b 	b.w	8002eb4 <vGBFunctionADC>
 800167e:	bf00      	nop
 8001680:	2400125c 	.word	0x2400125c

08001684 <vADC_A_L>:
void vADC_A_L(){      vGBFunctionADC(&reg.A, &reg.F, reg.L);}
 8001684:	4902      	ldr	r1, [pc, #8]	; (8001690 <vADC_A_L+0xc>)
 8001686:	798a      	ldrb	r2, [r1, #6]
 8001688:	1c48      	adds	r0, r1, #1
 800168a:	f001 bc13 	b.w	8002eb4 <vGBFunctionADC>
 800168e:	bf00      	nop
 8001690:	2400125c 	.word	0x2400125c

08001694 <vADC_A_HL>:
void vADC_A_HL(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001694:	b510      	push	{r4, lr}
 8001696:	4c05      	ldr	r4, [pc, #20]	; (80016ac <vADC_A_HL+0x18>)
 8001698:	88e0      	ldrh	r0, [r4, #6]
 800169a:	f001 ff6f 	bl	800357c <ucGBMemoryRead>
 800169e:	4621      	mov	r1, r4
 80016a0:	4602      	mov	r2, r0
 80016a2:	1c60      	adds	r0, r4, #1
 80016a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016a8:	f001 bc04 	b.w	8002eb4 <vGBFunctionADC>
 80016ac:	2400125c 	.word	0x2400125c

080016b0 <vADC_A_A>:
void vADC_A_A(){      vGBFunctionADC(&reg.A, &reg.F, reg.A);}
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <vADC_A_A+0xc>)
 80016b2:	4601      	mov	r1, r0
 80016b4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80016b8:	f001 bbfc 	b.w	8002eb4 <vGBFunctionADC>
 80016bc:	2400125c 	.word	0x2400125c

080016c0 <vADC_A_d8>:
void vADC_A_d8(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80016c0:	b510      	push	{r4, lr}
 80016c2:	4c06      	ldr	r4, [pc, #24]	; (80016dc <vADC_A_d8+0x1c>)
 80016c4:	8960      	ldrh	r0, [r4, #10]
 80016c6:	3801      	subs	r0, #1
 80016c8:	b280      	uxth	r0, r0
 80016ca:	f001 ff57 	bl	800357c <ucGBMemoryRead>
 80016ce:	4621      	mov	r1, r4
 80016d0:	4602      	mov	r2, r0
 80016d2:	1c60      	adds	r0, r4, #1
 80016d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016d8:	f001 bbec 	b.w	8002eb4 <vGBFunctionADC>
 80016dc:	2400125c 	.word	0x2400125c

080016e0 <vSUB_B>:
void vSUB_B(){        vGBFunctionSUB(&reg.A, &reg.F, reg.B);}
 80016e0:	4902      	ldr	r1, [pc, #8]	; (80016ec <vSUB_B+0xc>)
 80016e2:	78ca      	ldrb	r2, [r1, #3]
 80016e4:	1c48      	adds	r0, r1, #1
 80016e6:	f001 bc17 	b.w	8002f18 <vGBFunctionSUB>
 80016ea:	bf00      	nop
 80016ec:	2400125c 	.word	0x2400125c

080016f0 <vSUB_C>:
void vSUB_C(){        vGBFunctionSUB(&reg.A, &reg.F, reg.C);}
 80016f0:	4902      	ldr	r1, [pc, #8]	; (80016fc <vSUB_C+0xc>)
 80016f2:	788a      	ldrb	r2, [r1, #2]
 80016f4:	1c48      	adds	r0, r1, #1
 80016f6:	f001 bc0f 	b.w	8002f18 <vGBFunctionSUB>
 80016fa:	bf00      	nop
 80016fc:	2400125c 	.word	0x2400125c

08001700 <vSUB_D>:
void vSUB_D(){        vGBFunctionSUB(&reg.A, &reg.F, reg.D);}
 8001700:	4902      	ldr	r1, [pc, #8]	; (800170c <vSUB_D+0xc>)
 8001702:	794a      	ldrb	r2, [r1, #5]
 8001704:	1c48      	adds	r0, r1, #1
 8001706:	f001 bc07 	b.w	8002f18 <vGBFunctionSUB>
 800170a:	bf00      	nop
 800170c:	2400125c 	.word	0x2400125c

08001710 <vSUB_E>:
void vSUB_E(){        vGBFunctionSUB(&reg.A, &reg.F, reg.E);}
 8001710:	4902      	ldr	r1, [pc, #8]	; (800171c <vSUB_E+0xc>)
 8001712:	790a      	ldrb	r2, [r1, #4]
 8001714:	1c48      	adds	r0, r1, #1
 8001716:	f001 bbff 	b.w	8002f18 <vGBFunctionSUB>
 800171a:	bf00      	nop
 800171c:	2400125c 	.word	0x2400125c

08001720 <vSUB_H>:
void vSUB_H(){        vGBFunctionSUB(&reg.A, &reg.F, reg.H);}
 8001720:	4902      	ldr	r1, [pc, #8]	; (800172c <vSUB_H+0xc>)
 8001722:	79ca      	ldrb	r2, [r1, #7]
 8001724:	1c48      	adds	r0, r1, #1
 8001726:	f001 bbf7 	b.w	8002f18 <vGBFunctionSUB>
 800172a:	bf00      	nop
 800172c:	2400125c 	.word	0x2400125c

08001730 <vSUB_L>:
void vSUB_L(){        vGBFunctionSUB(&reg.A, &reg.F, reg.L);}
 8001730:	4902      	ldr	r1, [pc, #8]	; (800173c <vSUB_L+0xc>)
 8001732:	798a      	ldrb	r2, [r1, #6]
 8001734:	1c48      	adds	r0, r1, #1
 8001736:	f001 bbef 	b.w	8002f18 <vGBFunctionSUB>
 800173a:	bf00      	nop
 800173c:	2400125c 	.word	0x2400125c

08001740 <vSUB_HL>:
void vSUB_HL(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001740:	b510      	push	{r4, lr}
 8001742:	4c05      	ldr	r4, [pc, #20]	; (8001758 <vSUB_HL+0x18>)
 8001744:	88e0      	ldrh	r0, [r4, #6]
 8001746:	f001 ff19 	bl	800357c <ucGBMemoryRead>
 800174a:	4621      	mov	r1, r4
 800174c:	4602      	mov	r2, r0
 800174e:	1c60      	adds	r0, r4, #1
 8001750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001754:	f001 bbe0 	b.w	8002f18 <vGBFunctionSUB>
 8001758:	2400125c 	.word	0x2400125c

0800175c <vSUB_A>:
void vSUB_A(){        vGBFunctionSUB(&reg.A, &reg.F, reg.A);}
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <vSUB_A+0xc>)
 800175e:	4601      	mov	r1, r0
 8001760:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001764:	f001 bbd8 	b.w	8002f18 <vGBFunctionSUB>
 8001768:	2400125c 	.word	0x2400125c

0800176c <vSUB_d8>:
void vSUB_d8(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 800176c:	b510      	push	{r4, lr}
 800176e:	4c06      	ldr	r4, [pc, #24]	; (8001788 <vSUB_d8+0x1c>)
 8001770:	8960      	ldrh	r0, [r4, #10]
 8001772:	3801      	subs	r0, #1
 8001774:	b280      	uxth	r0, r0
 8001776:	f001 ff01 	bl	800357c <ucGBMemoryRead>
 800177a:	4621      	mov	r1, r4
 800177c:	4602      	mov	r2, r0
 800177e:	1c60      	adds	r0, r4, #1
 8001780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001784:	f001 bbc8 	b.w	8002f18 <vGBFunctionSUB>
 8001788:	2400125c 	.word	0x2400125c

0800178c <vSBC_A_B>:
void vSBC_A_B(){      vGBFunctionSBC(&reg.A, &reg.F, reg.B);}
 800178c:	4902      	ldr	r1, [pc, #8]	; (8001798 <vSBC_A_B+0xc>)
 800178e:	78ca      	ldrb	r2, [r1, #3]
 8001790:	1c48      	adds	r0, r1, #1
 8001792:	f001 bbf7 	b.w	8002f84 <vGBFunctionSBC>
 8001796:	bf00      	nop
 8001798:	2400125c 	.word	0x2400125c

0800179c <vSBC_A_C>:
void vSBC_A_C(){      vGBFunctionSBC(&reg.A, &reg.F, reg.C);}
 800179c:	4902      	ldr	r1, [pc, #8]	; (80017a8 <vSBC_A_C+0xc>)
 800179e:	788a      	ldrb	r2, [r1, #2]
 80017a0:	1c48      	adds	r0, r1, #1
 80017a2:	f001 bbef 	b.w	8002f84 <vGBFunctionSBC>
 80017a6:	bf00      	nop
 80017a8:	2400125c 	.word	0x2400125c

080017ac <vSBC_A_D>:
void vSBC_A_D(){      vGBFunctionSBC(&reg.A, &reg.F, reg.D);}
 80017ac:	4902      	ldr	r1, [pc, #8]	; (80017b8 <vSBC_A_D+0xc>)
 80017ae:	794a      	ldrb	r2, [r1, #5]
 80017b0:	1c48      	adds	r0, r1, #1
 80017b2:	f001 bbe7 	b.w	8002f84 <vGBFunctionSBC>
 80017b6:	bf00      	nop
 80017b8:	2400125c 	.word	0x2400125c

080017bc <vSBC_A_E>:
void vSBC_A_E(){      vGBFunctionSBC(&reg.A, &reg.F, reg.E);}
 80017bc:	4902      	ldr	r1, [pc, #8]	; (80017c8 <vSBC_A_E+0xc>)
 80017be:	790a      	ldrb	r2, [r1, #4]
 80017c0:	1c48      	adds	r0, r1, #1
 80017c2:	f001 bbdf 	b.w	8002f84 <vGBFunctionSBC>
 80017c6:	bf00      	nop
 80017c8:	2400125c 	.word	0x2400125c

080017cc <vSBC_A_H>:
void vSBC_A_H(){      vGBFunctionSBC(&reg.A, &reg.F, reg.H);}
 80017cc:	4902      	ldr	r1, [pc, #8]	; (80017d8 <vSBC_A_H+0xc>)
 80017ce:	79ca      	ldrb	r2, [r1, #7]
 80017d0:	1c48      	adds	r0, r1, #1
 80017d2:	f001 bbd7 	b.w	8002f84 <vGBFunctionSBC>
 80017d6:	bf00      	nop
 80017d8:	2400125c 	.word	0x2400125c

080017dc <vSBC_A_L>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
 80017dc:	4902      	ldr	r1, [pc, #8]	; (80017e8 <vSBC_A_L+0xc>)
 80017de:	798a      	ldrb	r2, [r1, #6]
 80017e0:	1c48      	adds	r0, r1, #1
 80017e2:	f001 bbcf 	b.w	8002f84 <vGBFunctionSBC>
 80017e6:	bf00      	nop
 80017e8:	2400125c 	.word	0x2400125c

080017ec <vSBC_A_HL>:
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80017ec:	b510      	push	{r4, lr}
 80017ee:	4c05      	ldr	r4, [pc, #20]	; (8001804 <vSBC_A_HL+0x18>)
 80017f0:	88e0      	ldrh	r0, [r4, #6]
 80017f2:	f001 fec3 	bl	800357c <ucGBMemoryRead>
 80017f6:	4621      	mov	r1, r4
 80017f8:	4602      	mov	r2, r0
 80017fa:	1c60      	adds	r0, r4, #1
 80017fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001800:	f001 bbc0 	b.w	8002f84 <vGBFunctionSBC>
 8001804:	2400125c 	.word	0x2400125c

08001808 <vSBC_A_A>:
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <vSBC_A_A+0xc>)
 800180a:	4601      	mov	r1, r0
 800180c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001810:	f001 bbb8 	b.w	8002f84 <vGBFunctionSBC>
 8001814:	2400125c 	.word	0x2400125c

08001818 <vSBC_A_d8>:
void vSBC_A_d8(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001818:	b510      	push	{r4, lr}
 800181a:	4c06      	ldr	r4, [pc, #24]	; (8001834 <vSBC_A_d8+0x1c>)
 800181c:	8960      	ldrh	r0, [r4, #10]
 800181e:	3801      	subs	r0, #1
 8001820:	b280      	uxth	r0, r0
 8001822:	f001 feab 	bl	800357c <ucGBMemoryRead>
 8001826:	4621      	mov	r1, r4
 8001828:	4602      	mov	r2, r0
 800182a:	1c60      	adds	r0, r4, #1
 800182c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001830:	f001 bba8 	b.w	8002f84 <vGBFunctionSBC>
 8001834:	2400125c 	.word	0x2400125c

08001838 <vCP_B>:
void vCP_B(){         vGBFunctionCP(reg.A, &reg.F, reg.B);}
 8001838:	4902      	ldr	r1, [pc, #8]	; (8001844 <vCP_B+0xc>)
 800183a:	78ca      	ldrb	r2, [r1, #3]
 800183c:	7848      	ldrb	r0, [r1, #1]
 800183e:	f001 bbd9 	b.w	8002ff4 <vGBFunctionCP>
 8001842:	bf00      	nop
 8001844:	2400125c 	.word	0x2400125c

08001848 <vCP_C>:
void vCP_C(){         vGBFunctionCP(reg.A, &reg.F, reg.C);}
 8001848:	4902      	ldr	r1, [pc, #8]	; (8001854 <vCP_C+0xc>)
 800184a:	788a      	ldrb	r2, [r1, #2]
 800184c:	7848      	ldrb	r0, [r1, #1]
 800184e:	f001 bbd1 	b.w	8002ff4 <vGBFunctionCP>
 8001852:	bf00      	nop
 8001854:	2400125c 	.word	0x2400125c

08001858 <vCP_D>:
void vCP_D(){         vGBFunctionCP(reg.A, &reg.F, reg.D);}
 8001858:	4902      	ldr	r1, [pc, #8]	; (8001864 <vCP_D+0xc>)
 800185a:	794a      	ldrb	r2, [r1, #5]
 800185c:	7848      	ldrb	r0, [r1, #1]
 800185e:	f001 bbc9 	b.w	8002ff4 <vGBFunctionCP>
 8001862:	bf00      	nop
 8001864:	2400125c 	.word	0x2400125c

08001868 <vCP_E>:
void vCP_E(){         vGBFunctionCP(reg.A, &reg.F, reg.E);}
 8001868:	4902      	ldr	r1, [pc, #8]	; (8001874 <vCP_E+0xc>)
 800186a:	790a      	ldrb	r2, [r1, #4]
 800186c:	7848      	ldrb	r0, [r1, #1]
 800186e:	f001 bbc1 	b.w	8002ff4 <vGBFunctionCP>
 8001872:	bf00      	nop
 8001874:	2400125c 	.word	0x2400125c

08001878 <vCP_H>:
void vCP_H(){         vGBFunctionCP(reg.A, &reg.F, reg.H);}
 8001878:	4902      	ldr	r1, [pc, #8]	; (8001884 <vCP_H+0xc>)
 800187a:	79ca      	ldrb	r2, [r1, #7]
 800187c:	7848      	ldrb	r0, [r1, #1]
 800187e:	f001 bbb9 	b.w	8002ff4 <vGBFunctionCP>
 8001882:	bf00      	nop
 8001884:	2400125c 	.word	0x2400125c

08001888 <vCP_L>:
void vCP_L(){         vGBFunctionCP(reg.A, &reg.F, reg.L);}
 8001888:	4902      	ldr	r1, [pc, #8]	; (8001894 <vCP_L+0xc>)
 800188a:	798a      	ldrb	r2, [r1, #6]
 800188c:	7848      	ldrb	r0, [r1, #1]
 800188e:	f001 bbb1 	b.w	8002ff4 <vGBFunctionCP>
 8001892:	bf00      	nop
 8001894:	2400125c 	.word	0x2400125c

08001898 <vCP_HL>:
void vCP_HL(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001898:	b538      	push	{r3, r4, r5, lr}
 800189a:	4c06      	ldr	r4, [pc, #24]	; (80018b4 <vCP_HL+0x1c>)
 800189c:	7865      	ldrb	r5, [r4, #1]
 800189e:	88e0      	ldrh	r0, [r4, #6]
 80018a0:	f001 fe6c 	bl	800357c <ucGBMemoryRead>
 80018a4:	4621      	mov	r1, r4
 80018a6:	4602      	mov	r2, r0
 80018a8:	4628      	mov	r0, r5
 80018aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018ae:	f001 bba1 	b.w	8002ff4 <vGBFunctionCP>
 80018b2:	bf00      	nop
 80018b4:	2400125c 	.word	0x2400125c

080018b8 <vCP_A>:
void vCP_A(){         vGBFunctionCP(reg.A, &reg.F, reg.A);}
 80018b8:	4902      	ldr	r1, [pc, #8]	; (80018c4 <vCP_A+0xc>)
 80018ba:	784a      	ldrb	r2, [r1, #1]
 80018bc:	4610      	mov	r0, r2
 80018be:	f001 bb99 	b.w	8002ff4 <vGBFunctionCP>
 80018c2:	bf00      	nop
 80018c4:	2400125c 	.word	0x2400125c

080018c8 <vCP_d8>:
void vCP_d8(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80018c8:	b538      	push	{r3, r4, r5, lr}
 80018ca:	4c07      	ldr	r4, [pc, #28]	; (80018e8 <vCP_d8+0x20>)
 80018cc:	8960      	ldrh	r0, [r4, #10]
 80018ce:	7865      	ldrb	r5, [r4, #1]
 80018d0:	3801      	subs	r0, #1
 80018d2:	b280      	uxth	r0, r0
 80018d4:	f001 fe52 	bl	800357c <ucGBMemoryRead>
 80018d8:	4621      	mov	r1, r4
 80018da:	4602      	mov	r2, r0
 80018dc:	4628      	mov	r0, r5
 80018de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018e2:	f001 bb87 	b.w	8002ff4 <vGBFunctionCP>
 80018e6:	bf00      	nop
 80018e8:	2400125c 	.word	0x2400125c

080018ec <vRET>:
void vRET(){          vGBFunctionRET(&reg.SP, &reg.PC);}
 80018ec:	4901      	ldr	r1, [pc, #4]	; (80018f4 <vRET+0x8>)
 80018ee:	1e88      	subs	r0, r1, #2
 80018f0:	f001 bb9e 	b.w	8003030 <vGBFunctionRET>
 80018f4:	24001266 	.word	0x24001266

080018f8 <vRETI>:
void vRETI(){         ucInterruptMasterEnable = 1; vGBFunctionRET(&reg.SP, &reg.PC);}
 80018f8:	4903      	ldr	r1, [pc, #12]	; (8001908 <vRETI+0x10>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <vRETI+0x14>)
 80018fe:	1e88      	subs	r0, r1, #2
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	f001 bb95 	b.w	8003030 <vGBFunctionRET>
 8001906:	bf00      	nop
 8001908:	24001266 	.word	0x24001266
 800190c:	2400109f 	.word	0x2400109f

08001910 <vPOP_BC>:
void vPOP_BC(){       vGBFunctionPOP(&reg.SP, &reg.BC);}
 8001910:	4901      	ldr	r1, [pc, #4]	; (8001918 <vPOP_BC+0x8>)
 8001912:	1d88      	adds	r0, r1, #6
 8001914:	f001 bba0 	b.w	8003058 <vGBFunctionPOP>
 8001918:	2400125e 	.word	0x2400125e

0800191c <vPOP_DE>:
void vPOP_DE(){       vGBFunctionPOP(&reg.SP, &reg.DE);}
 800191c:	4901      	ldr	r1, [pc, #4]	; (8001924 <vPOP_DE+0x8>)
 800191e:	1d08      	adds	r0, r1, #4
 8001920:	f001 bb9a 	b.w	8003058 <vGBFunctionPOP>
 8001924:	24001260 	.word	0x24001260

08001928 <vPOP_HL>:
void vPOP_HL(){       vGBFunctionPOP(&reg.SP, &reg.HL);}
 8001928:	4901      	ldr	r1, [pc, #4]	; (8001930 <vPOP_HL+0x8>)
 800192a:	1c88      	adds	r0, r1, #2
 800192c:	f001 bb94 	b.w	8003058 <vGBFunctionPOP>
 8001930:	24001262 	.word	0x24001262

08001934 <vPOP_AF>:
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
 8001934:	b510      	push	{r4, lr}
 8001936:	4c05      	ldr	r4, [pc, #20]	; (800194c <vPOP_AF+0x18>)
 8001938:	4621      	mov	r1, r4
 800193a:	f104 0008 	add.w	r0, r4, #8
 800193e:	f001 fb8b 	bl	8003058 <vGBFunctionPOP>
 8001942:	8823      	ldrh	r3, [r4, #0]
 8001944:	f023 030f 	bic.w	r3, r3, #15
 8001948:	8023      	strh	r3, [r4, #0]
 800194a:	bd10      	pop	{r4, pc}
 800194c:	2400125c 	.word	0x2400125c

08001950 <vJP_NZ_a16>:
void vJP_NZ_a16(){    customDuration = vGBFunctionJP_NZ_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001950:	b570      	push	{r4, r5, r6, lr}
 8001952:	4d0d      	ldr	r5, [pc, #52]	; (8001988 <vJP_NZ_a16+0x38>)
 8001954:	8968      	ldrh	r0, [r5, #10]
 8001956:	462c      	mov	r4, r5
 8001958:	3802      	subs	r0, #2
 800195a:	b280      	uxth	r0, r0
 800195c:	f001 fe0e 	bl	800357c <ucGBMemoryRead>
 8001960:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001964:	4606      	mov	r6, r0
 8001966:	1e58      	subs	r0, r3, #1
 8001968:	b280      	uxth	r0, r0
 800196a:	f001 fe07 	bl	800357c <ucGBMemoryRead>
 800196e:	4601      	mov	r1, r0
 8001970:	4630      	mov	r0, r6
 8001972:	f001 f8f9 	bl	8002b68 <concat_16bit_bigEndian>
 8001976:	4629      	mov	r1, r5
 8001978:	4602      	mov	r2, r0
 800197a:	4620      	mov	r0, r4
 800197c:	f001 fb6e 	bl	800305c <vGBFunctionJP_NZ_a16>
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <vJP_NZ_a16+0x3c>)
 8001982:	7018      	strb	r0, [r3, #0]
 8001984:	bd70      	pop	{r4, r5, r6, pc}
 8001986:	bf00      	nop
 8001988:	2400125c 	.word	0x2400125c
 800198c:	24001094 	.word	0x24001094

08001990 <vCALL_NZ_a16>:
void vCALL_NZ_a16(){  customDuration = vGBFunctionCALL_NZ_a16(&reg.PC, &reg.F, &reg.SP);}
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <vCALL_NZ_a16+0x14>)
 8001992:	b508      	push	{r3, lr}
 8001994:	f1a2 0108 	sub.w	r1, r2, #8
 8001998:	1c90      	adds	r0, r2, #2
 800199a:	f001 fb7b 	bl	8003094 <vGBFunctionCALL_NZ_a16>
 800199e:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <vCALL_NZ_a16+0x18>)
 80019a0:	7018      	strb	r0, [r3, #0]
 80019a2:	bd08      	pop	{r3, pc}
 80019a4:	24001264 	.word	0x24001264
 80019a8:	24001094 	.word	0x24001094

080019ac <vPUSH_BC>:
void vPUSH_BC(){      vGBFunctionPUSH(&reg.SP, &reg.BC);}
 80019ac:	4901      	ldr	r1, [pc, #4]	; (80019b4 <vPUSH_BC+0x8>)
 80019ae:	1d88      	adds	r0, r1, #6
 80019b0:	f001 bb5c 	b.w	800306c <vGBFunctionPUSH>
 80019b4:	2400125e 	.word	0x2400125e

080019b8 <vRST_00H>:
void vRST_00H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0000;}
 80019b8:	b510      	push	{r4, lr}
 80019ba:	4c04      	ldr	r4, [pc, #16]	; (80019cc <vRST_00H+0x14>)
 80019bc:	4621      	mov	r1, r4
 80019be:	1ea0      	subs	r0, r4, #2
 80019c0:	f001 fb54 	bl	800306c <vGBFunctionPUSH>
 80019c4:	3c0a      	subs	r4, #10
 80019c6:	2300      	movs	r3, #0
 80019c8:	8163      	strh	r3, [r4, #10]
 80019ca:	bd10      	pop	{r4, pc}
 80019cc:	24001266 	.word	0x24001266

080019d0 <vCALL_a16>:
void vCALL_a16(){     vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 80019d0:	490b      	ldr	r1, [pc, #44]	; (8001a00 <vCALL_a16+0x30>)
 80019d2:	b538      	push	{r3, r4, r5, lr}
 80019d4:	460c      	mov	r4, r1
 80019d6:	1e88      	subs	r0, r1, #2
 80019d8:	f001 fb48 	bl	800306c <vGBFunctionPUSH>
 80019dc:	f834 090a 	ldrh.w	r0, [r4], #-10
 80019e0:	3802      	subs	r0, #2
 80019e2:	b280      	uxth	r0, r0
 80019e4:	f001 fdca 	bl	800357c <ucGBMemoryRead>
 80019e8:	8963      	ldrh	r3, [r4, #10]
 80019ea:	4605      	mov	r5, r0
 80019ec:	1e58      	subs	r0, r3, #1
 80019ee:	b280      	uxth	r0, r0
 80019f0:	f001 fdc4 	bl	800357c <ucGBMemoryRead>
 80019f4:	4601      	mov	r1, r0
 80019f6:	4628      	mov	r0, r5
 80019f8:	f001 f8b6 	bl	8002b68 <concat_16bit_bigEndian>
 80019fc:	8160      	strh	r0, [r4, #10]
 80019fe:	bd38      	pop	{r3, r4, r5, pc}
 8001a00:	24001266 	.word	0x24001266

08001a04 <vRST_08H>:
void vRST_08H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0008;}
 8001a04:	b510      	push	{r4, lr}
 8001a06:	4c04      	ldr	r4, [pc, #16]	; (8001a18 <vRST_08H+0x14>)
 8001a08:	4621      	mov	r1, r4
 8001a0a:	1ea0      	subs	r0, r4, #2
 8001a0c:	f001 fb2e 	bl	800306c <vGBFunctionPUSH>
 8001a10:	2308      	movs	r3, #8
 8001a12:	8023      	strh	r3, [r4, #0]
 8001a14:	bd10      	pop	{r4, pc}
 8001a16:	bf00      	nop
 8001a18:	24001266 	.word	0x24001266

08001a1c <vPUSH_DE>:
void vPUSH_DE(){      vGBFunctionPUSH(&reg.SP, &reg.DE);}
 8001a1c:	4901      	ldr	r1, [pc, #4]	; (8001a24 <vPUSH_DE+0x8>)
 8001a1e:	1d08      	adds	r0, r1, #4
 8001a20:	f001 bb24 	b.w	800306c <vGBFunctionPUSH>
 8001a24:	24001260 	.word	0x24001260

08001a28 <vRST_10H>:
void vRST_10H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0010;}
 8001a28:	b510      	push	{r4, lr}
 8001a2a:	4c04      	ldr	r4, [pc, #16]	; (8001a3c <vRST_10H+0x14>)
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	1ea0      	subs	r0, r4, #2
 8001a30:	f001 fb1c 	bl	800306c <vGBFunctionPUSH>
 8001a34:	2310      	movs	r3, #16
 8001a36:	8023      	strh	r3, [r4, #0]
 8001a38:	bd10      	pop	{r4, pc}
 8001a3a:	bf00      	nop
 8001a3c:	24001266 	.word	0x24001266

08001a40 <vRST_18H>:
void vRST_18H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0018;}
 8001a40:	b510      	push	{r4, lr}
 8001a42:	4c04      	ldr	r4, [pc, #16]	; (8001a54 <vRST_18H+0x14>)
 8001a44:	4621      	mov	r1, r4
 8001a46:	1ea0      	subs	r0, r4, #2
 8001a48:	f001 fb10 	bl	800306c <vGBFunctionPUSH>
 8001a4c:	2318      	movs	r3, #24
 8001a4e:	8023      	strh	r3, [r4, #0]
 8001a50:	bd10      	pop	{r4, pc}
 8001a52:	bf00      	nop
 8001a54:	24001266 	.word	0x24001266

08001a58 <vPUSH_HL>:
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
 8001a58:	4901      	ldr	r1, [pc, #4]	; (8001a60 <vPUSH_HL+0x8>)
 8001a5a:	1c88      	adds	r0, r1, #2
 8001a5c:	f001 bb06 	b.w	800306c <vGBFunctionPUSH>
 8001a60:	24001262 	.word	0x24001262

08001a64 <vRST20H>:
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
 8001a64:	b510      	push	{r4, lr}
 8001a66:	4c04      	ldr	r4, [pc, #16]	; (8001a78 <vRST20H+0x14>)
 8001a68:	4621      	mov	r1, r4
 8001a6a:	1ea0      	subs	r0, r4, #2
 8001a6c:	f001 fafe 	bl	800306c <vGBFunctionPUSH>
 8001a70:	2320      	movs	r3, #32
 8001a72:	8023      	strh	r3, [r4, #0]
 8001a74:	bd10      	pop	{r4, pc}
 8001a76:	bf00      	nop
 8001a78:	24001266 	.word	0x24001266

08001a7c <vRST_28H>:
void vRST_28H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0028;}
 8001a7c:	b510      	push	{r4, lr}
 8001a7e:	4c04      	ldr	r4, [pc, #16]	; (8001a90 <vRST_28H+0x14>)
 8001a80:	4621      	mov	r1, r4
 8001a82:	1ea0      	subs	r0, r4, #2
 8001a84:	f001 faf2 	bl	800306c <vGBFunctionPUSH>
 8001a88:	2328      	movs	r3, #40	; 0x28
 8001a8a:	8023      	strh	r3, [r4, #0]
 8001a8c:	bd10      	pop	{r4, pc}
 8001a8e:	bf00      	nop
 8001a90:	24001266 	.word	0x24001266

08001a94 <vPUSH_AF>:
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
 8001a94:	4902      	ldr	r1, [pc, #8]	; (8001aa0 <vPUSH_AF+0xc>)
 8001a96:	f101 0008 	add.w	r0, r1, #8
 8001a9a:	f001 bae7 	b.w	800306c <vGBFunctionPUSH>
 8001a9e:	bf00      	nop
 8001aa0:	2400125c 	.word	0x2400125c

08001aa4 <vRST_30H>:
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
 8001aa4:	b510      	push	{r4, lr}
 8001aa6:	4c04      	ldr	r4, [pc, #16]	; (8001ab8 <vRST_30H+0x14>)
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	1ea0      	subs	r0, r4, #2
 8001aac:	f001 fade 	bl	800306c <vGBFunctionPUSH>
 8001ab0:	2330      	movs	r3, #48	; 0x30
 8001ab2:	8023      	strh	r3, [r4, #0]
 8001ab4:	bd10      	pop	{r4, pc}
 8001ab6:	bf00      	nop
 8001ab8:	24001266 	.word	0x24001266

08001abc <vRST_38H>:
void vRST_38H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0038;}
 8001abc:	b510      	push	{r4, lr}
 8001abe:	4c04      	ldr	r4, [pc, #16]	; (8001ad0 <vRST_38H+0x14>)
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	1ea0      	subs	r0, r4, #2
 8001ac4:	f001 fad2 	bl	800306c <vGBFunctionPUSH>
 8001ac8:	2338      	movs	r3, #56	; 0x38
 8001aca:	8023      	strh	r3, [r4, #0]
 8001acc:	bd10      	pop	{r4, pc}
 8001ace:	bf00      	nop
 8001ad0:	24001266 	.word	0x24001266

08001ad4 <vJP_Z_a16>:
void vJP_Z_a16(){     customDuration = vGBFunctionJP_Z_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001ad4:	b570      	push	{r4, r5, r6, lr}
 8001ad6:	4d0d      	ldr	r5, [pc, #52]	; (8001b0c <vJP_Z_a16+0x38>)
 8001ad8:	8968      	ldrh	r0, [r5, #10]
 8001ada:	462c      	mov	r4, r5
 8001adc:	3802      	subs	r0, #2
 8001ade:	b280      	uxth	r0, r0
 8001ae0:	f001 fd4c 	bl	800357c <ucGBMemoryRead>
 8001ae4:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001ae8:	4606      	mov	r6, r0
 8001aea:	1e58      	subs	r0, r3, #1
 8001aec:	b280      	uxth	r0, r0
 8001aee:	f001 fd45 	bl	800357c <ucGBMemoryRead>
 8001af2:	4601      	mov	r1, r0
 8001af4:	4630      	mov	r0, r6
 8001af6:	f001 f837 	bl	8002b68 <concat_16bit_bigEndian>
 8001afa:	4629      	mov	r1, r5
 8001afc:	4602      	mov	r2, r0
 8001afe:	4620      	mov	r0, r4
 8001b00:	f001 fae4 	bl	80030cc <vGBFunctionJP_Z_a16>
 8001b04:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <vJP_Z_a16+0x3c>)
 8001b06:	7018      	strb	r0, [r3, #0]
 8001b08:	bd70      	pop	{r4, r5, r6, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2400125c 	.word	0x2400125c
 8001b10:	24001094 	.word	0x24001094

08001b14 <vCALL_Z_a16>:
void vCALL_Z_a16(){   customDuration = vGBFunctionCALL_Z_a16(&reg.PC, &reg.F, &reg.SP);}
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <vCALL_Z_a16+0x14>)
 8001b16:	b508      	push	{r3, lr}
 8001b18:	f1a2 0108 	sub.w	r1, r2, #8
 8001b1c:	1c90      	adds	r0, r2, #2
 8001b1e:	f001 fadd 	bl	80030dc <vGBFunctionCALL_Z_a16>
 8001b22:	4b02      	ldr	r3, [pc, #8]	; (8001b2c <vCALL_Z_a16+0x18>)
 8001b24:	7018      	strb	r0, [r3, #0]
 8001b26:	bd08      	pop	{r3, pc}
 8001b28:	24001264 	.word	0x24001264
 8001b2c:	24001094 	.word	0x24001094

08001b30 <vJP_NC_a16>:
void vJP_NC_a16(){    customDuration = vGBFunctionJP_NC_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b30:	b570      	push	{r4, r5, r6, lr}
 8001b32:	4d0d      	ldr	r5, [pc, #52]	; (8001b68 <vJP_NC_a16+0x38>)
 8001b34:	8968      	ldrh	r0, [r5, #10]
 8001b36:	462c      	mov	r4, r5
 8001b38:	3802      	subs	r0, #2
 8001b3a:	b280      	uxth	r0, r0
 8001b3c:	f001 fd1e 	bl	800357c <ucGBMemoryRead>
 8001b40:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001b44:	4606      	mov	r6, r0
 8001b46:	1e58      	subs	r0, r3, #1
 8001b48:	b280      	uxth	r0, r0
 8001b4a:	f001 fd17 	bl	800357c <ucGBMemoryRead>
 8001b4e:	4601      	mov	r1, r0
 8001b50:	4630      	mov	r0, r6
 8001b52:	f001 f809 	bl	8002b68 <concat_16bit_bigEndian>
 8001b56:	4629      	mov	r1, r5
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f001 fada 	bl	8003114 <vGBFunctionJP_NC_a16>
 8001b60:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <vJP_NC_a16+0x3c>)
 8001b62:	7018      	strb	r0, [r3, #0]
 8001b64:	bd70      	pop	{r4, r5, r6, pc}
 8001b66:	bf00      	nop
 8001b68:	2400125c 	.word	0x2400125c
 8001b6c:	24001094 	.word	0x24001094

08001b70 <vCALL_NC_a16>:
void vCALL_NC_a16(){  customDuration = vGBFunctionCALL_NC_a16(&reg.PC, &reg.F, &reg.SP);}
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <vCALL_NC_a16+0x14>)
 8001b72:	b508      	push	{r3, lr}
 8001b74:	f1a2 0108 	sub.w	r1, r2, #8
 8001b78:	1c90      	adds	r0, r2, #2
 8001b7a:	f001 fad3 	bl	8003124 <vGBFunctionCALL_NC_a16>
 8001b7e:	4b02      	ldr	r3, [pc, #8]	; (8001b88 <vCALL_NC_a16+0x18>)
 8001b80:	7018      	strb	r0, [r3, #0]
 8001b82:	bd08      	pop	{r3, pc}
 8001b84:	24001264 	.word	0x24001264
 8001b88:	24001094 	.word	0x24001094

08001b8c <vJP_C_a16>:
void vJP_C_a16(){     customDuration = vGBFunctionJP_C_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b8c:	b570      	push	{r4, r5, r6, lr}
 8001b8e:	4d0d      	ldr	r5, [pc, #52]	; (8001bc4 <vJP_C_a16+0x38>)
 8001b90:	8968      	ldrh	r0, [r5, #10]
 8001b92:	462c      	mov	r4, r5
 8001b94:	3802      	subs	r0, #2
 8001b96:	b280      	uxth	r0, r0
 8001b98:	f001 fcf0 	bl	800357c <ucGBMemoryRead>
 8001b9c:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001ba0:	4606      	mov	r6, r0
 8001ba2:	1e58      	subs	r0, r3, #1
 8001ba4:	b280      	uxth	r0, r0
 8001ba6:	f001 fce9 	bl	800357c <ucGBMemoryRead>
 8001baa:	4601      	mov	r1, r0
 8001bac:	4630      	mov	r0, r6
 8001bae:	f000 ffdb 	bl	8002b68 <concat_16bit_bigEndian>
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f001 fad0 	bl	800315c <vGBFunctionJP_C_a16>
 8001bbc:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <vJP_C_a16+0x3c>)
 8001bbe:	7018      	strb	r0, [r3, #0]
 8001bc0:	bd70      	pop	{r4, r5, r6, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2400125c 	.word	0x2400125c
 8001bc8:	24001094 	.word	0x24001094

08001bcc <vCALL_C_a16>:
void vCALL_C_a16(){   customDuration = vGBFunctionCALL_C_a16(&reg.PC, &reg.F, &reg.SP);}
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <vCALL_C_a16+0x14>)
 8001bce:	b508      	push	{r3, lr}
 8001bd0:	f1a2 0108 	sub.w	r1, r2, #8
 8001bd4:	1c90      	adds	r0, r2, #2
 8001bd6:	f001 fac9 	bl	800316c <vGBFunctionCALL_C_a16>
 8001bda:	4b02      	ldr	r3, [pc, #8]	; (8001be4 <vCALL_C_a16+0x18>)
 8001bdc:	7018      	strb	r0, [r3, #0]
 8001bde:	bd08      	pop	{r3, pc}
 8001be0:	24001264 	.word	0x24001264
 8001be4:	24001094 	.word	0x24001094

08001be8 <vADDs_SP_r8>:
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001be8:	b510      	push	{r4, lr}
 8001bea:	4c07      	ldr	r4, [pc, #28]	; (8001c08 <vADDs_SP_r8+0x20>)
 8001bec:	8960      	ldrh	r0, [r4, #10]
 8001bee:	3801      	subs	r0, #1
 8001bf0:	b280      	uxth	r0, r0
 8001bf2:	f001 fcc3 	bl	800357c <ucGBMemoryRead>
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f104 0008 	add.w	r0, r4, #8
 8001bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c02:	f001 bacf 	b.w	80031a4 <vGBFunctionADD_SP_r8>
 8001c06:	bf00      	nop
 8001c08:	2400125c 	.word	0x2400125c

08001c0c <vLDs_HL_SP_r8>:
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001c0c:	b510      	push	{r4, lr}
 8001c0e:	4c07      	ldr	r4, [pc, #28]	; (8001c2c <vLDs_HL_SP_r8+0x20>)
 8001c10:	8960      	ldrh	r0, [r4, #10]
 8001c12:	3801      	subs	r0, #1
 8001c14:	b280      	uxth	r0, r0
 8001c16:	f001 fcb1 	bl	800357c <ucGBMemoryRead>
 8001c1a:	4622      	mov	r2, r4
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f104 0108 	add.w	r1, r4, #8
 8001c22:	1da0      	adds	r0, r4, #6
 8001c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c28:	f001 bae4 	b.w	80031f4 <vGBFunctionLD_HL_SP_r8>
 8001c2c:	2400125c 	.word	0x2400125c

08001c30 <vRLC_B>:
void vRLC_B(){        reg.B = ucGBFunctionRLC(reg.B, &reg.F);}
 8001c30:	b510      	push	{r4, lr}
 8001c32:	4c03      	ldr	r4, [pc, #12]	; (8001c40 <vRLC_B+0x10>)
 8001c34:	4621      	mov	r1, r4
 8001c36:	78e0      	ldrb	r0, [r4, #3]
 8001c38:	f001 fb04 	bl	8003244 <ucGBFunctionRLC>
 8001c3c:	70e0      	strb	r0, [r4, #3]
 8001c3e:	bd10      	pop	{r4, pc}
 8001c40:	2400125c 	.word	0x2400125c

08001c44 <vRLC_C>:
void vRLC_C(){        reg.C = ucGBFunctionRLC(reg.C, &reg.F);}
 8001c44:	b510      	push	{r4, lr}
 8001c46:	4c03      	ldr	r4, [pc, #12]	; (8001c54 <vRLC_C+0x10>)
 8001c48:	4621      	mov	r1, r4
 8001c4a:	78a0      	ldrb	r0, [r4, #2]
 8001c4c:	f001 fafa 	bl	8003244 <ucGBFunctionRLC>
 8001c50:	70a0      	strb	r0, [r4, #2]
 8001c52:	bd10      	pop	{r4, pc}
 8001c54:	2400125c 	.word	0x2400125c

08001c58 <vRLC_D>:
void vRLC_D(){        reg.D = ucGBFunctionRLC(reg.D, &reg.F);}
 8001c58:	b510      	push	{r4, lr}
 8001c5a:	4c03      	ldr	r4, [pc, #12]	; (8001c68 <vRLC_D+0x10>)
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	7960      	ldrb	r0, [r4, #5]
 8001c60:	f001 faf0 	bl	8003244 <ucGBFunctionRLC>
 8001c64:	7160      	strb	r0, [r4, #5]
 8001c66:	bd10      	pop	{r4, pc}
 8001c68:	2400125c 	.word	0x2400125c

08001c6c <vRLC_E>:
void vRLC_E(){        reg.E = ucGBFunctionRLC(reg.E, &reg.F);}
 8001c6c:	b510      	push	{r4, lr}
 8001c6e:	4c03      	ldr	r4, [pc, #12]	; (8001c7c <vRLC_E+0x10>)
 8001c70:	4621      	mov	r1, r4
 8001c72:	7920      	ldrb	r0, [r4, #4]
 8001c74:	f001 fae6 	bl	8003244 <ucGBFunctionRLC>
 8001c78:	7120      	strb	r0, [r4, #4]
 8001c7a:	bd10      	pop	{r4, pc}
 8001c7c:	2400125c 	.word	0x2400125c

08001c80 <vRLC_H>:
void vRLC_H(){        reg.H = ucGBFunctionRLC(reg.H, &reg.F);}
 8001c80:	b510      	push	{r4, lr}
 8001c82:	4c03      	ldr	r4, [pc, #12]	; (8001c90 <vRLC_H+0x10>)
 8001c84:	4621      	mov	r1, r4
 8001c86:	79e0      	ldrb	r0, [r4, #7]
 8001c88:	f001 fadc 	bl	8003244 <ucGBFunctionRLC>
 8001c8c:	71e0      	strb	r0, [r4, #7]
 8001c8e:	bd10      	pop	{r4, pc}
 8001c90:	2400125c 	.word	0x2400125c

08001c94 <vRLC_L>:
void vRLC_L(){        reg.L = ucGBFunctionRLC(reg.L, &reg.F);}
 8001c94:	b510      	push	{r4, lr}
 8001c96:	4c03      	ldr	r4, [pc, #12]	; (8001ca4 <vRLC_L+0x10>)
 8001c98:	4621      	mov	r1, r4
 8001c9a:	79a0      	ldrb	r0, [r4, #6]
 8001c9c:	f001 fad2 	bl	8003244 <ucGBFunctionRLC>
 8001ca0:	71a0      	strb	r0, [r4, #6]
 8001ca2:	bd10      	pop	{r4, pc}
 8001ca4:	2400125c 	.word	0x2400125c

08001ca8 <vRLC_HL>:
void vRLC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRLC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001ca8:	b538      	push	{r3, r4, r5, lr}
 8001caa:	4d07      	ldr	r5, [pc, #28]	; (8001cc8 <vRLC_HL+0x20>)
 8001cac:	88ec      	ldrh	r4, [r5, #6]
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f001 fc64 	bl	800357c <ucGBMemoryRead>
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f001 fac5 	bl	8003244 <ucGBFunctionRLC>
 8001cba:	4601      	mov	r1, r0
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cc2:	f001 bbf9 	b.w	80034b8 <vGBMemoryWrite>
 8001cc6:	bf00      	nop
 8001cc8:	2400125c 	.word	0x2400125c

08001ccc <vRLC_A>:
void vRLC_A(){        reg.A = ucGBFunctionRLC(reg.A, &reg.F);}
 8001ccc:	b510      	push	{r4, lr}
 8001cce:	4c03      	ldr	r4, [pc, #12]	; (8001cdc <vRLC_A+0x10>)
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	7860      	ldrb	r0, [r4, #1]
 8001cd4:	f001 fab6 	bl	8003244 <ucGBFunctionRLC>
 8001cd8:	7060      	strb	r0, [r4, #1]
 8001cda:	bd10      	pop	{r4, pc}
 8001cdc:	2400125c 	.word	0x2400125c

08001ce0 <vRRC_B>:
void vRRC_B(){        reg.B = ucGBFunctionRRC(reg.B, &reg.F);}
 8001ce0:	b510      	push	{r4, lr}
 8001ce2:	4c03      	ldr	r4, [pc, #12]	; (8001cf0 <vRRC_B+0x10>)
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	78e0      	ldrb	r0, [r4, #3]
 8001ce8:	f001 fac8 	bl	800327c <ucGBFunctionRRC>
 8001cec:	70e0      	strb	r0, [r4, #3]
 8001cee:	bd10      	pop	{r4, pc}
 8001cf0:	2400125c 	.word	0x2400125c

08001cf4 <vRRC_C>:
void vRRC_C(){        reg.C = ucGBFunctionRRC(reg.C, &reg.F);}
 8001cf4:	b510      	push	{r4, lr}
 8001cf6:	4c03      	ldr	r4, [pc, #12]	; (8001d04 <vRRC_C+0x10>)
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	78a0      	ldrb	r0, [r4, #2]
 8001cfc:	f001 fabe 	bl	800327c <ucGBFunctionRRC>
 8001d00:	70a0      	strb	r0, [r4, #2]
 8001d02:	bd10      	pop	{r4, pc}
 8001d04:	2400125c 	.word	0x2400125c

08001d08 <vRRC_D>:
void vRRC_D(){        reg.D = ucGBFunctionRRC(reg.D, &reg.F);}
 8001d08:	b510      	push	{r4, lr}
 8001d0a:	4c03      	ldr	r4, [pc, #12]	; (8001d18 <vRRC_D+0x10>)
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	7960      	ldrb	r0, [r4, #5]
 8001d10:	f001 fab4 	bl	800327c <ucGBFunctionRRC>
 8001d14:	7160      	strb	r0, [r4, #5]
 8001d16:	bd10      	pop	{r4, pc}
 8001d18:	2400125c 	.word	0x2400125c

08001d1c <vRRC_E>:
void vRRC_E(){        reg.E = ucGBFunctionRRC(reg.E, &reg.F);}
 8001d1c:	b510      	push	{r4, lr}
 8001d1e:	4c03      	ldr	r4, [pc, #12]	; (8001d2c <vRRC_E+0x10>)
 8001d20:	4621      	mov	r1, r4
 8001d22:	7920      	ldrb	r0, [r4, #4]
 8001d24:	f001 faaa 	bl	800327c <ucGBFunctionRRC>
 8001d28:	7120      	strb	r0, [r4, #4]
 8001d2a:	bd10      	pop	{r4, pc}
 8001d2c:	2400125c 	.word	0x2400125c

08001d30 <vRRC_H>:
void vRRC_H(){        reg.H = ucGBFunctionRRC(reg.H, &reg.F);}
 8001d30:	b510      	push	{r4, lr}
 8001d32:	4c03      	ldr	r4, [pc, #12]	; (8001d40 <vRRC_H+0x10>)
 8001d34:	4621      	mov	r1, r4
 8001d36:	79e0      	ldrb	r0, [r4, #7]
 8001d38:	f001 faa0 	bl	800327c <ucGBFunctionRRC>
 8001d3c:	71e0      	strb	r0, [r4, #7]
 8001d3e:	bd10      	pop	{r4, pc}
 8001d40:	2400125c 	.word	0x2400125c

08001d44 <vRRC_L>:
void vRRC_L(){        reg.L = ucGBFunctionRRC(reg.L, &reg.F);}
 8001d44:	b510      	push	{r4, lr}
 8001d46:	4c03      	ldr	r4, [pc, #12]	; (8001d54 <vRRC_L+0x10>)
 8001d48:	4621      	mov	r1, r4
 8001d4a:	79a0      	ldrb	r0, [r4, #6]
 8001d4c:	f001 fa96 	bl	800327c <ucGBFunctionRRC>
 8001d50:	71a0      	strb	r0, [r4, #6]
 8001d52:	bd10      	pop	{r4, pc}
 8001d54:	2400125c 	.word	0x2400125c

08001d58 <vRRC_HL>:
void vRRC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRRC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001d58:	b538      	push	{r3, r4, r5, lr}
 8001d5a:	4d07      	ldr	r5, [pc, #28]	; (8001d78 <vRRC_HL+0x20>)
 8001d5c:	88ec      	ldrh	r4, [r5, #6]
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f001 fc0c 	bl	800357c <ucGBMemoryRead>
 8001d64:	4629      	mov	r1, r5
 8001d66:	f001 fa89 	bl	800327c <ucGBFunctionRRC>
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d72:	f001 bba1 	b.w	80034b8 <vGBMemoryWrite>
 8001d76:	bf00      	nop
 8001d78:	2400125c 	.word	0x2400125c

08001d7c <vRRC_A>:
void vRRC_A(){        reg.A = ucGBFunctionRRC(reg.A, &reg.F);}
 8001d7c:	b510      	push	{r4, lr}
 8001d7e:	4c03      	ldr	r4, [pc, #12]	; (8001d8c <vRRC_A+0x10>)
 8001d80:	4621      	mov	r1, r4
 8001d82:	7860      	ldrb	r0, [r4, #1]
 8001d84:	f001 fa7a 	bl	800327c <ucGBFunctionRRC>
 8001d88:	7060      	strb	r0, [r4, #1]
 8001d8a:	bd10      	pop	{r4, pc}
 8001d8c:	2400125c 	.word	0x2400125c

08001d90 <vRL_B>:
void vRL_B(){         reg.B = ucGBFunctionRL(reg.B, &reg.F);}
 8001d90:	b510      	push	{r4, lr}
 8001d92:	4c03      	ldr	r4, [pc, #12]	; (8001da0 <vRL_B+0x10>)
 8001d94:	4621      	mov	r1, r4
 8001d96:	78e0      	ldrb	r0, [r4, #3]
 8001d98:	f001 fa8c 	bl	80032b4 <ucGBFunctionRL>
 8001d9c:	70e0      	strb	r0, [r4, #3]
 8001d9e:	bd10      	pop	{r4, pc}
 8001da0:	2400125c 	.word	0x2400125c

08001da4 <vRL_C>:
void vRL_C(){         reg.C = ucGBFunctionRL(reg.C, &reg.F);}
 8001da4:	b510      	push	{r4, lr}
 8001da6:	4c03      	ldr	r4, [pc, #12]	; (8001db4 <vRL_C+0x10>)
 8001da8:	4621      	mov	r1, r4
 8001daa:	78a0      	ldrb	r0, [r4, #2]
 8001dac:	f001 fa82 	bl	80032b4 <ucGBFunctionRL>
 8001db0:	70a0      	strb	r0, [r4, #2]
 8001db2:	bd10      	pop	{r4, pc}
 8001db4:	2400125c 	.word	0x2400125c

08001db8 <vRL_D>:
void vRL_D(){         reg.D = ucGBFunctionRL(reg.D, &reg.F);}
 8001db8:	b510      	push	{r4, lr}
 8001dba:	4c03      	ldr	r4, [pc, #12]	; (8001dc8 <vRL_D+0x10>)
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	7960      	ldrb	r0, [r4, #5]
 8001dc0:	f001 fa78 	bl	80032b4 <ucGBFunctionRL>
 8001dc4:	7160      	strb	r0, [r4, #5]
 8001dc6:	bd10      	pop	{r4, pc}
 8001dc8:	2400125c 	.word	0x2400125c

08001dcc <vRL_E>:
void vRL_E(){         reg.E = ucGBFunctionRL(reg.E, &reg.F);}
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	4c03      	ldr	r4, [pc, #12]	; (8001ddc <vRL_E+0x10>)
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	7920      	ldrb	r0, [r4, #4]
 8001dd4:	f001 fa6e 	bl	80032b4 <ucGBFunctionRL>
 8001dd8:	7120      	strb	r0, [r4, #4]
 8001dda:	bd10      	pop	{r4, pc}
 8001ddc:	2400125c 	.word	0x2400125c

08001de0 <vRL_H>:
void vRL_H(){         reg.H = ucGBFunctionRL(reg.H, &reg.F);}
 8001de0:	b510      	push	{r4, lr}
 8001de2:	4c03      	ldr	r4, [pc, #12]	; (8001df0 <vRL_H+0x10>)
 8001de4:	4621      	mov	r1, r4
 8001de6:	79e0      	ldrb	r0, [r4, #7]
 8001de8:	f001 fa64 	bl	80032b4 <ucGBFunctionRL>
 8001dec:	71e0      	strb	r0, [r4, #7]
 8001dee:	bd10      	pop	{r4, pc}
 8001df0:	2400125c 	.word	0x2400125c

08001df4 <vRL_L>:
void vRL_L(){         reg.L = ucGBFunctionRL(reg.L, &reg.F);}
 8001df4:	b510      	push	{r4, lr}
 8001df6:	4c03      	ldr	r4, [pc, #12]	; (8001e04 <vRL_L+0x10>)
 8001df8:	4621      	mov	r1, r4
 8001dfa:	79a0      	ldrb	r0, [r4, #6]
 8001dfc:	f001 fa5a 	bl	80032b4 <ucGBFunctionRL>
 8001e00:	71a0      	strb	r0, [r4, #6]
 8001e02:	bd10      	pop	{r4, pc}
 8001e04:	2400125c 	.word	0x2400125c

08001e08 <vRL_HL>:
void vRL_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8001e08:	b538      	push	{r3, r4, r5, lr}
 8001e0a:	4d07      	ldr	r5, [pc, #28]	; (8001e28 <vRL_HL+0x20>)
 8001e0c:	88ec      	ldrh	r4, [r5, #6]
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f001 fbb4 	bl	800357c <ucGBMemoryRead>
 8001e14:	4629      	mov	r1, r5
 8001e16:	f001 fa4d 	bl	80032b4 <ucGBFunctionRL>
 8001e1a:	4601      	mov	r1, r0
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e22:	f001 bb49 	b.w	80034b8 <vGBMemoryWrite>
 8001e26:	bf00      	nop
 8001e28:	2400125c 	.word	0x2400125c

08001e2c <vRL_A>:
void vRL_A(){         reg.A = ucGBFunctionRL(reg.A, &reg.F);}
 8001e2c:	b510      	push	{r4, lr}
 8001e2e:	4c03      	ldr	r4, [pc, #12]	; (8001e3c <vRL_A+0x10>)
 8001e30:	4621      	mov	r1, r4
 8001e32:	7860      	ldrb	r0, [r4, #1]
 8001e34:	f001 fa3e 	bl	80032b4 <ucGBFunctionRL>
 8001e38:	7060      	strb	r0, [r4, #1]
 8001e3a:	bd10      	pop	{r4, pc}
 8001e3c:	2400125c 	.word	0x2400125c

08001e40 <vRR_B>:
void vRR_B(){         reg.B = ucGBFunctionRR(reg.B, &reg.F);}
 8001e40:	b510      	push	{r4, lr}
 8001e42:	4c03      	ldr	r4, [pc, #12]	; (8001e50 <vRR_B+0x10>)
 8001e44:	4621      	mov	r1, r4
 8001e46:	78e0      	ldrb	r0, [r4, #3]
 8001e48:	f001 fa4e 	bl	80032e8 <ucGBFunctionRR>
 8001e4c:	70e0      	strb	r0, [r4, #3]
 8001e4e:	bd10      	pop	{r4, pc}
 8001e50:	2400125c 	.word	0x2400125c

08001e54 <vRR_C>:
void vRR_C(){         reg.C = ucGBFunctionRR(reg.C, &reg.F);}
 8001e54:	b510      	push	{r4, lr}
 8001e56:	4c03      	ldr	r4, [pc, #12]	; (8001e64 <vRR_C+0x10>)
 8001e58:	4621      	mov	r1, r4
 8001e5a:	78a0      	ldrb	r0, [r4, #2]
 8001e5c:	f001 fa44 	bl	80032e8 <ucGBFunctionRR>
 8001e60:	70a0      	strb	r0, [r4, #2]
 8001e62:	bd10      	pop	{r4, pc}
 8001e64:	2400125c 	.word	0x2400125c

08001e68 <vRR_D>:
void vRR_D(){         reg.D = ucGBFunctionRR(reg.D, &reg.F);}
 8001e68:	b510      	push	{r4, lr}
 8001e6a:	4c03      	ldr	r4, [pc, #12]	; (8001e78 <vRR_D+0x10>)
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	7960      	ldrb	r0, [r4, #5]
 8001e70:	f001 fa3a 	bl	80032e8 <ucGBFunctionRR>
 8001e74:	7160      	strb	r0, [r4, #5]
 8001e76:	bd10      	pop	{r4, pc}
 8001e78:	2400125c 	.word	0x2400125c

08001e7c <vRR_E>:
void vRR_E(){         reg.E = ucGBFunctionRR(reg.E, &reg.F);}
 8001e7c:	b510      	push	{r4, lr}
 8001e7e:	4c03      	ldr	r4, [pc, #12]	; (8001e8c <vRR_E+0x10>)
 8001e80:	4621      	mov	r1, r4
 8001e82:	7920      	ldrb	r0, [r4, #4]
 8001e84:	f001 fa30 	bl	80032e8 <ucGBFunctionRR>
 8001e88:	7120      	strb	r0, [r4, #4]
 8001e8a:	bd10      	pop	{r4, pc}
 8001e8c:	2400125c 	.word	0x2400125c

08001e90 <vRR_H>:
void vRR_H(){         reg.H = ucGBFunctionRR(reg.H, &reg.F);}
 8001e90:	b510      	push	{r4, lr}
 8001e92:	4c03      	ldr	r4, [pc, #12]	; (8001ea0 <vRR_H+0x10>)
 8001e94:	4621      	mov	r1, r4
 8001e96:	79e0      	ldrb	r0, [r4, #7]
 8001e98:	f001 fa26 	bl	80032e8 <ucGBFunctionRR>
 8001e9c:	71e0      	strb	r0, [r4, #7]
 8001e9e:	bd10      	pop	{r4, pc}
 8001ea0:	2400125c 	.word	0x2400125c

08001ea4 <vRR_L>:
void vRR_L(){         reg.L = ucGBFunctionRR(reg.L, &reg.F);}
 8001ea4:	b510      	push	{r4, lr}
 8001ea6:	4c03      	ldr	r4, [pc, #12]	; (8001eb4 <vRR_L+0x10>)
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	79a0      	ldrb	r0, [r4, #6]
 8001eac:	f001 fa1c 	bl	80032e8 <ucGBFunctionRR>
 8001eb0:	71a0      	strb	r0, [r4, #6]
 8001eb2:	bd10      	pop	{r4, pc}
 8001eb4:	2400125c 	.word	0x2400125c

08001eb8 <vRR_HL>:
void vRR_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRR(ucGBMemoryRead(reg.HL), &reg.F));}
 8001eb8:	b538      	push	{r3, r4, r5, lr}
 8001eba:	4d07      	ldr	r5, [pc, #28]	; (8001ed8 <vRR_HL+0x20>)
 8001ebc:	88ec      	ldrh	r4, [r5, #6]
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f001 fb5c 	bl	800357c <ucGBMemoryRead>
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	f001 fa0f 	bl	80032e8 <ucGBFunctionRR>
 8001eca:	4601      	mov	r1, r0
 8001ecc:	4620      	mov	r0, r4
 8001ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ed2:	f001 baf1 	b.w	80034b8 <vGBMemoryWrite>
 8001ed6:	bf00      	nop
 8001ed8:	2400125c 	.word	0x2400125c

08001edc <vRR_A>:
void vRR_A(){         reg.A = ucGBFunctionRR(reg.A, &reg.F);}
 8001edc:	b510      	push	{r4, lr}
 8001ede:	4c03      	ldr	r4, [pc, #12]	; (8001eec <vRR_A+0x10>)
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	7860      	ldrb	r0, [r4, #1]
 8001ee4:	f001 fa00 	bl	80032e8 <ucGBFunctionRR>
 8001ee8:	7060      	strb	r0, [r4, #1]
 8001eea:	bd10      	pop	{r4, pc}
 8001eec:	2400125c 	.word	0x2400125c

08001ef0 <vSLA_B>:
void vSLA_B(){        reg.B = ucGBFunctionSLA(reg.B, &reg.F);}
 8001ef0:	b510      	push	{r4, lr}
 8001ef2:	4c03      	ldr	r4, [pc, #12]	; (8001f00 <vSLA_B+0x10>)
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	78e0      	ldrb	r0, [r4, #3]
 8001ef8:	f001 fa12 	bl	8003320 <ucGBFunctionSLA>
 8001efc:	70e0      	strb	r0, [r4, #3]
 8001efe:	bd10      	pop	{r4, pc}
 8001f00:	2400125c 	.word	0x2400125c

08001f04 <vSLA_C>:
void vSLA_C(){        reg.C = ucGBFunctionSLA(reg.C, &reg.F);}
 8001f04:	b510      	push	{r4, lr}
 8001f06:	4c03      	ldr	r4, [pc, #12]	; (8001f14 <vSLA_C+0x10>)
 8001f08:	4621      	mov	r1, r4
 8001f0a:	78a0      	ldrb	r0, [r4, #2]
 8001f0c:	f001 fa08 	bl	8003320 <ucGBFunctionSLA>
 8001f10:	70a0      	strb	r0, [r4, #2]
 8001f12:	bd10      	pop	{r4, pc}
 8001f14:	2400125c 	.word	0x2400125c

08001f18 <vSLA_D>:
void vSLA_D(){        reg.D = ucGBFunctionSLA(reg.D, &reg.F);}
 8001f18:	b510      	push	{r4, lr}
 8001f1a:	4c03      	ldr	r4, [pc, #12]	; (8001f28 <vSLA_D+0x10>)
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	7960      	ldrb	r0, [r4, #5]
 8001f20:	f001 f9fe 	bl	8003320 <ucGBFunctionSLA>
 8001f24:	7160      	strb	r0, [r4, #5]
 8001f26:	bd10      	pop	{r4, pc}
 8001f28:	2400125c 	.word	0x2400125c

08001f2c <vSLA_E>:
void vSLA_E(){        reg.E = ucGBFunctionSLA(reg.E, &reg.F);}
 8001f2c:	b510      	push	{r4, lr}
 8001f2e:	4c03      	ldr	r4, [pc, #12]	; (8001f3c <vSLA_E+0x10>)
 8001f30:	4621      	mov	r1, r4
 8001f32:	7920      	ldrb	r0, [r4, #4]
 8001f34:	f001 f9f4 	bl	8003320 <ucGBFunctionSLA>
 8001f38:	7120      	strb	r0, [r4, #4]
 8001f3a:	bd10      	pop	{r4, pc}
 8001f3c:	2400125c 	.word	0x2400125c

08001f40 <vSLA_H>:
void vSLA_H(){        reg.H = ucGBFunctionSLA(reg.H, &reg.F);}
 8001f40:	b510      	push	{r4, lr}
 8001f42:	4c03      	ldr	r4, [pc, #12]	; (8001f50 <vSLA_H+0x10>)
 8001f44:	4621      	mov	r1, r4
 8001f46:	79e0      	ldrb	r0, [r4, #7]
 8001f48:	f001 f9ea 	bl	8003320 <ucGBFunctionSLA>
 8001f4c:	71e0      	strb	r0, [r4, #7]
 8001f4e:	bd10      	pop	{r4, pc}
 8001f50:	2400125c 	.word	0x2400125c

08001f54 <vSLA_L>:
void vSLA_L(){        reg.L = ucGBFunctionSLA(reg.L, &reg.F);}
 8001f54:	b510      	push	{r4, lr}
 8001f56:	4c03      	ldr	r4, [pc, #12]	; (8001f64 <vSLA_L+0x10>)
 8001f58:	4621      	mov	r1, r4
 8001f5a:	79a0      	ldrb	r0, [r4, #6]
 8001f5c:	f001 f9e0 	bl	8003320 <ucGBFunctionSLA>
 8001f60:	71a0      	strb	r0, [r4, #6]
 8001f62:	bd10      	pop	{r4, pc}
 8001f64:	2400125c 	.word	0x2400125c

08001f68 <vSLA_HL>:
void vSLA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSLA(ucGBMemoryRead(reg.HL), &reg.F));}
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4d07      	ldr	r5, [pc, #28]	; (8001f88 <vSLA_HL+0x20>)
 8001f6c:	88ec      	ldrh	r4, [r5, #6]
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f001 fb04 	bl	800357c <ucGBMemoryRead>
 8001f74:	4629      	mov	r1, r5
 8001f76:	f001 f9d3 	bl	8003320 <ucGBFunctionSLA>
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f82:	f001 ba99 	b.w	80034b8 <vGBMemoryWrite>
 8001f86:	bf00      	nop
 8001f88:	2400125c 	.word	0x2400125c

08001f8c <vSLA_A>:
void vSLA_A(){        reg.A = ucGBFunctionSLA(reg.A, &reg.F);}
 8001f8c:	b510      	push	{r4, lr}
 8001f8e:	4c03      	ldr	r4, [pc, #12]	; (8001f9c <vSLA_A+0x10>)
 8001f90:	4621      	mov	r1, r4
 8001f92:	7860      	ldrb	r0, [r4, #1]
 8001f94:	f001 f9c4 	bl	8003320 <ucGBFunctionSLA>
 8001f98:	7060      	strb	r0, [r4, #1]
 8001f9a:	bd10      	pop	{r4, pc}
 8001f9c:	2400125c 	.word	0x2400125c

08001fa0 <vSRA_B>:
void vSRA_B(){        reg.B = ucGBFunctionSRA(reg.B, &reg.F);}
 8001fa0:	b510      	push	{r4, lr}
 8001fa2:	4c03      	ldr	r4, [pc, #12]	; (8001fb0 <vSRA_B+0x10>)
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	78e0      	ldrb	r0, [r4, #3]
 8001fa8:	f001 f9d2 	bl	8003350 <ucGBFunctionSRA>
 8001fac:	70e0      	strb	r0, [r4, #3]
 8001fae:	bd10      	pop	{r4, pc}
 8001fb0:	2400125c 	.word	0x2400125c

08001fb4 <vSRA_C>:
void vSRA_C(){        reg.C = ucGBFunctionSRA(reg.C, &reg.F);}
 8001fb4:	b510      	push	{r4, lr}
 8001fb6:	4c03      	ldr	r4, [pc, #12]	; (8001fc4 <vSRA_C+0x10>)
 8001fb8:	4621      	mov	r1, r4
 8001fba:	78a0      	ldrb	r0, [r4, #2]
 8001fbc:	f001 f9c8 	bl	8003350 <ucGBFunctionSRA>
 8001fc0:	70a0      	strb	r0, [r4, #2]
 8001fc2:	bd10      	pop	{r4, pc}
 8001fc4:	2400125c 	.word	0x2400125c

08001fc8 <vSRA_D>:
void vSRA_D(){        reg.D = ucGBFunctionSRA(reg.D, &reg.F);}
 8001fc8:	b510      	push	{r4, lr}
 8001fca:	4c03      	ldr	r4, [pc, #12]	; (8001fd8 <vSRA_D+0x10>)
 8001fcc:	4621      	mov	r1, r4
 8001fce:	7960      	ldrb	r0, [r4, #5]
 8001fd0:	f001 f9be 	bl	8003350 <ucGBFunctionSRA>
 8001fd4:	7160      	strb	r0, [r4, #5]
 8001fd6:	bd10      	pop	{r4, pc}
 8001fd8:	2400125c 	.word	0x2400125c

08001fdc <vSRA_E>:
void vSRA_E(){        reg.E = ucGBFunctionSRA(reg.E, &reg.F);}
 8001fdc:	b510      	push	{r4, lr}
 8001fde:	4c03      	ldr	r4, [pc, #12]	; (8001fec <vSRA_E+0x10>)
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	7920      	ldrb	r0, [r4, #4]
 8001fe4:	f001 f9b4 	bl	8003350 <ucGBFunctionSRA>
 8001fe8:	7120      	strb	r0, [r4, #4]
 8001fea:	bd10      	pop	{r4, pc}
 8001fec:	2400125c 	.word	0x2400125c

08001ff0 <vSRA_H>:
void vSRA_H(){        reg.H = ucGBFunctionSRA(reg.H, &reg.F);}
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	4c03      	ldr	r4, [pc, #12]	; (8002000 <vSRA_H+0x10>)
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	79e0      	ldrb	r0, [r4, #7]
 8001ff8:	f001 f9aa 	bl	8003350 <ucGBFunctionSRA>
 8001ffc:	71e0      	strb	r0, [r4, #7]
 8001ffe:	bd10      	pop	{r4, pc}
 8002000:	2400125c 	.word	0x2400125c

08002004 <vSRA_L>:
void vSRA_L(){        reg.L = ucGBFunctionSRA(reg.L, &reg.F);}
 8002004:	b510      	push	{r4, lr}
 8002006:	4c03      	ldr	r4, [pc, #12]	; (8002014 <vSRA_L+0x10>)
 8002008:	4621      	mov	r1, r4
 800200a:	79a0      	ldrb	r0, [r4, #6]
 800200c:	f001 f9a0 	bl	8003350 <ucGBFunctionSRA>
 8002010:	71a0      	strb	r0, [r4, #6]
 8002012:	bd10      	pop	{r4, pc}
 8002014:	2400125c 	.word	0x2400125c

08002018 <vSRA_HL>:
void vSRA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRA(ucGBMemoryRead(reg.HL), &reg.F));}
 8002018:	b538      	push	{r3, r4, r5, lr}
 800201a:	4d07      	ldr	r5, [pc, #28]	; (8002038 <vSRA_HL+0x20>)
 800201c:	88ec      	ldrh	r4, [r5, #6]
 800201e:	4620      	mov	r0, r4
 8002020:	f001 faac 	bl	800357c <ucGBMemoryRead>
 8002024:	4629      	mov	r1, r5
 8002026:	f001 f993 	bl	8003350 <ucGBFunctionSRA>
 800202a:	4601      	mov	r1, r0
 800202c:	4620      	mov	r0, r4
 800202e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002032:	f001 ba41 	b.w	80034b8 <vGBMemoryWrite>
 8002036:	bf00      	nop
 8002038:	2400125c 	.word	0x2400125c

0800203c <vSRA_A>:
void vSRA_A(){        reg.A = ucGBFunctionSRA(reg.A, &reg.F);}
 800203c:	b510      	push	{r4, lr}
 800203e:	4c03      	ldr	r4, [pc, #12]	; (800204c <vSRA_A+0x10>)
 8002040:	4621      	mov	r1, r4
 8002042:	7860      	ldrb	r0, [r4, #1]
 8002044:	f001 f984 	bl	8003350 <ucGBFunctionSRA>
 8002048:	7060      	strb	r0, [r4, #1]
 800204a:	bd10      	pop	{r4, pc}
 800204c:	2400125c 	.word	0x2400125c

08002050 <vSWAP_B>:
void vSWAP_B(){       reg.B = ucGBFunctionSWAP(reg.B, &reg.F);}
 8002050:	b510      	push	{r4, lr}
 8002052:	4c03      	ldr	r4, [pc, #12]	; (8002060 <vSWAP_B+0x10>)
 8002054:	4621      	mov	r1, r4
 8002056:	78e0      	ldrb	r0, [r4, #3]
 8002058:	f001 f994 	bl	8003384 <ucGBFunctionSWAP>
 800205c:	70e0      	strb	r0, [r4, #3]
 800205e:	bd10      	pop	{r4, pc}
 8002060:	2400125c 	.word	0x2400125c

08002064 <vSWAP_C>:
void vSWAP_C(){       reg.C = ucGBFunctionSWAP(reg.C, &reg.F);}
 8002064:	b510      	push	{r4, lr}
 8002066:	4c03      	ldr	r4, [pc, #12]	; (8002074 <vSWAP_C+0x10>)
 8002068:	4621      	mov	r1, r4
 800206a:	78a0      	ldrb	r0, [r4, #2]
 800206c:	f001 f98a 	bl	8003384 <ucGBFunctionSWAP>
 8002070:	70a0      	strb	r0, [r4, #2]
 8002072:	bd10      	pop	{r4, pc}
 8002074:	2400125c 	.word	0x2400125c

08002078 <vSWAP_D>:
void vSWAP_D(){       reg.D = ucGBFunctionSWAP(reg.D, &reg.F);}
 8002078:	b510      	push	{r4, lr}
 800207a:	4c03      	ldr	r4, [pc, #12]	; (8002088 <vSWAP_D+0x10>)
 800207c:	4621      	mov	r1, r4
 800207e:	7960      	ldrb	r0, [r4, #5]
 8002080:	f001 f980 	bl	8003384 <ucGBFunctionSWAP>
 8002084:	7160      	strb	r0, [r4, #5]
 8002086:	bd10      	pop	{r4, pc}
 8002088:	2400125c 	.word	0x2400125c

0800208c <vSWAP_E>:
void vSWAP_E(){       reg.E = ucGBFunctionSWAP(reg.E, &reg.F);}
 800208c:	b510      	push	{r4, lr}
 800208e:	4c03      	ldr	r4, [pc, #12]	; (800209c <vSWAP_E+0x10>)
 8002090:	4621      	mov	r1, r4
 8002092:	7920      	ldrb	r0, [r4, #4]
 8002094:	f001 f976 	bl	8003384 <ucGBFunctionSWAP>
 8002098:	7120      	strb	r0, [r4, #4]
 800209a:	bd10      	pop	{r4, pc}
 800209c:	2400125c 	.word	0x2400125c

080020a0 <vSWAP_H>:
void vSWAP_H(){       reg.H = ucGBFunctionSWAP(reg.H, &reg.F);}
 80020a0:	b510      	push	{r4, lr}
 80020a2:	4c03      	ldr	r4, [pc, #12]	; (80020b0 <vSWAP_H+0x10>)
 80020a4:	4621      	mov	r1, r4
 80020a6:	79e0      	ldrb	r0, [r4, #7]
 80020a8:	f001 f96c 	bl	8003384 <ucGBFunctionSWAP>
 80020ac:	71e0      	strb	r0, [r4, #7]
 80020ae:	bd10      	pop	{r4, pc}
 80020b0:	2400125c 	.word	0x2400125c

080020b4 <vSWAP_L>:
void vSWAP_L(){       reg.L = ucGBFunctionSWAP(reg.L, &reg.F);}
 80020b4:	b510      	push	{r4, lr}
 80020b6:	4c03      	ldr	r4, [pc, #12]	; (80020c4 <vSWAP_L+0x10>)
 80020b8:	4621      	mov	r1, r4
 80020ba:	79a0      	ldrb	r0, [r4, #6]
 80020bc:	f001 f962 	bl	8003384 <ucGBFunctionSWAP>
 80020c0:	71a0      	strb	r0, [r4, #6]
 80020c2:	bd10      	pop	{r4, pc}
 80020c4:	2400125c 	.word	0x2400125c

080020c8 <vSWAP_HL>:
void vSWAP_HL(){      vGBMemoryWrite(reg.HL, ucGBFunctionSWAP(ucGBMemoryRead(reg.HL), &reg.F));}
 80020c8:	b538      	push	{r3, r4, r5, lr}
 80020ca:	4d07      	ldr	r5, [pc, #28]	; (80020e8 <vSWAP_HL+0x20>)
 80020cc:	88ec      	ldrh	r4, [r5, #6]
 80020ce:	4620      	mov	r0, r4
 80020d0:	f001 fa54 	bl	800357c <ucGBMemoryRead>
 80020d4:	4629      	mov	r1, r5
 80020d6:	f001 f955 	bl	8003384 <ucGBFunctionSWAP>
 80020da:	4601      	mov	r1, r0
 80020dc:	4620      	mov	r0, r4
 80020de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020e2:	f001 b9e9 	b.w	80034b8 <vGBMemoryWrite>
 80020e6:	bf00      	nop
 80020e8:	2400125c 	.word	0x2400125c

080020ec <vSWAP_A>:
void vSWAP_A(){       reg.A = ucGBFunctionSWAP(reg.A, &reg.F);}
 80020ec:	b510      	push	{r4, lr}
 80020ee:	4c03      	ldr	r4, [pc, #12]	; (80020fc <vSWAP_A+0x10>)
 80020f0:	4621      	mov	r1, r4
 80020f2:	7860      	ldrb	r0, [r4, #1]
 80020f4:	f001 f946 	bl	8003384 <ucGBFunctionSWAP>
 80020f8:	7060      	strb	r0, [r4, #1]
 80020fa:	bd10      	pop	{r4, pc}
 80020fc:	2400125c 	.word	0x2400125c

08002100 <vSRL_B>:
void vSRL_B(){        reg.B = ucGBFunctionSRL(reg.B, &reg.F);}
 8002100:	b510      	push	{r4, lr}
 8002102:	4c03      	ldr	r4, [pc, #12]	; (8002110 <vSRL_B+0x10>)
 8002104:	4621      	mov	r1, r4
 8002106:	78e0      	ldrb	r0, [r4, #3]
 8002108:	f001 f952 	bl	80033b0 <ucGBFunctionSRL>
 800210c:	70e0      	strb	r0, [r4, #3]
 800210e:	bd10      	pop	{r4, pc}
 8002110:	2400125c 	.word	0x2400125c

08002114 <vSRL_C>:
void vSRL_C(){        reg.C = ucGBFunctionSRL(reg.C, &reg.F);}
 8002114:	b510      	push	{r4, lr}
 8002116:	4c03      	ldr	r4, [pc, #12]	; (8002124 <vSRL_C+0x10>)
 8002118:	4621      	mov	r1, r4
 800211a:	78a0      	ldrb	r0, [r4, #2]
 800211c:	f001 f948 	bl	80033b0 <ucGBFunctionSRL>
 8002120:	70a0      	strb	r0, [r4, #2]
 8002122:	bd10      	pop	{r4, pc}
 8002124:	2400125c 	.word	0x2400125c

08002128 <vSRL_D>:
void vSRL_D(){        reg.D = ucGBFunctionSRL(reg.D, &reg.F);}
 8002128:	b510      	push	{r4, lr}
 800212a:	4c03      	ldr	r4, [pc, #12]	; (8002138 <vSRL_D+0x10>)
 800212c:	4621      	mov	r1, r4
 800212e:	7960      	ldrb	r0, [r4, #5]
 8002130:	f001 f93e 	bl	80033b0 <ucGBFunctionSRL>
 8002134:	7160      	strb	r0, [r4, #5]
 8002136:	bd10      	pop	{r4, pc}
 8002138:	2400125c 	.word	0x2400125c

0800213c <vSRL_E>:
void vSRL_E(){        reg.E = ucGBFunctionSRL(reg.E, &reg.F);}
 800213c:	b510      	push	{r4, lr}
 800213e:	4c03      	ldr	r4, [pc, #12]	; (800214c <vSRL_E+0x10>)
 8002140:	4621      	mov	r1, r4
 8002142:	7920      	ldrb	r0, [r4, #4]
 8002144:	f001 f934 	bl	80033b0 <ucGBFunctionSRL>
 8002148:	7120      	strb	r0, [r4, #4]
 800214a:	bd10      	pop	{r4, pc}
 800214c:	2400125c 	.word	0x2400125c

08002150 <vSRL_H>:
void vSRL_H(){        reg.H = ucGBFunctionSRL(reg.H, &reg.F);}
 8002150:	b510      	push	{r4, lr}
 8002152:	4c03      	ldr	r4, [pc, #12]	; (8002160 <vSRL_H+0x10>)
 8002154:	4621      	mov	r1, r4
 8002156:	79e0      	ldrb	r0, [r4, #7]
 8002158:	f001 f92a 	bl	80033b0 <ucGBFunctionSRL>
 800215c:	71e0      	strb	r0, [r4, #7]
 800215e:	bd10      	pop	{r4, pc}
 8002160:	2400125c 	.word	0x2400125c

08002164 <vSRL_L>:
void vSRL_L(){        reg.L = ucGBFunctionSRL(reg.L, &reg.F);}
 8002164:	b510      	push	{r4, lr}
 8002166:	4c03      	ldr	r4, [pc, #12]	; (8002174 <vSRL_L+0x10>)
 8002168:	4621      	mov	r1, r4
 800216a:	79a0      	ldrb	r0, [r4, #6]
 800216c:	f001 f920 	bl	80033b0 <ucGBFunctionSRL>
 8002170:	71a0      	strb	r0, [r4, #6]
 8002172:	bd10      	pop	{r4, pc}
 8002174:	2400125c 	.word	0x2400125c

08002178 <vSRL_HL>:
void vSRL_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8002178:	b538      	push	{r3, r4, r5, lr}
 800217a:	4d07      	ldr	r5, [pc, #28]	; (8002198 <vSRL_HL+0x20>)
 800217c:	88ec      	ldrh	r4, [r5, #6]
 800217e:	4620      	mov	r0, r4
 8002180:	f001 f9fc 	bl	800357c <ucGBMemoryRead>
 8002184:	4629      	mov	r1, r5
 8002186:	f001 f913 	bl	80033b0 <ucGBFunctionSRL>
 800218a:	4601      	mov	r1, r0
 800218c:	4620      	mov	r0, r4
 800218e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002192:	f001 b991 	b.w	80034b8 <vGBMemoryWrite>
 8002196:	bf00      	nop
 8002198:	2400125c 	.word	0x2400125c

0800219c <vSRL_A>:
void vSRL_A(){        reg.A = ucGBFunctionSRL(reg.A, &reg.F);}
 800219c:	b510      	push	{r4, lr}
 800219e:	4c03      	ldr	r4, [pc, #12]	; (80021ac <vSRL_A+0x10>)
 80021a0:	4621      	mov	r1, r4
 80021a2:	7860      	ldrb	r0, [r4, #1]
 80021a4:	f001 f904 	bl	80033b0 <ucGBFunctionSRL>
 80021a8:	7060      	strb	r0, [r4, #1]
 80021aa:	bd10      	pop	{r4, pc}
 80021ac:	2400125c 	.word	0x2400125c

080021b0 <vBIT_0_B>:
void vBIT_0_B(){      vGBFunctionBIT(reg.B, 0, &reg.F);}
 80021b0:	4a02      	ldr	r2, [pc, #8]	; (80021bc <vBIT_0_B+0xc>)
 80021b2:	2100      	movs	r1, #0
 80021b4:	78d0      	ldrb	r0, [r2, #3]
 80021b6:	f001 b90f 	b.w	80033d8 <vGBFunctionBIT>
 80021ba:	bf00      	nop
 80021bc:	2400125c 	.word	0x2400125c

080021c0 <vBIT_0_C>:
void vBIT_0_C(){      vGBFunctionBIT(reg.C, 0, &reg.F);}
 80021c0:	4a02      	ldr	r2, [pc, #8]	; (80021cc <vBIT_0_C+0xc>)
 80021c2:	2100      	movs	r1, #0
 80021c4:	7890      	ldrb	r0, [r2, #2]
 80021c6:	f001 b907 	b.w	80033d8 <vGBFunctionBIT>
 80021ca:	bf00      	nop
 80021cc:	2400125c 	.word	0x2400125c

080021d0 <vBIT_0_D>:
void vBIT_0_D(){      vGBFunctionBIT(reg.D, 0, &reg.F);}
 80021d0:	4a02      	ldr	r2, [pc, #8]	; (80021dc <vBIT_0_D+0xc>)
 80021d2:	2100      	movs	r1, #0
 80021d4:	7950      	ldrb	r0, [r2, #5]
 80021d6:	f001 b8ff 	b.w	80033d8 <vGBFunctionBIT>
 80021da:	bf00      	nop
 80021dc:	2400125c 	.word	0x2400125c

080021e0 <vBIT_0_E>:
void vBIT_0_E(){      vGBFunctionBIT(reg.E, 0, &reg.F);}
 80021e0:	4a02      	ldr	r2, [pc, #8]	; (80021ec <vBIT_0_E+0xc>)
 80021e2:	2100      	movs	r1, #0
 80021e4:	7910      	ldrb	r0, [r2, #4]
 80021e6:	f001 b8f7 	b.w	80033d8 <vGBFunctionBIT>
 80021ea:	bf00      	nop
 80021ec:	2400125c 	.word	0x2400125c

080021f0 <vBIT_0_H>:
void vBIT_0_H(){      vGBFunctionBIT(reg.H, 0, &reg.F);}
 80021f0:	4a02      	ldr	r2, [pc, #8]	; (80021fc <vBIT_0_H+0xc>)
 80021f2:	2100      	movs	r1, #0
 80021f4:	79d0      	ldrb	r0, [r2, #7]
 80021f6:	f001 b8ef 	b.w	80033d8 <vGBFunctionBIT>
 80021fa:	bf00      	nop
 80021fc:	2400125c 	.word	0x2400125c

08002200 <vBIT_0_L>:
void vBIT_0_L(){      vGBFunctionBIT(reg.L, 0, &reg.F);}
 8002200:	4a02      	ldr	r2, [pc, #8]	; (800220c <vBIT_0_L+0xc>)
 8002202:	2100      	movs	r1, #0
 8002204:	7990      	ldrb	r0, [r2, #6]
 8002206:	f001 b8e7 	b.w	80033d8 <vGBFunctionBIT>
 800220a:	bf00      	nop
 800220c:	2400125c 	.word	0x2400125c

08002210 <vBIT_0_HL>:
void vBIT_0_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 0, &reg.F);}
 8002210:	b510      	push	{r4, lr}
 8002212:	4c05      	ldr	r4, [pc, #20]	; (8002228 <vBIT_0_HL+0x18>)
 8002214:	88e0      	ldrh	r0, [r4, #6]
 8002216:	f001 f9b1 	bl	800357c <ucGBMemoryRead>
 800221a:	4622      	mov	r2, r4
 800221c:	2100      	movs	r1, #0
 800221e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002222:	f001 b8d9 	b.w	80033d8 <vGBFunctionBIT>
 8002226:	bf00      	nop
 8002228:	2400125c 	.word	0x2400125c

0800222c <vBIT_0_A>:
void vBIT_0_A(){      vGBFunctionBIT(reg.A, 0, &reg.F);}
 800222c:	4a02      	ldr	r2, [pc, #8]	; (8002238 <vBIT_0_A+0xc>)
 800222e:	2100      	movs	r1, #0
 8002230:	7850      	ldrb	r0, [r2, #1]
 8002232:	f001 b8d1 	b.w	80033d8 <vGBFunctionBIT>
 8002236:	bf00      	nop
 8002238:	2400125c 	.word	0x2400125c

0800223c <vBIT_1_B>:
void vBIT_1_B(){      vGBFunctionBIT(reg.B, 1, &reg.F);}
 800223c:	4a02      	ldr	r2, [pc, #8]	; (8002248 <vBIT_1_B+0xc>)
 800223e:	2101      	movs	r1, #1
 8002240:	78d0      	ldrb	r0, [r2, #3]
 8002242:	f001 b8c9 	b.w	80033d8 <vGBFunctionBIT>
 8002246:	bf00      	nop
 8002248:	2400125c 	.word	0x2400125c

0800224c <vBIT_1_C>:
void vBIT_1_C(){      vGBFunctionBIT(reg.C, 1, &reg.F);}
 800224c:	4a02      	ldr	r2, [pc, #8]	; (8002258 <vBIT_1_C+0xc>)
 800224e:	2101      	movs	r1, #1
 8002250:	7890      	ldrb	r0, [r2, #2]
 8002252:	f001 b8c1 	b.w	80033d8 <vGBFunctionBIT>
 8002256:	bf00      	nop
 8002258:	2400125c 	.word	0x2400125c

0800225c <vBIT_1_D>:
void vBIT_1_D(){      vGBFunctionBIT(reg.D, 1, &reg.F);}
 800225c:	4a02      	ldr	r2, [pc, #8]	; (8002268 <vBIT_1_D+0xc>)
 800225e:	2101      	movs	r1, #1
 8002260:	7950      	ldrb	r0, [r2, #5]
 8002262:	f001 b8b9 	b.w	80033d8 <vGBFunctionBIT>
 8002266:	bf00      	nop
 8002268:	2400125c 	.word	0x2400125c

0800226c <vBIT_1_E>:
void vBIT_1_E(){      vGBFunctionBIT(reg.E, 1, &reg.F);}
 800226c:	4a02      	ldr	r2, [pc, #8]	; (8002278 <vBIT_1_E+0xc>)
 800226e:	2101      	movs	r1, #1
 8002270:	7910      	ldrb	r0, [r2, #4]
 8002272:	f001 b8b1 	b.w	80033d8 <vGBFunctionBIT>
 8002276:	bf00      	nop
 8002278:	2400125c 	.word	0x2400125c

0800227c <vBIT_1_H>:
void vBIT_1_H(){      vGBFunctionBIT(reg.H, 1, &reg.F);}
 800227c:	4a02      	ldr	r2, [pc, #8]	; (8002288 <vBIT_1_H+0xc>)
 800227e:	2101      	movs	r1, #1
 8002280:	79d0      	ldrb	r0, [r2, #7]
 8002282:	f001 b8a9 	b.w	80033d8 <vGBFunctionBIT>
 8002286:	bf00      	nop
 8002288:	2400125c 	.word	0x2400125c

0800228c <vBIT_1_L>:
void vBIT_1_L(){      vGBFunctionBIT(reg.L, 1, &reg.F);}
 800228c:	4a02      	ldr	r2, [pc, #8]	; (8002298 <vBIT_1_L+0xc>)
 800228e:	2101      	movs	r1, #1
 8002290:	7990      	ldrb	r0, [r2, #6]
 8002292:	f001 b8a1 	b.w	80033d8 <vGBFunctionBIT>
 8002296:	bf00      	nop
 8002298:	2400125c 	.word	0x2400125c

0800229c <vBIT_1_HL>:
void vBIT_1_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 1, &reg.F);}
 800229c:	b510      	push	{r4, lr}
 800229e:	4c05      	ldr	r4, [pc, #20]	; (80022b4 <vBIT_1_HL+0x18>)
 80022a0:	88e0      	ldrh	r0, [r4, #6]
 80022a2:	f001 f96b 	bl	800357c <ucGBMemoryRead>
 80022a6:	4622      	mov	r2, r4
 80022a8:	2101      	movs	r1, #1
 80022aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022ae:	f001 b893 	b.w	80033d8 <vGBFunctionBIT>
 80022b2:	bf00      	nop
 80022b4:	2400125c 	.word	0x2400125c

080022b8 <vBIT_1_A>:
void vBIT_1_A(){      vGBFunctionBIT(reg.A, 1, &reg.F);}
 80022b8:	4a02      	ldr	r2, [pc, #8]	; (80022c4 <vBIT_1_A+0xc>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	7850      	ldrb	r0, [r2, #1]
 80022be:	f001 b88b 	b.w	80033d8 <vGBFunctionBIT>
 80022c2:	bf00      	nop
 80022c4:	2400125c 	.word	0x2400125c

080022c8 <vBIT_2_B>:
void vBIT_2_B(){      vGBFunctionBIT(reg.B, 2, &reg.F);}
 80022c8:	4a02      	ldr	r2, [pc, #8]	; (80022d4 <vBIT_2_B+0xc>)
 80022ca:	2102      	movs	r1, #2
 80022cc:	78d0      	ldrb	r0, [r2, #3]
 80022ce:	f001 b883 	b.w	80033d8 <vGBFunctionBIT>
 80022d2:	bf00      	nop
 80022d4:	2400125c 	.word	0x2400125c

080022d8 <vBIT_2_C>:
void vBIT_2_C(){      vGBFunctionBIT(reg.C, 2, &reg.F);}
 80022d8:	4a02      	ldr	r2, [pc, #8]	; (80022e4 <vBIT_2_C+0xc>)
 80022da:	2102      	movs	r1, #2
 80022dc:	7890      	ldrb	r0, [r2, #2]
 80022de:	f001 b87b 	b.w	80033d8 <vGBFunctionBIT>
 80022e2:	bf00      	nop
 80022e4:	2400125c 	.word	0x2400125c

080022e8 <vBIT_2_D>:
void vBIT_2_D(){      vGBFunctionBIT(reg.D, 2, &reg.F);}
 80022e8:	4a02      	ldr	r2, [pc, #8]	; (80022f4 <vBIT_2_D+0xc>)
 80022ea:	2102      	movs	r1, #2
 80022ec:	7950      	ldrb	r0, [r2, #5]
 80022ee:	f001 b873 	b.w	80033d8 <vGBFunctionBIT>
 80022f2:	bf00      	nop
 80022f4:	2400125c 	.word	0x2400125c

080022f8 <vBIT_2_E>:
void vBIT_2_E(){      vGBFunctionBIT(reg.E, 2, &reg.F);}
 80022f8:	4a02      	ldr	r2, [pc, #8]	; (8002304 <vBIT_2_E+0xc>)
 80022fa:	2102      	movs	r1, #2
 80022fc:	7910      	ldrb	r0, [r2, #4]
 80022fe:	f001 b86b 	b.w	80033d8 <vGBFunctionBIT>
 8002302:	bf00      	nop
 8002304:	2400125c 	.word	0x2400125c

08002308 <vBIT_2_H>:
void vBIT_2_H(){      vGBFunctionBIT(reg.H, 2, &reg.F);}
 8002308:	4a02      	ldr	r2, [pc, #8]	; (8002314 <vBIT_2_H+0xc>)
 800230a:	2102      	movs	r1, #2
 800230c:	79d0      	ldrb	r0, [r2, #7]
 800230e:	f001 b863 	b.w	80033d8 <vGBFunctionBIT>
 8002312:	bf00      	nop
 8002314:	2400125c 	.word	0x2400125c

08002318 <vBIT_2_L>:
void vBIT_2_L(){      vGBFunctionBIT(reg.L, 2, &reg.F);}
 8002318:	4a02      	ldr	r2, [pc, #8]	; (8002324 <vBIT_2_L+0xc>)
 800231a:	2102      	movs	r1, #2
 800231c:	7990      	ldrb	r0, [r2, #6]
 800231e:	f001 b85b 	b.w	80033d8 <vGBFunctionBIT>
 8002322:	bf00      	nop
 8002324:	2400125c 	.word	0x2400125c

08002328 <vBIT_2_HL>:
void vBIT_2_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 2, &reg.F);}
 8002328:	b510      	push	{r4, lr}
 800232a:	4c05      	ldr	r4, [pc, #20]	; (8002340 <vBIT_2_HL+0x18>)
 800232c:	88e0      	ldrh	r0, [r4, #6]
 800232e:	f001 f925 	bl	800357c <ucGBMemoryRead>
 8002332:	4622      	mov	r2, r4
 8002334:	2102      	movs	r1, #2
 8002336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800233a:	f001 b84d 	b.w	80033d8 <vGBFunctionBIT>
 800233e:	bf00      	nop
 8002340:	2400125c 	.word	0x2400125c

08002344 <vBIT_2_A>:
void vBIT_2_A(){      vGBFunctionBIT(reg.A, 2, &reg.F);}
 8002344:	4a02      	ldr	r2, [pc, #8]	; (8002350 <vBIT_2_A+0xc>)
 8002346:	2102      	movs	r1, #2
 8002348:	7850      	ldrb	r0, [r2, #1]
 800234a:	f001 b845 	b.w	80033d8 <vGBFunctionBIT>
 800234e:	bf00      	nop
 8002350:	2400125c 	.word	0x2400125c

08002354 <vBIT_3_B>:
void vBIT_3_B(){      vGBFunctionBIT(reg.B, 3, &reg.F);}
 8002354:	4a02      	ldr	r2, [pc, #8]	; (8002360 <vBIT_3_B+0xc>)
 8002356:	2103      	movs	r1, #3
 8002358:	78d0      	ldrb	r0, [r2, #3]
 800235a:	f001 b83d 	b.w	80033d8 <vGBFunctionBIT>
 800235e:	bf00      	nop
 8002360:	2400125c 	.word	0x2400125c

08002364 <vBIT_3_C>:
void vBIT_3_C(){      vGBFunctionBIT(reg.C, 3, &reg.F);}
 8002364:	4a02      	ldr	r2, [pc, #8]	; (8002370 <vBIT_3_C+0xc>)
 8002366:	2103      	movs	r1, #3
 8002368:	7890      	ldrb	r0, [r2, #2]
 800236a:	f001 b835 	b.w	80033d8 <vGBFunctionBIT>
 800236e:	bf00      	nop
 8002370:	2400125c 	.word	0x2400125c

08002374 <vBIT_3_D>:
void vBIT_3_D(){      vGBFunctionBIT(reg.D, 3, &reg.F);}
 8002374:	4a02      	ldr	r2, [pc, #8]	; (8002380 <vBIT_3_D+0xc>)
 8002376:	2103      	movs	r1, #3
 8002378:	7950      	ldrb	r0, [r2, #5]
 800237a:	f001 b82d 	b.w	80033d8 <vGBFunctionBIT>
 800237e:	bf00      	nop
 8002380:	2400125c 	.word	0x2400125c

08002384 <vBIT_3_E>:
void vBIT_3_E(){      vGBFunctionBIT(reg.E, 3, &reg.F);}
 8002384:	4a02      	ldr	r2, [pc, #8]	; (8002390 <vBIT_3_E+0xc>)
 8002386:	2103      	movs	r1, #3
 8002388:	7910      	ldrb	r0, [r2, #4]
 800238a:	f001 b825 	b.w	80033d8 <vGBFunctionBIT>
 800238e:	bf00      	nop
 8002390:	2400125c 	.word	0x2400125c

08002394 <vBIT_3_H>:
void vBIT_3_H(){      vGBFunctionBIT(reg.H, 3, &reg.F);}
 8002394:	4a02      	ldr	r2, [pc, #8]	; (80023a0 <vBIT_3_H+0xc>)
 8002396:	2103      	movs	r1, #3
 8002398:	79d0      	ldrb	r0, [r2, #7]
 800239a:	f001 b81d 	b.w	80033d8 <vGBFunctionBIT>
 800239e:	bf00      	nop
 80023a0:	2400125c 	.word	0x2400125c

080023a4 <vBIT_3_L>:
void vBIT_3_L(){      vGBFunctionBIT(reg.L, 3, &reg.F);}
 80023a4:	4a02      	ldr	r2, [pc, #8]	; (80023b0 <vBIT_3_L+0xc>)
 80023a6:	2103      	movs	r1, #3
 80023a8:	7990      	ldrb	r0, [r2, #6]
 80023aa:	f001 b815 	b.w	80033d8 <vGBFunctionBIT>
 80023ae:	bf00      	nop
 80023b0:	2400125c 	.word	0x2400125c

080023b4 <vBIT_3_HL>:
void vBIT_3_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 3, &reg.F);}
 80023b4:	b510      	push	{r4, lr}
 80023b6:	4c05      	ldr	r4, [pc, #20]	; (80023cc <vBIT_3_HL+0x18>)
 80023b8:	88e0      	ldrh	r0, [r4, #6]
 80023ba:	f001 f8df 	bl	800357c <ucGBMemoryRead>
 80023be:	4622      	mov	r2, r4
 80023c0:	2103      	movs	r1, #3
 80023c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023c6:	f001 b807 	b.w	80033d8 <vGBFunctionBIT>
 80023ca:	bf00      	nop
 80023cc:	2400125c 	.word	0x2400125c

080023d0 <vBIT_3_A>:
void vBIT_3_A(){      vGBFunctionBIT(reg.A, 3, &reg.F);}
 80023d0:	4a02      	ldr	r2, [pc, #8]	; (80023dc <vBIT_3_A+0xc>)
 80023d2:	2103      	movs	r1, #3
 80023d4:	7850      	ldrb	r0, [r2, #1]
 80023d6:	f000 bfff 	b.w	80033d8 <vGBFunctionBIT>
 80023da:	bf00      	nop
 80023dc:	2400125c 	.word	0x2400125c

080023e0 <vBIT_4_B>:
void vBIT_4_B(){      vGBFunctionBIT(reg.B, 4, &reg.F);}
 80023e0:	4a02      	ldr	r2, [pc, #8]	; (80023ec <vBIT_4_B+0xc>)
 80023e2:	2104      	movs	r1, #4
 80023e4:	78d0      	ldrb	r0, [r2, #3]
 80023e6:	f000 bff7 	b.w	80033d8 <vGBFunctionBIT>
 80023ea:	bf00      	nop
 80023ec:	2400125c 	.word	0x2400125c

080023f0 <vBIT_4_C>:
void vBIT_4_C(){      vGBFunctionBIT(reg.C, 4, &reg.F);}
 80023f0:	4a02      	ldr	r2, [pc, #8]	; (80023fc <vBIT_4_C+0xc>)
 80023f2:	2104      	movs	r1, #4
 80023f4:	7890      	ldrb	r0, [r2, #2]
 80023f6:	f000 bfef 	b.w	80033d8 <vGBFunctionBIT>
 80023fa:	bf00      	nop
 80023fc:	2400125c 	.word	0x2400125c

08002400 <vBIT_4_D>:
void vBIT_4_D(){      vGBFunctionBIT(reg.D, 4, &reg.F);}
 8002400:	4a02      	ldr	r2, [pc, #8]	; (800240c <vBIT_4_D+0xc>)
 8002402:	2104      	movs	r1, #4
 8002404:	7950      	ldrb	r0, [r2, #5]
 8002406:	f000 bfe7 	b.w	80033d8 <vGBFunctionBIT>
 800240a:	bf00      	nop
 800240c:	2400125c 	.word	0x2400125c

08002410 <vBIT_4_E>:
void vBIT_4_E(){      vGBFunctionBIT(reg.E, 4, &reg.F);}
 8002410:	4a02      	ldr	r2, [pc, #8]	; (800241c <vBIT_4_E+0xc>)
 8002412:	2104      	movs	r1, #4
 8002414:	7910      	ldrb	r0, [r2, #4]
 8002416:	f000 bfdf 	b.w	80033d8 <vGBFunctionBIT>
 800241a:	bf00      	nop
 800241c:	2400125c 	.word	0x2400125c

08002420 <vBIT_4_H>:
void vBIT_4_H(){      vGBFunctionBIT(reg.H, 4, &reg.F);}
 8002420:	4a02      	ldr	r2, [pc, #8]	; (800242c <vBIT_4_H+0xc>)
 8002422:	2104      	movs	r1, #4
 8002424:	79d0      	ldrb	r0, [r2, #7]
 8002426:	f000 bfd7 	b.w	80033d8 <vGBFunctionBIT>
 800242a:	bf00      	nop
 800242c:	2400125c 	.word	0x2400125c

08002430 <vBIT_4_L>:
void vBIT_4_L(){      vGBFunctionBIT(reg.L, 4, &reg.F);}
 8002430:	4a02      	ldr	r2, [pc, #8]	; (800243c <vBIT_4_L+0xc>)
 8002432:	2104      	movs	r1, #4
 8002434:	7990      	ldrb	r0, [r2, #6]
 8002436:	f000 bfcf 	b.w	80033d8 <vGBFunctionBIT>
 800243a:	bf00      	nop
 800243c:	2400125c 	.word	0x2400125c

08002440 <vBIT_4_HL>:
void vBIT_4_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 4, &reg.F);}
 8002440:	b510      	push	{r4, lr}
 8002442:	4c05      	ldr	r4, [pc, #20]	; (8002458 <vBIT_4_HL+0x18>)
 8002444:	88e0      	ldrh	r0, [r4, #6]
 8002446:	f001 f899 	bl	800357c <ucGBMemoryRead>
 800244a:	4622      	mov	r2, r4
 800244c:	2104      	movs	r1, #4
 800244e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002452:	f000 bfc1 	b.w	80033d8 <vGBFunctionBIT>
 8002456:	bf00      	nop
 8002458:	2400125c 	.word	0x2400125c

0800245c <vBIT_4_A>:
void vBIT_4_A(){      vGBFunctionBIT(reg.A, 4, &reg.F);}
 800245c:	4a02      	ldr	r2, [pc, #8]	; (8002468 <vBIT_4_A+0xc>)
 800245e:	2104      	movs	r1, #4
 8002460:	7850      	ldrb	r0, [r2, #1]
 8002462:	f000 bfb9 	b.w	80033d8 <vGBFunctionBIT>
 8002466:	bf00      	nop
 8002468:	2400125c 	.word	0x2400125c

0800246c <vBIT_5_B>:
void vBIT_5_B(){      vGBFunctionBIT(reg.B, 5, &reg.F);}
 800246c:	4a02      	ldr	r2, [pc, #8]	; (8002478 <vBIT_5_B+0xc>)
 800246e:	2105      	movs	r1, #5
 8002470:	78d0      	ldrb	r0, [r2, #3]
 8002472:	f000 bfb1 	b.w	80033d8 <vGBFunctionBIT>
 8002476:	bf00      	nop
 8002478:	2400125c 	.word	0x2400125c

0800247c <vBIT_5_C>:
void vBIT_5_C(){      vGBFunctionBIT(reg.C, 5, &reg.F);}
 800247c:	4a02      	ldr	r2, [pc, #8]	; (8002488 <vBIT_5_C+0xc>)
 800247e:	2105      	movs	r1, #5
 8002480:	7890      	ldrb	r0, [r2, #2]
 8002482:	f000 bfa9 	b.w	80033d8 <vGBFunctionBIT>
 8002486:	bf00      	nop
 8002488:	2400125c 	.word	0x2400125c

0800248c <vBIT_5_D>:
void vBIT_5_D(){      vGBFunctionBIT(reg.D, 5, &reg.F);}
 800248c:	4a02      	ldr	r2, [pc, #8]	; (8002498 <vBIT_5_D+0xc>)
 800248e:	2105      	movs	r1, #5
 8002490:	7950      	ldrb	r0, [r2, #5]
 8002492:	f000 bfa1 	b.w	80033d8 <vGBFunctionBIT>
 8002496:	bf00      	nop
 8002498:	2400125c 	.word	0x2400125c

0800249c <vBIT_5_E>:
void vBIT_5_E(){      vGBFunctionBIT(reg.E, 5, &reg.F);}
 800249c:	4a02      	ldr	r2, [pc, #8]	; (80024a8 <vBIT_5_E+0xc>)
 800249e:	2105      	movs	r1, #5
 80024a0:	7910      	ldrb	r0, [r2, #4]
 80024a2:	f000 bf99 	b.w	80033d8 <vGBFunctionBIT>
 80024a6:	bf00      	nop
 80024a8:	2400125c 	.word	0x2400125c

080024ac <vBIT_5_H>:
void vBIT_5_H(){      vGBFunctionBIT(reg.H, 5, &reg.F);}
 80024ac:	4a02      	ldr	r2, [pc, #8]	; (80024b8 <vBIT_5_H+0xc>)
 80024ae:	2105      	movs	r1, #5
 80024b0:	79d0      	ldrb	r0, [r2, #7]
 80024b2:	f000 bf91 	b.w	80033d8 <vGBFunctionBIT>
 80024b6:	bf00      	nop
 80024b8:	2400125c 	.word	0x2400125c

080024bc <vBIT_5_L>:
void vBIT_5_L(){      vGBFunctionBIT(reg.L, 5, &reg.F);}
 80024bc:	4a02      	ldr	r2, [pc, #8]	; (80024c8 <vBIT_5_L+0xc>)
 80024be:	2105      	movs	r1, #5
 80024c0:	7990      	ldrb	r0, [r2, #6]
 80024c2:	f000 bf89 	b.w	80033d8 <vGBFunctionBIT>
 80024c6:	bf00      	nop
 80024c8:	2400125c 	.word	0x2400125c

080024cc <vBIT_5_HL>:
void vBIT_5_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 5, &reg.F);}
 80024cc:	b510      	push	{r4, lr}
 80024ce:	4c05      	ldr	r4, [pc, #20]	; (80024e4 <vBIT_5_HL+0x18>)
 80024d0:	88e0      	ldrh	r0, [r4, #6]
 80024d2:	f001 f853 	bl	800357c <ucGBMemoryRead>
 80024d6:	4622      	mov	r2, r4
 80024d8:	2105      	movs	r1, #5
 80024da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024de:	f000 bf7b 	b.w	80033d8 <vGBFunctionBIT>
 80024e2:	bf00      	nop
 80024e4:	2400125c 	.word	0x2400125c

080024e8 <vBIT_5_A>:
void vBIT_5_A(){      vGBFunctionBIT(reg.A, 5, &reg.F);}
 80024e8:	4a02      	ldr	r2, [pc, #8]	; (80024f4 <vBIT_5_A+0xc>)
 80024ea:	2105      	movs	r1, #5
 80024ec:	7850      	ldrb	r0, [r2, #1]
 80024ee:	f000 bf73 	b.w	80033d8 <vGBFunctionBIT>
 80024f2:	bf00      	nop
 80024f4:	2400125c 	.word	0x2400125c

080024f8 <vBIT_6_B>:
void vBIT_6_B(){      vGBFunctionBIT(reg.B, 6, &reg.F);}
 80024f8:	4a02      	ldr	r2, [pc, #8]	; (8002504 <vBIT_6_B+0xc>)
 80024fa:	2106      	movs	r1, #6
 80024fc:	78d0      	ldrb	r0, [r2, #3]
 80024fe:	f000 bf6b 	b.w	80033d8 <vGBFunctionBIT>
 8002502:	bf00      	nop
 8002504:	2400125c 	.word	0x2400125c

08002508 <vBIT_6_C>:
void vBIT_6_C(){      vGBFunctionBIT(reg.C, 6, &reg.F);}
 8002508:	4a02      	ldr	r2, [pc, #8]	; (8002514 <vBIT_6_C+0xc>)
 800250a:	2106      	movs	r1, #6
 800250c:	7890      	ldrb	r0, [r2, #2]
 800250e:	f000 bf63 	b.w	80033d8 <vGBFunctionBIT>
 8002512:	bf00      	nop
 8002514:	2400125c 	.word	0x2400125c

08002518 <vBIT_6_D>:
void vBIT_6_D(){      vGBFunctionBIT(reg.D, 6, &reg.F);}
 8002518:	4a02      	ldr	r2, [pc, #8]	; (8002524 <vBIT_6_D+0xc>)
 800251a:	2106      	movs	r1, #6
 800251c:	7950      	ldrb	r0, [r2, #5]
 800251e:	f000 bf5b 	b.w	80033d8 <vGBFunctionBIT>
 8002522:	bf00      	nop
 8002524:	2400125c 	.word	0x2400125c

08002528 <vBIT_6_E>:
void vBIT_6_E(){      vGBFunctionBIT(reg.E, 6, &reg.F);}
 8002528:	4a02      	ldr	r2, [pc, #8]	; (8002534 <vBIT_6_E+0xc>)
 800252a:	2106      	movs	r1, #6
 800252c:	7910      	ldrb	r0, [r2, #4]
 800252e:	f000 bf53 	b.w	80033d8 <vGBFunctionBIT>
 8002532:	bf00      	nop
 8002534:	2400125c 	.word	0x2400125c

08002538 <vBIT_6_H>:
void vBIT_6_H(){      vGBFunctionBIT(reg.H, 6, &reg.F);}
 8002538:	4a02      	ldr	r2, [pc, #8]	; (8002544 <vBIT_6_H+0xc>)
 800253a:	2106      	movs	r1, #6
 800253c:	79d0      	ldrb	r0, [r2, #7]
 800253e:	f000 bf4b 	b.w	80033d8 <vGBFunctionBIT>
 8002542:	bf00      	nop
 8002544:	2400125c 	.word	0x2400125c

08002548 <vBIT_6_L>:
void vBIT_6_L(){      vGBFunctionBIT(reg.L, 6, &reg.F);}
 8002548:	4a02      	ldr	r2, [pc, #8]	; (8002554 <vBIT_6_L+0xc>)
 800254a:	2106      	movs	r1, #6
 800254c:	7990      	ldrb	r0, [r2, #6]
 800254e:	f000 bf43 	b.w	80033d8 <vGBFunctionBIT>
 8002552:	bf00      	nop
 8002554:	2400125c 	.word	0x2400125c

08002558 <vBIT_6_HL>:
void vBIT_6_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 6, &reg.F);}
 8002558:	b510      	push	{r4, lr}
 800255a:	4c05      	ldr	r4, [pc, #20]	; (8002570 <vBIT_6_HL+0x18>)
 800255c:	88e0      	ldrh	r0, [r4, #6]
 800255e:	f001 f80d 	bl	800357c <ucGBMemoryRead>
 8002562:	4622      	mov	r2, r4
 8002564:	2106      	movs	r1, #6
 8002566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800256a:	f000 bf35 	b.w	80033d8 <vGBFunctionBIT>
 800256e:	bf00      	nop
 8002570:	2400125c 	.word	0x2400125c

08002574 <vBIT_6_A>:
void vBIT_6_A(){      vGBFunctionBIT(reg.A, 6, &reg.F);}
 8002574:	4a02      	ldr	r2, [pc, #8]	; (8002580 <vBIT_6_A+0xc>)
 8002576:	2106      	movs	r1, #6
 8002578:	7850      	ldrb	r0, [r2, #1]
 800257a:	f000 bf2d 	b.w	80033d8 <vGBFunctionBIT>
 800257e:	bf00      	nop
 8002580:	2400125c 	.word	0x2400125c

08002584 <vBIT_7_B>:
void vBIT_7_B(){      vGBFunctionBIT(reg.B, 7, &reg.F);}
 8002584:	4a02      	ldr	r2, [pc, #8]	; (8002590 <vBIT_7_B+0xc>)
 8002586:	2107      	movs	r1, #7
 8002588:	78d0      	ldrb	r0, [r2, #3]
 800258a:	f000 bf25 	b.w	80033d8 <vGBFunctionBIT>
 800258e:	bf00      	nop
 8002590:	2400125c 	.word	0x2400125c

08002594 <vBIT_7_C>:
void vBIT_7_C(){      vGBFunctionBIT(reg.C, 7, &reg.F);}
 8002594:	4a02      	ldr	r2, [pc, #8]	; (80025a0 <vBIT_7_C+0xc>)
 8002596:	2107      	movs	r1, #7
 8002598:	7890      	ldrb	r0, [r2, #2]
 800259a:	f000 bf1d 	b.w	80033d8 <vGBFunctionBIT>
 800259e:	bf00      	nop
 80025a0:	2400125c 	.word	0x2400125c

080025a4 <vBIT_7_D>:
void vBIT_7_D(){      vGBFunctionBIT(reg.D, 7, &reg.F);}
 80025a4:	4a02      	ldr	r2, [pc, #8]	; (80025b0 <vBIT_7_D+0xc>)
 80025a6:	2107      	movs	r1, #7
 80025a8:	7950      	ldrb	r0, [r2, #5]
 80025aa:	f000 bf15 	b.w	80033d8 <vGBFunctionBIT>
 80025ae:	bf00      	nop
 80025b0:	2400125c 	.word	0x2400125c

080025b4 <vBIT_7_E>:
void vBIT_7_E(){      vGBFunctionBIT(reg.E, 7, &reg.F);}
 80025b4:	4a02      	ldr	r2, [pc, #8]	; (80025c0 <vBIT_7_E+0xc>)
 80025b6:	2107      	movs	r1, #7
 80025b8:	7910      	ldrb	r0, [r2, #4]
 80025ba:	f000 bf0d 	b.w	80033d8 <vGBFunctionBIT>
 80025be:	bf00      	nop
 80025c0:	2400125c 	.word	0x2400125c

080025c4 <vBIT_7_H>:
void vBIT_7_H(){      vGBFunctionBIT(reg.H, 7, &reg.F);}
 80025c4:	4a02      	ldr	r2, [pc, #8]	; (80025d0 <vBIT_7_H+0xc>)
 80025c6:	2107      	movs	r1, #7
 80025c8:	79d0      	ldrb	r0, [r2, #7]
 80025ca:	f000 bf05 	b.w	80033d8 <vGBFunctionBIT>
 80025ce:	bf00      	nop
 80025d0:	2400125c 	.word	0x2400125c

080025d4 <vBIT_7_L>:
void vBIT_7_L(){      vGBFunctionBIT(reg.L, 7, &reg.F);}
 80025d4:	4a02      	ldr	r2, [pc, #8]	; (80025e0 <vBIT_7_L+0xc>)
 80025d6:	2107      	movs	r1, #7
 80025d8:	7990      	ldrb	r0, [r2, #6]
 80025da:	f000 befd 	b.w	80033d8 <vGBFunctionBIT>
 80025de:	bf00      	nop
 80025e0:	2400125c 	.word	0x2400125c

080025e4 <vBIT_7_HL>:
void vBIT_7_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 7, &reg.F);}
 80025e4:	b510      	push	{r4, lr}
 80025e6:	4c05      	ldr	r4, [pc, #20]	; (80025fc <vBIT_7_HL+0x18>)
 80025e8:	88e0      	ldrh	r0, [r4, #6]
 80025ea:	f000 ffc7 	bl	800357c <ucGBMemoryRead>
 80025ee:	4622      	mov	r2, r4
 80025f0:	2107      	movs	r1, #7
 80025f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025f6:	f000 beef 	b.w	80033d8 <vGBFunctionBIT>
 80025fa:	bf00      	nop
 80025fc:	2400125c 	.word	0x2400125c

08002600 <vBIT_7_A>:
void vBIT_7_A(){      vGBFunctionBIT(reg.A, 7, &reg.F);}
 8002600:	4a02      	ldr	r2, [pc, #8]	; (800260c <vBIT_7_A+0xc>)
 8002602:	2107      	movs	r1, #7
 8002604:	7850      	ldrb	r0, [r2, #1]
 8002606:	f000 bee7 	b.w	80033d8 <vGBFunctionBIT>
 800260a:	bf00      	nop
 800260c:	2400125c 	.word	0x2400125c

08002610 <vRES_0_HL>:
void vRES_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 0));}
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <vRES_0_HL+0x1c>)
 8002612:	2100      	movs	r1, #0
 8002614:	b510      	push	{r4, lr}
 8002616:	88dc      	ldrh	r4, [r3, #6]
 8002618:	4620      	mov	r0, r4
 800261a:	f000 fef5 	bl	8003408 <ucGBFunctionRESHL>
 800261e:	4601      	mov	r1, r0
 8002620:	4620      	mov	r0, r4
 8002622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002626:	f000 bf47 	b.w	80034b8 <vGBMemoryWrite>
 800262a:	bf00      	nop
 800262c:	2400125c 	.word	0x2400125c

08002630 <vRES_1_HL>:
void vRES_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 1));}
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <vRES_1_HL+0x1c>)
 8002632:	2101      	movs	r1, #1
 8002634:	b510      	push	{r4, lr}
 8002636:	88dc      	ldrh	r4, [r3, #6]
 8002638:	4620      	mov	r0, r4
 800263a:	f000 fee5 	bl	8003408 <ucGBFunctionRESHL>
 800263e:	4601      	mov	r1, r0
 8002640:	4620      	mov	r0, r4
 8002642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002646:	f000 bf37 	b.w	80034b8 <vGBMemoryWrite>
 800264a:	bf00      	nop
 800264c:	2400125c 	.word	0x2400125c

08002650 <vRES_2_HL>:
void vRES_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 2));}
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <vRES_2_HL+0x1c>)
 8002652:	2102      	movs	r1, #2
 8002654:	b510      	push	{r4, lr}
 8002656:	88dc      	ldrh	r4, [r3, #6]
 8002658:	4620      	mov	r0, r4
 800265a:	f000 fed5 	bl	8003408 <ucGBFunctionRESHL>
 800265e:	4601      	mov	r1, r0
 8002660:	4620      	mov	r0, r4
 8002662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002666:	f000 bf27 	b.w	80034b8 <vGBMemoryWrite>
 800266a:	bf00      	nop
 800266c:	2400125c 	.word	0x2400125c

08002670 <vRES_3_HL>:
void vRES_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 3));}
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <vRES_3_HL+0x1c>)
 8002672:	2103      	movs	r1, #3
 8002674:	b510      	push	{r4, lr}
 8002676:	88dc      	ldrh	r4, [r3, #6]
 8002678:	4620      	mov	r0, r4
 800267a:	f000 fec5 	bl	8003408 <ucGBFunctionRESHL>
 800267e:	4601      	mov	r1, r0
 8002680:	4620      	mov	r0, r4
 8002682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002686:	f000 bf17 	b.w	80034b8 <vGBMemoryWrite>
 800268a:	bf00      	nop
 800268c:	2400125c 	.word	0x2400125c

08002690 <vRES_4_HL>:
void vRES_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 4));}
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <vRES_4_HL+0x1c>)
 8002692:	2104      	movs	r1, #4
 8002694:	b510      	push	{r4, lr}
 8002696:	88dc      	ldrh	r4, [r3, #6]
 8002698:	4620      	mov	r0, r4
 800269a:	f000 feb5 	bl	8003408 <ucGBFunctionRESHL>
 800269e:	4601      	mov	r1, r0
 80026a0:	4620      	mov	r0, r4
 80026a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026a6:	f000 bf07 	b.w	80034b8 <vGBMemoryWrite>
 80026aa:	bf00      	nop
 80026ac:	2400125c 	.word	0x2400125c

080026b0 <vRES_5_HL>:
void vRES_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 5));}
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <vRES_5_HL+0x1c>)
 80026b2:	2105      	movs	r1, #5
 80026b4:	b510      	push	{r4, lr}
 80026b6:	88dc      	ldrh	r4, [r3, #6]
 80026b8:	4620      	mov	r0, r4
 80026ba:	f000 fea5 	bl	8003408 <ucGBFunctionRESHL>
 80026be:	4601      	mov	r1, r0
 80026c0:	4620      	mov	r0, r4
 80026c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026c6:	f000 bef7 	b.w	80034b8 <vGBMemoryWrite>
 80026ca:	bf00      	nop
 80026cc:	2400125c 	.word	0x2400125c

080026d0 <vRES_6_HL>:
void vRES_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 6));}
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <vRES_6_HL+0x1c>)
 80026d2:	2106      	movs	r1, #6
 80026d4:	b510      	push	{r4, lr}
 80026d6:	88dc      	ldrh	r4, [r3, #6]
 80026d8:	4620      	mov	r0, r4
 80026da:	f000 fe95 	bl	8003408 <ucGBFunctionRESHL>
 80026de:	4601      	mov	r1, r0
 80026e0:	4620      	mov	r0, r4
 80026e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026e6:	f000 bee7 	b.w	80034b8 <vGBMemoryWrite>
 80026ea:	bf00      	nop
 80026ec:	2400125c 	.word	0x2400125c

080026f0 <vRES_7_HL>:
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <vRES_7_HL+0x1c>)
 80026f2:	2107      	movs	r1, #7
 80026f4:	b510      	push	{r4, lr}
 80026f6:	88dc      	ldrh	r4, [r3, #6]
 80026f8:	4620      	mov	r0, r4
 80026fa:	f000 fe85 	bl	8003408 <ucGBFunctionRESHL>
 80026fe:	4601      	mov	r1, r0
 8002700:	4620      	mov	r0, r4
 8002702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002706:	f000 bed7 	b.w	80034b8 <vGBMemoryWrite>
 800270a:	bf00      	nop
 800270c:	2400125c 	.word	0x2400125c

08002710 <vSET_0_HL>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <vSET_0_HL+0x1c>)
 8002712:	2100      	movs	r1, #0
 8002714:	b510      	push	{r4, lr}
 8002716:	88dc      	ldrh	r4, [r3, #6]
 8002718:	4620      	mov	r0, r4
 800271a:	f000 fe81 	bl	8003420 <ucGBFunctionSETHL>
 800271e:	4601      	mov	r1, r0
 8002720:	4620      	mov	r0, r4
 8002722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002726:	f000 bec7 	b.w	80034b8 <vGBMemoryWrite>
 800272a:	bf00      	nop
 800272c:	2400125c 	.word	0x2400125c

08002730 <vSET_1_HL>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <vSET_1_HL+0x1c>)
 8002732:	2101      	movs	r1, #1
 8002734:	b510      	push	{r4, lr}
 8002736:	88dc      	ldrh	r4, [r3, #6]
 8002738:	4620      	mov	r0, r4
 800273a:	f000 fe71 	bl	8003420 <ucGBFunctionSETHL>
 800273e:	4601      	mov	r1, r0
 8002740:	4620      	mov	r0, r4
 8002742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002746:	f000 beb7 	b.w	80034b8 <vGBMemoryWrite>
 800274a:	bf00      	nop
 800274c:	2400125c 	.word	0x2400125c

08002750 <vSET_2_HL>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <vSET_2_HL+0x1c>)
 8002752:	2102      	movs	r1, #2
 8002754:	b510      	push	{r4, lr}
 8002756:	88dc      	ldrh	r4, [r3, #6]
 8002758:	4620      	mov	r0, r4
 800275a:	f000 fe61 	bl	8003420 <ucGBFunctionSETHL>
 800275e:	4601      	mov	r1, r0
 8002760:	4620      	mov	r0, r4
 8002762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002766:	f000 bea7 	b.w	80034b8 <vGBMemoryWrite>
 800276a:	bf00      	nop
 800276c:	2400125c 	.word	0x2400125c

08002770 <vSET_3_HL>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <vSET_3_HL+0x1c>)
 8002772:	2103      	movs	r1, #3
 8002774:	b510      	push	{r4, lr}
 8002776:	88dc      	ldrh	r4, [r3, #6]
 8002778:	4620      	mov	r0, r4
 800277a:	f000 fe51 	bl	8003420 <ucGBFunctionSETHL>
 800277e:	4601      	mov	r1, r0
 8002780:	4620      	mov	r0, r4
 8002782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002786:	f000 be97 	b.w	80034b8 <vGBMemoryWrite>
 800278a:	bf00      	nop
 800278c:	2400125c 	.word	0x2400125c

08002790 <vSET_4_HL>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <vSET_4_HL+0x1c>)
 8002792:	2104      	movs	r1, #4
 8002794:	b510      	push	{r4, lr}
 8002796:	88dc      	ldrh	r4, [r3, #6]
 8002798:	4620      	mov	r0, r4
 800279a:	f000 fe41 	bl	8003420 <ucGBFunctionSETHL>
 800279e:	4601      	mov	r1, r0
 80027a0:	4620      	mov	r0, r4
 80027a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027a6:	f000 be87 	b.w	80034b8 <vGBMemoryWrite>
 80027aa:	bf00      	nop
 80027ac:	2400125c 	.word	0x2400125c

080027b0 <vSET_5_HL>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <vSET_5_HL+0x1c>)
 80027b2:	2105      	movs	r1, #5
 80027b4:	b510      	push	{r4, lr}
 80027b6:	88dc      	ldrh	r4, [r3, #6]
 80027b8:	4620      	mov	r0, r4
 80027ba:	f000 fe31 	bl	8003420 <ucGBFunctionSETHL>
 80027be:	4601      	mov	r1, r0
 80027c0:	4620      	mov	r0, r4
 80027c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027c6:	f000 be77 	b.w	80034b8 <vGBMemoryWrite>
 80027ca:	bf00      	nop
 80027cc:	2400125c 	.word	0x2400125c

080027d0 <vSET_6_HL>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <vSET_6_HL+0x1c>)
 80027d2:	2106      	movs	r1, #6
 80027d4:	b510      	push	{r4, lr}
 80027d6:	88dc      	ldrh	r4, [r3, #6]
 80027d8:	4620      	mov	r0, r4
 80027da:	f000 fe21 	bl	8003420 <ucGBFunctionSETHL>
 80027de:	4601      	mov	r1, r0
 80027e0:	4620      	mov	r0, r4
 80027e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027e6:	f000 be67 	b.w	80034b8 <vGBMemoryWrite>
 80027ea:	bf00      	nop
 80027ec:	2400125c 	.word	0x2400125c

080027f0 <vSET_7_HL>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <vSET_7_HL+0x1c>)
 80027f2:	2107      	movs	r1, #7
 80027f4:	b510      	push	{r4, lr}
 80027f6:	88dc      	ldrh	r4, [r3, #6]
 80027f8:	4620      	mov	r0, r4
 80027fa:	f000 fe11 	bl	8003420 <ucGBFunctionSETHL>
 80027fe:	4601      	mov	r1, r0
 8002800:	4620      	mov	r0, r4
 8002802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002806:	f000 be57 	b.w	80034b8 <vGBMemoryWrite>
 800280a:	bf00      	nop
 800280c:	2400125c 	.word	0x2400125c

08002810 <vCCF>:
void vCCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); (checkbit(reg.F, C_FLAG)) ? resetbit(&reg.F, C_FLAG) : setbit(&reg.F, C_FLAG);}
 8002810:	b510      	push	{r4, lr}
 8002812:	4c0d      	ldr	r4, [pc, #52]	; (8002848 <vCCF+0x38>)
 8002814:	2106      	movs	r1, #6
 8002816:	4620      	mov	r0, r4
 8002818:	f000 f9b2 	bl	8002b80 <resetbit>
 800281c:	4620      	mov	r0, r4
 800281e:	2105      	movs	r1, #5
 8002820:	f000 f9ae 	bl	8002b80 <resetbit>
 8002824:	7820      	ldrb	r0, [r4, #0]
 8002826:	2104      	movs	r1, #4
 8002828:	f000 f9b2 	bl	8002b90 <checkbit>
 800282c:	b128      	cbz	r0, 800283a <vCCF+0x2a>
 800282e:	4620      	mov	r0, r4
 8002830:	2104      	movs	r1, #4
 8002832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002836:	f000 b9a3 	b.w	8002b80 <resetbit>
 800283a:	4620      	mov	r0, r4
 800283c:	2104      	movs	r1, #4
 800283e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002842:	f000 b995 	b.w	8002b70 <setbit>
 8002846:	bf00      	nop
 8002848:	2400125c 	.word	0x2400125c

0800284c <vRET_C.part.0>:
void vRET_NZ(){       customDuration = (checkbit(reg.F, Z_FLAG)) ?  8 : 20; if(checkbit(reg.F, Z_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 800284c:	4901      	ldr	r1, [pc, #4]	; (8002854 <vRET_C.part.0+0x8>)
 800284e:	1e88      	subs	r0, r1, #2
 8002850:	f000 bbee 	b.w	8003030 <vGBFunctionRET>
 8002854:	24001266 	.word	0x24001266

08002858 <vRET_NZ>:
 8002858:	b510      	push	{r4, lr}
 800285a:	4c0b      	ldr	r4, [pc, #44]	; (8002888 <vRET_NZ+0x30>)
 800285c:	2107      	movs	r1, #7
 800285e:	7820      	ldrb	r0, [r4, #0]
 8002860:	f000 f996 	bl	8002b90 <checkbit>
 8002864:	2800      	cmp	r0, #0
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <vRET_NZ+0x34>)
 8002868:	f04f 0107 	mov.w	r1, #7
 800286c:	bf14      	ite	ne
 800286e:	2208      	movne	r2, #8
 8002870:	2214      	moveq	r2, #20
 8002872:	7820      	ldrb	r0, [r4, #0]
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	f000 f98b 	bl	8002b90 <checkbit>
 800287a:	b100      	cbz	r0, 800287e <vRET_NZ+0x26>
 800287c:	bd10      	pop	{r4, pc}
 800287e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002882:	f7ff bfe3 	b.w	800284c <vRET_C.part.0>
 8002886:	bf00      	nop
 8002888:	2400125c 	.word	0x2400125c
 800288c:	24001094 	.word	0x24001094

08002890 <vRET_Z>:
void vRET_Z(){        customDuration = (checkbit(reg.F, Z_FLAG)) ?  20 : 8; if(checkbit(reg.F, Z_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002890:	b510      	push	{r4, lr}
 8002892:	4c0b      	ldr	r4, [pc, #44]	; (80028c0 <vRET_Z+0x30>)
 8002894:	2107      	movs	r1, #7
 8002896:	7820      	ldrb	r0, [r4, #0]
 8002898:	f000 f97a 	bl	8002b90 <checkbit>
 800289c:	2800      	cmp	r0, #0
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <vRET_Z+0x34>)
 80028a0:	f04f 0107 	mov.w	r1, #7
 80028a4:	bf14      	ite	ne
 80028a6:	2214      	movne	r2, #20
 80028a8:	2208      	moveq	r2, #8
 80028aa:	7820      	ldrb	r0, [r4, #0]
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	f000 f96f 	bl	8002b90 <checkbit>
 80028b2:	b900      	cbnz	r0, 80028b6 <vRET_Z+0x26>
 80028b4:	bd10      	pop	{r4, pc}
 80028b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ba:	f7ff bfc7 	b.w	800284c <vRET_C.part.0>
 80028be:	bf00      	nop
 80028c0:	2400125c 	.word	0x2400125c
 80028c4:	24001094 	.word	0x24001094

080028c8 <vRET_NC>:
void vRET_NC(){       customDuration =(checkbit(reg.F, C_FLAG)) ?  8 : 20; if(checkbit(reg.F, C_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 80028c8:	b510      	push	{r4, lr}
 80028ca:	4c0b      	ldr	r4, [pc, #44]	; (80028f8 <vRET_NC+0x30>)
 80028cc:	2104      	movs	r1, #4
 80028ce:	7820      	ldrb	r0, [r4, #0]
 80028d0:	f000 f95e 	bl	8002b90 <checkbit>
 80028d4:	2800      	cmp	r0, #0
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <vRET_NC+0x34>)
 80028d8:	f04f 0104 	mov.w	r1, #4
 80028dc:	bf14      	ite	ne
 80028de:	2208      	movne	r2, #8
 80028e0:	2214      	moveq	r2, #20
 80028e2:	7820      	ldrb	r0, [r4, #0]
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	f000 f953 	bl	8002b90 <checkbit>
 80028ea:	b100      	cbz	r0, 80028ee <vRET_NC+0x26>
 80028ec:	bd10      	pop	{r4, pc}
 80028ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028f2:	f7ff bfab 	b.w	800284c <vRET_C.part.0>
 80028f6:	bf00      	nop
 80028f8:	2400125c 	.word	0x2400125c
 80028fc:	24001094 	.word	0x24001094

08002900 <vRET_C>:
void vRET_C(){        customDuration =(checkbit(reg.F, C_FLAG)) ?  20 : 8; if(checkbit(reg.F, C_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002900:	b510      	push	{r4, lr}
 8002902:	4c0b      	ldr	r4, [pc, #44]	; (8002930 <vRET_C+0x30>)
 8002904:	2104      	movs	r1, #4
 8002906:	7820      	ldrb	r0, [r4, #0]
 8002908:	f000 f942 	bl	8002b90 <checkbit>
 800290c:	2800      	cmp	r0, #0
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <vRET_C+0x34>)
 8002910:	f04f 0104 	mov.w	r1, #4
 8002914:	bf14      	ite	ne
 8002916:	2214      	movne	r2, #20
 8002918:	2208      	moveq	r2, #8
 800291a:	7820      	ldrb	r0, [r4, #0]
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	f000 f937 	bl	8002b90 <checkbit>
 8002922:	b900      	cbnz	r0, 8002926 <vRET_C+0x26>
 8002924:	bd10      	pop	{r4, pc}
 8002926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800292a:	f7ff bf8f 	b.w	800284c <vRET_C.part.0>
 800292e:	bf00      	nop
 8002930:	2400125c 	.word	0x2400125c
 8002934:	24001094 	.word	0x24001094

08002938 <vLD_A_A>:
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop

0800293c <vLD_B_B>:
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop

08002940 <vLD_C_C>:
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop

08002944 <vLD_D_D>:
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop

08002948 <vLD_E_E>:
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop

0800294c <vLD_H_H>:
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop

08002950 <vLD_L_L>:
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop

08002954 <ucGetTstate>:

uint8_t ucGetTstate(){
	return tStates;
 8002954:	4b01      	ldr	r3, [pc, #4]	; (800295c <ucGetTstate+0x8>)
}
 8002956:	7818      	ldrb	r0, [r3, #0]
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	2400109d 	.word	0x2400109d

08002960 <vGBCPUInterruptHandler>:
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
		//vGBMemoryPrint();
	}
}

void vGBCPUInterruptHandler(){
 8002960:	b570      	push	{r4, r5, r6, lr}
	if(ucOneCycleInterruptDelay == 1){
 8002962:	4d39      	ldr	r5, [pc, #228]	; (8002a48 <vGBCPUInterruptHandler+0xe8>)
 8002964:	782c      	ldrb	r4, [r5, #0]
 8002966:	2c01      	cmp	r4, #1
 8002968:	d002      	beq.n	8002970 <vGBCPUInterruptHandler+0x10>

			tStates += 5*4;
		}

	}else{
		ucOneCycleInterruptDelay++;
 800296a:	3401      	adds	r4, #1
 800296c:	702c      	strb	r4, [r5, #0]
	}
}
 800296e:	bd70      	pop	{r4, r5, r6, pc}
		if(ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR) & 0x1F){
 8002970:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002974:	f000 fe02 	bl	800357c <ucGBMemoryRead>
 8002978:	4606      	mov	r6, r0
 800297a:	f64f 700f 	movw	r0, #65295	; 0xff0f
 800297e:	f000 fdfd 	bl	800357c <ucGBMemoryRead>
 8002982:	4030      	ands	r0, r6
 8002984:	06c6      	lsls	r6, r0, #27
 8002986:	d0f2      	beq.n	800296e <vGBCPUInterruptHandler+0xe>
			ucInterruptMasterEnable = 0;
 8002988:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <vGBCPUInterruptHandler+0xec>)
 800298a:	2600      	movs	r6, #0
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 800298c:	f64f 70ff 	movw	r0, #65535	; 0xffff
			ucInterruptMasterEnable = 0;
 8002990:	701e      	strb	r6, [r3, #0]
			ucOneCycleInterruptDelay = 0;
 8002992:	702e      	strb	r6, [r5, #0]
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002994:	f000 fdf2 	bl	800357c <ucGBMemoryRead>
 8002998:	4605      	mov	r5, r0
 800299a:	f64f 700f 	movw	r0, #65295	; 0xff0f
 800299e:	f000 fded 	bl	800357c <ucGBMemoryRead>
 80029a2:	4028      	ands	r0, r5
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = VBLANK_VECTOR;
 80029a4:	07c5      	lsls	r5, r0, #31
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 80029a6:	b2c3      	uxtb	r3, r0
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = VBLANK_VECTOR;
 80029a8:	d40c      	bmi.n	80029c4 <vGBCPUInterruptHandler+0x64>
			}else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = LCDSTAT_VECTOR;
 80029aa:	0798      	lsls	r0, r3, #30
 80029ac:	d417      	bmi.n	80029de <vGBCPUInterruptHandler+0x7e>
			}else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = TIMER_VECTOR;
 80029ae:	0759      	lsls	r1, r3, #29
 80029b0:	d422      	bmi.n	80029f8 <vGBCPUInterruptHandler+0x98>
			}else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = SERIAL_VECTOR;
 80029b2:	071a      	lsls	r2, r3, #28
 80029b4:	d42d      	bmi.n	8002a12 <vGBCPUInterruptHandler+0xb2>
			}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 4); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = JOYPAD_VECTOR;
 80029b6:	06db      	lsls	r3, r3, #27
 80029b8:	d438      	bmi.n	8002a2c <vGBCPUInterruptHandler+0xcc>
			tStates += 5*4;
 80029ba:	4a25      	ldr	r2, [pc, #148]	; (8002a50 <vGBCPUInterruptHandler+0xf0>)
 80029bc:	7813      	ldrb	r3, [r2, #0]
 80029be:	3314      	adds	r3, #20
 80029c0:	7013      	strb	r3, [r2, #0]
}
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = VBLANK_VECTOR;
 80029c4:	4631      	mov	r1, r6
 80029c6:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029ca:	f000 fdbb 	bl	8003544 <vGBMemoryResetBit>
 80029ce:	4921      	ldr	r1, [pc, #132]	; (8002a54 <vGBCPUInterruptHandler+0xf4>)
 80029d0:	1e88      	subs	r0, r1, #2
 80029d2:	f000 fb4b 	bl	800306c <vGBFunctionPUSH>
 80029d6:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <vGBCPUInterruptHandler+0xf8>)
 80029d8:	2240      	movs	r2, #64	; 0x40
 80029da:	815a      	strh	r2, [r3, #10]
 80029dc:	e7ed      	b.n	80029ba <vGBCPUInterruptHandler+0x5a>
			}else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = LCDSTAT_VECTOR;
 80029de:	4621      	mov	r1, r4
 80029e0:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029e4:	f000 fdae 	bl	8003544 <vGBMemoryResetBit>
 80029e8:	491a      	ldr	r1, [pc, #104]	; (8002a54 <vGBCPUInterruptHandler+0xf4>)
 80029ea:	1e88      	subs	r0, r1, #2
 80029ec:	f000 fb3e 	bl	800306c <vGBFunctionPUSH>
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <vGBCPUInterruptHandler+0xf8>)
 80029f2:	2248      	movs	r2, #72	; 0x48
 80029f4:	815a      	strh	r2, [r3, #10]
 80029f6:	e7e0      	b.n	80029ba <vGBCPUInterruptHandler+0x5a>
			}else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = TIMER_VECTOR;
 80029f8:	2102      	movs	r1, #2
 80029fa:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029fe:	f000 fda1 	bl	8003544 <vGBMemoryResetBit>
 8002a02:	4914      	ldr	r1, [pc, #80]	; (8002a54 <vGBCPUInterruptHandler+0xf4>)
 8002a04:	1e88      	subs	r0, r1, #2
 8002a06:	f000 fb31 	bl	800306c <vGBFunctionPUSH>
 8002a0a:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <vGBCPUInterruptHandler+0xf8>)
 8002a0c:	2250      	movs	r2, #80	; 0x50
 8002a0e:	815a      	strh	r2, [r3, #10]
 8002a10:	e7d3      	b.n	80029ba <vGBCPUInterruptHandler+0x5a>
			}else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = SERIAL_VECTOR;
 8002a12:	2103      	movs	r1, #3
 8002a14:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a18:	f000 fd94 	bl	8003544 <vGBMemoryResetBit>
 8002a1c:	490d      	ldr	r1, [pc, #52]	; (8002a54 <vGBCPUInterruptHandler+0xf4>)
 8002a1e:	1e88      	subs	r0, r1, #2
 8002a20:	f000 fb24 	bl	800306c <vGBFunctionPUSH>
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <vGBCPUInterruptHandler+0xf8>)
 8002a26:	2258      	movs	r2, #88	; 0x58
 8002a28:	815a      	strh	r2, [r3, #10]
 8002a2a:	e7c6      	b.n	80029ba <vGBCPUInterruptHandler+0x5a>
			}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 4); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = JOYPAD_VECTOR;
 8002a2c:	2104      	movs	r1, #4
 8002a2e:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a32:	f000 fd87 	bl	8003544 <vGBMemoryResetBit>
 8002a36:	4907      	ldr	r1, [pc, #28]	; (8002a54 <vGBCPUInterruptHandler+0xf4>)
 8002a38:	1e88      	subs	r0, r1, #2
 8002a3a:	f000 fb17 	bl	800306c <vGBFunctionPUSH>
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <vGBCPUInterruptHandler+0xf8>)
 8002a40:	2260      	movs	r2, #96	; 0x60
 8002a42:	815a      	strh	r2, [r3, #10]
 8002a44:	e7b9      	b.n	80029ba <vGBCPUInterruptHandler+0x5a>
 8002a46:	bf00      	nop
 8002a48:	240010a0 	.word	0x240010a0
 8002a4c:	2400109f 	.word	0x2400109f
 8002a50:	2400109d 	.word	0x2400109d
 8002a54:	24001266 	.word	0x24001266
 8002a58:	2400125c 	.word	0x2400125c

08002a5c <vGBCPUinstr>:

void vGBCPUinstr(uint8_t opcode){
 8002a5c:	b570      	push	{r4, r5, r6, lr}

	if(reg.PC == 0x7f86){
 8002a5e:	4d25      	ldr	r5, [pc, #148]	; (8002af4 <vGBCPUinstr+0x98>)
 8002a60:	f647 7386 	movw	r3, #32646	; 0x7f86
void vGBCPUinstr(uint8_t opcode){
 8002a64:	4604      	mov	r4, r0
	if(reg.PC == 0x7f86){
 8002a66:	896a      	ldrh	r2, [r5, #10]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d103      	bne.n	8002a74 <vGBCPUinstr+0x18>
		num++;
 8002a6c:	4a22      	ldr	r2, [pc, #136]	; (8002af8 <vGBCPUinstr+0x9c>)
 8002a6e:	7813      	ldrb	r3, [r2, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	7013      	strb	r3, [r2, #0]
	}
	vGBMemorySetOP(opcode);
 8002a74:	4620      	mov	r0, r4
 8002a76:	f000 fcdd 	bl	8003434 <vGBMemorySetOP>

	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002a7a:	2ccb      	cmp	r4, #203	; 0xcb
 8002a7c:	d01f      	beq.n	8002abe <vGBCPUinstr+0x62>
 8002a7e:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <vGBCPUinstr+0xa0>)
 8002a80:	8969      	ldrh	r1, [r5, #10]
 8002a82:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
	((void (*)(void))instructions[opcode].instr)();
 8002a86:	f852 2034 	ldr.w	r2, [r2, r4, lsl #3]
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002a8a:	7933      	ldrb	r3, [r6, #4]
 8002a8c:	440b      	add	r3, r1
 8002a8e:	816b      	strh	r3, [r5, #10]
	((void (*)(void))instructions[opcode].instr)();
 8002a90:	4790      	blx	r2

	if (opcode == 0xCB){
		tStates = prefix_instructions[ucGBMemoryRead(reg.PC - 1)].Tstate;
	}else if(instructions[opcode].Tstate == 255){
 8002a92:	7973      	ldrb	r3, [r6, #5]
 8002a94:	2bff      	cmp	r3, #255	; 0xff
 8002a96:	d006      	beq.n	8002aa6 <vGBCPUinstr+0x4a>
		tStates = customDuration;
	}else{
		tStates = instructions[opcode].Tstate;
 8002a98:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <vGBCPUinstr+0xa4>)
 8002a9a:	7013      	strb	r3, [r2, #0]
	}

	if(ucInterruptMasterEnable == 1)
 8002a9c:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <vGBCPUinstr+0xa8>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d008      	beq.n	8002ab6 <vGBCPUinstr+0x5a>
			vGBCPUInterruptHandler();

	//if( print == 1)
	//	vGBMemoryPrint();
}
 8002aa4:	bd70      	pop	{r4, r5, r6, pc}
		tStates = customDuration;
 8002aa6:	4a18      	ldr	r2, [pc, #96]	; (8002b08 <vGBCPUinstr+0xac>)
 8002aa8:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <vGBCPUinstr+0xa4>)
 8002aaa:	7812      	ldrb	r2, [r2, #0]
 8002aac:	701a      	strb	r2, [r3, #0]
	if(ucInterruptMasterEnable == 1)
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <vGBCPUinstr+0xa8>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d1f6      	bne.n	8002aa4 <vGBCPUinstr+0x48>
}
 8002ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vGBCPUInterruptHandler();
 8002aba:	f7ff bf51 	b.w	8002960 <vGBCPUInterruptHandler>
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002abe:	8968      	ldrh	r0, [r5, #10]
 8002ac0:	4c12      	ldr	r4, [pc, #72]	; (8002b0c <vGBCPUinstr+0xb0>)
 8002ac2:	3001      	adds	r0, #1
 8002ac4:	b280      	uxth	r0, r0
 8002ac6:	f000 fd59 	bl	800357c <ucGBMemoryRead>
 8002aca:	8969      	ldrh	r1, [r5, #10]
 8002acc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
	((void (*)(void))instructions[opcode].instr)();
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <vGBCPUinstr+0xa0>)
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002ad2:	7903      	ldrb	r3, [r0, #4]
	((void (*)(void))instructions[opcode].instr)();
 8002ad4:	f8d2 2658 	ldr.w	r2, [r2, #1624]	; 0x658
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002ad8:	440b      	add	r3, r1
 8002ada:	816b      	strh	r3, [r5, #10]
	((void (*)(void))instructions[opcode].instr)();
 8002adc:	4790      	blx	r2
		tStates = prefix_instructions[ucGBMemoryRead(reg.PC - 1)].Tstate;
 8002ade:	8968      	ldrh	r0, [r5, #10]
 8002ae0:	3801      	subs	r0, #1
 8002ae2:	b280      	uxth	r0, r0
 8002ae4:	f000 fd4a 	bl	800357c <ucGBMemoryRead>
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <vGBCPUinstr+0xa4>)
 8002aea:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002aee:	7942      	ldrb	r2, [r0, #5]
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e7d3      	b.n	8002a9c <vGBCPUinstr+0x40>
 8002af4:	2400125c 	.word	0x2400125c
 8002af8:	2400109c 	.word	0x2400109c
 8002afc:	24000008 	.word	0x24000008
 8002b00:	2400109d 	.word	0x2400109d
 8002b04:	2400109f 	.word	0x2400109f
 8002b08:	24001094 	.word	0x24001094
 8002b0c:	24000808 	.word	0x24000808

08002b10 <vGBCPUboot>:
void vGBCPUboot(){
 8002b10:	b570      	push	{r4, r5, r6, lr}
	if(reg.PC <= 0xFF){
 8002b12:	4c12      	ldr	r4, [pc, #72]	; (8002b5c <vGBCPUboot+0x4c>)
 8002b14:	8960      	ldrh	r0, [r4, #10]
 8002b16:	28ff      	cmp	r0, #255	; 0xff
 8002b18:	d90a      	bls.n	8002b30 <vGBCPUboot+0x20>
		numcount++;
 8002b1a:	4a11      	ldr	r2, [pc, #68]	; (8002b60 <vGBCPUboot+0x50>)
		if(n == 0){
 8002b1c:	4d11      	ldr	r5, [pc, #68]	; (8002b64 <vGBCPUboot+0x54>)
		numcount++;
 8002b1e:	e9d2 3100 	ldrd	r3, r1, [r2]
		if(n == 0){
 8002b22:	682e      	ldr	r6, [r5, #0]
		numcount++;
 8002b24:	3301      	adds	r3, #1
 8002b26:	f141 0100 	adc.w	r1, r1, #0
 8002b2a:	e9c2 3100 	strd	r3, r1, [r2]
		if(n == 0){
 8002b2e:	b12e      	cbz	r6, 8002b3c <vGBCPUboot+0x2c>
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b30:	f000 fd24 	bl	800357c <ucGBMemoryRead>
}
 8002b34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b38:	f7ff bf90 	b.w	8002a5c <vGBCPUinstr>
			vGBMemoryLoad(getRomPointer(), 256);
 8002b3c:	f000 ff5e 	bl	80039fc <getRomPointer>
 8002b40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b44:	f000 fc8c 	bl	8003460 <vGBMemoryLoad>
			n = 1;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	8960      	ldrh	r0, [r4, #10]
 8002b4c:	602b      	str	r3, [r5, #0]
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b4e:	f000 fd15 	bl	800357c <ucGBMemoryRead>
}
 8002b52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b56:	f7ff bf81 	b.w	8002a5c <vGBCPUinstr>
 8002b5a:	bf00      	nop
 8002b5c:	2400125c 	.word	0x2400125c
 8002b60:	24001250 	.word	0x24001250
 8002b64:	24001098 	.word	0x24001098

08002b68 <concat_16bit_bigEndian>:
#include <stdio.h>
#include "gbfunctions.h"
#include "gbmemory.h"

uint16_t concat_16bit_bigEndian(uint8_t x, uint8_t y) {
	return (uint16_t) (y << 8) + x;
 8002b68:	eb00 2001 	add.w	r0, r0, r1, lsl #8
}
 8002b6c:	b280      	uxth	r0, r0
 8002b6e:	4770      	bx	lr

08002b70 <setbit>:

void setbit(uint8_t *n, uint8_t bit){
	(*n) |= (0x1 << bit);
 8002b70:	2301      	movs	r3, #1
 8002b72:	fa03 f101 	lsl.w	r1, r3, r1
 8002b76:	7803      	ldrb	r3, [r0, #0]
 8002b78:	4319      	orrs	r1, r3
 8002b7a:	7001      	strb	r1, [r0, #0]
}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop

08002b80 <resetbit>:

void resetbit(uint8_t *n, uint8_t bit){
	(*n) &= ~(0x1 << bit);
 8002b80:	2301      	movs	r3, #1
 8002b82:	fa03 f101 	lsl.w	r1, r3, r1
 8002b86:	7803      	ldrb	r3, [r0, #0]
 8002b88:	ea23 0101 	bic.w	r1, r3, r1
 8002b8c:	7001      	strb	r1, [r0, #0]
}
 8002b8e:	4770      	bx	lr

08002b90 <checkbit>:

uint8_t checkbit(uint8_t n, uint8_t bit){
	return ((n >> bit) & 0x1);
 8002b90:	4108      	asrs	r0, r1
}
 8002b92:	f000 0001 	and.w	r0, r0, #1
 8002b96:	4770      	bx	lr

08002b98 <v8bitRegisterINC>:

void v8bitRegisterINC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002b98:	7803      	ldrb	r3, [r0, #0]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002ba0:	780b      	ldrb	r3, [r1, #0]
 8002ba2:	bf0c      	ite	eq
 8002ba4:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002ba8:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002bac:	700b      	strb	r3, [r1, #0]
	*reg = *reg + 1;
 8002bae:	7803      	ldrb	r3, [r0, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002bb4:	f991 2000 	ldrsb.w	r2, [r1]
 8002bb8:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8002bbc:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002bbe:	7800      	ldrb	r0, [r0, #0]
 8002bc0:	b118      	cbz	r0, 8002bca <v8bitRegisterINC+0x32>
	(*n) &= ~(0x1 << bit);
 8002bc2:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002bc6:	700b      	strb	r3, [r1, #0]
}
 8002bc8:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002bca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	700b      	strb	r3, [r1, #0]
}
 8002bd2:	4770      	bx	lr

08002bd4 <v8bitRegisterDEC>:

void v8bitRegisterDEC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8002bd4:	7803      	ldrb	r3, [r0, #0]
 8002bd6:	f013 0f0f 	tst.w	r3, #15
	(*n) &= ~(0x1 << bit);
 8002bda:	780b      	ldrb	r3, [r1, #0]
 8002bdc:	bf14      	ite	ne
 8002bde:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002be2:	f043 0320 	orreq.w	r3, r3, #32
 8002be6:	700b      	strb	r3, [r1, #0]
	*reg = *reg - 1;
 8002be8:	7803      	ldrb	r3, [r0, #0]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	7003      	strb	r3, [r0, #0]
	(*n) |= (0x1 << bit);
 8002bee:	f991 3000 	ldrsb.w	r3, [r1]
 8002bf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bf6:	700a      	strb	r2, [r1, #0]
	setbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002bf8:	7802      	ldrb	r2, [r0, #0]
 8002bfa:	b12a      	cbz	r2, 8002c08 <v8bitRegisterDEC+0x34>
	(*n) &= ~(0x1 << bit);
 8002bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c04:	700b      	strb	r3, [r1, #0]
}
 8002c06:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002c08:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	700b      	strb	r3, [r1, #0]
}
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop

08002c14 <vGBFunctionRLCA>:
	return ((n >> bit) & 0x1);
 8002c14:	7802      	ldrb	r2, [r0, #0]

void vGBFunctionRLCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(*reg, 7);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002c16:	09d3      	lsrs	r3, r2, #7
 8002c18:	bf0c      	ite	eq
 8002c1a:	2300      	moveq	r3, #0
 8002c1c:	2310      	movne	r3, #16
 8002c1e:	700b      	strb	r3, [r1, #0]
	*reg <<= 1;
 8002c20:	7803      	ldrb	r3, [r0, #0]
 8002c22:	005b      	lsls	r3, r3, #1
	*reg += tempCarry;
 8002c24:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8002c28:	7003      	strb	r3, [r0, #0]
}
 8002c2a:	4770      	bx	lr

08002c2c <vGBFunctionRRCA>:
	return ((n >> bit) & 0x1);
 8002c2c:	7803      	ldrb	r3, [r0, #0]

void vGBFunctionRRCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(*reg, 0);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002c2e:	f013 0301 	ands.w	r3, r3, #1
 8002c32:	d007      	beq.n	8002c44 <vGBFunctionRRCA+0x18>
 8002c34:	2310      	movs	r3, #16
 8002c36:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002c38:	7803      	ldrb	r3, [r0, #0]
 8002c3a:	085b      	lsrs	r3, r3, #1
	(*n) |= (0x1 << bit);
 8002c3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c40:	7003      	strb	r3, [r0, #0]
}
 8002c42:	4770      	bx	lr
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002c44:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002c46:	7803      	ldrb	r3, [r0, #0]
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	7003      	strb	r3, [r0, #0]
	if (tempCarry != 0) setbit(reg, 7);
}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop

08002c50 <vGBFunction16bitADD>:

void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
	uint32_t tempRes = *regHL + reg16;
 8002c50:	8803      	ldrh	r3, [r0, #0]
 8002c52:	4419      	add	r1, r3
	(tempRes & 0xFFFF0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002c54:	03cb      	lsls	r3, r1, #15
void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
 8002c56:	b430      	push	{r4, r5}
	(tempRes & 0xFFFF0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002c58:	d517      	bpl.n	8002c8a <vGBFunction16bitADD+0x3a>
	(*n) |= (0x1 << bit);
 8002c5a:	f992 3000 	ldrsb.w	r3, [r2]
 8002c5e:	f043 0310 	orr.w	r3, r3, #16
 8002c62:	b2dc      	uxtb	r4, r3
 8002c64:	7014      	strb	r4, [r2, #0]
	(((tempRes & 0x07FF) < (*regHL & 0x07FF))) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002c66:	f3c1 050a 	ubfx	r5, r1, #0, #11
 8002c6a:	8804      	ldrh	r4, [r0, #0]
 8002c6c:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8002c70:	42a5      	cmp	r5, r4
 8002c72:	d211      	bcs.n	8002c98 <vGBFunction16bitADD+0x48>
	(*n) |= (0x1 << bit);
 8002c74:	f043 0320 	orr.w	r3, r3, #32
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	7013      	strb	r3, [r2, #0]
	*regHL = (uint16_t)(tempRes & 0xffff);
 8002c7c:	8001      	strh	r1, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002c7e:	7813      	ldrb	r3, [r2, #0]
 8002c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	resetbit(flagReg, N_FLAG);
}
 8002c84:	bc30      	pop	{r4, r5}
	(*n) &= ~(0x1 << bit);
 8002c86:	7013      	strb	r3, [r2, #0]
}
 8002c88:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002c8a:	f992 4000 	ldrsb.w	r4, [r2]
 8002c8e:	f024 0310 	bic.w	r3, r4, #16
 8002c92:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002c96:	e7e5      	b.n	8002c64 <vGBFunction16bitADD+0x14>
	(*n) &= ~(0x1 << bit);
 8002c98:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002c9c:	e7ed      	b.n	8002c7a <vGBFunction16bitADD+0x2a>
 8002c9e:	bf00      	nop

08002ca0 <vGBFunctionRLA>:

void vGBFunctionRLA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002ca0:	f990 2000 	ldrsb.w	r2, [r0]
	return ((n >> bit) & 0x1);
 8002ca4:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002ca6:	10d2      	asrs	r2, r2, #3
	return ((n >> bit) & 0x1);
 8002ca8:	f3c3 1300 	ubfx	r3, r3, #4, #1
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002cac:	f002 0210 	and.w	r2, r2, #16
 8002cb0:	700a      	strb	r2, [r1, #0]
	*regA <<= 1;
 8002cb2:	7802      	ldrb	r2, [r0, #0]
	*regA += prevCarry;
 8002cb4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002cb8:	7003      	strb	r3, [r0, #0]
}
 8002cba:	4770      	bx	lr

08002cbc <vGBFunctionRRA>:

void vGBFunctionRRA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002cbc:	7802      	ldrb	r2, [r0, #0]
	return ((n >> bit) & 0x1);
 8002cbe:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002cc0:	0112      	lsls	r2, r2, #4
	return ((n >> bit) & 0x1);
 8002cc2:	091b      	lsrs	r3, r3, #4
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002cc4:	f002 0210 	and.w	r2, r2, #16
	*regA >>= 1;
	*regA += (prevCarry << 7);
 8002cc8:	01db      	lsls	r3, r3, #7
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002cca:	700a      	strb	r2, [r1, #0]
	*regA >>= 1;
 8002ccc:	7802      	ldrb	r2, [r0, #0]
	*regA += (prevCarry << 7);
 8002cce:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002cd2:	7003      	strb	r3, [r0, #0]
}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop

08002cd8 <vGBFunctionJR_NZ>:
	return ((n >> bit) & 0x1);
 8002cd8:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_NZ(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002cda:	4603      	mov	r3, r0
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002cdc:	09c9      	lsrs	r1, r1, #7
 8002cde:	d105      	bne.n	8002cec <vGBFunctionJR_NZ+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002ce0:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002ce2:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002ce4:	fa41 f282 	sxtab	r2, r1, r2
 8002ce8:	801a      	strh	r2, [r3, #0]
		return 12;
 8002cea:	4770      	bx	lr
		return 8;
 8002cec:	2008      	movs	r0, #8
	}
}
 8002cee:	4770      	bx	lr

08002cf0 <vGBFunctionDAA>:

void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
	uint16_t tempShort = *regA;
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002cf0:	780a      	ldrb	r2, [r1, #0]
void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
 8002cf2:	b410      	push	{r4}
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002cf4:	f012 0f40 	tst.w	r2, #64	; 0x40
	uint16_t tempShort = *regA;
 8002cf8:	7804      	ldrb	r4, [r0, #0]
 8002cfa:	b2a3      	uxth	r3, r4
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002cfc:	d012      	beq.n	8002d24 <vGBFunctionDAA+0x34>
		if(checkbit(*flagReg, H_FLAG) != 0) tempShort += 0xFA;
 8002cfe:	0694      	lsls	r4, r2, #26
 8002d00:	bf48      	it	mi
 8002d02:	33fa      	addmi	r3, #250	; 0xfa
		if(checkbit(*flagReg, C_FLAG) != 0) tempShort += 0xA0;
 8002d04:	06d2      	lsls	r2, r2, #27
 8002d06:	d425      	bmi.n	8002d54 <vGBFunctionDAA+0x64>
	}else{
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
		if(checkbit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; setbit(flagReg, C_FLAG);
		}else{ resetbit(flagReg, C_FLAG);}
	}
	*regA = tempShort;
 8002d08:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002d0a:	f991 2000 	ldrsb.w	r2, [r1]
 8002d0e:	f022 0320 	bic.w	r3, r2, #32
 8002d12:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, H_FLAG);
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002d14:	7800      	ldrb	r0, [r0, #0]
 8002d16:	b1b0      	cbz	r0, 8002d46 <vGBFunctionDAA+0x56>
	(*n) &= ~(0x1 << bit);
 8002d18:	f002 035f 	and.w	r3, r2, #95	; 0x5f
}
 8002d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d20:	700b      	strb	r3, [r1, #0]
 8002d22:	4770      	bx	lr
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002d24:	f012 0f20 	tst.w	r2, #32
 8002d28:	d017      	beq.n	8002d5a <vGBFunctionDAA+0x6a>
 8002d2a:	3306      	adds	r3, #6
 8002d2c:	b29b      	uxth	r3, r3
		if(checkbit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; setbit(flagReg, C_FLAG);
 8002d2e:	06d4      	lsls	r4, r2, #27
 8002d30:	d403      	bmi.n	8002d3a <vGBFunctionDAA+0x4a>
 8002d32:	f403 74f8 	and.w	r4, r3, #496	; 0x1f0
 8002d36:	2c90      	cmp	r4, #144	; 0x90
 8002d38:	d914      	bls.n	8002d64 <vGBFunctionDAA+0x74>
 8002d3a:	3360      	adds	r3, #96	; 0x60
	(*n) |= (0x1 << bit);
 8002d3c:	f042 0210 	orr.w	r2, r2, #16
		if(checkbit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; setbit(flagReg, C_FLAG);
 8002d40:	b29b      	uxth	r3, r3
	(*n) |= (0x1 << bit);
 8002d42:	700a      	strb	r2, [r1, #0]
}
 8002d44:	e7e0      	b.n	8002d08 <vGBFunctionDAA+0x18>
	(*n) |= (0x1 << bit);
 8002d46:	f063 037f 	orn	r3, r3, #127	; 0x7f
}
 8002d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
	(*n) |= (0x1 << bit);
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	700b      	strb	r3, [r1, #0]
}
 8002d52:	4770      	bx	lr
		if(checkbit(*flagReg, C_FLAG) != 0) tempShort += 0xA0;
 8002d54:	33a0      	adds	r3, #160	; 0xa0
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	e7d6      	b.n	8002d08 <vGBFunctionDAA+0x18>
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002d5a:	f004 040f 	and.w	r4, r4, #15
 8002d5e:	2c09      	cmp	r4, #9
 8002d60:	d9e5      	bls.n	8002d2e <vGBFunctionDAA+0x3e>
 8002d62:	e7e2      	b.n	8002d2a <vGBFunctionDAA+0x3a>
	(*n) &= ~(0x1 << bit);
 8002d64:	f022 0210 	bic.w	r2, r2, #16
 8002d68:	700a      	strb	r2, [r1, #0]
}
 8002d6a:	e7cd      	b.n	8002d08 <vGBFunctionDAA+0x18>

08002d6c <vGBFunctionJR_Z>:
	return ((n >> bit) & 0x1);
 8002d6c:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_Z(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002d6e:	4603      	mov	r3, r0
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002d70:	09c9      	lsrs	r1, r1, #7
 8002d72:	d005      	beq.n	8002d80 <vGBFunctionJR_Z+0x14>
		*regPC += (int8_t) r8value;
 8002d74:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002d76:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002d78:	fa41 f282 	sxtab	r2, r1, r2
 8002d7c:	801a      	strh	r2, [r3, #0]
		return 12;
 8002d7e:	4770      	bx	lr
	}else{
		return 8;
 8002d80:	2008      	movs	r0, #8
	}
}
 8002d82:	4770      	bx	lr

08002d84 <vGBFunctionJR_NC>:
	return ((n >> bit) & 0x1);
 8002d84:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_NC(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002d86:	4603      	mov	r3, r0
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002d88:	06c9      	lsls	r1, r1, #27
 8002d8a:	d405      	bmi.n	8002d98 <vGBFunctionJR_NC+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002d8c:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002d8e:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002d90:	fa41 f282 	sxtab	r2, r1, r2
 8002d94:	801a      	strh	r2, [r3, #0]
		return 12;
 8002d96:	4770      	bx	lr
		return 8;
 8002d98:	2008      	movs	r0, #8
	}
}
 8002d9a:	4770      	bx	lr

08002d9c <vMemoryLocationINC>:

void vMemoryLocationINC(uint16_t loc, uint8_t *flagReg){
 8002d9c:	b538      	push	{r3, r4, r5, lr}
 8002d9e:	460c      	mov	r4, r1
 8002da0:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002da2:	f000 fbeb 	bl	800357c <ucGBMemoryRead>
 8002da6:	f000 000f 	and.w	r0, r0, #15
	(*n) |= (0x1 << bit);
 8002daa:	7823      	ldrb	r3, [r4, #0]
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002dac:	280f      	cmp	r0, #15
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002dae:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002db0:	bf0c      	ite	eq
 8002db2:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002db6:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002dba:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002dbc:	f000 fbde 	bl	800357c <ucGBMemoryRead>
 8002dc0:	4601      	mov	r1, r0
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	3101      	adds	r1, #1
 8002dc6:	b2c9      	uxtb	r1, r1
 8002dc8:	f000 fb76 	bl	80034b8 <vGBMemoryWrite>
	(*n) &= ~(0x1 << bit);
 8002dcc:	7823      	ldrb	r3, [r4, #0]
	resetbit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002dce:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd4:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002dd6:	f000 fbd1 	bl	800357c <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002dda:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002ddc:	b118      	cbz	r0, 8002de6 <vMemoryLocationINC+0x4a>
	(*n) &= ~(0x1 << bit);
 8002dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002de2:	7023      	strb	r3, [r4, #0]
}
 8002de4:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dea:	7023      	strb	r3, [r4, #0]
}
 8002dec:	bd38      	pop	{r3, r4, r5, pc}
 8002dee:	bf00      	nop

08002df0 <vMemoryLocationDEC>:

void vMemoryLocationDEC(uint16_t loc, uint8_t *flagReg){
 8002df0:	b538      	push	{r3, r4, r5, lr}
 8002df2:	460c      	mov	r4, r1
 8002df4:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8002df6:	f000 fbc1 	bl	800357c <ucGBMemoryRead>
 8002dfa:	0702      	lsls	r2, r0, #28
	(*n) &= ~(0x1 << bit);
 8002dfc:	7823      	ldrb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002dfe:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002e00:	bf14      	ite	ne
 8002e02:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002e06:	f043 0320 	orreq.w	r3, r3, #32
 8002e0a:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002e0c:	f000 fbb6 	bl	800357c <ucGBMemoryRead>
 8002e10:	4601      	mov	r1, r0
 8002e12:	4628      	mov	r0, r5
 8002e14:	3901      	subs	r1, #1
 8002e16:	b2c9      	uxtb	r1, r1
 8002e18:	f000 fb4e 	bl	80034b8 <vGBMemoryWrite>
	(*n) |= (0x1 << bit);
 8002e1c:	7823      	ldrb	r3, [r4, #0]
	setbit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e1e:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e24:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e26:	f000 fba9 	bl	800357c <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002e2a:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e2c:	b118      	cbz	r0, 8002e36 <vMemoryLocationDEC+0x46>
	(*n) &= ~(0x1 << bit);
 8002e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e32:	7023      	strb	r3, [r4, #0]
}
 8002e34:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e3a:	7023      	strb	r3, [r4, #0]
}
 8002e3c:	bd38      	pop	{r3, r4, r5, pc}
 8002e3e:	bf00      	nop

08002e40 <vGBFunctionJR_C>:
	return ((n >> bit) & 0x1);
 8002e40:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_C(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002e42:	4603      	mov	r3, r0
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002e44:	06c9      	lsls	r1, r1, #27
 8002e46:	d505      	bpl.n	8002e54 <vGBFunctionJR_C+0x14>
		*regPC += (int8_t) r8value;
 8002e48:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002e4a:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002e4c:	fa41 f282 	sxtab	r2, r1, r2
 8002e50:	801a      	strh	r2, [r3, #0]
		return 12;
 8002e52:	4770      	bx	lr
	}else{
		return 8;
 8002e54:	2008      	movs	r0, #8
	}
}
 8002e56:	4770      	bx	lr

08002e58 <vGBFunctionADD>:

void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = *regA + regValue;
 8002e58:	7803      	ldrb	r3, [r0, #0]
void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002e5a:	b430      	push	{r4, r5}
	((*regA & 0xF) + (regValue & 0xF) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002e5c:	f002 050f 	and.w	r5, r2, #15
 8002e60:	f003 040f 	and.w	r4, r3, #15
	uint32_t tempRes = *regA + regValue;
 8002e64:	441a      	add	r2, r3
	((*regA & 0xF) + (regValue & 0xF) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002e66:	1963      	adds	r3, r4, r5
 8002e68:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002e6a:	f991 3000 	ldrsb.w	r3, [r1]
 8002e6e:	bfcc      	ite	gt
 8002e70:	f043 0320 	orrgt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002e74:	f023 0320 	bicle.w	r3, r3, #32
	resetbit(flagReg, N_FLAG);
	(tempRes > 0xFF) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002e78:	2aff      	cmp	r2, #255	; 0xff
 8002e7a:	dd0d      	ble.n	8002e98 <vGBFunctionADD+0x40>
	(*n) |= (0x1 << bit);
 8002e7c:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
	*regA = tempRes;
 8002e80:	b2d2      	uxtb	r2, r2
	(*n) |= (0x1 << bit);
 8002e82:	f043 0310 	orr.w	r3, r3, #16
 8002e86:	700b      	strb	r3, [r1, #0]
	*regA = tempRes;
 8002e88:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002e8a:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e8c:	b162      	cbz	r2, 8002ea8 <vGBFunctionADD+0x50>
	(*n) &= ~(0x1 << bit);
 8002e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002e92:	bc30      	pop	{r4, r5}
 8002e94:	700b      	strb	r3, [r1, #0]
 8002e96:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002e98:	f003 03af 	and.w	r3, r3, #175	; 0xaf
	*regA = tempRes;
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	700b      	strb	r3, [r1, #0]
 8002ea0:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002ea2:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002ea4:	2a00      	cmp	r2, #0
 8002ea6:	d1f2      	bne.n	8002e8e <vGBFunctionADD+0x36>
	(*n) |= (0x1 << bit);
 8002ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002eac:	bc30      	pop	{r4, r5}
 8002eae:	700b      	strb	r3, [r1, #0]
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop

08002eb4 <vGBFunctionADC>:

void vGBFunctionADC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002eb4:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002eb6:	780d      	ldrb	r5, [r1, #0]
	((*regA & 0xF) + ((regValue & 0xF) + checkbit(*flagReg, C_FLAG)) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002eb8:	f002 060f 	and.w	r6, r2, #15
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002ebc:	7804      	ldrb	r4, [r0, #0]
 8002ebe:	f3c5 1300 	ubfx	r3, r5, #4, #1
 8002ec2:	4422      	add	r2, r4
	((*regA & 0xF) + ((regValue & 0xF) + checkbit(*flagReg, C_FLAG)) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002ec4:	f004 070f 	and.w	r7, r4, #15
 8002ec8:	18f4      	adds	r4, r6, r3
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002eca:	4413      	add	r3, r2
	((*regA & 0xF) + ((regValue & 0xF) + checkbit(*flagReg, C_FLAG)) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002ecc:	19e2      	adds	r2, r4, r7
 8002ece:	2a0f      	cmp	r2, #15
	(*n) |= (0x1 << bit);
 8002ed0:	bfcc      	ite	gt
 8002ed2:	f045 0520 	orrgt.w	r5, r5, #32
	(*n) &= ~(0x1 << bit);
 8002ed6:	f025 0520 	bicle.w	r5, r5, #32
	resetbit(flagReg, N_FLAG);
	(tempRes > 0xFF) ? setbit(flagReg, C_FLAG) : resetbit(flagReg, C_FLAG);
 8002eda:	2bff      	cmp	r3, #255	; 0xff
	(*n) &= ~(0x1 << bit);
 8002edc:	b26d      	sxtb	r5, r5
	(tempRes > 0xFF) ? setbit(flagReg, C_FLAG) : resetbit(flagReg, C_FLAG);
 8002ede:	dd0d      	ble.n	8002efc <vGBFunctionADC+0x48>
	(*n) |= (0x1 << bit);
 8002ee0:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
	*regA = tempRes;
 8002ee4:	b2db      	uxtb	r3, r3
	(*n) |= (0x1 << bit);
 8002ee6:	f045 0510 	orr.w	r5, r5, #16
 8002eea:	700d      	strb	r5, [r1, #0]
	*regA = tempRes;
 8002eec:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002eee:	b163      	cbz	r3, 8002f0a <vGBFunctionADC+0x56>
	(*n) &= ~(0x1 << bit);
 8002ef0:	780b      	ldrb	r3, [r1, #0]
 8002ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002ef6:	bcf0      	pop	{r4, r5, r6, r7}
 8002ef8:	700b      	strb	r3, [r1, #0]
 8002efa:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002efc:	f005 05af 	and.w	r5, r5, #175	; 0xaf
	*regA = tempRes;
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	700d      	strb	r5, [r1, #0]
 8002f04:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f2      	bne.n	8002ef0 <vGBFunctionADC+0x3c>
	(*n) |= (0x1 << bit);
 8002f0a:	780b      	ldrb	r3, [r1, #0]
 8002f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002f10:	bcf0      	pop	{r4, r5, r6, r7}
 8002f12:	700b      	strb	r3, [r1, #0]
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop

08002f18 <vGBFunctionSUB>:

void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002f18:	7803      	ldrb	r3, [r0, #0]
 8002f1a:	4293      	cmp	r3, r2
void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002f1c:	b430      	push	{r4, r5}
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002f1e:	d21d      	bcs.n	8002f5c <vGBFunctionSUB+0x44>
	(*n) |= (0x1 << bit);
 8002f20:	f991 3000 	ldrsb.w	r3, [r1]
 8002f24:	f043 0310 	orr.w	r3, r3, #16
 8002f28:	b2dc      	uxtb	r4, r3
 8002f2a:	700c      	strb	r4, [r1, #0]
	((regValue & 0x0F) > (*regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002f2c:	f002 050f 	and.w	r5, r2, #15
 8002f30:	7804      	ldrb	r4, [r0, #0]
 8002f32:	f004 040f 	and.w	r4, r4, #15
 8002f36:	42a5      	cmp	r5, r4
 8002f38:	d920      	bls.n	8002f7c <vGBFunctionSUB+0x64>
	(*n) |= (0x1 << bit);
 8002f3a:	f043 0320 	orr.w	r3, r3, #32
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	700b      	strb	r3, [r1, #0]
	*regA -= regValue;
 8002f42:	7803      	ldrb	r3, [r0, #0]
 8002f44:	1a9a      	subs	r2, r3, r2
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	7002      	strb	r2, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f4a:	b172      	cbz	r2, 8002f6a <vGBFunctionSUB+0x52>
	(*n) &= ~(0x1 << bit);
 8002f4c:	780b      	ldrb	r3, [r1, #0]
 8002f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002f56:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002f58:	700b      	strb	r3, [r1, #0]
}
 8002f5a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002f5c:	f991 4000 	ldrsb.w	r4, [r1]
 8002f60:	f024 0310 	bic.w	r3, r4, #16
 8002f64:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002f68:	e7df      	b.n	8002f2a <vGBFunctionSUB+0x12>
	(*n) |= (0x1 << bit);
 8002f6a:	f991 3000 	ldrsb.w	r3, [r1]
 8002f6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8002f76:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002f78:	700b      	strb	r3, [r1, #0]
}
 8002f7a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002f7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002f80:	e7de      	b.n	8002f40 <vGBFunctionSUB+0x28>
 8002f82:	bf00      	nop

08002f84 <vGBFunctionSBC>:

void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = regValue + checkbit(*flagReg, C_FLAG);
 8002f84:	780b      	ldrb	r3, [r1, #0]
void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002f86:	b470      	push	{r4, r5, r6}
	return ((n >> bit) & 0x1);
 8002f88:	f3c3 1500 	ubfx	r5, r3, #4, #1
	((*regA & 0xF) - ((regValue & 0xF) + checkbit(*flagReg, C_FLAG)) < 0x0) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002f8c:	7804      	ldrb	r4, [r0, #0]
 8002f8e:	f002 060f 	and.w	r6, r2, #15
 8002f92:	f004 040f 	and.w	r4, r4, #15
 8002f96:	442e      	add	r6, r5
 8002f98:	1ba4      	subs	r4, r4, r6
 8002f9a:	2c00      	cmp	r4, #0
	(*n) |= (0x1 << bit);
 8002f9c:	bfb4      	ite	lt
 8002f9e:	f043 0320 	orrlt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002fa2:	f023 0320 	bicge.w	r3, r3, #32
 8002fa6:	700b      	strb	r3, [r1, #0]
 8002fa8:	b25e      	sxtb	r6, r3
	(*regA - regValue - checkbit(*flagReg, C_FLAG) < 0 ) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002faa:	7804      	ldrb	r4, [r0, #0]
 8002fac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002fb0:	1aa4      	subs	r4, r4, r2
 8002fb2:	1ae3      	subs	r3, r4, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	db19      	blt.n	8002fec <vGBFunctionSBC+0x68>
	(*n) &= ~(0x1 << bit);
 8002fb8:	f006 03ef 	and.w	r3, r6, #239	; 0xef
 8002fbc:	700b      	strb	r3, [r1, #0]
	*regA -= tempRes;
 8002fbe:	7804      	ldrb	r4, [r0, #0]
 8002fc0:	1aa3      	subs	r3, r4, r2
 8002fc2:	1b5b      	subs	r3, r3, r5
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002fc8:	b13b      	cbz	r3, 8002fda <vGBFunctionSBC+0x56>
	(*n) &= ~(0x1 << bit);
 8002fca:	780b      	ldrb	r3, [r1, #0]
 8002fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002fd4:	bc70      	pop	{r4, r5, r6}
	(*n) |= (0x1 << bit);
 8002fd6:	700b      	strb	r3, [r1, #0]
}
 8002fd8:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002fda:	f991 3000 	ldrsb.w	r3, [r1]
 8002fde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8002fe6:	bc70      	pop	{r4, r5, r6}
	(*n) |= (0x1 << bit);
 8002fe8:	700b      	strb	r3, [r1, #0]
}
 8002fea:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002fec:	f046 0310 	orr.w	r3, r6, #16
 8002ff0:	b2db      	uxtb	r3, r3
}
 8002ff2:	e7e3      	b.n	8002fbc <vGBFunctionSBC+0x38>

08002ff4 <vGBFunctionCP>:
	(*n) |= (0x1 << bit);
 8002ff4:	f991 3000 	ldrsb.w	r3, [r1]

void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002ff8:	4282      	cmp	r2, r0
void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
 8002ffa:	b430      	push	{r4, r5}
	((regValue & 0x0F) > (regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002ffc:	f002 040f 	and.w	r4, r2, #15
 8003000:	f000 050f 	and.w	r5, r0, #15
	(*n) |= (0x1 << bit);
 8003004:	bf8c      	ite	hi
 8003006:	f043 0310 	orrhi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 800300a:	f023 0310 	bicls.w	r3, r3, #16
	((regValue & 0x0F) > (regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 800300e:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 8003010:	bf8c      	ite	hi
 8003012:	f043 0320 	orrhi.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8003016:	f023 0320 	bicls.w	r3, r3, #32
	(regA == regValue) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800301a:	4282      	cmp	r2, r0
	(*n) |= (0x1 << bit);
 800301c:	bf0c      	ite	eq
 800301e:	f063 037f 	orneq	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8003022:	f003 037f 	andne.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8003026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 800302a:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 800302c:	700b      	strb	r3, [r1, #0]
}
 800302e:	4770      	bx	lr

08003030 <vGBFunctionRET>:

void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	4604      	mov	r4, r0
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8003034:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 8003036:	460e      	mov	r6, r1
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8003038:	f000 faa0 	bl	800357c <ucGBMemoryRead>
 800303c:	8823      	ldrh	r3, [r4, #0]
 800303e:	4605      	mov	r5, r0
 8003040:	1c58      	adds	r0, r3, #1
 8003042:	b280      	uxth	r0, r0
 8003044:	f000 fa9a 	bl	800357c <ucGBMemoryRead>
	return (uint16_t) (y << 8) + x;
 8003048:	eb05 2000 	add.w	r0, r5, r0, lsl #8
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 800304c:	8030      	strh	r0, [r6, #0]
	*regSP += 2;
 800304e:	8823      	ldrh	r3, [r4, #0]
 8003050:	3302      	adds	r3, #2
 8003052:	8023      	strh	r3, [r4, #0]
}
 8003054:	bd70      	pop	{r4, r5, r6, pc}
 8003056:	bf00      	nop

08003058 <vGBFunctionPOP>:
 8003058:	f7ff bfea 	b.w	8003030 <vGBFunctionRET>

0800305c <vGBFunctionJP_NZ_a16>:
	return ((n >> bit) & 0x1);
 800305c:	780b      	ldrb	r3, [r1, #0]
	*reg16 = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
	*regSP += 2;
}

uint8_t vGBFunctionJP_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, Z_FLAG) != 0){
 800305e:	09db      	lsrs	r3, r3, #7
 8003060:	d102      	bne.n	8003068 <vGBFunctionJP_NZ_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 8003062:	8002      	strh	r2, [r0, #0]
		return 16;
 8003064:	2010      	movs	r0, #16
 8003066:	4770      	bx	lr
		return 12;
 8003068:	200c      	movs	r0, #12
	}
}
 800306a:	4770      	bx	lr

0800306c <vGBFunctionPUSH>:
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}

void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 800306c:	b538      	push	{r3, r4, r5, lr}
 800306e:	4604      	mov	r4, r0
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 8003070:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 8003072:	460d      	mov	r5, r1
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 8003074:	8809      	ldrh	r1, [r1, #0]
 8003076:	3801      	subs	r0, #1
 8003078:	0a09      	lsrs	r1, r1, #8
 800307a:	b280      	uxth	r0, r0
 800307c:	f000 fa1c 	bl	80034b8 <vGBMemoryWrite>
	vGBMemoryWrite(*regSP - 2, (uint8_t) (*reg16 & 0x00FF));
 8003080:	8820      	ldrh	r0, [r4, #0]
 8003082:	7829      	ldrb	r1, [r5, #0]
 8003084:	3802      	subs	r0, #2
 8003086:	b280      	uxth	r0, r0
 8003088:	f000 fa16 	bl	80034b8 <vGBMemoryWrite>
	*regSP -= 2;
 800308c:	8823      	ldrh	r3, [r4, #0]
 800308e:	3b02      	subs	r3, #2
 8003090:	8023      	strh	r3, [r4, #0]
}
 8003092:	bd38      	pop	{r3, r4, r5, pc}

08003094 <vGBFunctionCALL_NZ_a16>:
uint8_t vGBFunctionCALL_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8003094:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 8003096:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8003098:	09db      	lsrs	r3, r3, #7
 800309a:	d001      	beq.n	80030a0 <vGBFunctionCALL_NZ_a16+0xc>
		return 12;
 800309c:	200c      	movs	r0, #12
}
 800309e:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 80030a0:	4604      	mov	r4, r0
 80030a2:	4610      	mov	r0, r2
 80030a4:	4621      	mov	r1, r4
 80030a6:	f7ff ffe1 	bl	800306c <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80030aa:	8820      	ldrh	r0, [r4, #0]
 80030ac:	3802      	subs	r0, #2
 80030ae:	b280      	uxth	r0, r0
 80030b0:	f000 fa64 	bl	800357c <ucGBMemoryRead>
 80030b4:	8823      	ldrh	r3, [r4, #0]
 80030b6:	4605      	mov	r5, r0
 80030b8:	1e58      	subs	r0, r3, #1
 80030ba:	b280      	uxth	r0, r0
 80030bc:	f000 fa5e 	bl	800357c <ucGBMemoryRead>
 80030c0:	4603      	mov	r3, r0
		return 24;
 80030c2:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80030c4:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80030c8:	8025      	strh	r5, [r4, #0]
}
 80030ca:	bd38      	pop	{r3, r4, r5, pc}

080030cc <vGBFunctionJP_Z_a16>:
	return ((n >> bit) & 0x1);
 80030cc:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, Z_FLAG) != 0){
 80030ce:	09db      	lsrs	r3, r3, #7
 80030d0:	d002      	beq.n	80030d8 <vGBFunctionJP_Z_a16+0xc>
		*regPC = addr;
 80030d2:	8002      	strh	r2, [r0, #0]
		return 16;
 80030d4:	2010      	movs	r0, #16
 80030d6:	4770      	bx	lr
	}else{
		return 12;
 80030d8:	200c      	movs	r0, #12
	}
}
 80030da:	4770      	bx	lr

080030dc <vGBFunctionCALL_Z_a16>:

uint8_t vGBFunctionCALL_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 80030dc:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 80030de:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, Z_FLAG) != 0){
 80030e0:	09db      	lsrs	r3, r3, #7
 80030e2:	d101      	bne.n	80030e8 <vGBFunctionCALL_Z_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 80030e4:	200c      	movs	r0, #12
	}
}
 80030e6:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 80030e8:	4604      	mov	r4, r0
 80030ea:	4610      	mov	r0, r2
 80030ec:	4621      	mov	r1, r4
 80030ee:	f7ff ffbd 	bl	800306c <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80030f2:	8820      	ldrh	r0, [r4, #0]
 80030f4:	3802      	subs	r0, #2
 80030f6:	b280      	uxth	r0, r0
 80030f8:	f000 fa40 	bl	800357c <ucGBMemoryRead>
 80030fc:	8823      	ldrh	r3, [r4, #0]
 80030fe:	4605      	mov	r5, r0
 8003100:	1e58      	subs	r0, r3, #1
 8003102:	b280      	uxth	r0, r0
 8003104:	f000 fa3a 	bl	800357c <ucGBMemoryRead>
 8003108:	4603      	mov	r3, r0
		return 24;
 800310a:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 800310c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003110:	8025      	strh	r5, [r4, #0]
}
 8003112:	bd38      	pop	{r3, r4, r5, pc}

08003114 <vGBFunctionJP_NC_a16>:
	return ((n >> bit) & 0x1);
 8003114:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, C_FLAG) != 0){
 8003116:	06db      	lsls	r3, r3, #27
 8003118:	d402      	bmi.n	8003120 <vGBFunctionJP_NC_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 800311a:	8002      	strh	r2, [r0, #0]
		return 16;
 800311c:	2010      	movs	r0, #16
 800311e:	4770      	bx	lr
		return 12;
 8003120:	200c      	movs	r0, #12
	}
}
 8003122:	4770      	bx	lr

08003124 <vGBFunctionCALL_NC_a16>:

uint8_t vGBFunctionCALL_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8003124:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 8003126:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, C_FLAG) != 0){
 8003128:	06db      	lsls	r3, r3, #27
 800312a:	d501      	bpl.n	8003130 <vGBFunctionCALL_NC_a16+0xc>
		return 12;
 800312c:	200c      	movs	r0, #12
	}else{
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}
 800312e:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003130:	4604      	mov	r4, r0
 8003132:	4610      	mov	r0, r2
 8003134:	4621      	mov	r1, r4
 8003136:	f7ff ff99 	bl	800306c <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800313a:	8820      	ldrh	r0, [r4, #0]
 800313c:	3802      	subs	r0, #2
 800313e:	b280      	uxth	r0, r0
 8003140:	f000 fa1c 	bl	800357c <ucGBMemoryRead>
 8003144:	8823      	ldrh	r3, [r4, #0]
 8003146:	4605      	mov	r5, r0
 8003148:	1e58      	subs	r0, r3, #1
 800314a:	b280      	uxth	r0, r0
 800314c:	f000 fa16 	bl	800357c <ucGBMemoryRead>
 8003150:	4603      	mov	r3, r0
		return 24;
 8003152:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8003154:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003158:	8025      	strh	r5, [r4, #0]
}
 800315a:	bd38      	pop	{r3, r4, r5, pc}

0800315c <vGBFunctionJP_C_a16>:
	return ((n >> bit) & 0x1);
 800315c:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, C_FLAG) != 0){
 800315e:	06db      	lsls	r3, r3, #27
 8003160:	d502      	bpl.n	8003168 <vGBFunctionJP_C_a16+0xc>
		*regPC = addr;
 8003162:	8002      	strh	r2, [r0, #0]
		return 16;
 8003164:	2010      	movs	r0, #16
 8003166:	4770      	bx	lr
	}else{
		return 12;
 8003168:	200c      	movs	r0, #12
	}
}
 800316a:	4770      	bx	lr

0800316c <vGBFunctionCALL_C_a16>:

uint8_t vGBFunctionCALL_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 800316c:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 800316e:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, C_FLAG) != 0){
 8003170:	06db      	lsls	r3, r3, #27
 8003172:	d401      	bmi.n	8003178 <vGBFunctionCALL_C_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 8003174:	200c      	movs	r0, #12
	}
}
 8003176:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003178:	4604      	mov	r4, r0
 800317a:	4610      	mov	r0, r2
 800317c:	4621      	mov	r1, r4
 800317e:	f7ff ff75 	bl	800306c <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003182:	8820      	ldrh	r0, [r4, #0]
 8003184:	3802      	subs	r0, #2
 8003186:	b280      	uxth	r0, r0
 8003188:	f000 f9f8 	bl	800357c <ucGBMemoryRead>
 800318c:	8823      	ldrh	r3, [r4, #0]
 800318e:	4605      	mov	r5, r0
 8003190:	1e58      	subs	r0, r3, #1
 8003192:	b280      	uxth	r0, r0
 8003194:	f000 f9f2 	bl	800357c <ucGBMemoryRead>
 8003198:	4603      	mov	r3, r0
		return 24;
 800319a:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 800319c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80031a0:	8025      	strh	r5, [r4, #0]
}
 80031a2:	bd38      	pop	{r3, r4, r5, pc}

080031a4 <vGBFunctionADD_SP_r8>:

void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
	//uint32_t tempRes = *regSP + (int8_t) r8value;
	uint32_t tempRes = *regSP +r8value;
 80031a4:	8803      	ldrh	r3, [r0, #0]
void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 80031a6:	b430      	push	{r4, r5}
	uint32_t tempRes = *regSP +r8value;
 80031a8:	189c      	adds	r4, r3, r2
	((tempRes & 0xFF) < (*regSP & 0xFF)) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	b2e5      	uxtb	r5, r4
 80031ae:	429d      	cmp	r5, r3
 80031b0:	d219      	bcs.n	80031e6 <vGBFunctionADD_SP_r8+0x42>
	(*n) |= (0x1 << bit);
 80031b2:	f991 3000 	ldrsb.w	r3, [r1]
 80031b6:	f043 0310 	orr.w	r3, r3, #16
 80031ba:	b2dd      	uxtb	r5, r3
 80031bc:	700d      	strb	r5, [r1, #0]
	((tempRes & 0xF) < (*regSP & 0xF)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 80031be:	f004 040f 	and.w	r4, r4, #15
 80031c2:	8805      	ldrh	r5, [r0, #0]
 80031c4:	f005 050f 	and.w	r5, r5, #15
 80031c8:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 80031ca:	bf34      	ite	cc
 80031cc:	f043 0320 	orrcc.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 80031d0:	f023 0320 	biccs.w	r3, r3, #32
 80031d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d8:	700b      	strb	r3, [r1, #0]
	//(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
	//(((*regSP & 0x0F) + ((int8_t)r8value & 0x0F)) > 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
	resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	//*regSP = tempRes & 0xFFFF;
	*regSP += (int8_t) r8value;
 80031da:	8803      	ldrh	r3, [r0, #0]
 80031dc:	fa43 f282 	sxtab	r2, r3, r2
}
 80031e0:	bc30      	pop	{r4, r5}
	*regSP += (int8_t) r8value;
 80031e2:	8002      	strh	r2, [r0, #0]
}
 80031e4:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80031e6:	f991 5000 	ldrsb.w	r5, [r1]
 80031ea:	f025 0310 	bic.w	r3, r5, #16
 80031ee:	f005 05ef 	and.w	r5, r5, #239	; 0xef
}
 80031f2:	e7e3      	b.n	80031bc <vGBFunctionADD_SP_r8+0x18>

080031f4 <vGBFunctionLD_HL_SP_r8>:

void vGBFunctionLD_HL_SP_r8(uint16_t *regHL, uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 80031f4:	b470      	push	{r4, r5, r6}
	//uint32_t tempRes = *regSP + (int8_t) r8value;
	uint32_t tempRes = *regSP +r8value;
 80031f6:	880c      	ldrh	r4, [r1, #0]
 80031f8:	18e5      	adds	r5, r4, r3
	((tempRes & 0xFF) < (*regSP & 0xFF)) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80031fa:	b2e4      	uxtb	r4, r4
 80031fc:	b2ee      	uxtb	r6, r5
 80031fe:	42a6      	cmp	r6, r4
 8003200:	d219      	bcs.n	8003236 <vGBFunctionLD_HL_SP_r8+0x42>
	(*n) |= (0x1 << bit);
 8003202:	f992 4000 	ldrsb.w	r4, [r2]
 8003206:	f044 0410 	orr.w	r4, r4, #16
 800320a:	b2e6      	uxtb	r6, r4
 800320c:	7016      	strb	r6, [r2, #0]
	((tempRes & 0xF) < (*regSP & 0xF)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 800320e:	f005 050f 	and.w	r5, r5, #15
 8003212:	880e      	ldrh	r6, [r1, #0]
 8003214:	f006 060f 	and.w	r6, r6, #15
 8003218:	42b5      	cmp	r5, r6
	(*n) |= (0x1 << bit);
 800321a:	bf34      	ite	cc
 800321c:	f044 0420 	orrcc.w	r4, r4, #32
	(*n) &= ~(0x1 << bit);
 8003220:	f024 0420 	biccs.w	r4, r4, #32
 8003224:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8003228:	7014      	strb	r4, [r2, #0]
	//(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
	//(((*regSP & 0x0F) + ((int8_t)r8value & 0x0F)) > 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
	resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	//*regHL = tempRes & 0xFFFF;
	 *regHL = *regSP + (int8_t) r8value;
 800322a:	880a      	ldrh	r2, [r1, #0]
 800322c:	fa42 f383 	sxtab	r3, r2, r3
}
 8003230:	bc70      	pop	{r4, r5, r6}
	 *regHL = *regSP + (int8_t) r8value;
 8003232:	8003      	strh	r3, [r0, #0]
}
 8003234:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003236:	f992 6000 	ldrsb.w	r6, [r2]
 800323a:	f026 0410 	bic.w	r4, r6, #16
 800323e:	f006 06ef 	and.w	r6, r6, #239	; 0xef
}
 8003242:	e7e3      	b.n	800320c <vGBFunctionLD_HL_SP_r8+0x18>

08003244 <ucGBFunctionRLC>:

/*prefix functions*/

uint8_t ucGBFunctionRLC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(regValue, 7);
	regValue <<= 1;
 8003244:	0043      	lsls	r3, r0, #1
	return ((n >> bit) & 0x1);
 8003246:	11c2      	asrs	r2, r0, #7
	regValue += tempCarry;
 8003248:	eb03 10d0 	add.w	r0, r3, r0, lsr #7
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800324c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003250:	d10a      	bne.n	8003268 <ucGBFunctionRLC+0x24>
	(*n) |= (0x1 << bit);
 8003252:	f991 3000 	ldrsb.w	r3, [r1]
 8003256:	f063 037f 	orn	r3, r3, #127	; 0x7f
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800325a:	b152      	cbz	r2, 8003272 <ucGBFunctionRLC+0x2e>
	(*n) |= (0x1 << bit);
 800325c:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003260:	f043 0310 	orr.w	r3, r3, #16
 8003264:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003266:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003268:	780b      	ldrb	r3, [r1, #0]
 800326a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800326e:	2a00      	cmp	r2, #0
 8003270:	d1f4      	bne.n	800325c <ucGBFunctionRLC+0x18>
	(*n) &= ~(0x1 << bit);
 8003272:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 8003276:	700b      	strb	r3, [r1, #0]
}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop

0800327c <ucGBFunctionRRC>:

uint8_t ucGBFunctionRRC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(regValue, 0);
	regValue >>= 1;
	if(tempCarry) setbit(&regValue, 7);
 800327c:	07c3      	lsls	r3, r0, #31
	regValue >>= 1;
 800327e:	ea4f 0250 	mov.w	r2, r0, lsr #1
	if(tempCarry) setbit(&regValue, 7);
 8003282:	d509      	bpl.n	8003298 <ucGBFunctionRRC+0x1c>
	(*n) &= ~(0x1 << bit);
 8003284:	780b      	ldrb	r3, [r1, #0]
	(*n) |= (0x1 << bit);
 8003286:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	(*n) &= ~(0x1 << bit);
 800328a:	f003 031f 	and.w	r3, r3, #31
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
	return regValue;
}
 800328e:	4610      	mov	r0, r2
	(*n) |= (0x1 << bit);
 8003290:	f043 0310 	orr.w	r3, r3, #16
 8003294:	700b      	strb	r3, [r1, #0]
}
 8003296:	4770      	bx	lr
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003298:	b942      	cbnz	r2, 80032ac <ucGBFunctionRRC+0x30>
	(*n) |= (0x1 << bit);
 800329a:	f991 3000 	ldrsb.w	r3, [r1]
 800329e:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 80032a2:	f003 038f 	and.w	r3, r3, #143	; 0x8f
}
 80032a6:	4610      	mov	r0, r2
 80032a8:	700b      	strb	r3, [r1, #0]
 80032aa:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80032ac:	780b      	ldrb	r3, [r1, #0]
 80032ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80032b2:	e7f6      	b.n	80032a2 <ucGBFunctionRRC+0x26>

080032b4 <ucGBFunctionRL>:

uint8_t ucGBFunctionRL(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
 80032b4:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x80) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80032b6:	f010 0f80 	tst.w	r0, #128	; 0x80
	return ((n >> bit) & 0x1);
 80032ba:	f3c3 1200 	ubfx	r2, r3, #4, #1
	(*n) |= (0x1 << bit);
 80032be:	bf14      	ite	ne
 80032c0:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80032c4:	f023 0310 	biceq.w	r3, r3, #16
	regValue <<= 1;
	regValue += prevCarry;
 80032c8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
	(*n) &= ~(0x1 << bit);
 80032cc:	b25b      	sxtb	r3, r3
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80032ce:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80032d2:	d105      	bne.n	80032e0 <ucGBFunctionRL+0x2c>
	(*n) |= (0x1 << bit);
 80032d4:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80032d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032dc:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80032de:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	700b      	strb	r3, [r1, #0]
}
 80032e6:	4770      	bx	lr

080032e8 <ucGBFunctionRR>:

uint8_t ucGBFunctionRR(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
 80032e8:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80032ea:	f010 0f01 	tst.w	r0, #1
	return ((n >> bit) & 0x1);
 80032ee:	ea4f 1213 	mov.w	r2, r3, lsr #4
	(*n) |= (0x1 << bit);
 80032f2:	bf14      	ite	ne
 80032f4:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80032f8:	f023 0310 	biceq.w	r3, r3, #16
	regValue >>= 1;
	regValue += (prevCarry << 7);
 80032fc:	01d2      	lsls	r2, r2, #7
	(*n) &= ~(0x1 << bit);
 80032fe:	b25b      	sxtb	r3, r3
	regValue += (prevCarry << 7);
 8003300:	eb02 0050 	add.w	r0, r2, r0, lsr #1
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003304:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003308:	d105      	bne.n	8003316 <ucGBFunctionRR+0x2e>
	(*n) |= (0x1 << bit);
 800330a:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 800330e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003312:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003314:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	700b      	strb	r3, [r1, #0]
}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop

08003320 <ucGBFunctionSLA>:

uint8_t ucGBFunctionSLA(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x80) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003320:	0602      	lsls	r2, r0, #24
	(*n) |= (0x1 << bit);
 8003322:	f991 3000 	ldrsb.w	r3, [r1]
	regValue <<= 1;
 8003326:	ea4f 0040 	mov.w	r0, r0, lsl #1
	(*n) |= (0x1 << bit);
 800332a:	bf4c      	ite	mi
 800332c:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003330:	f023 0310 	bicpl.w	r3, r3, #16
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003334:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003338:	d105      	bne.n	8003346 <ucGBFunctionSLA+0x26>
	(*n) |= (0x1 << bit);
 800333a:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 800333e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003342:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003344:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	700b      	strb	r3, [r1, #0]
}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop

08003350 <ucGBFunctionSRA>:

uint8_t ucGBFunctionSRA(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempMSB = regValue & 0x80;
 8003350:	f000 0380 	and.w	r3, r0, #128	; 0x80
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003354:	f010 0f01 	tst.w	r0, #1
	(*n) |= (0x1 << bit);
 8003358:	f991 2000 	ldrsb.w	r2, [r1]
	regValue >>= 1;
	regValue += tempMSB;
 800335c:	eb03 0050 	add.w	r0, r3, r0, lsr #1
	(*n) |= (0x1 << bit);
 8003360:	bf14      	ite	ne
 8003362:	f042 0210 	orrne.w	r2, r2, #16
	(*n) &= ~(0x1 << bit);
 8003366:	f022 0210 	biceq.w	r2, r2, #16
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800336a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800336e:	d105      	bne.n	800337c <ucGBFunctionSRA+0x2c>
	(*n) |= (0x1 << bit);
 8003370:	f002 039f 	and.w	r3, r2, #159	; 0x9f
 8003374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003378:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800337a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800337c:	f002 031f 	and.w	r3, r2, #31
 8003380:	700b      	strb	r3, [r1, #0]
}
 8003382:	4770      	bx	lr

08003384 <ucGBFunctionSWAP>:

uint8_t ucGBFunctionSWAP(uint8_t regValue, uint8_t *flagReg){
	regValue = ((regValue & 0x0F) << 4) | ((regValue & 0xF0) >> 4);
 8003384:	0903      	lsrs	r3, r0, #4
 8003386:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800338a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800338e:	d107      	bne.n	80033a0 <ucGBFunctionSWAP+0x1c>
	(*n) |= (0x1 << bit);
 8003390:	f991 3000 	ldrsb.w	r3, [r1]
 8003394:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8003398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339c:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	resetbit(flagReg, C_FLAG);
	return regValue;
}
 800339e:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80033a0:	780b      	ldrb	r3, [r1, #0]
 80033a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033aa:	700b      	strb	r3, [r1, #0]
}
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop

080033b0 <ucGBFunctionSRL>:

uint8_t ucGBFunctionSRL(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80033b0:	07c2      	lsls	r2, r0, #31
	(*n) |= (0x1 << bit);
 80033b2:	f991 3000 	ldrsb.w	r3, [r1]
 80033b6:	bf4c      	ite	mi
 80033b8:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80033bc:	f023 0310 	bicpl.w	r3, r3, #16
	regValue >>= 1;
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80033c0:	0840      	lsrs	r0, r0, #1
 80033c2:	d105      	bne.n	80033d0 <ucGBFunctionSRL+0x20>
	(*n) |= (0x1 << bit);
 80033c4:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80033c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033cc:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80033ce:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	700b      	strb	r3, [r1, #0]
}
 80033d6:	4770      	bx	lr

080033d8 <vGBFunctionBIT>:
	return ((n >> bit) & 0x1);
 80033d8:	fa40 f101 	asr.w	r1, r0, r1

void vGBFunctionBIT(uint8_t regValue, uint8_t bit, uint8_t *flagReg){
	(checkbit(regValue, bit) != 0) ?  resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 80033dc:	07cb      	lsls	r3, r1, #31
 80033de:	d508      	bpl.n	80033f2 <vGBFunctionBIT+0x1a>
	(*n) &= ~(0x1 << bit);
 80033e0:	7813      	ldrb	r3, [r2, #0]
 80033e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 80033ea:	f043 0320 	orr.w	r3, r3, #32
 80033ee:	7013      	strb	r3, [r2, #0]
	resetbit(flagReg, N_FLAG);
	setbit(flagReg, H_FLAG);
}
 80033f0:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 80033f2:	f992 3000 	ldrsb.w	r3, [r2]
 80033f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 80033fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 80033fe:	f043 0320 	orr.w	r3, r3, #32
 8003402:	7013      	strb	r3, [r2, #0]
}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop

08003408 <ucGBFunctionRESHL>:

uint8_t ucGBFunctionRESHL(uint16_t regHLaddr, uint8_t bit){
 8003408:	b510      	push	{r4, lr}
 800340a:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 800340c:	f000 f8b6 	bl	800357c <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8003410:	2301      	movs	r3, #1
 8003412:	fa03 f104 	lsl.w	r1, r3, r4
 8003416:	ea20 0001 	bic.w	r0, r0, r1
	resetbit(&tempRes, bit);
	return tempRes;
}
 800341a:	b2c0      	uxtb	r0, r0
 800341c:	bd10      	pop	{r4, pc}
 800341e:	bf00      	nop

08003420 <ucGBFunctionSETHL>:

uint8_t ucGBFunctionSETHL(uint16_t regHLaddr, uint8_t bit){
 8003420:	b510      	push	{r4, lr}
 8003422:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 8003424:	f000 f8aa 	bl	800357c <ucGBMemoryRead>
	(*n) |= (0x1 << bit);
 8003428:	2301      	movs	r3, #1
 800342a:	fa03 f104 	lsl.w	r1, r3, r4
 800342e:	4308      	orrs	r0, r1
	setbit(&tempRes, bit);
	return tempRes;
}
 8003430:	b2c0      	uxtb	r0, r0
 8003432:	bd10      	pop	{r4, pc}

08003434 <vGBMemorySetOP>:
 * @brief Set the current opcode for Debug Printing to LCD screen. See vGBMemoryPrint();
 * @param op current opcode.
 * @return Nothing
 */
void vGBMemorySetOP(uint8_t op){
	current_op = op;
 8003434:	4b01      	ldr	r3, [pc, #4]	; (800343c <vGBMemorySetOP+0x8>)
 8003436:	7018      	strb	r0, [r3, #0]
}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	24001258 	.word	0x24001258

08003440 <vGBMemoryInit>:
 * @details At start up the Joypad Register should read 0xCF to denote that no Joypad buttons are being pressed. The IF register should read
 * 			0xE1 to set the appropriate flags.
 * @return Nothing
 */
void vGBMemoryInit(){
	mem.ram[0xFF00] = 0xCF;
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <vGBMemoryInit+0x1c>)
	mem.ram[0xFF0F] = 0xE1;
 8003442:	f64f 700f 	movw	r0, #65295	; 0xff0f
	mem.ram[0xFF00] = 0xCF;
 8003446:	21cf      	movs	r1, #207	; 0xcf
 8003448:	f503 427f 	add.w	r2, r3, #65280	; 0xff00
void vGBMemoryInit(){
 800344c:	b410      	push	{r4}
	mem.ram[0xFF0F] = 0xE1;
 800344e:	24e1      	movs	r4, #225	; 0xe1
	mem.ram[0xFF00] = 0xCF;
 8003450:	7011      	strb	r1, [r2, #0]
	mem.ram[0xFF0F] = 0xE1;
 8003452:	541c      	strb	r4, [r3, r0]
}
 8003454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	2400126c 	.word	0x2400126c

08003460 <vGBMemoryLoad>:
 * @brief Loads data of amount bytes into Memory maps from mem.ram[0] to mem.ram[bytes - 1].
 * @param data data to be loaded into memory map.
 * @param size amount of bytes.
 * @return Nothing
 */
void vGBMemoryLoad(const void* data, uint32_t bytes){
 8003460:	4603      	mov	r3, r0
 8003462:	460a      	mov	r2, r1
	memcpy(mem.ram , data, bytes);
 8003464:	4801      	ldr	r0, [pc, #4]	; (800346c <vGBMemoryLoad+0xc>)
 8003466:	4619      	mov	r1, r3
 8003468:	f006 ba2c 	b.w	80098c4 <memcpy>
 800346c:	2400126c 	.word	0x2400126c

08003470 <vGBMemoryJoypad>:
 * @brief Handles any writes to the Joypad Register 0xFF00
 * @details
 * @param data data trying to be written to Joypad Register.
 * @return Nothing
 */
uint8_t vGBMemoryJoypad(){
 8003470:	b508      	push	{r3, lr}
	uint32_t value = 0;
	uint8_t mask = 0;

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != 0){
 8003472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003476:	480d      	ldr	r0, [pc, #52]	; (80034ac <vGBMemoryJoypad+0x3c>)
 8003478:	f003 fe3e 	bl	80070f8 <HAL_GPIO_ReadPin>
		if(joypadSELbut == 0x20){
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <vGBMemoryJoypad+0x40>)
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != 0){
 800347e:	b140      	cbz	r0, 8003492 <vGBMemoryJoypad+0x22>
		if(joypadSELbut == 0x20){
 8003480:	7818      	ldrb	r0, [r3, #0]
 8003482:	2820      	cmp	r0, #32
 8003484:	d00c      	beq.n	80034a0 <vGBMemoryJoypad+0x30>
//	    mask = (0x2);
//	}else{
//		mask = (0x1);
//	}

	return 0xC0 | (0xF^mask) | (joypadSELbut | joypadSELdir);
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <vGBMemoryJoypad+0x44>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	4318      	orrs	r0, r3
 800348c:	f040 00cf 	orr.w	r0, r0, #207	; 0xcf
}
 8003490:	bd08      	pop	{r3, pc}
 8003492:	7818      	ldrb	r0, [r3, #0]
	return 0xC0 | (0xF^mask) | (joypadSELbut | joypadSELdir);
 8003494:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <vGBMemoryJoypad+0x44>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	4318      	orrs	r0, r3
 800349a:	f040 00cf 	orr.w	r0, r0, #207	; 0xcf
 800349e:	e7f7      	b.n	8003490 <vGBMemoryJoypad+0x20>
			return 0xC0 | (0xF^0x8) | (joypadSELbut | joypadSELdir);
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <vGBMemoryJoypad+0x44>)
 80034a2:	7818      	ldrb	r0, [r3, #0]
 80034a4:	f040 00e7 	orr.w	r0, r0, #231	; 0xe7
}
 80034a8:	bd08      	pop	{r3, pc}
 80034aa:	bf00      	nop
 80034ac:	58020800 	.word	0x58020800
 80034b0:	2401126c 	.word	0x2401126c
 80034b4:	24001268 	.word	0x24001268

080034b8 <vGBMemoryWrite>:
 * @details
 * @param address
 * @param data
 */
void vGBMemoryWrite(uint16_t address, uint8_t data){
	if(address == JOY_ADDR){
 80034b8:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 80034bc:	d011      	beq.n	80034e2 <vGBMemoryWrite+0x2a>
uint8_t ucGBMemoryRead(uint16_t address){
	if(address == JOY_ADDR){
		return vGBMemoryJoypad();

	}
	return mem.ram[address];
 80034be:	4a11      	ldr	r2, [pc, #68]	; (8003504 <vGBMemoryWrite+0x4c>)
 80034c0:	f64f 7341 	movw	r3, #65345	; 0xff41
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 80034c4:	5cd3      	ldrb	r3, [r2, r3]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d003      	beq.n	80034d6 <vGBMemoryWrite+0x1e>
	if((address >= 0x0000 && address < 0x8000))
 80034ce:	0403      	lsls	r3, r0, #16
	mem.ram[address] = data;
 80034d0:	bf48      	it	mi
 80034d2:	5411      	strbmi	r1, [r2, r0]
}
 80034d4:	4770      	bx	lr
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 80034d6:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
 80034da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034de:	d2f6      	bcs.n	80034ce <vGBMemoryWrite+0x16>
 80034e0:	e7f8      	b.n	80034d4 <vGBMemoryWrite+0x1c>
		if((data >> 4) & 0x1)
 80034e2:	06c8      	lsls	r0, r1, #27
 80034e4:	ea4f 1311 	mov.w	r3, r1, lsr #4
 80034e8:	d406      	bmi.n	80034f8 <vGBMemoryWrite+0x40>
		else if((data >> 4) & 0x2)
 80034ea:	079a      	lsls	r2, r3, #30
 80034ec:	d5f2      	bpl.n	80034d4 <vGBMemoryWrite+0x1c>
			joypadSELbut = data & 0x20;
 80034ee:	f001 0120 	and.w	r1, r1, #32
 80034f2:	4b05      	ldr	r3, [pc, #20]	; (8003508 <vGBMemoryWrite+0x50>)
 80034f4:	7019      	strb	r1, [r3, #0]
 80034f6:	4770      	bx	lr
			joypadSELdir = data & 0x10;
 80034f8:	f001 0110 	and.w	r1, r1, #16
 80034fc:	4b03      	ldr	r3, [pc, #12]	; (800350c <vGBMemoryWrite+0x54>)
 80034fe:	7019      	strb	r1, [r3, #0]
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	2400126c 	.word	0x2400126c
 8003508:	2401126c 	.word	0x2401126c
 800350c:	24001268 	.word	0x24001268

08003510 <vGBMemorySetBit>:
	return mem.ram[address];
 8003510:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <vGBMemorySetBit+0x30>)
 8003512:	f64f 7341 	movw	r3, #65345	; 0xff41
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b03      	cmp	r3, #3
 800351e:	d009      	beq.n	8003534 <vGBMemorySetBit+0x24>
void vGBMemorySetBit(uint16_t address, uint8_t bit){
 8003520:	b410      	push	{r4}
	mem.ram[address] |= (0x1 << bit);
 8003522:	2401      	movs	r4, #1
 8003524:	5c13      	ldrb	r3, [r2, r0]
 8003526:	fa04 f101 	lsl.w	r1, r4, r1
 800352a:	4319      	orrs	r1, r3
 800352c:	5411      	strb	r1, [r2, r0]
}
 800352e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003532:	4770      	bx	lr
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 8003534:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
 8003538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800353c:	d2f0      	bcs.n	8003520 <vGBMemorySetBit+0x10>
 800353e:	4770      	bx	lr
 8003540:	2400126c 	.word	0x2400126c

08003544 <vGBMemoryResetBit>:
	return mem.ram[address];
 8003544:	4a0c      	ldr	r2, [pc, #48]	; (8003578 <vGBMemoryResetBit+0x34>)
 8003546:	f64f 7341 	movw	r3, #65345	; 0xff41
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 800354a:	5cd3      	ldrb	r3, [r2, r3]
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	2b03      	cmp	r3, #3
 8003552:	d00a      	beq.n	800356a <vGBMemoryResetBit+0x26>
void vGBMemoryResetBit(uint16_t address, uint8_t bit){
 8003554:	b410      	push	{r4}
	mem.ram[address] &= ~(0x1 << bit);
 8003556:	2401      	movs	r4, #1
 8003558:	5c13      	ldrb	r3, [r2, r0]
 800355a:	fa04 f101 	lsl.w	r1, r4, r1
 800355e:	ea23 0101 	bic.w	r1, r3, r1
 8003562:	5411      	strb	r1, [r2, r0]
}
 8003564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003568:	4770      	bx	lr
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 800356a:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
 800356e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003572:	d2ef      	bcs.n	8003554 <vGBMemoryResetBit+0x10>
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	2400126c 	.word	0x2400126c

0800357c <ucGBMemoryRead>:
	if(address == JOY_ADDR){
 800357c:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8003580:	d002      	beq.n	8003588 <ucGBMemoryRead+0xc>
	return mem.ram[address];
 8003582:	4b02      	ldr	r3, [pc, #8]	; (800358c <ucGBMemoryRead+0x10>)
}
 8003584:	5c18      	ldrb	r0, [r3, r0]
 8003586:	4770      	bx	lr
		return vGBMemoryJoypad();
 8003588:	f7ff bf72 	b.w	8003470 <vGBMemoryJoypad>
 800358c:	2400126c 	.word	0x2400126c

08003590 <usGBMemoryReadShort>:
 *
 * @param address
 * @return
 */
uint16_t usGBMemoryReadShort(uint16_t address){
	return *((uint16_t*) &mem.ram[address]);
 8003590:	4b01      	ldr	r3, [pc, #4]	; (8003598 <usGBMemoryReadShort+0x8>)
}
 8003592:	5a18      	ldrh	r0, [r3, r0]
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	2400126c 	.word	0x2400126c

0800359c <setMode.part.0>:
 * @return Nothing
 */
void setMode(uint8_t mode){
	Mode = mode;
	switch (mode) {
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 800359c:	2101      	movs	r1, #1
 800359e:	f64f 7041 	movw	r0, #65345	; 0xff41
void setMode(uint8_t mode){
 80035a2:	b508      	push	{r3, lr}
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 80035a4:	f7ff ffce 	bl	8003544 <vGBMemoryResetBit>
 80035a8:	2100      	movs	r1, #0
 80035aa:	f64f 7041 	movw	r0, #65345	; 0xff41
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
		default:                                                                       break;
	}
}
 80035ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 80035b2:	f7ff bfc7 	b.w	8003544 <vGBMemoryResetBit>
 80035b6:	bf00      	nop

080035b8 <vSetFrameBuffer>:
	memset(gb_frame, 0, 160*144*4*3);
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <vSetFrameBuffer+0x10>)
 80035ba:	f44f 2287 	mov.w	r2, #276480	; 0x43800
 80035be:	2100      	movs	r1, #0
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	f006 b98d 	b.w	80098e0 <memset>
 80035c6:	bf00      	nop
 80035c8:	24001008 	.word	0x24001008

080035cc <vCheckBGP>:
void vCheckBGP(){
 80035cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80035ce:	f64f 7047 	movw	r0, #65351	; 0xff47
			case 2: color_to_pallette[i] = DARK_GREEN;     break;
 80035d2:	4f0e      	ldr	r7, [pc, #56]	; (800360c <vCheckBGP+0x40>)
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80035d4:	f7ff ffd2 	bl	800357c <ucGBMemoryRead>
			case 3: color_to_pallette[i] = DARKEST_GREEN;  break;
 80035d8:	4e0d      	ldr	r6, [pc, #52]	; (8003610 <vCheckBGP+0x44>)
 80035da:	490e      	ldr	r1, [pc, #56]	; (8003614 <vCheckBGP+0x48>)
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 80035dc:	2200      	movs	r2, #0
			case 1: color_to_pallette[i] = LIGHT_GREEN;    break;
 80035de:	4d0e      	ldr	r5, [pc, #56]	; (8003618 <vCheckBGP+0x4c>)
			case 0: color_to_pallette[i] = LIGHTEST_GREEN; break;
 80035e0:	4c0e      	ldr	r4, [pc, #56]	; (800361c <vCheckBGP+0x50>)
		switch ((BGP >> (i*2)) & 0x03) {
 80035e2:	fa40 f302 	asr.w	r3, r0, r2
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d00c      	beq.n	8003608 <vCheckBGP+0x3c>
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	d008      	beq.n	8003604 <vCheckBGP+0x38>
 80035f2:	2b01      	cmp	r3, #1
			case 0: color_to_pallette[i] = LIGHTEST_GREEN; break;
 80035f4:	bf14      	ite	ne
 80035f6:	600c      	strne	r4, [r1, #0]
			case 1: color_to_pallette[i] = LIGHT_GREEN;    break;
 80035f8:	600d      	streq	r5, [r1, #0]
	for(int i = 0; i < 4; i++){
 80035fa:	3202      	adds	r2, #2
 80035fc:	3104      	adds	r1, #4
 80035fe:	2a08      	cmp	r2, #8
 8003600:	d1ef      	bne.n	80035e2 <vCheckBGP+0x16>
}
 8003602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			case 3: color_to_pallette[i] = DARKEST_GREEN;  break;
 8003604:	600e      	str	r6, [r1, #0]
 8003606:	e7f8      	b.n	80035fa <vCheckBGP+0x2e>
			case 2: color_to_pallette[i] = DARK_GREEN;     break;
 8003608:	600f      	str	r7, [r1, #0]
 800360a:	e7f6      	b.n	80035fa <vCheckBGP+0x2e>
 800360c:	ff306230 	.word	0xff306230
 8003610:	ff0f380f 	.word	0xff0f380f
 8003614:	24011278 	.word	0x24011278
 8003618:	ff8bac0f 	.word	0xff8bac0f
 800361c:	ff9bbc0f 	.word	0xff9bbc0f

08003620 <getTileLineData>:
uint16_t getTileLineData(uint16_t tile_offset, uint8_t line_offset){
 8003620:	b538      	push	{r3, r4, r5, lr}
	if (BackWinTileDataAddr == 0x8000){
 8003622:	4d11      	ldr	r5, [pc, #68]	; (8003668 <getTileLineData+0x48>)
uint16_t getTileLineData(uint16_t tile_offset, uint8_t line_offset){
 8003624:	460c      	mov	r4, r1
	if (BackWinTileDataAddr == 0x8000){
 8003626:	882b      	ldrh	r3, [r5, #0]
 8003628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return usGBMemoryReadShort(BackWinTileDataAddr + (ucGBMemoryRead(BackTileDisplayAddr + tile_offset) * 0x10) + line_offset);
 800362c:	4b0f      	ldr	r3, [pc, #60]	; (800366c <getTileLineData+0x4c>)
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	4418      	add	r0, r3
 8003632:	b280      	uxth	r0, r0
	if (BackWinTileDataAddr == 0x8000){
 8003634:	d00c      	beq.n	8003650 <getTileLineData+0x30>
		int8_t temp  = (int8_t)(ucGBMemoryRead(BackTileDisplayAddr + tile_offset));
 8003636:	f7ff ffa1 	bl	800357c <ucGBMemoryRead>
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 800363a:	8829      	ldrh	r1, [r5, #0]
		uint16_t temp2 =( temp + 128) * 0x10;
 800363c:	b240      	sxtb	r0, r0
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 800363e:	440c      	add	r4, r1
		uint16_t temp2 =( temp + 128) * 0x10;
 8003640:	3080      	adds	r0, #128	; 0x80
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 8003642:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}
 8003646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 800364a:	b280      	uxth	r0, r0
 800364c:	f7ff bfa0 	b.w	8003590 <usGBMemoryReadShort>
		return usGBMemoryReadShort(BackWinTileDataAddr + (ucGBMemoryRead(BackTileDisplayAddr + tile_offset) * 0x10) + line_offset);
 8003650:	f7ff ff94 	bl	800357c <ucGBMemoryRead>
 8003654:	8829      	ldrh	r1, [r5, #0]
 8003656:	440c      	add	r4, r1
 8003658:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}
 800365c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usGBMemoryReadShort(BackWinTileDataAddr + (ucGBMemoryRead(BackTileDisplayAddr + tile_offset) * 0x10) + line_offset);
 8003660:	b280      	uxth	r0, r0
 8003662:	f7ff bf95 	b.w	8003590 <usGBMemoryReadShort>
 8003666:	bf00      	nop
 8003668:	24011276 	.word	0x24011276
 800366c:	24011288 	.word	0x24011288

08003670 <LYC_check>:
void LYC_check(uint8_t ly){
 8003670:	b510      	push	{r4, lr}
 8003672:	4604      	mov	r4, r0
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003674:	f64f 7045 	movw	r0, #65349	; 0xff45
 8003678:	f7ff ff80 	bl	800357c <ucGBMemoryRead>
		vGBMemorySetBit(STAT_ADDR, 2);
 800367c:	2102      	movs	r1, #2
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 800367e:	42a0      	cmp	r0, r4
		vGBMemorySetBit(STAT_ADDR, 2);
 8003680:	f64f 7041 	movw	r0, #65345	; 0xff41
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003684:	d003      	beq.n	800368e <LYC_check+0x1e>
}
 8003686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vGBMemoryResetBit(STAT_ADDR, 2);
 800368a:	f7ff bf5b 	b.w	8003544 <vGBMemoryResetBit>
		vGBMemorySetBit(STAT_ADDR, 2);
 800368e:	f7ff ff3f 	bl	8003510 <vGBMemorySetBit>
		if(checkbit(ucGBMemoryRead(STAT_ADDR), 6))
 8003692:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003696:	f7ff ff71 	bl	800357c <ucGBMemoryRead>
 800369a:	2106      	movs	r1, #6
 800369c:	f7ff fa78 	bl	8002b90 <checkbit>
 80036a0:	b900      	cbnz	r0, 80036a4 <LYC_check+0x34>
}
 80036a2:	bd10      	pop	{r4, pc}
			vGBMemorySetBit(IF_ADDR, 1);
 80036a4:	2101      	movs	r1, #1
 80036a6:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 80036aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vGBMemorySetBit(IF_ADDR, 1);
 80036ae:	f7ff bf2f 	b.w	8003510 <vGBMemorySetBit>
 80036b2:	bf00      	nop

080036b4 <setMode>:
void setMode(uint8_t mode){
 80036b4:	b508      	push	{r3, lr}
	Mode = mode;
 80036b6:	4b18      	ldr	r3, [pc, #96]	; (8003718 <setMode+0x64>)
 80036b8:	7018      	strb	r0, [r3, #0]
	switch (mode) {
 80036ba:	2803      	cmp	r0, #3
 80036bc:	d82b      	bhi.n	8003716 <setMode+0x62>
 80036be:	e8df f000 	tbb	[pc, r0]
 80036c2:	1202      	.short	0x1202
 80036c4:	061e      	.short	0x061e
}
 80036c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80036ca:	f7ff bf67 	b.w	800359c <setMode.part.0>
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 80036ce:	2101      	movs	r1, #1
 80036d0:	f64f 7041 	movw	r0, #65345	; 0xff41
 80036d4:	f7ff ff1c 	bl	8003510 <vGBMemorySetBit>
 80036d8:	2100      	movs	r1, #0
 80036da:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 80036de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 80036e2:	f7ff bf15 	b.w	8003510 <vGBMemorySetBit>
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 80036e6:	2101      	movs	r1, #1
 80036e8:	f64f 7041 	movw	r0, #65345	; 0xff41
 80036ec:	f7ff ff2a 	bl	8003544 <vGBMemoryResetBit>
 80036f0:	2100      	movs	r1, #0
 80036f2:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 80036f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 80036fa:	f7ff bf09 	b.w	8003510 <vGBMemorySetBit>
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 80036fe:	2101      	movs	r1, #1
 8003700:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003704:	f7ff ff04 	bl	8003510 <vGBMemorySetBit>
 8003708:	2100      	movs	r1, #0
 800370a:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 800370e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 8003712:	f7ff bf17 	b.w	8003544 <vGBMemoryResetBit>
}
 8003716:	bd08      	pop	{r3, pc}
 8003718:	24011274 	.word	0x24011274

0800371c <update_buffer>:
 * @param res
 * @param j
 * @param amt
 */
void update_buffer(uint16_t res, int pixelPos){
	pixelPos *= scaleAmount;
 800371c:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <update_buffer+0x94>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	fb01 f103 	mul.w	r1, r1, r3
	for (int yStretch = 1; yStretch <= scaleAmount; yStretch++){
 8003724:	2b00      	cmp	r3, #0
 8003726:	d041      	beq.n	80037ac <update_buffer+0x90>
 8003728:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
			switch (res){
					case 0x0000: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[0]; break;
					case 0x0080: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[1]; break;
					case 0x8000: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[2]; break;
					case 0x8080: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[3]; break;
 800372c:	4a21      	ldr	r2, [pc, #132]	; (80037b4 <update_buffer+0x98>)
void update_buffer(uint16_t res, int pixelPos){
 800372e:	b5f0      	push	{r4, r5, r6, r7, lr}
					case 0x8080: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[3]; break;
 8003730:	4d21      	ldr	r5, [pc, #132]	; (80037b8 <update_buffer+0x9c>)
 8003732:	24a0      	movs	r4, #160	; 0xa0
 8003734:	ebc3 7783 	rsb	r7, r3, r3, lsl #30
 8003738:	f103 0e01 	add.w	lr, r3, #1
 800373c:	782d      	ldrb	r5, [r5, #0]
 800373e:	fb14 3403 	smlabb	r4, r4, r3, r3
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
 8003748:	fb15 f503 	smulbb	r5, r5, r3
 800374c:	00bf      	lsls	r7, r7, #2
	for (int yStretch = 1; yStretch <= scaleAmount; yStretch++){
 800374e:	2601      	movs	r6, #1
					case 0x8080: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[3]; break;
 8003750:	fb03 f305 	mul.w	r3, r3, r5
					case 0x8000: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[2]; break;
 8003754:	4d19      	ldr	r5, [pc, #100]	; (80037bc <update_buffer+0xa0>)
					case 0x8080: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[3]; break;
 8003756:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800375a:	eb04 1343 	add.w	r3, r4, r3, lsl #5
			switch (res){
 800375e:	f248 0480 	movw	r4, #32896	; 0x8080
 8003762:	440b      	add	r3, r1
 8003764:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003768:	18bb      	adds	r3, r7, r2
 800376a:	e006      	b.n	800377a <update_buffer+0x5e>
 800376c:	2880      	cmp	r0, #128	; 0x80
 800376e:	d101      	bne.n	8003774 <update_buffer+0x58>
					case 0x0080: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[1]; break;
 8003770:	6869      	ldr	r1, [r5, #4]
 8003772:	6019      	str	r1, [r3, #0]
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
 8003774:	3304      	adds	r3, #4
 8003776:	4293      	cmp	r3, r2
 8003778:	d00b      	beq.n	8003792 <update_buffer+0x76>
			switch (res){
 800377a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800377e:	d012      	beq.n	80037a6 <update_buffer+0x8a>
 8003780:	d80c      	bhi.n	800379c <update_buffer+0x80>
 8003782:	2800      	cmp	r0, #0
 8003784:	d1f2      	bne.n	800376c <update_buffer+0x50>
					case 0x0000: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[0]; break;
 8003786:	6829      	ldr	r1, [r5, #0]
 8003788:	3304      	adds	r3, #4
 800378a:	f843 1c04 	str.w	r1, [r3, #-4]
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
 800378e:	4293      	cmp	r3, r2
 8003790:	d1f3      	bne.n	800377a <update_buffer+0x5e>
	for (int yStretch = 1; yStretch <= scaleAmount; yStretch++){
 8003792:	3601      	adds	r6, #1
 8003794:	4462      	add	r2, ip
 8003796:	45b6      	cmp	lr, r6
 8003798:	d1e6      	bne.n	8003768 <update_buffer+0x4c>
			}
		}

	}

}
 800379a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch (res){
 800379c:	42a0      	cmp	r0, r4
 800379e:	d1e9      	bne.n	8003774 <update_buffer+0x58>
					case 0x8080: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[3]; break;
 80037a0:	68e9      	ldr	r1, [r5, #12]
 80037a2:	6019      	str	r1, [r3, #0]
 80037a4:	e7e6      	b.n	8003774 <update_buffer+0x58>
					case 0x8000: gb_frame[pixelPos + xStretch + (scaleAmount * ly * scaleAmount * 160) + (scaleAmount * 160 * yStretch)] = color_to_pallette[2]; break;
 80037a6:	68a9      	ldr	r1, [r5, #8]
 80037a8:	6019      	str	r1, [r3, #0]
 80037aa:	e7e3      	b.n	8003774 <update_buffer+0x58>
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	2400100c 	.word	0x2400100c
 80037b4:	24001008 	.word	0x24001008
 80037b8:	240010a2 	.word	0x240010a2
 80037bc:	24011278 	.word	0x24011278

080037c0 <vGBPPUDrawLineBackground>:

void vGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY){
	uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);			           // gives the address offset in the tile map
 80037c0:	4402      	add	r2, r0
void vGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY){
 80037c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);			           // gives the address offset in the tile map
 80037c6:	f3c2 03c4 	ubfx	r3, r2, #3, #5
 80037ca:	08ce      	lsrs	r6, r1, #3
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 80037cc:	f002 0207 	and.w	r2, r2, #7
	uint8_t pixl_offset = SCX % 8;											                   // gives current pixel offset
 80037d0:	f001 0407 	and.w	r4, r1, #7
	uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);			           // gives the address offset in the tile map
 80037d4:	eb06 1643 	add.w	r6, r6, r3, lsl #5

	uint16_t tile_data = getTileLineData(tile_offset, line_offset);                            // tile data holds tile line information

	for(int j = 0; j < 160; j++){
 80037d8:	f04f 0900 	mov.w	r9, #0
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 80037dc:	ea4f 0842 	mov.w	r8, r2, lsl #1

		update_buffer(((tile_data << pixl_offset) & 0x8080), j);
 80037e0:	4f11      	ldr	r7, [pc, #68]	; (8003828 <vGBPPUDrawLineBackground+0x68>)
	uint16_t tile_data = getTileLineData(tile_offset, line_offset);                            // tile data holds tile line information
 80037e2:	4630      	mov	r0, r6
 80037e4:	4641      	mov	r1, r8
 80037e6:	f7ff ff1b 	bl	8003620 <getTileLineData>
 80037ea:	4605      	mov	r5, r0
	for(int j = 0; j < 160; j++){
 80037ec:	e002      	b.n	80037f4 <vGBPPUDrawLineBackground+0x34>
 80037ee:	f1b9 0fa0 	cmp.w	r9, #160	; 0xa0
 80037f2:	d017      	beq.n	8003824 <vGBPPUDrawLineBackground+0x64>
		update_buffer(((tile_data << pixl_offset) & 0x8080), j);
 80037f4:	fa05 f304 	lsl.w	r3, r5, r4
		pixl_offset++;
 80037f8:	3401      	adds	r4, #1
		update_buffer(((tile_data << pixl_offset) & 0x8080), j);
 80037fa:	4649      	mov	r1, r9
	for(int j = 0; j < 160; j++){
 80037fc:	f109 0901 	add.w	r9, r9, #1
		update_buffer(((tile_data << pixl_offset) & 0x8080), j);
 8003800:	403b      	ands	r3, r7
		pixl_offset++;
 8003802:	b2e4      	uxtb	r4, r4
		update_buffer(((tile_data << pixl_offset) & 0x8080), j);
 8003804:	b298      	uxth	r0, r3
 8003806:	f7ff ff89 	bl	800371c <update_buffer>

		if(pixl_offset == 8){
 800380a:	2c08      	cmp	r4, #8
 800380c:	d1ef      	bne.n	80037ee <vGBPPUDrawLineBackground+0x2e>
			tile_offset++;
 800380e:	3601      	adds	r6, #1
			pixl_offset = 0;
			tile_data = getTileLineData(tile_offset, line_offset);
 8003810:	4641      	mov	r1, r8
			pixl_offset = 0;
 8003812:	2400      	movs	r4, #0
			tile_offset++;
 8003814:	b2b6      	uxth	r6, r6
			tile_data = getTileLineData(tile_offset, line_offset);
 8003816:	4630      	mov	r0, r6
 8003818:	f7ff ff02 	bl	8003620 <getTileLineData>
	for(int j = 0; j < 160; j++){
 800381c:	f1b9 0fa0 	cmp.w	r9, #160	; 0xa0
			tile_data = getTileLineData(tile_offset, line_offset);
 8003820:	4605      	mov	r5, r0
	for(int j = 0; j < 160; j++){
 8003822:	d1e7      	bne.n	80037f4 <vGBPPUDrawLineBackground+0x34>

		}

	}
}
 8003824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003828:	ffff8080 	.word	0xffff8080

0800382c <vGBPPUDrawLine>:
 * @param ly lY Register Data
 * @param SCX Scroll X Register
 * @param SCY Scroll Y Register
 * @returns Nothing
 */
void vGBPPUDrawLine(uint8_t ly, uint8_t SCX, uint8_t SCY){
 800382c:	b570      	push	{r4, r5, r6, lr}
 800382e:	4604      	mov	r4, r0

	if(ucGBMemoryRead(LCDC_ADDR) & 0x01){
 8003830:	f64f 7040 	movw	r0, #65344	; 0xff40
void vGBPPUDrawLine(uint8_t ly, uint8_t SCX, uint8_t SCY){
 8003834:	460d      	mov	r5, r1
 8003836:	4616      	mov	r6, r2
	if(ucGBMemoryRead(LCDC_ADDR) & 0x01){
 8003838:	f7ff fea0 	bl	800357c <ucGBMemoryRead>
 800383c:	07c3      	lsls	r3, r0, #31
 800383e:	d405      	bmi.n	800384c <vGBPPUDrawLine+0x20>
		vGBPPUDrawLineBackground(ly, SCX, SCY);
		if(ucGBMemoryRead(LCDC_ADDR) & 0x20)
			vGBPPUDrawLineWindow(ly);
	}
	if(ucGBMemoryRead(LCDC_ADDR) & 0x02)
 8003840:	f64f 7040 	movw	r0, #65344	; 0xff40
		vGBPPUDrawLineObjects();
}
 8003844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if(ucGBMemoryRead(LCDC_ADDR) & 0x02)
 8003848:	f7ff be98 	b.w	800357c <ucGBMemoryRead>
		vGBPPUDrawLineBackground(ly, SCX, SCY);
 800384c:	4632      	mov	r2, r6
 800384e:	4629      	mov	r1, r5
 8003850:	4620      	mov	r0, r4
 8003852:	f7ff ffb5 	bl	80037c0 <vGBPPUDrawLineBackground>
		if(ucGBMemoryRead(LCDC_ADDR) & 0x20)
 8003856:	f64f 7040 	movw	r0, #65344	; 0xff40
 800385a:	f7ff fe8f 	bl	800357c <ucGBMemoryRead>
	if(ucGBMemoryRead(LCDC_ADDR) & 0x02)
 800385e:	f64f 7040 	movw	r0, #65344	; 0xff40
}
 8003862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if(ucGBMemoryRead(LCDC_ADDR) & 0x02)
 8003866:	f7ff be89 	b.w	800357c <ucGBMemoryRead>
 800386a:	bf00      	nop

0800386c <gbPPUStep>:
void gbPPUStep(){
 800386c:	b530      	push	{r4, r5, lr}
	if(ucGBMemoryRead(LCDC_ADDR) & 0x80){															// check MSB of LCDC for screen en
 800386e:	f64f 7040 	movw	r0, #65344	; 0xff40
void gbPPUStep(){
 8003872:	b083      	sub	sp, #12
	if(ucGBMemoryRead(LCDC_ADDR) & 0x80){															// check MSB of LCDC for screen en
 8003874:	f7ff fe82 	bl	800357c <ucGBMemoryRead>
 8003878:	0603      	lsls	r3, r0, #24
 800387a:	d401      	bmi.n	8003880 <gbPPUStep+0x14>
}
 800387c:	b003      	add	sp, #12
 800387e:	bd30      	pop	{r4, r5, pc}
		tStatesTotal += ucGetTstate();
 8003880:	4c57      	ldr	r4, [pc, #348]	; (80039e0 <gbPPUStep+0x174>)
 8003882:	f7ff f867 	bl	8002954 <ucGetTstate>
			ly++;
 8003886:	4d57      	ldr	r5, [pc, #348]	; (80039e4 <gbPPUStep+0x178>)
		tStatesTotal += ucGetTstate();
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	4418      	add	r0, r3
		if (tStatesTotal > 456){												// end of hblank or vblank
 800388c:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
		tStatesTotal += ucGetTstate();
 8003890:	6020      	str	r0, [r4, #0]
		if (tStatesTotal > 456){												// end of hblank or vblank
 8003892:	d90d      	bls.n	80038b0 <gbPPUStep+0x44>
			ly++;
 8003894:	7829      	ldrb	r1, [r5, #0]
 8003896:	3101      	adds	r1, #1
 8003898:	b2c9      	uxtb	r1, r1
			if(ly > 153){												// end of vblank
 800389a:	2999      	cmp	r1, #153	; 0x99
			ly++;
 800389c:	7029      	strb	r1, [r5, #0]
			if(ly > 153){												// end of vblank
 800389e:	d87e      	bhi.n	800399e <gbPPUStep+0x132>
			vGBMemoryWrite(LY_ADDR, ly);								// update LY register
 80038a0:	f64f 7044 	movw	r0, #65348	; 0xff44
 80038a4:	f7ff fe08 	bl	80034b8 <vGBMemoryWrite>
			tStatesTotal -= 456;
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80038ae:	6023      	str	r3, [r4, #0]
		LYC_check(ly);
 80038b0:	7828      	ldrb	r0, [r5, #0]
 80038b2:	f7ff fedd 	bl	8003670 <LYC_check>
		if (ly > 143){													// vblank
 80038b6:	782b      	ldrb	r3, [r5, #0]
 80038b8:	2b8f      	cmp	r3, #143	; 0x8f
 80038ba:	d80c      	bhi.n	80038d6 <gbPPUStep+0x6a>
			if (tStatesTotal <= 80 && Mode != MODE_2)											// oam
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	2b50      	cmp	r3, #80	; 0x50
 80038c0:	d81d      	bhi.n	80038fe <gbPPUStep+0x92>
 80038c2:	4b49      	ldr	r3, [pc, #292]	; (80039e8 <gbPPUStep+0x17c>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d0d8      	beq.n	800387c <gbPPUStep+0x10>
				setMode(MODE_2);
 80038ca:	2002      	movs	r0, #2
}
 80038cc:	b003      	add	sp, #12
 80038ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				setMode(MODE_3);
 80038d2:	f7ff beef 	b.w	80036b4 <setMode>
			setMode(MODE_1);
 80038d6:	2001      	movs	r0, #1
 80038d8:	f7ff feec 	bl	80036b4 <setMode>
			if(checkbit(ucGBMemoryRead(STAT_ADDR), 4))
 80038dc:	f64f 7041 	movw	r0, #65345	; 0xff41
 80038e0:	f7ff fe4c 	bl	800357c <ucGBMemoryRead>
 80038e4:	2104      	movs	r1, #4
 80038e6:	f7ff f953 	bl	8002b90 <checkbit>
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d16c      	bne.n	80039c8 <gbPPUStep+0x15c>
			vGBMemorySetBit(IF_ADDR, 0);
 80038ee:	2100      	movs	r1, #0
					vGBMemorySetBit(IF_ADDR, 1);
 80038f0:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 80038f4:	b003      	add	sp, #12
 80038f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
					vGBMemorySetBit(IF_ADDR, 1);
 80038fa:	f7ff be09 	b.w	8003510 <vGBMemorySetBit>
			else if(tStatesTotal > 80 && tStatesTotal <= 252 && Mode != MODE_3){										// vram
 80038fe:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
 8003902:	2aab      	cmp	r2, #171	; 0xab
 8003904:	d833      	bhi.n	800396e <gbPPUStep+0x102>
 8003906:	4b38      	ldr	r3, [pc, #224]	; (80039e8 <gbPPUStep+0x17c>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b03      	cmp	r3, #3
 800390c:	d0b6      	beq.n	800387c <gbPPUStep+0x10>
				vCheckBGP();
 800390e:	f7ff fe5d 	bl	80035cc <vCheckBGP>
	BackWinTileDataAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003912:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003916:	f7ff fe31 	bl	800357c <ucGBMemoryRead>
 800391a:	4602      	mov	r2, r0
 800391c:	4b33      	ldr	r3, [pc, #204]	; (80039ec <gbPPUStep+0x180>)
	BackTileDisplayAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 800391e:	f64f 7040 	movw	r0, #65344	; 0xff40
	BackWinTileDataAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003922:	f012 0f10 	tst.w	r2, #16
 8003926:	bf14      	ite	ne
 8003928:	f44f 4200 	movne.w	r2, #32768	; 0x8000
 800392c:	f44f 4208 	moveq.w	r2, #34816	; 0x8800
 8003930:	801a      	strh	r2, [r3, #0]
	BackTileDisplayAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003932:	f7ff fe23 	bl	800357c <ucGBMemoryRead>
 8003936:	4602      	mov	r2, r0
 8003938:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <gbPPUStep+0x184>)
				vGBPPUDrawLine(ly, ucGBMemoryRead(SCX_ADDR), ucGBMemoryRead(SCY_ADDR));
 800393a:	f64f 7043 	movw	r0, #65347	; 0xff43
 800393e:	782c      	ldrb	r4, [r5, #0]
	BackTileDisplayAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003940:	f012 0f08 	tst.w	r2, #8
 8003944:	bf14      	ite	ne
 8003946:	f44f 421c 	movne.w	r2, #39936	; 0x9c00
 800394a:	f44f 4218 	moveq.w	r2, #38912	; 0x9800
 800394e:	801a      	strh	r2, [r3, #0]
				vGBPPUDrawLine(ly, ucGBMemoryRead(SCX_ADDR), ucGBMemoryRead(SCY_ADDR));
 8003950:	f7ff fe14 	bl	800357c <ucGBMemoryRead>
 8003954:	4601      	mov	r1, r0
 8003956:	f64f 7042 	movw	r0, #65346	; 0xff42
 800395a:	9101      	str	r1, [sp, #4]
 800395c:	f7ff fe0e 	bl	800357c <ucGBMemoryRead>
 8003960:	9901      	ldr	r1, [sp, #4]
 8003962:	4602      	mov	r2, r0
 8003964:	4620      	mov	r0, r4
 8003966:	f7ff ff61 	bl	800382c <vGBPPUDrawLine>
				setMode(MODE_3);
 800396a:	2003      	movs	r0, #3
 800396c:	e7ae      	b.n	80038cc <gbPPUStep+0x60>
			}else if(tStatesTotal > 252 && tStatesTotal <= 456 && Mode != MODE_0){										// hblank
 800396e:	3bfd      	subs	r3, #253	; 0xfd
 8003970:	2bcb      	cmp	r3, #203	; 0xcb
 8003972:	d883      	bhi.n	800387c <gbPPUStep+0x10>
 8003974:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <gbPPUStep+0x17c>)
 8003976:	781a      	ldrb	r2, [r3, #0]
 8003978:	2a00      	cmp	r2, #0
 800397a:	f43f af7f 	beq.w	800387c <gbPPUStep+0x10>
	Mode = mode;
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
	switch (mode) {
 8003982:	f7ff fe0b 	bl	800359c <setMode.part.0>
				if(checkbit(ucGBMemoryRead(STAT_ADDR), 3))
 8003986:	f64f 7041 	movw	r0, #65345	; 0xff41
 800398a:	f7ff fdf7 	bl	800357c <ucGBMemoryRead>
 800398e:	2103      	movs	r1, #3
 8003990:	f7ff f8fe 	bl	8002b90 <checkbit>
 8003994:	2800      	cmp	r0, #0
 8003996:	f43f af71 	beq.w	800387c <gbPPUStep+0x10>
					vGBMemorySetBit(IF_ADDR, 1);
 800399a:	2101      	movs	r1, #1
 800399c:	e7a8      	b.n	80038f0 <gbPPUStep+0x84>
				displayFrameBuffer(gb_frame, scaleAmount);
 800399e:	4a15      	ldr	r2, [pc, #84]	; (80039f4 <gbPPUStep+0x188>)
 80039a0:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <gbPPUStep+0x18c>)
 80039a2:	7811      	ldrb	r1, [r2, #0]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	f000 fadb 	bl	8003f60 <displayFrameBuffer>
				setMode(MODE_2);
 80039aa:	2002      	movs	r0, #2
 80039ac:	f7ff fe82 	bl	80036b4 <setMode>
				ly = 0;
 80039b0:	2300      	movs	r3, #0
				if(checkbit(ucGBMemoryRead(STAT_ADDR), 5))
 80039b2:	f64f 7041 	movw	r0, #65345	; 0xff41
				ly = 0;
 80039b6:	702b      	strb	r3, [r5, #0]
				if(checkbit(ucGBMemoryRead(STAT_ADDR), 5))
 80039b8:	f7ff fde0 	bl	800357c <ucGBMemoryRead>
 80039bc:	2105      	movs	r1, #5
 80039be:	f7ff f8e7 	bl	8002b90 <checkbit>
 80039c2:	b938      	cbnz	r0, 80039d4 <gbPPUStep+0x168>
 80039c4:	7829      	ldrb	r1, [r5, #0]
 80039c6:	e76b      	b.n	80038a0 <gbPPUStep+0x34>
				vGBMemorySetBit(IF_ADDR, 1);
 80039c8:	2101      	movs	r1, #1
 80039ca:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80039ce:	f7ff fd9f 	bl	8003510 <vGBMemorySetBit>
 80039d2:	e78c      	b.n	80038ee <gbPPUStep+0x82>
					vGBMemorySetBit(IF_ADDR, 1);
 80039d4:	2101      	movs	r1, #1
 80039d6:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80039da:	f7ff fd99 	bl	8003510 <vGBMemorySetBit>
 80039de:	e7f1      	b.n	80039c4 <gbPPUStep+0x158>
 80039e0:	24011270 	.word	0x24011270
 80039e4:	240010a2 	.word	0x240010a2
 80039e8:	24011274 	.word	0x24011274
 80039ec:	24011276 	.word	0x24011276
 80039f0:	24011288 	.word	0x24011288
 80039f4:	2400100c 	.word	0x2400100c
 80039f8:	24001008 	.word	0x24001008

080039fc <getRomPointer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
const unsigned char* getRomPointer(){
	return rom;
 80039fc:	4b01      	ldr	r3, [pc, #4]	; (8003a04 <getRomPointer+0x8>)
}
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	24001010 	.word	0x24001010

08003a08 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a08:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8003a0a:	2004      	movs	r0, #4
{
 8003a0c:	b09e      	sub	sp, #120	; 0x78
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8003a0e:	f003 fdfd 	bl	800760c <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a12:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <SystemClock_Config+0xc8>)
 8003a14:	2300      	movs	r3, #0
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a1a:	4b2e      	ldr	r3, [pc, #184]	; (8003ad4 <SystemClock_Config+0xcc>)
 8003a1c:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003a20:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a22:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a26:	f002 0201 	and.w	r2, r2, #1
 8003a2a:	9201      	str	r2, [sp, #4]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003a32:	619a      	str	r2, [r3, #24]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a3a:	9301      	str	r3, [sp, #4]
 8003a3c:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003a3e:	6983      	ldr	r3, [r0, #24]
 8003a40:	049b      	lsls	r3, r3, #18
 8003a42:	d5fc      	bpl.n	8003a3e <SystemClock_Config+0x36>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a44:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a46:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8003a4a:	2200      	movs	r2, #0
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a4c:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;

  RCC_OscInitStruct.PLL.PLLM = 5;
 8003a4e:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 8003a50:	25a0      	movs	r5, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003a52:	2408      	movs	r4, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a54:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work
 8003a56:	2110      	movs	r1, #16
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a58:	900c      	str	r0, [sp, #48]	; 0x30
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003a5a:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8003a5c:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8003a5e:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003a60:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003a62:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work
 8003a64:	9119      	str	r1, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003a66:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003a68:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a6c:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8003a70:	e9cd 6516 	strd	r6, r5, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003a74:	f003 fe06 	bl	8007684 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8003a78:	b108      	cbz	r0, 8003a7e <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a7a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a7c:	e7fe      	b.n	8003a7c <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003a7e:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8003a80:	263f      	movs	r6, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a82:	2503      	movs	r5, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003a88:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8003a8a:	2104      	movs	r1, #4
 8003a8c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003a8e:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a90:	e9cd 6503 	strd	r6, r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003a94:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003a98:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8003a9c:	f004 f988 	bl	8007db0 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8003aa0:	b108      	cbz	r0, 8003aa6 <SystemClock_Config+0x9e>
 8003aa2:	b672      	cpsid	i
  while (1)
 8003aa4:	e7fe      	b.n	8003aa4 <SystemClock_Config+0x9c>
  __HAL_RCC_CSI_ENABLE() ;
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <SystemClock_Config+0xd0>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aae:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8003ab0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003ab4:	f042 0202 	orr.w	r2, r2, #2
 8003ab8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003abc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	9302      	str	r3, [sp, #8]
 8003ac6:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 8003ac8:	f001 ffb2 	bl	8005a30 <HAL_EnableCompensationCell>
}
 8003acc:	b01e      	add	sp, #120	; 0x78
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
 8003ad0:	58000400 	.word	0x58000400
 8003ad4:	58024800 	.word	0x58024800
 8003ad8:	58024400 	.word	0x58024400

08003adc <PeriphCommonClock_Config>:
{
 8003adc:	b530      	push	{r4, r5, lr}
 8003ade:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ae0:	229c      	movs	r2, #156	; 0x9c
 8003ae2:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8003ae4:	250c      	movs	r5, #12
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ae6:	a809      	add	r0, sp, #36	; 0x24
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003ae8:	24c0      	movs	r4, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003aea:	f005 fef9 	bl	80098e0 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003aee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8003af2:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003af4:	2120      	movs	r1, #32
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003af6:	2200      	movs	r2, #0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003af8:	9000      	str	r0, [sp, #0]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003afa:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8003afc:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003afe:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8003b00:	9502      	str	r5, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003b02:	9208      	str	r2, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003b04:	e9cd 3303 	strd	r3, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003b08:	e9cd 4106 	strd	r4, r1, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b0c:	f004 fb94 	bl	8008238 <HAL_RCCEx_PeriphCLKConfig>
 8003b10:	b108      	cbz	r0, 8003b16 <PeriphCommonClock_Config+0x3a>
 8003b12:	b672      	cpsid	i
  while (1)
 8003b14:	e7fe      	b.n	8003b14 <PeriphCommonClock_Config+0x38>
}
 8003b16:	b031      	add	sp, #196	; 0xc4
 8003b18:	bd30      	pop	{r4, r5, pc}
 8003b1a:	bf00      	nop

08003b1c <main>:
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8003b1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b20:	49b1      	ldr	r1, [pc, #708]	; (8003de8 <main+0x2cc>)
 8003b22:	e002      	b.n	8003b2a <main+0xe>
 8003b24:	3b01      	subs	r3, #1
 8003b26:	f000 8108 	beq.w	8003d3a <main+0x21e>
 8003b2a:	680a      	ldr	r2, [r1, #0]
 8003b2c:	0410      	lsls	r0, r2, #16
 8003b2e:	d4f9      	bmi.n	8003b24 <main+0x8>
{
 8003b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b34:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 8003b36:	f001 ff17 	bl	8005968 <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003b3a:	4aac      	ldr	r2, [pc, #688]	; (8003dec <main+0x2d0>)
 8003b3c:	6953      	ldr	r3, [r2, #20]
 8003b3e:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8003b42:	d111      	bne.n	8003b68 <main+0x4c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003b48:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003b4c:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003b50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003b54:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003b58:	6953      	ldr	r3, [r2, #20]
 8003b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003b64:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003b68:	4aa0      	ldr	r2, [pc, #640]	; (8003dec <main+0x2d0>)
 8003b6a:	6953      	ldr	r3, [r2, #20]
 8003b6c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8003b70:	d124      	bne.n	8003bbc <main+0xa0>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003b72:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003b76:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003b7a:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003b7e:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003b82:	f3c5 304e 	ubfx	r0, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003b86:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8003b8a:	0140      	lsls	r0, r0, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003b8c:	ea00 0406 	and.w	r4, r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003b90:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003b92:	ea44 7183 	orr.w	r1, r4, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003b96:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003b98:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8003b9c:	1c59      	adds	r1, r3, #1
 8003b9e:	d1f8      	bne.n	8003b92 <main+0x76>
    } while(sets-- != 0U);
 8003ba0:	3820      	subs	r0, #32
 8003ba2:	f110 0f20 	cmn.w	r0, #32
 8003ba6:	d1f1      	bne.n	8003b8c <main+0x70>
 8003ba8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003bac:	6953      	ldr	r3, [r2, #20]
 8003bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb2:	6153      	str	r3, [r2, #20]
 8003bb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003bb8:	f3bf 8f6f 	isb	sy
__HAL_RCC_HSEM_CLK_ENABLE();
 8003bbc:	4c8a      	ldr	r4, [pc, #552]	; (8003de8 <main+0x2cc>)
  SystemClock_Config();
 8003bbe:	f7ff ff23 	bl	8003a08 <SystemClock_Config>
  PeriphCommonClock_Config();
 8003bc2:	f7ff ff8b 	bl	8003adc <PeriphCommonClock_Config>
HAL_HSEM_FastTake(HSEM_ID_0);
 8003bc6:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 8003bc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8003bcc:	4625      	mov	r5, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8003bce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003bd6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bde:	9302      	str	r3, [sp, #8]
 8003be0:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8003be2:	f003 fa9d 	bl	8007120 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8003be6:	2100      	movs	r1, #0
 8003be8:	4608      	mov	r0, r1
 8003bea:	f003 faa7 	bl	800713c <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8003bee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bf2:	e002      	b.n	8003bfa <main+0xde>
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	f000 80a2 	beq.w	8003d3e <main+0x222>
 8003bfa:	682a      	ldr	r2, [r5, #0]
 8003bfc:	0412      	lsls	r2, r2, #16
 8003bfe:	d5f9      	bpl.n	8003bf4 <main+0xd8>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c00:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c04:	2601      	movs	r6, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c06:	2202      	movs	r2, #2
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c08:	2400      	movs	r4, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8003c0e:	f44f 7780 	mov.w	r7, #256	; 0x100
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8003c12:	a90d      	add	r1, sp, #52	; 0x34
 8003c14:	4876      	ldr	r0, [pc, #472]	; (8003df0 <main+0x2d4>)
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c16:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003c1a:	f44f 2800 	mov.w	r8, #524288	; 0x80000
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  hadc1.Instance = ADC1;
 8003c22:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8003e04 <main+0x2e8>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	4033      	ands	r3, r6
 8003c28:	9304      	str	r3, [sp, #16]
 8003c2a:	9b04      	ldr	r3, [sp, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003c36:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	9305      	str	r3, [sp, #20]
 8003c3e:	9b05      	ldr	r3, [sp, #20]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c40:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003c44:	f043 0308 	orr.w	r3, r3, #8
 8003c48:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003c4c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	9306      	str	r3, [sp, #24]
 8003c56:	9b06      	ldr	r3, [sp, #24]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c58:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003c5c:	f043 0304 	orr.w	r3, r3, #4
 8003c60:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003c64:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	9307      	str	r3, [sp, #28]
 8003c6e:	9b07      	ldr	r3, [sp, #28]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c70:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c78:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003c7c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c84:	9308      	str	r3, [sp, #32]
 8003c86:	9b08      	ldr	r3, [sp, #32]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c88:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003c8c:	f043 0320 	orr.w	r3, r3, #32
 8003c90:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003c94:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c98:	920e      	str	r2, [sp, #56]	; 0x38
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c9a:	f003 0320 	and.w	r3, r3, #32
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8003c9e:	970d      	str	r7, [sp, #52]	; 0x34
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca4:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
	  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003ca8:	9411      	str	r4, [sp, #68]	; 0x44
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8003caa:	f003 f907 	bl	8006ebc <HAL_GPIO_Init>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cae:	9411      	str	r4, [sp, #68]	; 0x44
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8003cb0:	f44f 4270 	mov.w	r2, #61440	; 0xf000
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003cb4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003cb8:	a90d      	add	r1, sp, #52	; 0x34
 8003cba:	484e      	ldr	r0, [pc, #312]	; (8003df4 <main+0x2d8>)
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003cbc:	433b      	orrs	r3, r7
 8003cbe:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003cc2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003cc6:	2504      	movs	r5, #4
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8003cc8:	920d      	str	r2, [sp, #52]	; 0x34
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003cca:	403b      	ands	r3, r7
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cce:	9410      	str	r4, [sp, #64]	; 0x40
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003cd0:	9303      	str	r3, [sp, #12]
 8003cd2:	9b03      	ldr	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd4:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003cd6:	f003 f8f1 	bl	8006ebc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003cda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cde:	a90d      	add	r1, sp, #52	; 0x34
 8003ce0:	4845      	ldr	r0, [pc, #276]	; (8003df8 <main+0x2dc>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003ce2:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce4:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce6:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cea:	f003 f8e7 	bl	8006ebc <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8003cee:	4b43      	ldr	r3, [pc, #268]	; (8003dfc <main+0x2e0>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003cf0:	4650      	mov	r0, sl
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003cf2:	f8aa 4014 	strh.w	r4, [sl, #20]
  ADC_MultiModeTypeDef multimode = {0};
 8003cf6:	940a      	str	r4, [sp, #40]	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8003cf8:	9413      	str	r4, [sp, #76]	; 0x4c
  hadc1.Init.NbrOfConversion = 1;
 8003cfa:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003cfe:	f88a 401c 	strb.w	r4, [sl, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003d02:	f8ca 4034 	str.w	r4, [sl, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003d06:	f88a 4038 	strb.w	r4, [sl, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d0a:	f8ca 5010 	str.w	r5, [sl, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003d0e:	e9ca 3800 	strd	r3, r8, [sl]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003d12:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8003d16:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8003d1a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  ADC_MultiModeTypeDef multimode = {0};
 8003d1e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003d22:	e9ca 4402 	strd	r4, r4, [sl, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d26:	e9ca 4409 	strd	r4, r4, [sl, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003d2a:	e9ca 440b 	strd	r4, r4, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d2e:	f002 f979 	bl	8006024 <HAL_ADC_Init>
 8003d32:	4603      	mov	r3, r0
 8003d34:	b128      	cbz	r0, 8003d42 <main+0x226>
  __ASM volatile ("cpsid i" : : : "memory");
 8003d36:	b672      	cpsid	i
  while (1)
 8003d38:	e7fe      	b.n	8003d38 <main+0x21c>
 8003d3a:	b672      	cpsid	i
 8003d3c:	e7fe      	b.n	8003d3c <main+0x220>
 8003d3e:	b672      	cpsid	i
 8003d40:	e7fe      	b.n	8003d40 <main+0x224>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003d42:	a90a      	add	r1, sp, #40	; 0x28
 8003d44:	4650      	mov	r0, sl
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003d46:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003d48:	f002 fa78 	bl	800623c <HAL_ADCEx_MultiModeConfigChannel>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	b108      	cbz	r0, 8003d54 <main+0x238>
 8003d50:	b672      	cpsid	i
  while (1)
 8003d52:	e7fe      	b.n	8003d52 <main+0x236>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d54:	f04f 0906 	mov.w	r9, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003d58:	f240 74ff 	movw	r4, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d5c:	4650      	mov	r0, sl
 8003d5e:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003d60:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.OffsetSignedSaturation = DISABLE;
 8003d62:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
  sConfig.Channel = ADC_CHANNEL_0;
 8003d66:	960d      	str	r6, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d68:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003d6c:	9410      	str	r4, [sp, #64]	; 0x40
  sConfig.Offset = 0;
 8003d6e:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d72:	f001 fe65 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8003d76:	4603      	mov	r3, r0
 8003d78:	b108      	cbz	r0, 8003d7e <main+0x262>
 8003d7a:	b672      	cpsid	i
  while (1)
 8003d7c:	e7fe      	b.n	8003d7c <main+0x260>
  hadc3.Instance = ADC3;
 8003d7e:	f8df a088 	ldr.w	sl, [pc, #136]	; 8003e08 <main+0x2ec>
 8003d82:	4a1f      	ldr	r2, [pc, #124]	; (8003e00 <main+0x2e4>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8003d84:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003d86:	4650      	mov	r0, sl
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003d88:	f8aa 3014 	strh.w	r3, [sl, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003d8c:	f88a 301c 	strb.w	r3, [sl, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003d90:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8003d94:	f88a 3038 	strb.w	r3, [sl, #56]	; 0x38
  hadc3.Init.NbrOfConversion = 1;
 8003d98:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc3.Instance = ADC3;
 8003d9c:	f8ca 2000 	str.w	r2, [sl]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003da0:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8003da4:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8003da8:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8003dac:	e9ca 8301 	strd	r8, r3, [sl, #4]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003db0:	e9ca 3503 	strd	r3, r5, [sl, #12]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003db4:	e9ca 3309 	strd	r3, r3, [sl, #36]	; 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003db8:	e9ca 330b 	strd	r3, r3, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003dbc:	f002 f932 	bl	8006024 <HAL_ADC_Init>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	b108      	cbz	r0, 8003dc8 <main+0x2ac>
 8003dc4:	b672      	cpsid	i
  while (1)
 8003dc6:	e7fe      	b.n	8003dc6 <main+0x2aa>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003dc8:	a90d      	add	r1, sp, #52	; 0x34
 8003dca:	4650      	mov	r0, sl
  sConfig.OffsetSignedSaturation = DISABLE;
 8003dcc:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003dd0:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003dd4:	e9cd 690d 	strd	r6, r9, [sp, #52]	; 0x34
  sConfig.Offset = 0;
 8003dd8:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003ddc:	f001 fe30 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8003de0:	4604      	mov	r4, r0
 8003de2:	b198      	cbz	r0, 8003e0c <main+0x2f0>
 8003de4:	b672      	cpsid	i
  while (1)
 8003de6:	e7fe      	b.n	8003de6 <main+0x2ca>
 8003de8:	58024400 	.word	0x58024400
 8003dec:	e000ed00 	.word	0xe000ed00
 8003df0:	58020000 	.word	0x58020000
 8003df4:	58022000 	.word	0x58022000
 8003df8:	58020800 	.word	0x58020800
 8003dfc:	40022000 	.word	0x40022000
 8003e00:	58026000 	.word	0x58026000
 8003e04:	24011350 	.word	0x24011350
 8003e08:	240113b4 	.word	0x240113b4
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8003e0c:	4631      	mov	r1, r6
 8003e0e:	f001 fc49 	bl	80056a4 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8003e12:	4818      	ldr	r0, [pc, #96]	; (8003e74 <main+0x358>)
 8003e14:	f005 fc9c 	bl	8009750 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f005 fccb 	bl	80097b4 <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8003e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e22:	f005 fd1b 	bl	800985c <UTIL_LCD_Clear>
  UTIL_LCD_FillRect(0, 0, 160*3, 480, UTIL_LCD_COLOR_BLACK);
 8003e26:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003e2a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003e2e:	4621      	mov	r1, r4
 8003e30:	4620      	mov	r0, r4
 8003e32:	9200      	str	r2, [sp, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	f005 fce5 	bl	8009804 <UTIL_LCD_FillRect>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8003e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3e:	f005 fcd1 	bl	80097e4 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 8003e42:	480d      	ldr	r0, [pc, #52]	; (8003e78 <main+0x35c>)
 8003e44:	f005 fcc6 	bl	80097d4 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 8003e48:	480c      	ldr	r0, [pc, #48]	; (8003e7c <main+0x360>)
 8003e4a:	f005 fcd3 	bl	80097f4 <UTIL_LCD_SetFont>
  vGBMemoryLoad(rom, 32768);														// load rom into memory
 8003e4e:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <main+0x364>)
 8003e50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	f7ff fb03 	bl	8003460 <vGBMemoryLoad>
  vGBMemoryLoad(dmg_boot_bin, 256);													// load boot rom into appropriate place in memory map
 8003e5a:	4639      	mov	r1, r7
 8003e5c:	4809      	ldr	r0, [pc, #36]	; (8003e84 <main+0x368>)
 8003e5e:	f7ff faff 	bl	8003460 <vGBMemoryLoad>
  vGBMemoryInit();
 8003e62:	f7ff faed 	bl	8003440 <vGBMemoryInit>
  vSetFrameBuffer();
 8003e66:	f7ff fba7 	bl	80035b8 <vSetFrameBuffer>
	  vGBCPUboot();
 8003e6a:	f7fe fe51 	bl	8002b10 <vGBCPUboot>
	  gbPPUStep();
 8003e6e:	f7ff fcfd 	bl	800386c <gbPPUStep>
  while (1)
 8003e72:	e7fa      	b.n	8003e6a <main+0x34e>
 8003e74:	08011b8c 	.word	0x08011b8c
 8003e78:	ff0000ff 	.word	0xff0000ff
 8003e7c:	2400106c 	.word	0x2400106c
 8003e80:	24001010 	.word	0x24001010
 8003e84:	08011918 	.word	0x08011918

08003e88 <HAL_LTDC_LineEventCallback>:
  *                the configuration information for the LTDC.
  * @retval None
  */
void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
  if(pend_buffer >= 0)
 8003e88:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <HAL_LTDC_LineEventCallback+0x3c>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	2a00      	cmp	r2, #0
 8003e8e:	db15      	blt.n	8003ebc <HAL_LTDC_LineEventCallback+0x34>
  {
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003e90:	490d      	ldr	r1, [pc, #52]	; (8003ec8 <HAL_LTDC_LineEventCallback+0x40>)
 8003e92:	6802      	ldr	r2, [r0, #0]
{
 8003e94:	b470      	push	{r4, r5, r6}
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003e96:	681d      	ldr	r5, [r3, #0]
    __HAL_LTDC_RELOAD_CONFIG(hltdc);

    front_buffer = pend_buffer;
    pend_buffer = -1;
 8003e98:	f04f 34ff 	mov.w	r4, #4294967295
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003e9c:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
    front_buffer = pend_buffer;
 8003ea0:	4d0a      	ldr	r5, [pc, #40]	; (8003ecc <HAL_LTDC_LineEventCallback+0x44>)
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003ea2:	f8c2 60ac 	str.w	r6, [r2, #172]	; 0xac
    __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8003ea6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003ea8:	f041 0101 	orr.w	r1, r1, #1
 8003eac:	6251      	str	r1, [r2, #36]	; 0x24
  }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8003eae:	2100      	movs	r1, #0
    front_buffer = pend_buffer;
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	602a      	str	r2, [r5, #0]
    pend_buffer = -1;
 8003eb4:	601c      	str	r4, [r3, #0]
}
 8003eb6:	bc70      	pop	{r4, r5, r6}
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8003eb8:	f003 baec 	b.w	8007494 <HAL_LTDC_ProgramLineEvent>
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	f003 bae9 	b.w	8007494 <HAL_LTDC_ProgramLineEvent>
 8003ec2:	bf00      	nop
 8003ec4:	24001014 	.word	0x24001014
 8003ec8:	08011a18 	.word	0x08011a18
 8003ecc:	240010a4 	.word	0x240010a4

08003ed0 <CopyBuffer>:

void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize)
{
 8003ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed4:	b083      	sub	sp, #12

  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
  uint32_t source      = (uint32_t)pSrc;

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  hdma2d.Init.Mode         = DMA2D_M2M;
 8003ed6:	4c20      	ldr	r4, [pc, #128]	; (8003f58 <CopyBuffer+0x88>)
 8003ed8:	2500      	movs	r5, #0
  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hdma2d.XferCpltCallback  = NULL;

  /*##-3- Foreground Configuration ###########################################*/
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003eda:	f04f 0eff 	mov.w	lr, #255	; 0xff
{
 8003ede:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 8003ee2:	4681      	mov	r9, r0
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
  hdma2d.LayerCfg[1].InputOffset = 0;
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */

  hdma2d.Instance          = DMA2D;
 8003ee4:	f8df c074 	ldr.w	ip, [pc, #116]	; 8003f5c <CopyBuffer+0x8c>

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8003ee8:	4620      	mov	r0, r4
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 8003eea:	f5ca 7b48 	rsb	fp, sl, #800	; 0x320
  hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8003eee:	60a5      	str	r5, [r4, #8]
  hdma2d.XferCpltCallback  = NULL;
 8003ef0:	6225      	str	r5, [r4, #32]
{
 8003ef2:	460f      	mov	r7, r1
  hdma2d.LayerCfg[1].InputOffset = 0;
 8003ef4:	6465      	str	r5, [r4, #68]	; 0x44
{
 8003ef6:	4690      	mov	r8, r2
 8003ef8:	461e      	mov	r6, r3
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 8003efa:	f8c4 b00c 	str.w	fp, [r4, #12]
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003efe:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
  hdma2d.Init.Mode         = DMA2D_M2M;
 8003f02:	e9c4 c500 	strd	ip, r5, [r4]
  hdma2d.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 8003f06:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8003f0a:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 8003f0e:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
{
 8003f12:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8003f16:	f002 fabb 	bl	8006490 <HAL_DMA2D_Init>
 8003f1a:	b110      	cbz	r0, 8003f22 <CopyBuffer+0x52>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
      }
    }
  }
}
 8003f1c:	b003      	add	sp, #12
 8003f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK)
 8003f22:	2101      	movs	r1, #1
 8003f24:	4620      	mov	r0, r4
 8003f26:	f002 fb97 	bl	8006658 <HAL_DMA2D_ConfigLayer>
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d1f6      	bne.n	8003f1c <CopyBuffer+0x4c>
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8003f2e:	f44f 7248 	mov.w	r2, #800	; 0x320
      if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8003f32:	4653      	mov	r3, sl
 8003f34:	4649      	mov	r1, r9
 8003f36:	4620      	mov	r0, r4
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8003f38:	fb02 8206 	mla	r2, r2, r6, r8
      if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8003f3c:	9500      	str	r5, [sp, #0]
 8003f3e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8003f42:	f002 fae7 	bl	8006514 <HAL_DMA2D_Start>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d1e8      	bne.n	8003f1c <CopyBuffer+0x4c>
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	2164      	movs	r1, #100	; 0x64
}
 8003f4e:	b003      	add	sp, #12
 8003f50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8003f54:	f002 bafa 	b.w	800654c <HAL_DMA2D_PollForTransfer>
 8003f58:	240010a8 	.word	0x240010a8
 8003f5c:	52001000 	.word	0x52001000

08003f60 <displayFrameBuffer>:

void displayFrameBuffer(uint32_t* gb_frame, uint8_t scaleAmount){
 8003f60:	b530      	push	{r4, r5, lr}
 8003f62:	460c      	mov	r4, r1
 8003f64:	b083      	sub	sp, #12
	CopyBuffer((uint32_t *) gb_frame, (uint32_t *)Buffers[0], 0, (480 - (144*3))/2, 160 * scaleAmount, 144 * scaleAmount);
 8003f66:	2318      	movs	r3, #24
 8003f68:	2200      	movs	r2, #0
 8003f6a:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8003f6e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8003f72:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003f76:	012d      	lsls	r5, r5, #4
 8003f78:	0164      	lsls	r4, r4, #5
 8003f7a:	e9cd 4500 	strd	r4, r5, [sp]
 8003f7e:	f7ff ffa7 	bl	8003ed0 <CopyBuffer>
	LTDC_LAYER(&hlcd_ltdc, 0)->CFBAR = ((uint32_t)Buffers[0]);
 8003f82:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <displayFrameBuffer+0x34>)
 8003f84:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 //__HAL_LTDC_RELOAD_CONFIG(&hlcd_ltdc);
}
 8003f8e:	b003      	add	sp, #12
 8003f90:	bd30      	pop	{r4, r5, pc}
 8003f92:	bf00      	nop
 8003f94:	2401146c 	.word	0x2401146c

08003f98 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f98:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <HAL_MspInit+0x20>)
{
 8003f9a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003fa0:	f042 0202 	orr.w	r2, r2, #2
 8003fa4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fb4:	b002      	add	sp, #8
 8003fb6:	4770      	bx	lr
 8003fb8:	58024400 	.word	0x58024400

08003fbc <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003fbc:	4938      	ldr	r1, [pc, #224]	; (80040a0 <HAL_ADC_MspInit+0xe4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fbe:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8003fc0:	6802      	ldr	r2, [r0, #0]
{
 8003fc2:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8003fc4:	428a      	cmp	r2, r1
{
 8003fc6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003fcc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003fd0:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8003fd2:	d004      	beq.n	8003fde <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8003fd4:	4933      	ldr	r1, [pc, #204]	; (80040a4 <HAL_ADC_MspInit+0xe8>)
 8003fd6:	428a      	cmp	r2, r1
 8003fd8:	d026      	beq.n	8004028 <HAL_ADC_MspInit+0x6c>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003fda:	b00a      	add	sp, #40	; 0x28
 8003fdc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003fde:	4b32      	ldr	r3, [pc, #200]	; (80040a8 <HAL_ADC_MspInit+0xec>)
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8003fe0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003fe4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8003fe8:	4608      	mov	r0, r1
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003fea:	f042 0220 	orr.w	r2, r2, #32
 8003fee:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003ff2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003ff6:	f002 0220 	and.w	r2, r2, #32
 8003ffa:	9200      	str	r2, [sp, #0]
 8003ffc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800400a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	9b01      	ldr	r3, [sp, #4]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8004016:	f001 fd01 	bl	8005a1c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800401a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800401e:	4608      	mov	r0, r1
 8004020:	f001 fcfc 	bl	8005a1c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8004024:	b00a      	add	sp, #40	; 0x28
 8004026:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004028:	4a1f      	ldr	r2, [pc, #124]	; (80040a8 <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 800402a:	f44f 6680 	mov.w	r6, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800402e:	2503      	movs	r5, #3
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8004030:	a905      	add	r1, sp, #20
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004032:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8004036:	481d      	ldr	r0, [pc, #116]	; (80040ac <HAL_ADC_MspInit+0xf0>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004038:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 800403c:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8004040:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004044:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
 8004048:	9402      	str	r4, [sp, #8]
 800404a:	9c02      	ldr	r4, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800404c:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004050:	f044 0420 	orr.w	r4, r4, #32
 8004054:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8004058:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 800405c:	f004 0420 	and.w	r4, r4, #32
 8004060:	9403      	str	r4, [sp, #12]
 8004062:	9c03      	ldr	r4, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004064:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004068:	f044 0404 	orr.w	r4, r4, #4
 800406c:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8004070:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004076:	f002 0204 	and.w	r2, r2, #4
 800407a:	9204      	str	r2, [sp, #16]
 800407c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800407e:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8004082:	f002 ff1b 	bl	8006ebc <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8004086:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800408a:	4608      	mov	r0, r1
 800408c:	f001 fcc6 	bl	8005a1c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8004090:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8004094:	4608      	mov	r0, r1
 8004096:	f001 fcc1 	bl	8005a1c <HAL_SYSCFG_AnalogSwitchConfig>
}
 800409a:	b00a      	add	sp, #40	; 0x28
 800409c:	bd70      	pop	{r4, r5, r6, pc}
 800409e:	bf00      	nop
 80040a0:	40022000 	.word	0x40022000
 80040a4:	58026000 	.word	0x58026000
 80040a8:	58024400 	.word	0x58024400
 80040ac:	58021400 	.word	0x58021400

080040b0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop

080040b4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 80040b4:	4c05      	ldr	r4, [pc, #20]	; (80040cc <HardFault_Handler+0x18>)
{
 80040b6:	b508      	push	{r3, lr}
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 80040b8:	4620      	mov	r0, r4
 80040ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040be:	f003 f825 	bl	800710c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80040c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040c6:	f001 fc91 	bl	80059ec <HAL_Delay>
  while (1)
 80040ca:	e7f5      	b.n	80040b8 <HardFault_Handler+0x4>
 80040cc:	58022000 	.word	0x58022000

080040d0 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80040d0:	e7fe      	b.n	80040d0 <MemManage_Handler>
 80040d2:	bf00      	nop

080040d4 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80040d4:	e7fe      	b.n	80040d4 <BusFault_Handler>
 80040d6:	bf00      	nop

080040d8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80040d8:	e7fe      	b.n	80040d8 <UsageFault_Handler>
 80040da:	bf00      	nop

080040dc <SVC_Handler>:
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop

080040e0 <DebugMon_Handler>:
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop

080040e4 <PendSV_Handler>:
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop

080040e8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80040e8:	f001 bc6e 	b.w	80059c8 <HAL_IncTick>

080040ec <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 80040ec:	4801      	ldr	r0, [pc, #4]	; (80040f4 <LTDC_IRQHandler+0x8>)
 80040ee:	f003 b93f 	b.w	8007370 <HAL_LTDC_IRQHandler>
 80040f2:	bf00      	nop
 80040f4:	2401146c 	.word	0x2401146c

080040f8 <LTDC_ER_IRQHandler>:
 80040f8:	f7ff bff8 	b.w	80040ec <LTDC_IRQHandler>

080040fc <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 80040fc:	4801      	ldr	r0, [pc, #4]	; (8004104 <DSI_IRQHandler+0x8>)
 80040fe:	f002 bbff 	b.w	8006900 <HAL_DSI_IRQHandler>
 8004102:	bf00      	nop
 8004104:	24011530 	.word	0x24011530

08004108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004140 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800410c:	f7fc f8e4 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004110:	480c      	ldr	r0, [pc, #48]	; (8004144 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004112:	490d      	ldr	r1, [pc, #52]	; (8004148 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004114:	4a0d      	ldr	r2, [pc, #52]	; (800414c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004118:	e002      	b.n	8004120 <LoopCopyDataInit>

0800411a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800411a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800411c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800411e:	3304      	adds	r3, #4

08004120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004124:	d3f9      	bcc.n	800411a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004126:	4a0a      	ldr	r2, [pc, #40]	; (8004150 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004128:	4c0a      	ldr	r4, [pc, #40]	; (8004154 <LoopFillZerobss+0x22>)
  movs r3, #0
 800412a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800412c:	e001      	b.n	8004132 <LoopFillZerobss>

0800412e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800412e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004130:	3204      	adds	r2, #4

08004132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004134:	d3fb      	bcc.n	800412e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004136:	f005 fba1 	bl	800987c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800413a:	f7ff fcef 	bl	8003b1c <main>
  bx  lr
 800413e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004140:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8004144:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004148:	24001074 	.word	0x24001074
  ldr r2, =_sidata
 800414c:	08013678 	.word	0x08013678
  ldr r2, =_sbss
 8004150:	24001078 	.word	0x24001078
  ldr r4, =_ebss
 8004154:	240115ec 	.word	0x240115ec

08004158 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004158:	e7fe      	b.n	8004158 <ADC3_IRQHandler>
	...

0800415c <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 800415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                     pRegMode->BurstType     |\
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800415e:	4c0e      	ldr	r4, [pc, #56]	; (8004198 <IS42S32800J_ModeRegConfig+0x3c>)
 8004160:	2304      	movs	r3, #4
{
 8004162:	460a      	mov	r2, r1
  Command.CommandTarget          = pRegMode->TargetBank;
  Command.AutoRefreshNumber      = 1;
 8004164:	2601      	movs	r6, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004166:	6023      	str	r3, [r4, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004168:	69d7      	ldr	r7, [r2, #28]
 800416a:	e9d1 3503 	ldrd	r3, r5, [r1, #12]
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800416e:	4621      	mov	r1, r4
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004170:	432b      	orrs	r3, r5
                     pRegMode->BurstType     |\
 8004172:	6955      	ldr	r5, [r2, #20]
 8004174:	432b      	orrs	r3, r5
                     pRegMode->CASLatency    |\
 8004176:	6995      	ldr	r5, [r2, #24]
 8004178:	432b      	orrs	r3, r5
  Command.CommandTarget          = pRegMode->TargetBank;
 800417a:	6815      	ldr	r5, [r2, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800417c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
 8004180:	60a6      	str	r6, [r4, #8]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004182:	433b      	orrs	r3, r7
  Command.CommandTarget          = pRegMode->TargetBank;
 8004184:	6065      	str	r5, [r4, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 8004186:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004188:	f005 f9fe 	bl	8009588 <HAL_SDRAM_SendCommand>
 800418c:	3800      	subs	r0, #0
 800418e:	bf18      	it	ne
 8004190:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004192:	4240      	negs	r0, r0
 8004194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004196:	bf00      	nop
 8004198:	24001110 	.word	0x24001110

0800419c <IS42S32800J_Init>:
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800419c:	680a      	ldr	r2, [r1, #0]
{
 800419e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80041a0:	4c22      	ldr	r4, [pc, #136]	; (800422c <IS42S32800J_Init+0x90>)
 80041a2:	2301      	movs	r3, #1
  Command.ModeRegisterDefinition = 0;
 80041a4:	2700      	movs	r7, #0
{
 80041a6:	460d      	mov	r5, r1
  Command.CommandTarget          = Interface;
 80041a8:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80041aa:	4621      	mov	r1, r4
 80041ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 80041b0:	4606      	mov	r6, r0
  Command.ModeRegisterDefinition = 0;
 80041b2:	60e7      	str	r7, [r4, #12]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80041b4:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 80041b6:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80041b8:	f005 f9e6 	bl	8009588 <HAL_SDRAM_SendCommand>
 80041bc:	2800      	cmp	r0, #0
 80041be:	d132      	bne.n	8004226 <IS42S32800J_Init+0x8a>
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80041c0:	f001 fc0e 	bl	80059e0 <HAL_GetTick>
 80041c4:	4607      	mov	r7, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80041c6:	f001 fc0b 	bl	80059e0 <HAL_GetTick>
 80041ca:	4287      	cmp	r7, r0
 80041cc:	d0fb      	beq.n	80041c6 <IS42S32800J_Init+0x2a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80041ce:	682a      	ldr	r2, [r5, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80041d0:	2002      	movs	r0, #2
  Command.AutoRefreshNumber      = 1;
 80041d2:	2101      	movs	r1, #1
  Command.ModeRegisterDefinition = 0;
 80041d4:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
 80041d6:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80041d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80041dc:	6020      	str	r0, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80041de:	4630      	mov	r0, r6
  Command.AutoRefreshNumber      = 1;
 80041e0:	60a1      	str	r1, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80041e2:	4912      	ldr	r1, [pc, #72]	; (800422c <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 80041e4:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80041e6:	f005 f9cf 	bl	8009588 <HAL_SDRAM_SendCommand>
 80041ea:	4603      	mov	r3, r0
 80041ec:	b9d8      	cbnz	r0, 8004226 <IS42S32800J_Init+0x8a>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 80041ee:	6828      	ldr	r0, [r5, #0]
  Command.AutoRefreshNumber      = 8;
 80041f0:	2708      	movs	r7, #8
  Command.CommandMode            = RefreshMode;
 80041f2:	6869      	ldr	r1, [r5, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80041f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = Interface;
 80041f8:	6060      	str	r0, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80041fa:	4630      	mov	r0, r6
  Command.CommandMode            = RefreshMode;
 80041fc:	6021      	str	r1, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80041fe:	490b      	ldr	r1, [pc, #44]	; (800422c <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8004200:	60e3      	str	r3, [r4, #12]
  Command.AutoRefreshNumber      = 8;
 8004202:	60a7      	str	r7, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004204:	f005 f9c0 	bl	8009588 <HAL_SDRAM_SendCommand>
 8004208:	b968      	cbnz	r0, 8004226 <IS42S32800J_Init+0x8a>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 800420a:	4629      	mov	r1, r5
 800420c:	4630      	mov	r0, r6
 800420e:	f7ff ffa5 	bl	800415c <IS42S32800J_ModeRegConfig>
 8004212:	b940      	cbnz	r0, 8004226 <IS42S32800J_Init+0x8a>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8004214:	68a9      	ldr	r1, [r5, #8]
 8004216:	4630      	mov	r0, r6
 8004218:	f005 f9d6 	bl	80095c8 <HAL_SDRAM_ProgramRefreshRate>
 800421c:	3800      	subs	r0, #0
 800421e:	bf18      	it	ne
 8004220:	2001      	movne	r0, #1
 8004222:	4240      	negs	r0, r0
}
 8004224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = IS42S32800J_ERROR;
 8004226:	f04f 30ff 	mov.w	r0, #4294967295
}
 800422a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800422c:	24001110 	.word	0x24001110

08004230 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop

08004238 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 8004238:	4b02      	ldr	r3, [pc, #8]	; (8004244 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 800423a:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	600b      	str	r3, [r1, #0]
}
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	24001120 	.word	0x24001120

08004248 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8004248:	4b02      	ldr	r3, [pc, #8]	; (8004254 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 800424a:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	600b      	str	r3, [r1, #0]
}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	24001120 	.word	0x24001120

08004258 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <OTM8009A_GetXSize+0x1c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	b123      	cbz	r3, 8004268 <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 800425e:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 8004262:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 8004264:	600b      	str	r3, [r1, #0]
}
 8004266:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 8004268:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 800426c:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 800426e:	600b      	str	r3, [r1, #0]
}
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	24001120 	.word	0x24001120

08004278 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <OTM8009A_GetYSize+0x1c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	b123      	cbz	r3, 8004288 <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 800427e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 8004282:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 8004284:	600b      	str	r3, [r1, #0]
}
 8004286:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 8004288:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 800428c:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 800428e:	600b      	str	r3, [r1, #0]
}
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	24001120 	.word	0x24001120

08004298 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop

080042a0 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80042a0:	f04f 30ff 	mov.w	r0, #4294967295
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop

080042a8 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80042a8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop

080042b0 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop

080042b8 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop

080042c0 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80042c0:	f04f 30ff 	mov.w	r0, #4294967295
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop

080042c8 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80042c8:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80042ca:	6884      	ldr	r4, [r0, #8]
 80042cc:	8800      	ldrh	r0, [r0, #0]
 80042ce:	46a4      	mov	ip, r4
}
 80042d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80042d4:	4760      	bx	ip
 80042d6:	bf00      	nop

080042d8 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80042d8:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80042da:	6844      	ldr	r4, [r0, #4]
 80042dc:	8800      	ldrh	r0, [r0, #0]
 80042de:	46a4      	mov	ip, r4
}
 80042e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80042e4:	4760      	bx	ip
 80042e6:	bf00      	nop

080042e8 <OTM8009A_Init>:
{
 80042e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80042ec:	2300      	movs	r3, #0
 80042ee:	f100 0710 	add.w	r7, r0, #16
{
 80042f2:	b082      	sub	sp, #8
 80042f4:	4680      	mov	r8, r0
 80042f6:	4689      	mov	r9, r1
 80042f8:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80042fa:	4619      	mov	r1, r3
 80042fc:	4ae0      	ldr	r2, [pc, #896]	; (8004680 <OTM8009A_Init+0x398>)
 80042fe:	4638      	mov	r0, r7
 8004300:	f000 fcd6 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004304:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004306:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004308:	4ade      	ldr	r2, [pc, #888]	; (8004684 <OTM8009A_Init+0x39c>)
 800430a:	21ff      	movs	r1, #255	; 0xff
 800430c:	4638      	mov	r0, r7
 800430e:	f000 fccf 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004312:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004314:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004316:	4adc      	ldr	r2, [pc, #880]	; (8004688 <OTM8009A_Init+0x3a0>)
 8004318:	4619      	mov	r1, r3
 800431a:	4638      	mov	r0, r7
 800431c:	f000 fcc8 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004320:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004322:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004324:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004326:	4ad9      	ldr	r2, [pc, #868]	; (800468c <OTM8009A_Init+0x3a4>)
 8004328:	21ff      	movs	r1, #255	; 0xff
 800432a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800432c:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800432e:	f000 fcbf 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004332:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004334:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004336:	4ad4      	ldr	r2, [pc, #848]	; (8004688 <OTM8009A_Init+0x3a0>)
 8004338:	4619      	mov	r1, r3
 800433a:	4638      	mov	r0, r7
 800433c:	f000 fcb8 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004340:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004342:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004344:	2300      	movs	r3, #0
 8004346:	4ad2      	ldr	r2, [pc, #840]	; (8004690 <OTM8009A_Init+0x3a8>)
 8004348:	21c4      	movs	r1, #196	; 0xc4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800434a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800434c:	4638      	mov	r0, r7
 800434e:	f000 fcaf 	bl	8004cb0 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004352:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004356:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 8004358:	4798      	blx	r3
 800435a:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800435c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004360:	4798      	blx	r3
 8004362:	1b00      	subs	r0, r0, r4
 8004364:	2809      	cmp	r0, #9
 8004366:	d9f9      	bls.n	800435c <OTM8009A_Init+0x74>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004368:	2300      	movs	r3, #0
 800436a:	4aca      	ldr	r2, [pc, #808]	; (8004694 <OTM8009A_Init+0x3ac>)
 800436c:	4638      	mov	r0, r7
 800436e:	4619      	mov	r1, r3
 8004370:	f000 fc9e 	bl	8004cb0 <otm8009a_write_reg>
 8004374:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004376:	2300      	movs	r3, #0
 8004378:	4ac7      	ldr	r2, [pc, #796]	; (8004698 <OTM8009A_Init+0x3b0>)
 800437a:	21c4      	movs	r1, #196	; 0xc4
 800437c:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800437e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004380:	f000 fc96 	bl	8004cb0 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8004384:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004388:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 800438a:	4798      	blx	r3
 800438c:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800438e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004392:	4798      	blx	r3
 8004394:	1b40      	subs	r0, r0, r5
 8004396:	2809      	cmp	r0, #9
 8004398:	d9f9      	bls.n	800438e <OTM8009A_Init+0xa6>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800439a:	2300      	movs	r3, #0
 800439c:	4abf      	ldr	r2, [pc, #764]	; (800469c <OTM8009A_Init+0x3b4>)
 800439e:	4638      	mov	r0, r7
 80043a0:	4619      	mov	r1, r3
 80043a2:	f000 fc85 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80043a6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80043a8:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80043aa:	4abd      	ldr	r2, [pc, #756]	; (80046a0 <OTM8009A_Init+0x3b8>)
 80043ac:	21c5      	movs	r1, #197	; 0xc5
 80043ae:	4638      	mov	r0, r7
 80043b0:	f000 fc7e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80043b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80043b6:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80043b8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80043ba:	4619      	mov	r1, r3
 80043bc:	4ab9      	ldr	r2, [pc, #740]	; (80046a4 <OTM8009A_Init+0x3bc>)
 80043be:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80043c0:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80043c2:	f000 fc75 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80043c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80043c8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80043ca:	4ab7      	ldr	r2, [pc, #732]	; (80046a8 <OTM8009A_Init+0x3c0>)
 80043cc:	21c5      	movs	r1, #197	; 0xc5
 80043ce:	4638      	mov	r0, r7
 80043d0:	f000 fc6e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80043d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80043d6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80043d8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80043da:	4619      	mov	r1, r3
 80043dc:	4ab3      	ldr	r2, [pc, #716]	; (80046ac <OTM8009A_Init+0x3c4>)
 80043de:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80043e0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80043e2:	f000 fc65 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80043e6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80043e8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80043ea:	4ab1      	ldr	r2, [pc, #708]	; (80046b0 <OTM8009A_Init+0x3c8>)
 80043ec:	21c0      	movs	r1, #192	; 0xc0
 80043ee:	4638      	mov	r0, r7
 80043f0:	f000 fc5e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80043f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80043f6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80043f8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80043fa:	4619      	mov	r1, r3
 80043fc:	4aa0      	ldr	r2, [pc, #640]	; (8004680 <OTM8009A_Init+0x398>)
 80043fe:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004400:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004402:	f000 fc55 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004406:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004408:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800440a:	4aaa      	ldr	r2, [pc, #680]	; (80046b4 <OTM8009A_Init+0x3cc>)
 800440c:	21d9      	movs	r1, #217	; 0xd9
 800440e:	4638      	mov	r0, r7
 8004410:	f000 fc4e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004414:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004416:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004418:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800441a:	4619      	mov	r1, r3
 800441c:	4aa6      	ldr	r2, [pc, #664]	; (80046b8 <OTM8009A_Init+0x3d0>)
 800441e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004420:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004422:	f000 fc45 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004426:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004428:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 800442a:	4aa4      	ldr	r2, [pc, #656]	; (80046bc <OTM8009A_Init+0x3d4>)
 800442c:	21c1      	movs	r1, #193	; 0xc1
 800442e:	4638      	mov	r0, r7
 8004430:	f000 fc3e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004434:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004436:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004438:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800443a:	4619      	mov	r1, r3
 800443c:	4aa0      	ldr	r2, [pc, #640]	; (80046c0 <OTM8009A_Init+0x3d8>)
 800443e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004440:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004442:	f000 fc35 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004446:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004448:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800444a:	4a9e      	ldr	r2, [pc, #632]	; (80046c4 <OTM8009A_Init+0x3dc>)
 800444c:	21c1      	movs	r1, #193	; 0xc1
 800444e:	4638      	mov	r0, r7
 8004450:	f000 fc2e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004454:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004456:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004458:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800445a:	4619      	mov	r1, r3
 800445c:	4a9a      	ldr	r2, [pc, #616]	; (80046c8 <OTM8009A_Init+0x3e0>)
 800445e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004460:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004462:	f000 fc25 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004466:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004468:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800446a:	4a98      	ldr	r2, [pc, #608]	; (80046cc <OTM8009A_Init+0x3e4>)
 800446c:	21c5      	movs	r1, #197	; 0xc5
 800446e:	4638      	mov	r0, r7
 8004470:	f000 fc1e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004474:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004476:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004478:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800447a:	4619      	mov	r1, r3
 800447c:	4a94      	ldr	r2, [pc, #592]	; (80046d0 <OTM8009A_Init+0x3e8>)
 800447e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004480:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004482:	f000 fc15 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004486:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004488:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800448a:	4a87      	ldr	r2, [pc, #540]	; (80046a8 <OTM8009A_Init+0x3c0>)
 800448c:	21c5      	movs	r1, #197	; 0xc5
 800448e:	4638      	mov	r0, r7
 8004490:	f000 fc0e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004494:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004496:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004498:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800449a:	4619      	mov	r1, r3
 800449c:	4a78      	ldr	r2, [pc, #480]	; (8004680 <OTM8009A_Init+0x398>)
 800449e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80044a0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044a2:	f000 fc05 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80044a6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044a8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80044aa:	4a8a      	ldr	r2, [pc, #552]	; (80046d4 <OTM8009A_Init+0x3ec>)
 80044ac:	21d8      	movs	r1, #216	; 0xd8
 80044ae:	4638      	mov	r0, r7
 80044b0:	f000 fbfe 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80044b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80044b6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80044b8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80044ba:	4619      	mov	r1, r3
 80044bc:	4a86      	ldr	r2, [pc, #536]	; (80046d8 <OTM8009A_Init+0x3f0>)
 80044be:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80044c0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80044c2:	f000 fbf5 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80044c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80044c8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80044ca:	4a84      	ldr	r2, [pc, #528]	; (80046dc <OTM8009A_Init+0x3f4>)
 80044cc:	21c5      	movs	r1, #197	; 0xc5
 80044ce:	4638      	mov	r0, r7
 80044d0:	f000 fbee 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80044d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80044d6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80044d8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80044da:	4619      	mov	r1, r3
 80044dc:	4a80      	ldr	r2, [pc, #512]	; (80046e0 <OTM8009A_Init+0x3f8>)
 80044de:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80044e0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80044e2:	f000 fbe5 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80044e6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80044e8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80044ea:	4a7e      	ldr	r2, [pc, #504]	; (80046e4 <OTM8009A_Init+0x3fc>)
 80044ec:	21c0      	movs	r1, #192	; 0xc0
 80044ee:	4638      	mov	r0, r7
 80044f0:	f000 fbde 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80044f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80044f6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80044f8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80044fa:	4619      	mov	r1, r3
 80044fc:	4a7a      	ldr	r2, [pc, #488]	; (80046e8 <OTM8009A_Init+0x400>)
 80044fe:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004500:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004502:	f000 fbd5 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004506:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004508:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800450a:	4a78      	ldr	r2, [pc, #480]	; (80046ec <OTM8009A_Init+0x404>)
 800450c:	21c5      	movs	r1, #197	; 0xc5
 800450e:	4638      	mov	r0, r7
 8004510:	f000 fbce 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004514:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004516:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004518:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800451a:	4619      	mov	r1, r3
 800451c:	4a66      	ldr	r2, [pc, #408]	; (80046b8 <OTM8009A_Init+0x3d0>)
 800451e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004520:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004522:	f000 fbc5 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004526:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004528:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800452a:	4a71      	ldr	r2, [pc, #452]	; (80046f0 <OTM8009A_Init+0x408>)
 800452c:	21c4      	movs	r1, #196	; 0xc4
 800452e:	4638      	mov	r0, r7
 8004530:	f000 fbbe 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004534:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004536:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004538:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800453a:	4619      	mov	r1, r3
 800453c:	4a60      	ldr	r2, [pc, #384]	; (80046c0 <OTM8009A_Init+0x3d8>)
 800453e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004540:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004542:	f000 fbb5 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004546:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004548:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800454a:	4a6a      	ldr	r2, [pc, #424]	; (80046f4 <OTM8009A_Init+0x40c>)
 800454c:	21c1      	movs	r1, #193	; 0xc1
 800454e:	4638      	mov	r0, r7
 8004550:	f000 fbae 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004554:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004556:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004558:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800455a:	4619      	mov	r1, r3
 800455c:	4a66      	ldr	r2, [pc, #408]	; (80046f8 <OTM8009A_Init+0x410>)
 800455e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004560:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004562:	f000 fba5 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004566:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004568:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800456a:	4a64      	ldr	r2, [pc, #400]	; (80046fc <OTM8009A_Init+0x414>)
 800456c:	21b3      	movs	r1, #179	; 0xb3
 800456e:	4638      	mov	r0, r7
 8004570:	f000 fb9e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004574:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004576:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004578:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800457a:	4619      	mov	r1, r3
 800457c:	4a42      	ldr	r2, [pc, #264]	; (8004688 <OTM8009A_Init+0x3a0>)
 800457e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004580:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004582:	f000 fb95 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004586:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004588:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800458a:	4a5d      	ldr	r2, [pc, #372]	; (8004700 <OTM8009A_Init+0x418>)
 800458c:	21ce      	movs	r1, #206	; 0xce
 800458e:	4638      	mov	r0, r7
 8004590:	f000 fb8e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004594:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004596:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004598:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800459a:	4619      	mov	r1, r3
 800459c:	4a59      	ldr	r2, [pc, #356]	; (8004704 <OTM8009A_Init+0x41c>)
 800459e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80045a0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80045a2:	f000 fb85 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80045a6:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80045a8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80045aa:	4a57      	ldr	r2, [pc, #348]	; (8004708 <OTM8009A_Init+0x420>)
 80045ac:	21ce      	movs	r1, #206	; 0xce
 80045ae:	4638      	mov	r0, r7
 80045b0:	f000 fb7e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80045b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80045b6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80045b8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80045ba:	4619      	mov	r1, r3
 80045bc:	4a53      	ldr	r2, [pc, #332]	; (800470c <OTM8009A_Init+0x424>)
 80045be:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80045c0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80045c2:	f000 fb75 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80045c6:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80045c8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80045ca:	4a51      	ldr	r2, [pc, #324]	; (8004710 <OTM8009A_Init+0x428>)
 80045cc:	21ce      	movs	r1, #206	; 0xce
 80045ce:	4638      	mov	r0, r7
 80045d0:	f000 fb6e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80045d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80045d6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80045d8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80045da:	4619      	mov	r1, r3
 80045dc:	4a4d      	ldr	r2, [pc, #308]	; (8004714 <OTM8009A_Init+0x42c>)
 80045de:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80045e0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80045e2:	f000 fb65 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80045e6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80045e8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80045ea:	4a4b      	ldr	r2, [pc, #300]	; (8004718 <OTM8009A_Init+0x430>)
 80045ec:	21cf      	movs	r1, #207	; 0xcf
 80045ee:	4638      	mov	r0, r7
 80045f0:	f000 fb5e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80045f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80045f6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80045f8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80045fa:	4619      	mov	r1, r3
 80045fc:	4a47      	ldr	r2, [pc, #284]	; (800471c <OTM8009A_Init+0x434>)
 80045fe:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004600:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004602:	f000 fb55 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004606:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004608:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800460a:	4a45      	ldr	r2, [pc, #276]	; (8004720 <OTM8009A_Init+0x438>)
 800460c:	21cf      	movs	r1, #207	; 0xcf
 800460e:	4638      	mov	r0, r7
 8004610:	f000 fb4e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004614:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004616:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004618:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800461a:	4619      	mov	r1, r3
 800461c:	4a1a      	ldr	r2, [pc, #104]	; (8004688 <OTM8009A_Init+0x3a0>)
 800461e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004620:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004622:	f000 fb45 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004626:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004628:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800462a:	4a3e      	ldr	r2, [pc, #248]	; (8004724 <OTM8009A_Init+0x43c>)
 800462c:	21cb      	movs	r1, #203	; 0xcb
 800462e:	4638      	mov	r0, r7
 8004630:	f000 fb3e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004634:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004636:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004638:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800463a:	4619      	mov	r1, r3
 800463c:	4a3a      	ldr	r2, [pc, #232]	; (8004728 <OTM8009A_Init+0x440>)
 800463e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004640:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004642:	f000 fb35 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004646:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004648:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800464a:	4a38      	ldr	r2, [pc, #224]	; (800472c <OTM8009A_Init+0x444>)
 800464c:	21cb      	movs	r1, #203	; 0xcb
 800464e:	4638      	mov	r0, r7
 8004650:	f000 fb2e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004654:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004656:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004658:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800465a:	4619      	mov	r1, r3
 800465c:	4a29      	ldr	r2, [pc, #164]	; (8004704 <OTM8009A_Init+0x41c>)
 800465e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004660:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004662:	f000 fb25 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004666:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004668:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800466a:	4a31      	ldr	r2, [pc, #196]	; (8004730 <OTM8009A_Init+0x448>)
 800466c:	21cb      	movs	r1, #203	; 0xcb
 800466e:	4638      	mov	r0, r7
 8004670:	f000 fb1e 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004674:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004676:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004678:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800467a:	4619      	mov	r1, r3
 800467c:	e05a      	b.n	8004734 <OTM8009A_Init+0x44c>
 800467e:	bf00      	nop
 8004680:	08011b59 	.word	0x08011b59
 8004684:	08011a28 	.word	0x08011a28
 8004688:	08011b5a 	.word	0x08011b5a
 800468c:	08011ab4 	.word	0x08011ab4
 8004690:	08011b5b 	.word	0x08011b5b
 8004694:	08011b5c 	.word	0x08011b5c
 8004698:	08011b5d 	.word	0x08011b5d
 800469c:	08011b5e 	.word	0x08011b5e
 80046a0:	08011b5f 	.word	0x08011b5f
 80046a4:	08011b60 	.word	0x08011b60
 80046a8:	08011b61 	.word	0x08011b61
 80046ac:	08011b62 	.word	0x08011b62
 80046b0:	08011b63 	.word	0x08011b63
 80046b4:	08011b64 	.word	0x08011b64
 80046b8:	08011b65 	.word	0x08011b65
 80046bc:	08011b66 	.word	0x08011b66
 80046c0:	08011b67 	.word	0x08011b67
 80046c4:	08011b68 	.word	0x08011b68
 80046c8:	08011b69 	.word	0x08011b69
 80046cc:	08011b6a 	.word	0x08011b6a
 80046d0:	08011b6b 	.word	0x08011b6b
 80046d4:	08011b28 	.word	0x08011b28
 80046d8:	08011b6c 	.word	0x08011b6c
 80046dc:	08011b6d 	.word	0x08011b6d
 80046e0:	08011b6e 	.word	0x08011b6e
 80046e4:	08011b6f 	.word	0x08011b6f
 80046e8:	08011b70 	.word	0x08011b70
 80046ec:	08011b71 	.word	0x08011b71
 80046f0:	08011b72 	.word	0x08011b72
 80046f4:	08011b73 	.word	0x08011b73
 80046f8:	08011b74 	.word	0x08011b74
 80046fc:	08011b2c 	.word	0x08011b2c
 8004700:	08011b30 	.word	0x08011b30
 8004704:	08011b75 	.word	0x08011b75
 8004708:	08011b38 	.word	0x08011b38
 800470c:	08011b76 	.word	0x08011b76
 8004710:	08011b48 	.word	0x08011b48
 8004714:	08011b77 	.word	0x08011b77
 8004718:	08011a2c 	.word	0x08011a2c
 800471c:	08011b78 	.word	0x08011b78
 8004720:	08011b85 	.word	0x08011b85
 8004724:	08011a38 	.word	0x08011a38
 8004728:	08011b79 	.word	0x08011b79
 800472c:	08011a44 	.word	0x08011a44
 8004730:	08011a54 	.word	0x08011a54
 8004734:	4ad1      	ldr	r2, [pc, #836]	; (8004a7c <OTM8009A_Init+0x794>)
 8004736:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004738:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800473a:	f000 fab9 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800473e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004740:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004742:	4acf      	ldr	r2, [pc, #828]	; (8004a80 <OTM8009A_Init+0x798>)
 8004744:	21cb      	movs	r1, #203	; 0xcb
 8004746:	4638      	mov	r0, r7
 8004748:	f000 fab2 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800474c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800474e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004750:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004752:	4619      	mov	r1, r3
 8004754:	4acb      	ldr	r2, [pc, #812]	; (8004a84 <OTM8009A_Init+0x79c>)
 8004756:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004758:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800475a:	f000 faa9 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800475e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004760:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004762:	4ac9      	ldr	r2, [pc, #804]	; (8004a88 <OTM8009A_Init+0x7a0>)
 8004764:	21cb      	movs	r1, #203	; 0xcb
 8004766:	4638      	mov	r0, r7
 8004768:	f000 faa2 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800476c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800476e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004770:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004772:	4619      	mov	r1, r3
 8004774:	4ac5      	ldr	r2, [pc, #788]	; (8004a8c <OTM8009A_Init+0x7a4>)
 8004776:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004778:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800477a:	f000 fa99 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800477e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004780:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004782:	4ac3      	ldr	r2, [pc, #780]	; (8004a90 <OTM8009A_Init+0x7a8>)
 8004784:	21cb      	movs	r1, #203	; 0xcb
 8004786:	4638      	mov	r0, r7
 8004788:	f000 fa92 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800478c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800478e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004790:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004792:	4619      	mov	r1, r3
 8004794:	4abf      	ldr	r2, [pc, #764]	; (8004a94 <OTM8009A_Init+0x7ac>)
 8004796:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004798:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800479a:	f000 fa89 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800479e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80047a0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80047a2:	4abd      	ldr	r2, [pc, #756]	; (8004a98 <OTM8009A_Init+0x7b0>)
 80047a4:	21cb      	movs	r1, #203	; 0xcb
 80047a6:	4638      	mov	r0, r7
 80047a8:	f000 fa82 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80047ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80047ae:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80047b0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80047b2:	4619      	mov	r1, r3
 80047b4:	4ab9      	ldr	r2, [pc, #740]	; (8004a9c <OTM8009A_Init+0x7b4>)
 80047b6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80047b8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80047ba:	f000 fa79 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80047be:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80047c0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80047c2:	4ab7      	ldr	r2, [pc, #732]	; (8004aa0 <OTM8009A_Init+0x7b8>)
 80047c4:	21cb      	movs	r1, #203	; 0xcb
 80047c6:	4638      	mov	r0, r7
 80047c8:	f000 fa72 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80047cc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80047ce:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80047d0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80047d2:	4619      	mov	r1, r3
 80047d4:	4ab3      	ldr	r2, [pc, #716]	; (8004aa4 <OTM8009A_Init+0x7bc>)
 80047d6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80047d8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80047da:	f000 fa69 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80047de:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80047e0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80047e2:	4ab1      	ldr	r2, [pc, #708]	; (8004aa8 <OTM8009A_Init+0x7c0>)
 80047e4:	21cc      	movs	r1, #204	; 0xcc
 80047e6:	4638      	mov	r0, r7
 80047e8:	f000 fa62 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80047ec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80047ee:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80047f0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80047f2:	4619      	mov	r1, r3
 80047f4:	4aad      	ldr	r2, [pc, #692]	; (8004aac <OTM8009A_Init+0x7c4>)
 80047f6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80047f8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80047fa:	f000 fa59 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80047fe:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004800:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004802:	4aab      	ldr	r2, [pc, #684]	; (8004ab0 <OTM8009A_Init+0x7c8>)
 8004804:	21cc      	movs	r1, #204	; 0xcc
 8004806:	4638      	mov	r0, r7
 8004808:	f000 fa52 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800480c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800480e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004810:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004812:	4619      	mov	r1, r3
 8004814:	4aa7      	ldr	r2, [pc, #668]	; (8004ab4 <OTM8009A_Init+0x7cc>)
 8004816:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004818:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800481a:	f000 fa49 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800481e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004820:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004822:	4aa5      	ldr	r2, [pc, #660]	; (8004ab8 <OTM8009A_Init+0x7d0>)
 8004824:	21cc      	movs	r1, #204	; 0xcc
 8004826:	4638      	mov	r0, r7
 8004828:	f000 fa42 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800482c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800482e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004830:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004832:	4619      	mov	r1, r3
 8004834:	4a91      	ldr	r2, [pc, #580]	; (8004a7c <OTM8009A_Init+0x794>)
 8004836:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004838:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800483a:	f000 fa39 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800483e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004840:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004842:	4a9e      	ldr	r2, [pc, #632]	; (8004abc <OTM8009A_Init+0x7d4>)
 8004844:	21cc      	movs	r1, #204	; 0xcc
 8004846:	4638      	mov	r0, r7
 8004848:	f000 fa32 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800484c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800484e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004850:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004852:	4619      	mov	r1, r3
 8004854:	4a8b      	ldr	r2, [pc, #556]	; (8004a84 <OTM8009A_Init+0x79c>)
 8004856:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004858:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800485a:	f000 fa29 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800485e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004860:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004862:	4a97      	ldr	r2, [pc, #604]	; (8004ac0 <OTM8009A_Init+0x7d8>)
 8004864:	21cc      	movs	r1, #204	; 0xcc
 8004866:	4638      	mov	r0, r7
 8004868:	f000 fa22 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800486c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800486e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004870:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004872:	4619      	mov	r1, r3
 8004874:	4a85      	ldr	r2, [pc, #532]	; (8004a8c <OTM8009A_Init+0x7a4>)
 8004876:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004878:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800487a:	f000 fa19 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800487e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004880:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004882:	4a90      	ldr	r2, [pc, #576]	; (8004ac4 <OTM8009A_Init+0x7dc>)
 8004884:	21cc      	movs	r1, #204	; 0xcc
 8004886:	4638      	mov	r0, r7
 8004888:	f000 fa12 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800488c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800488e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004890:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004892:	4619      	mov	r1, r3
 8004894:	4a8c      	ldr	r2, [pc, #560]	; (8004ac8 <OTM8009A_Init+0x7e0>)
 8004896:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004898:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800489a:	f000 fa09 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800489e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80048a0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80048a2:	4a8a      	ldr	r2, [pc, #552]	; (8004acc <OTM8009A_Init+0x7e4>)
 80048a4:	21c5      	movs	r1, #197	; 0xc5
 80048a6:	4638      	mov	r0, r7
 80048a8:	f000 fa02 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80048ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80048ae:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80048b0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80048b2:	4619      	mov	r1, r3
 80048b4:	4a86      	ldr	r2, [pc, #536]	; (8004ad0 <OTM8009A_Init+0x7e8>)
 80048b6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80048b8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80048ba:	f000 f9f9 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80048be:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80048c0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80048c2:	4a84      	ldr	r2, [pc, #528]	; (8004ad4 <OTM8009A_Init+0x7ec>)
 80048c4:	21f5      	movs	r1, #245	; 0xf5
 80048c6:	4638      	mov	r0, r7
 80048c8:	f000 f9f2 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80048cc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80048ce:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80048d0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80048d2:	4619      	mov	r1, r3
 80048d4:	4a80      	ldr	r2, [pc, #512]	; (8004ad8 <OTM8009A_Init+0x7f0>)
 80048d6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80048d8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80048da:	f000 f9e9 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80048de:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80048e0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80048e2:	4a7e      	ldr	r2, [pc, #504]	; (8004adc <OTM8009A_Init+0x7f4>)
 80048e4:	21c6      	movs	r1, #198	; 0xc6
 80048e6:	4638      	mov	r0, r7
 80048e8:	f000 f9e2 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048ec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80048ee:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80048f0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048f2:	4619      	mov	r1, r3
 80048f4:	4a7a      	ldr	r2, [pc, #488]	; (8004ae0 <OTM8009A_Init+0x7f8>)
 80048f6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80048f8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048fa:	f000 f9d9 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80048fe:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004900:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004902:	4a78      	ldr	r2, [pc, #480]	; (8004ae4 <OTM8009A_Init+0x7fc>)
 8004904:	21ff      	movs	r1, #255	; 0xff
 8004906:	4638      	mov	r0, r7
 8004908:	f000 f9d2 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800490c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800490e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004910:	4a73      	ldr	r2, [pc, #460]	; (8004ae0 <OTM8009A_Init+0x7f8>)
 8004912:	4619      	mov	r1, r3
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004914:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004916:	4638      	mov	r0, r7
 8004918:	f000 f9ca 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800491c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800491e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004920:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004922:	4619      	mov	r1, r3
 8004924:	4a6e      	ldr	r2, [pc, #440]	; (8004ae0 <OTM8009A_Init+0x7f8>)
 8004926:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004928:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800492a:	f000 f9c1 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800492e:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004930:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004932:	4a6d      	ldr	r2, [pc, #436]	; (8004ae8 <OTM8009A_Init+0x800>)
 8004934:	21e1      	movs	r1, #225	; 0xe1
 8004936:	4638      	mov	r0, r7
 8004938:	f000 f9ba 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800493c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800493e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004940:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004942:	4619      	mov	r1, r3
 8004944:	4a66      	ldr	r2, [pc, #408]	; (8004ae0 <OTM8009A_Init+0x7f8>)
 8004946:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004948:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800494a:	f000 f9b1 	bl	8004cb0 <otm8009a_write_reg>
 800494e:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004950:	2310      	movs	r3, #16
 8004952:	4a66      	ldr	r2, [pc, #408]	; (8004aec <OTM8009A_Init+0x804>)
 8004954:	21e2      	movs	r1, #226	; 0xe2
 8004956:	4638      	mov	r0, r7
 8004958:	f000 f9aa 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800495c:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800495e:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004960:	2300      	movs	r3, #0
 8004962:	4a63      	ldr	r2, [pc, #396]	; (8004af0 <OTM8009A_Init+0x808>)
 8004964:	2111      	movs	r1, #17
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004966:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004968:	4638      	mov	r0, r7
 800496a:	f000 f9a1 	bl	8004cb0 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 800496e:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004972:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8004974:	4798      	blx	r3
 8004976:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004978:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800497c:	4798      	blx	r3
 800497e:	1b40      	subs	r0, r0, r5
 8004980:	2877      	cmp	r0, #119	; 0x77
 8004982:	d9f9      	bls.n	8004978 <OTM8009A_Init+0x690>
  switch(ColorCoding)
 8004984:	f1b9 0f00 	cmp.w	r9, #0
 8004988:	d074      	beq.n	8004a74 <OTM8009A_Init+0x78c>
 800498a:	f1b9 0f02 	cmp.w	r9, #2
 800498e:	d14f      	bne.n	8004a30 <OTM8009A_Init+0x748>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8004990:	2300      	movs	r3, #0
 8004992:	4a58      	ldr	r2, [pc, #352]	; (8004af4 <OTM8009A_Init+0x80c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004994:	213a      	movs	r1, #58	; 0x3a
 8004996:	4638      	mov	r0, r7
 8004998:	f000 f98a 	bl	8004cb0 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800499c:	4d56      	ldr	r5, [pc, #344]	; (8004af8 <OTM8009A_Init+0x810>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800499e:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80049a2:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80049a4:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80049a8:	d046      	beq.n	8004a38 <OTM8009A_Init+0x750>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80049aa:	2300      	movs	r3, #0
 80049ac:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80049ae:	2300      	movs	r3, #0
 80049b0:	4a52      	ldr	r2, [pc, #328]	; (8004afc <OTM8009A_Init+0x814>)
 80049b2:	2151      	movs	r1, #81	; 0x51
 80049b4:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80049b6:	469a      	mov	sl, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80049b8:	f000 f97a 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80049bc:	4a50      	ldr	r2, [pc, #320]	; (8004b00 <OTM8009A_Init+0x818>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80049be:	eb04 0900 	add.w	r9, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80049c2:	4653      	mov	r3, sl
 80049c4:	2153      	movs	r1, #83	; 0x53
 80049c6:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80049c8:	f8c5 a008 	str.w	sl, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80049cc:	f000 f970 	bl	8004cb0 <otm8009a_write_reg>
 80049d0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80049d2:	4653      	mov	r3, sl
 80049d4:	4a4b      	ldr	r2, [pc, #300]	; (8004b04 <OTM8009A_Init+0x81c>)
 80049d6:	2155      	movs	r1, #85	; 0x55
 80049d8:	4638      	mov	r0, r7
 80049da:	f000 f969 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80049de:	444c      	add	r4, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80049e0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80049e2:	4653      	mov	r3, sl
 80049e4:	4a48      	ldr	r2, [pc, #288]	; (8004b08 <OTM8009A_Init+0x820>)
 80049e6:	215e      	movs	r1, #94	; 0x5e
 80049e8:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80049ea:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80049ec:	f000 f960 	bl	8004cb0 <otm8009a_write_reg>
 80049f0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80049f2:	4653      	mov	r3, sl
 80049f4:	4a45      	ldr	r2, [pc, #276]	; (8004b0c <OTM8009A_Init+0x824>)
 80049f6:	2129      	movs	r1, #41	; 0x29
 80049f8:	4638      	mov	r0, r7
 80049fa:	f000 f959 	bl	8004cb0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80049fe:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004a00:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a02:	4653      	mov	r3, sl
 8004a04:	4651      	mov	r1, sl
 8004a06:	4a36      	ldr	r2, [pc, #216]	; (8004ae0 <OTM8009A_Init+0x7f8>)
 8004a08:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8004a0a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a0c:	f000 f950 	bl	8004cb0 <otm8009a_write_reg>
 8004a10:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8004a12:	4653      	mov	r3, sl
 8004a14:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a16:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8004a18:	4a3d      	ldr	r2, [pc, #244]	; (8004b10 <OTM8009A_Init+0x828>)
 8004a1a:	212c      	movs	r1, #44	; 0x2c
 8004a1c:	f000 f948 	bl	8004cb0 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8004a20:	42c4      	cmn	r4, r0
}
 8004a22:	bf14      	ite	ne
 8004a24:	f04f 30ff 	movne.w	r0, #4294967295
 8004a28:	4650      	moveq	r0, sl
 8004a2a:	b002      	add	sp, #8
 8004a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004a30:	f1ba 0f01 	cmp.w	sl, #1
 8004a34:	4d30      	ldr	r5, [pc, #192]	; (8004af8 <OTM8009A_Init+0x810>)
 8004a36:	d1b8      	bne.n	80049aa <OTM8009A_Init+0x6c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004a38:	2660      	movs	r6, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f10d 0207 	add.w	r2, sp, #7
 8004a40:	2136      	movs	r1, #54	; 0x36
 8004a42:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004a44:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004a48:	f000 f932 	bl	8004cb0 <otm8009a_write_reg>
 8004a4c:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004a4e:	2304      	movs	r3, #4
 8004a50:	4a30      	ldr	r2, [pc, #192]	; (8004b14 <OTM8009A_Init+0x82c>)
 8004a52:	212a      	movs	r1, #42	; 0x2a
 8004a54:	4638      	mov	r0, r7
 8004a56:	f000 f92b 	bl	8004cb0 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004a5a:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004a5c:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004a5e:	2304      	movs	r3, #4
 8004a60:	4a2d      	ldr	r2, [pc, #180]	; (8004b18 <OTM8009A_Init+0x830>)
 8004a62:	212b      	movs	r1, #43	; 0x2b
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004a64:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004a66:	4638      	mov	r0, r7
 8004a68:	f000 f922 	bl	8004cb0 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8004a6c:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004a70:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8004a72:	e79c      	b.n	80049ae <OTM8009A_Init+0x6c6>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004a74:	464b      	mov	r3, r9
 8004a76:	4a29      	ldr	r2, [pc, #164]	; (8004b1c <OTM8009A_Init+0x834>)
 8004a78:	e78c      	b.n	8004994 <OTM8009A_Init+0x6ac>
 8004a7a:	bf00      	nop
 8004a7c:	08011b76 	.word	0x08011b76
 8004a80:	08011a64 	.word	0x08011a64
 8004a84:	08011b77 	.word	0x08011b77
 8004a88:	08011a70 	.word	0x08011a70
 8004a8c:	08011b78 	.word	0x08011b78
 8004a90:	08011a80 	.word	0x08011a80
 8004a94:	08011b7a 	.word	0x08011b7a
 8004a98:	08011a90 	.word	0x08011a90
 8004a9c:	08011b7b 	.word	0x08011b7b
 8004aa0:	08011a9c 	.word	0x08011a9c
 8004aa4:	08011b5a 	.word	0x08011b5a
 8004aa8:	08011aa8 	.word	0x08011aa8
 8004aac:	08011b79 	.word	0x08011b79
 8004ab0:	08011ab8 	.word	0x08011ab8
 8004ab4:	08011b75 	.word	0x08011b75
 8004ab8:	08011ac8 	.word	0x08011ac8
 8004abc:	08011ad8 	.word	0x08011ad8
 8004ac0:	08011ae4 	.word	0x08011ae4
 8004ac4:	08011af4 	.word	0x08011af4
 8004ac8:	08011b65 	.word	0x08011b65
 8004acc:	08011b86 	.word	0x08011b86
 8004ad0:	08011b87 	.word	0x08011b87
 8004ad4:	08011b88 	.word	0x08011b88
 8004ad8:	08011b89 	.word	0x08011b89
 8004adc:	08011b8a 	.word	0x08011b8a
 8004ae0:	08011b59 	.word	0x08011b59
 8004ae4:	08011b04 	.word	0x08011b04
 8004ae8:	08011b08 	.word	0x08011b08
 8004aec:	08011b18 	.word	0x08011b18
 8004af0:	08011b7c 	.word	0x08011b7c
 8004af4:	08011b7d 	.word	0x08011b7d
 8004af8:	24001120 	.word	0x24001120
 8004afc:	08011b7f 	.word	0x08011b7f
 8004b00:	08011b80 	.word	0x08011b80
 8004b04:	08011b81 	.word	0x08011b81
 8004b08:	08011b82 	.word	0x08011b82
 8004b0c:	08011b83 	.word	0x08011b83
 8004b10:	08011b84 	.word	0x08011b84
 8004b14:	08011a20 	.word	0x08011a20
 8004b18:	08011a24 	.word	0x08011a24
 8004b1c:	08011b7e 	.word	0x08011b7e

08004b20 <OTM8009A_SetBrightness>:
{
 8004b20:	b570      	push	{r4, r5, r6, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004b22:	ebc1 2401 	rsb	r4, r1, r1, lsl #8
 8004b26:	4e0b      	ldr	r6, [pc, #44]	; (8004b54 <OTM8009A_SetBrightness+0x34>)
{
 8004b28:	b082      	sub	sp, #8
 8004b2a:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004b2c:	fba6 6404 	umull	r6, r4, r6, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8004b30:	2300      	movs	r3, #0
 8004b32:	f10d 0207 	add.w	r2, sp, #7
 8004b36:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004b38:	0964      	lsrs	r4, r4, #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8004b3a:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8004b3c:	f88d 4007 	strb.w	r4, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8004b40:	f000 f8b6 	bl	8004cb0 <otm8009a_write_reg>
 8004b44:	b918      	cbnz	r0, 8004b4e <OTM8009A_SetBrightness+0x2e>
    OTM8009ACtx.Brightness = Brightness;
 8004b46:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <OTM8009A_SetBrightness+0x38>)
 8004b48:	609d      	str	r5, [r3, #8]
}
 8004b4a:	b002      	add	sp, #8
 8004b4c:	bd70      	pop	{r4, r5, r6, pc}
    ret = OTM8009A_ERROR;
 8004b4e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8004b52:	e7fa      	b.n	8004b4a <OTM8009A_SetBrightness+0x2a>
 8004b54:	51eb851f 	.word	0x51eb851f
 8004b58:	24001120 	.word	0x24001120

08004b5c <OTM8009A_DisplayOn>:
{
 8004b5c:	b500      	push	{lr}
 8004b5e:	b083      	sub	sp, #12
  uint8_t display = 0;
 8004b60:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8004b62:	2129      	movs	r1, #41	; 0x29
 8004b64:	3010      	adds	r0, #16
 8004b66:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8004b6a:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8004b6e:	f000 f89f 	bl	8004cb0 <otm8009a_write_reg>
 8004b72:	3800      	subs	r0, #0
 8004b74:	bf18      	it	ne
 8004b76:	2001      	movne	r0, #1
}
 8004b78:	4240      	negs	r0, r0
 8004b7a:	b003      	add	sp, #12
 8004b7c:	f85d fb04 	ldr.w	pc, [sp], #4

08004b80 <OTM8009A_DisplayOff>:
{
 8004b80:	b500      	push	{lr}
 8004b82:	b083      	sub	sp, #12
  uint8_t display = 0;
 8004b84:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8004b86:	2128      	movs	r1, #40	; 0x28
 8004b88:	3010      	adds	r0, #16
 8004b8a:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8004b8e:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8004b92:	f000 f88d 	bl	8004cb0 <otm8009a_write_reg>
 8004b96:	3800      	subs	r0, #0
 8004b98:	bf18      	it	ne
 8004b9a:	2001      	movne	r0, #1
}
 8004b9c:	4240      	negs	r0, r0
 8004b9e:	b003      	add	sp, #12
 8004ba0:	f85d fb04 	ldr.w	pc, [sp], #4

08004ba4 <OTM8009A_SetOrientation>:
{
 8004ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004ba6:	2360      	movs	r3, #96	; 0x60
{
 8004ba8:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8004baa:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8004bac:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004bae:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8004bb2:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8004bb6:	d83e      	bhi.n	8004c36 <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004bb8:	d020      	beq.n	8004bfc <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8004bba:	f100 0510 	add.w	r5, r0, #16
 8004bbe:	4633      	mov	r3, r6
 8004bc0:	f10d 0207 	add.w	r2, sp, #7
 8004bc4:	2136      	movs	r1, #54	; 0x36
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	f000 f872 	bl	8004cb0 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004bcc:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8004bce:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004bd0:	4a1a      	ldr	r2, [pc, #104]	; (8004c3c <OTM8009A_SetOrientation+0x98>)
 8004bd2:	212a      	movs	r1, #42	; 0x2a
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	f000 f86b 	bl	8004cb0 <otm8009a_write_reg>
 8004bda:	4607      	mov	r7, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004bdc:	2304      	movs	r3, #4
 8004bde:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004be0:	443c      	add	r4, r7
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004be2:	4a17      	ldr	r2, [pc, #92]	; (8004c40 <OTM8009A_SetOrientation+0x9c>)
 8004be4:	212b      	movs	r1, #43	; 0x2b
 8004be6:	f000 f863 	bl	8004cb0 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8004bea:	4b16      	ldr	r3, [pc, #88]	; (8004c44 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004bec:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8004bee:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 8004bf0:	3800      	subs	r0, #0
 8004bf2:	bf18      	it	ne
 8004bf4:	2001      	movne	r0, #1
 8004bf6:	4240      	negs	r0, r0
}
 8004bf8:	b003      	add	sp, #12
 8004bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004bfc:	f100 0510 	add.w	r5, r0, #16
 8004c00:	4633      	mov	r3, r6
 8004c02:	460f      	mov	r7, r1
 8004c04:	f10d 0206 	add.w	r2, sp, #6
 8004c08:	2136      	movs	r1, #54	; 0x36
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f000 f850 	bl	8004cb0 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004c10:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004c12:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004c14:	4a09      	ldr	r2, [pc, #36]	; (8004c3c <OTM8009A_SetOrientation+0x98>)
 8004c16:	212a      	movs	r1, #42	; 0x2a
 8004c18:	4628      	mov	r0, r5
 8004c1a:	f000 f849 	bl	8004cb0 <otm8009a_write_reg>
 8004c1e:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004c20:	2304      	movs	r3, #4
 8004c22:	4628      	mov	r0, r5
 8004c24:	4a06      	ldr	r2, [pc, #24]	; (8004c40 <OTM8009A_SetOrientation+0x9c>)
 8004c26:	212b      	movs	r1, #43	; 0x2b
 8004c28:	f000 f842 	bl	8004cb0 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004c2c:	4434      	add	r4, r6
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004c30:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8004c32:	601f      	str	r7, [r3, #0]
 8004c34:	e7dc      	b.n	8004bf0 <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 8004c36:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004c3a:	e7dd      	b.n	8004bf8 <OTM8009A_SetOrientation+0x54>
 8004c3c:	08011a20 	.word	0x08011a20
 8004c40:	08011a24 	.word	0x08011a24
 8004c44:	24001120 	.word	0x24001120

08004c48 <OTM8009A_ReadID>:
{ 
 8004c48:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8004c4a:	3010      	adds	r0, #16
 8004c4c:	21da      	movs	r1, #218	; 0xda
{ 
 8004c4e:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8004c50:	2300      	movs	r3, #0
 8004c52:	f000 f825 	bl	8004ca0 <otm8009a_read_reg>
 8004c56:	3800      	subs	r0, #0
 8004c58:	bf18      	it	ne
 8004c5a:	2001      	movne	r0, #1
}  
 8004c5c:	4240      	negs	r0, r0
 8004c5e:	bd08      	pop	{r3, pc}

08004c60 <OTM8009A_DrawVLine>:
 8004c60:	f04f 30ff 	mov.w	r0, #4294967295
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop

08004c68 <OTM8009A_GetPixel>:
 8004c68:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop

08004c70 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8004c70:	b178      	cbz	r0, 8004c92 <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004c72:	684a      	ldr	r2, [r1, #4]
 8004c74:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 8004c76:	2000      	movs	r0, #0
{
 8004c78:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 8004c7a:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8004c7e:	4906      	ldr	r1, [pc, #24]	; (8004c98 <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004c80:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8004c82:	4a06      	ldr	r2, [pc, #24]	; (8004c9c <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 8004c84:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8004c88:	e9c3 1305 	strd	r1, r3, [r3, #20]
}
 8004c8c:	bc30      	pop	{r4, r5}
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8004c8e:	611a      	str	r2, [r3, #16]
}
 8004c90:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8004c92:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004c96:	4770      	bx	lr
 8004c98:	080042c9 	.word	0x080042c9
 8004c9c:	080042d9 	.word	0x080042d9

08004ca0 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8004ca0:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004ca2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004ca6:	46a4      	mov	ip, r4
}
 8004ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004cac:	4760      	bx	ip
 8004cae:	bf00      	nop

08004cb0 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8004cb0:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8004cb2:	6804      	ldr	r4, [r0, #0]
 8004cb4:	6880      	ldr	r0, [r0, #8]
 8004cb6:	46a4      	mov	ip, r4
}
 8004cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8004cbc:	4760      	bx	ip
 8004cbe:	bf00      	nop

08004cc0 <BSP_GetTick>:
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
  return (int32_t)HAL_GetTick();
 8004cc0:	f000 be8e 	b.w	80059e0 <HAL_GetTick>

08004cc4 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8004cc4:	b910      	cbnz	r0, 8004ccc <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8004cc6:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <BSP_LCD_SetActiveLayer+0x10>)
 8004cc8:	6099      	str	r1, [r3, #8]
 8004cca:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8004ccc:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	24011514 	.word	0x24011514

08004cd8 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8004cd8:	b918      	cbnz	r0, 8004ce2 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8004cda:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <BSP_LCD_GetPixelFormat+0x10>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	600b      	str	r3, [r1, #0]
 8004ce0:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8004ce2:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8004ce6:	4770      	bx	lr
 8004ce8:	24011514 	.word	0x24011514

08004cec <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8004cec:	b948      	cbnz	r0, 8004d02 <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <BSP_LCD_GetXSize+0x1c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf4:	b11b      	cbz	r3, 8004cfe <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <BSP_LCD_GetXSize+0x20>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	600b      	str	r3, [r1, #0]
 8004cfc:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 8004cfe:	4618      	mov	r0, r3
  }

  return ret;
}
 8004d00:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8004d02:	f06f 0001 	mvn.w	r0, #1
 8004d06:	4770      	bx	lr
 8004d08:	24001130 	.word	0x24001130
 8004d0c:	24011514 	.word	0x24011514

08004d10 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8004d10:	b948      	cbnz	r0, 8004d26 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <BSP_LCD_GetYSize+0x1c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d18:	b11b      	cbz	r3, 8004d22 <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8004d1a:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <BSP_LCD_GetYSize+0x20>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	600b      	str	r3, [r1, #0]
 8004d20:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 8004d22:	4618      	mov	r0, r3
  }

  return ret;
}
 8004d24:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8004d26:	f06f 0001 	mvn.w	r0, #1
 8004d2a:	4770      	bx	lr
 8004d2c:	24001130 	.word	0x24001130
 8004d30:	24011514 	.word	0x24011514

08004d34 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8004d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d38:	e9dd b409 	ldrd	fp, r4, [sp, #36]	; 0x24
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8004d3c:	b39c      	cbz	r4, 8004da6 <BSP_LCD_FillRGBRect+0x72>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d3e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004d42:	4d1a      	ldr	r5, [pc, #104]	; (8004dac <BSP_LCD_FillRGBRect+0x78>)
 8004d44:	eb04 0802 	add.w	r8, r4, r2
 8004d48:	eb0b 0e01 	add.w	lr, fp, r1
 8004d4c:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8004d50:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8004db0 <BSP_LCD_FillRGBRect+0x7c>
 8004d54:	2734      	movs	r7, #52	; 0x34
    for(j = 0; j < Width; j++)
 8004d56:	f1bb 0f00 	cmp.w	fp, #0
 8004d5a:	d021      	beq.n	8004da0 <BSP_LCD_FillRGBRect+0x6c>
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	e00a      	b.n	8004d76 <BSP_LCD_FillRGBRect+0x42>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004d60:	682e      	ldr	r6, [r5, #0]
 8004d62:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8004d64:	fb06 4602 	mla	r6, r6, r2, r4
 8004d68:	3401      	adds	r4, #1
 8004d6a:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    for(j = 0; j < Width; j++)
 8004d6e:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 8004d70:	6928      	ldr	r0, [r5, #16]
 8004d72:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8004d74:	d014      	beq.n	8004da0 <BSP_LCD_FillRGBRect+0x6c>
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d76:	68a8      	ldr	r0, [r5, #8]
 8004d78:	f8d3 9000 	ldr.w	r9, [r3]
 8004d7c:	fb07 c000 	mla	r0, r7, r0, ip
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004d80:	fa1f fa89 	uxth.w	sl, r9
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d84:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8004d86:	2e00      	cmp	r6, #0
 8004d88:	d0ea      	beq.n	8004d60 <BSP_LCD_FillRGBRect+0x2c>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004d8a:	682e      	ldr	r6, [r5, #0]
 8004d8c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8004d8e:	fb06 4602 	mla	r6, r6, r2, r4
 8004d92:	3401      	adds	r4, #1
 8004d94:	f820 a016 	strh.w	sl, [r0, r6, lsl #1]
    for(j = 0; j < Width; j++)
 8004d98:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 8004d9a:	6928      	ldr	r0, [r5, #16]
 8004d9c:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8004d9e:	d1ea      	bne.n	8004d76 <BSP_LCD_FillRGBRect+0x42>
  for(i = 0; i < Height; i++)
 8004da0:	3201      	adds	r2, #1
 8004da2:	4542      	cmp	r2, r8
 8004da4:	d1d7      	bne.n	8004d56 <BSP_LCD_FillRGBRect+0x22>
}
 8004da6:	2000      	movs	r0, #0
 8004da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dac:	24011514 	.word	0x24011514
 8004db0:	2401146c 	.word	0x2401146c

08004db4 <BSP_LCD_ReadPixel>:
{
 8004db4:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004db6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004dba:	4e10      	ldr	r6, [pc, #64]	; (8004dfc <BSP_LCD_ReadPixel+0x48>)
 8004dbc:	4f10      	ldr	r7, [pc, #64]	; (8004e00 <BSP_LCD_ReadPixel+0x4c>)
 8004dbe:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8004dc2:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8004dc6:	0080      	lsls	r0, r0, #2
 8004dc8:	68ac      	ldr	r4, [r5, #8]
 8004dca:	fb0c 7404 	mla	r4, ip, r4, r7
 8004dce:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004dd0:	b94d      	cbnz	r5, 8004de6 <BSP_LCD_ReadPixel+0x32>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8004dd2:	5830      	ldr	r0, [r6, r0]
 8004dd4:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8004dd6:	fb00 1202 	mla	r2, r0, r2, r1
}
 8004dda:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8004ddc:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 8004de0:	bcf0      	pop	{r4, r5, r6, r7}
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8004de6:	5835      	ldr	r5, [r6, r0]
 8004de8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004dea:	fb05 1202 	mla	r2, r5, r2, r1
 8004dee:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 8004df2:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8004df4:	b292      	uxth	r2, r2
}
 8004df6:	bcf0      	pop	{r4, r5, r6, r7}
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	4770      	bx	lr
 8004dfc:	24011514 	.word	0x24011514
 8004e00:	2401146c 	.word	0x2401146c

08004e04 <BSP_LCD_WritePixel>:
{
 8004e04:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004e06:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004e0a:	4e0f      	ldr	r6, [pc, #60]	; (8004e48 <BSP_LCD_WritePixel+0x44>)
 8004e0c:	4f0f      	ldr	r7, [pc, #60]	; (8004e4c <BSP_LCD_WritePixel+0x48>)
 8004e0e:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8004e12:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8004e16:	0080      	lsls	r0, r0, #2
 8004e18:	68ac      	ldr	r4, [r5, #8]
 8004e1a:	fb0c 7404 	mla	r4, ip, r4, r7
 8004e1e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004e20:	b945      	cbnz	r5, 8004e34 <BSP_LCD_WritePixel+0x30>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004e22:	5830      	ldr	r0, [r6, r0]
 8004e24:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8004e26:	fb00 1202 	mla	r2, r0, r2, r1
  }

  return BSP_ERROR_NONE;
}
 8004e2a:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004e2c:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 8004e30:	bcf0      	pop	{r4, r5, r6, r7}
 8004e32:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004e34:	5835      	ldr	r5, [r6, r0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004e3a:	fb05 1202 	mla	r2, r5, r2, r1
}
 8004e3e:	bcf0      	pop	{r4, r5, r6, r7}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004e40:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 8004e44:	2000      	movs	r0, #0
 8004e46:	4770      	bx	lr
 8004e48:	24011514 	.word	0x24011514
 8004e4c:	2401146c 	.word	0x2401146c

08004e50 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8004e50:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8004e52:	2406      	movs	r4, #6
{
 8004e54:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8004e56:	9101      	str	r1, [sp, #4]
 8004e58:	4601      	mov	r1, r0
 8004e5a:	9202      	str	r2, [sp, #8]
 8004e5c:	9400      	str	r4, [sp, #0]
 8004e5e:	4805      	ldr	r0, [pc, #20]	; (8004e74 <DSI_IO_Read+0x24>)
 8004e60:	f001 ffa4 	bl	8006dac <HAL_DSI_Read>
 8004e64:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 8004e66:	bf14      	ite	ne
 8004e68:	f06f 0007 	mvnne.w	r0, #7
 8004e6c:	2000      	moveq	r0, #0
 8004e6e:	b004      	add	sp, #16
 8004e70:	bd10      	pop	{r4, pc}
 8004e72:	bf00      	nop
 8004e74:	24011530 	.word	0x24011530

08004e78 <BSP_LCD_DrawBitmap>:
{
 8004e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004e7c:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8004e80:	4e4f      	ldr	r6, [pc, #316]	; (8004fc0 <BSP_LCD_DrawBitmap+0x148>)
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004e82:	7d1c      	ldrb	r4, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004e84:	f04f 0934 	mov.w	r9, #52	; 0x34
 8004e88:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 8004e8c:	f856 802c 	ldr.w	r8, [r6, ip, lsl #2]
 8004e90:	f8df e138 	ldr.w	lr, [pc, #312]	; 8004fcc <BSP_LCD_DrawBitmap+0x154>
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004e94:	0424      	lsls	r4, r4, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004e96:	fb08 1202 	mla	r2, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004e9a:	f893 c013 	ldrb.w	ip, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004e9e:	68b9      	ldr	r1, [r7, #8]
{
 8004ea0:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004ea2:	7b1d      	ldrb	r5, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004ea4:	eb04 240c 	add.w	r4, r4, ip, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004ea8:	fb09 e101 	mla	r1, r9, r1, lr
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004eac:	f893 800b 	ldrb.w	r8, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8004eb0:	f893 c01d 	ldrb.w	ip, [r3, #29]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004eb4:	042d      	lsls	r5, r5, #16
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004eb6:	f893 a018 	ldrb.w	sl, [r3, #24]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8004eba:	f893 901c 	ldrb.w	r9, [r3, #28]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004ebe:	eb05 2508 	add.w	r5, r5, r8, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004ec2:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004ec4:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004ec8:	f8d7 8010 	ldr.w	r8, [r7, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8004ecc:	eb09 290c 	add.w	r9, r9, ip, lsl #8
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004ed0:	7c9f      	ldrb	r7, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004ed2:	f893 e017 	ldrb.w	lr, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004ed6:	fb08 1802 	mla	r8, r8, r2, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004eda:	f893 c00a 	ldrb.w	ip, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004ede:	443c      	add	r4, r7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004ee0:	eb0a 2a0e 	add.w	sl, sl, lr, lsl #8
 8004ee4:	7d9f      	ldrb	r7, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004ee6:	4465      	add	r5, ip
 8004ee8:	7b59      	ldrb	r1, [r3, #13]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004eea:	44ba      	add	sl, r7
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004eec:	7d5f      	ldrb	r7, [r3, #21]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004eee:	eb05 6101 	add.w	r1, r5, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 8004ef2:	f1a9 0520 	sub.w	r5, r9, #32
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004ef6:	7e5a      	ldrb	r2, [r3, #25]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004ef8:	eb04 6407 	add.w	r4, r4, r7, lsl #24
  if ((bit_pixel/8U) == 4U)
 8004efc:	2d07      	cmp	r5, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004efe:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004f02:	9403      	str	r4, [sp, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004f04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 8004f08:	d957      	bls.n	8004fba <BSP_LCD_DrawBitmap+0x142>
  else if ((bit_pixel/8U) == 2U)
 8004f0a:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 8004f0e:	2c08      	cmp	r4, #8
 8004f10:	bf34      	ite	cc
 8004f12:	f04f 0b02 	movcc.w	fp, #2
 8004f16:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8004f1a:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8004f1e:	9c03      	ldr	r4, [sp, #12]
 8004f20:	f10a 35ff 	add.w	r5, sl, #4294967295
 8004f24:	fb04 f909 	mul.w	r9, r4, r9
 8004f28:	fb09 1505 	mla	r5, r9, r5, r1
 8004f2c:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 8004f2e:	f1ba 0f00 	cmp.w	sl, #0
 8004f32:	d03e      	beq.n	8004fb2 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004f34:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 8004f36:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 8004f3a:	2700      	movs	r7, #0
 8004f3c:	4c21      	ldr	r4, [pc, #132]	; (8004fc4 <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004f3e:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8004f42:	e006      	b.n	8004f52 <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8004f44:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 8004f46:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8004f48:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 8004f4a:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8004f4c:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 8004f50:	d02f      	beq.n	8004fb2 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004f52:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 8004f54:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8004f56:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004f5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8004f5e:	2b02      	cmp	r3, #2
  hlcd_dma2d.Instance = DMA2D;
 8004f60:	4919      	ldr	r1, [pc, #100]	; (8004fc8 <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8004f62:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  for(index=0; index < height; index++)
 8004f66:	f107 0701 	add.w	r7, r7, #1
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8004f6a:	bf18      	it	ne
 8004f6c:	4613      	movne	r3, r2
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004f6e:	64e2      	str	r2, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8004f70:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004f72:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8004f76:	e9c4 1000 	strd	r1, r0, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004f7a:	4812      	ldr	r0, [pc, #72]	; (8004fc4 <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.Init.OutputOffset = 0;
 8004f7c:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004f80:	f001 fa86 	bl	8006490 <HAL_DMA2D_Init>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d1dd      	bne.n	8004f44 <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8004f88:	2101      	movs	r1, #1
 8004f8a:	480e      	ldr	r0, [pc, #56]	; (8004fc4 <BSP_LCD_DrawBitmap+0x14c>)
 8004f8c:	f001 fb64 	bl	8006658 <HAL_DMA2D_ConfigLayer>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	d1d7      	bne.n	8004f44 <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8004f94:	2001      	movs	r0, #1
 8004f96:	9b03      	ldr	r3, [sp, #12]
 8004f98:	4642      	mov	r2, r8
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	9000      	str	r0, [sp, #0]
 8004f9e:	4809      	ldr	r0, [pc, #36]	; (8004fc4 <BSP_LCD_DrawBitmap+0x14c>)
 8004fa0:	f001 fab8 	bl	8006514 <HAL_DMA2D_Start>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d1cd      	bne.n	8004f44 <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8004fa8:	2132      	movs	r1, #50	; 0x32
 8004faa:	4806      	ldr	r0, [pc, #24]	; (8004fc4 <BSP_LCD_DrawBitmap+0x14c>)
 8004fac:	f001 face 	bl	800654c <HAL_DMA2D_PollForTransfer>
 8004fb0:	e7c8      	b.n	8004f44 <BSP_LCD_DrawBitmap+0xcc>
}
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	b005      	add	sp, #20
 8004fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8004fba:	f04f 0b00 	mov.w	fp, #0
 8004fbe:	e7ac      	b.n	8004f1a <BSP_LCD_DrawBitmap+0xa2>
 8004fc0:	24011514 	.word	0x24011514
 8004fc4:	2401154c 	.word	0x2401154c
 8004fc8:	52001000 	.word	0x52001000
 8004fcc:	2401146c 	.word	0x2401146c

08004fd0 <LL_FillBuffer>:
{
 8004fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004fd4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004fd8:	4c28      	ldr	r4, [pc, #160]	; (800507c <LL_FillBuffer+0xac>)
{
 8004fda:	4617      	mov	r7, r2
 8004fdc:	b082      	sub	sp, #8
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004fde:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8004fe2:	4698      	mov	r8, r3
 8004fe4:	460e      	mov	r6, r1
 8004fe6:	9b08      	ldr	r3, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004fe8:	68c2      	ldr	r2, [r0, #12]
{
 8004fea:	9d09      	ldr	r5, [sp, #36]	; 0x24
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004fec:	2a02      	cmp	r2, #2
 8004fee:	d00f      	beq.n	8005010 <LL_FillBuffer+0x40>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8004ff0:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8004ff2:	4c23      	ldr	r4, [pc, #140]	; (8005080 <LL_FillBuffer+0xb0>)
 8004ff4:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 8004ff8:	4922      	ldr	r1, [pc, #136]	; (8005084 <LL_FillBuffer+0xb4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004ffa:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8004ffc:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8004ffe:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 8005000:	e9c4 1c00 	strd	r1, ip, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8005004:	f001 fa44 	bl	8006490 <HAL_DMA2D_Init>
 8005008:	b308      	cbz	r0, 800504e <LL_FillBuffer+0x7e>
}
 800500a:	b002      	add	sp, #8
 800500c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8005010:	f3c5 1045 	ubfx	r0, r5, #5, #6
 8005014:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 8005018:	f005 041f 	and.w	r4, r5, #31
 800501c:	eb00 15c0 	add.w	r5, r0, r0, lsl #7
 8005020:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8005024:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8005028:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 800502c:	3521      	adds	r5, #33	; 0x21
 800502e:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 8005032:	3117      	adds	r1, #23
 8005034:	09ad      	lsrs	r5, r5, #6
 8005036:	0989      	lsrs	r1, r1, #6
 8005038:	022d      	lsls	r5, r5, #8
 800503a:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800503e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8005042:	3017      	adds	r0, #23
 8005044:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 8005048:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 800504c:	e7d1      	b.n	8004ff2 <LL_FillBuffer+0x22>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800504e:	2101      	movs	r1, #1
 8005050:	4620      	mov	r0, r4
 8005052:	f001 fb01 	bl	8006658 <HAL_DMA2D_ConfigLayer>
 8005056:	2800      	cmp	r0, #0
 8005058:	d1d7      	bne.n	800500a <LL_FillBuffer+0x3a>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800505a:	463b      	mov	r3, r7
 800505c:	4632      	mov	r2, r6
 800505e:	4629      	mov	r1, r5
 8005060:	4620      	mov	r0, r4
 8005062:	f8cd 8000 	str.w	r8, [sp]
 8005066:	f001 fa55 	bl	8006514 <HAL_DMA2D_Start>
 800506a:	2800      	cmp	r0, #0
 800506c:	d1cd      	bne.n	800500a <LL_FillBuffer+0x3a>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800506e:	4620      	mov	r0, r4
 8005070:	2119      	movs	r1, #25
}
 8005072:	b002      	add	sp, #8
 8005074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8005078:	f001 ba68 	b.w	800654c <HAL_DMA2D_PollForTransfer>
 800507c:	24011514 	.word	0x24011514
 8005080:	2401154c 	.word	0x2401154c
 8005084:	52001000 	.word	0x52001000

08005088 <BSP_LCD_DrawHLine>:
{
 8005088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800508c:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8005090:	4f12      	ldr	r7, [pc, #72]	; (80050dc <BSP_LCD_DrawHLine+0x54>)
{
 8005092:	460c      	mov	r4, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8005094:	f8df e048 	ldr.w	lr, [pc, #72]	; 80050e0 <BSP_LCD_DrawHLine+0x58>
 8005098:	eb07 018c 	add.w	r1, r7, ip, lsl #2
 800509c:	f04f 0834 	mov.w	r8, #52	; 0x34
 80050a0:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80050a4:	eb04 0c03 	add.w	ip, r4, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80050a8:	688d      	ldr	r5, [r1, #8]
{
 80050aa:	b082      	sub	sp, #8
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80050ac:	690e      	ldr	r6, [r1, #16]
 80050ae:	fb02 4207 	mla	r2, r2, r7, r4
 80050b2:	fb08 e505 	mla	r5, r8, r5, lr
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80050b6:	4567      	cmp	r7, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80050b8:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 80050ba:	bf38      	it	cc
 80050bc:	1b3b      	subcc	r3, r7, r4
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80050be:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80050c0:	fb06 1102 	mla	r1, r6, r2, r1
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80050c4:	9a08      	ldr	r2, [sp, #32]
 80050c6:	9400      	str	r4, [sp, #0]
 80050c8:	9201      	str	r2, [sp, #4]
 80050ca:	461a      	mov	r2, r3
 80050cc:	2301      	movs	r3, #1
 80050ce:	f7ff ff7f 	bl	8004fd0 <LL_FillBuffer>
}
 80050d2:	4620      	mov	r0, r4
 80050d4:	b002      	add	sp, #8
 80050d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050da:	bf00      	nop
 80050dc:	24011514 	.word	0x24011514
 80050e0:	2401146c 	.word	0x2401146c

080050e4 <BSP_LCD_DrawVLine>:
{
 80050e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80050e8:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 80050ec:	4c11      	ldr	r4, [pc, #68]	; (8005134 <BSP_LCD_DrawVLine+0x50>)
 80050ee:	4d12      	ldr	r5, [pc, #72]	; (8005138 <BSP_LCD_DrawVLine+0x54>)
 80050f0:	f04f 0834 	mov.w	r8, #52	; 0x34
 80050f4:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 80050f8:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80050fc:	eb02 0c03 	add.w	ip, r2, r3
{
 8005100:	b082      	sub	sp, #8
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005102:	68be      	ldr	r6, [r7, #8]
 8005104:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8005108:	3c01      	subs	r4, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800510a:	fb08 5606 	mla	r6, r8, r6, r5
 800510e:	693d      	ldr	r5, [r7, #16]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8005110:	687f      	ldr	r7, [r7, #4]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005112:	6df6      	ldr	r6, [r6, #92]	; 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8005114:	45bc      	cmp	ip, r7
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005116:	fb05 6101 	mla	r1, r5, r1, r6
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 800511a:	bf88      	it	hi
 800511c:	1abb      	subhi	r3, r7, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 800511e:	9a08      	ldr	r2, [sp, #32]
 8005120:	e9cd 4200 	strd	r4, r2, [sp]
 8005124:	2201      	movs	r2, #1
 8005126:	f7ff ff53 	bl	8004fd0 <LL_FillBuffer>
}
 800512a:	2000      	movs	r0, #0
 800512c:	b002      	add	sp, #8
 800512e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005132:	bf00      	nop
 8005134:	24011514 	.word	0x24011514
 8005138:	2401146c 	.word	0x2401146c

0800513c <BSP_LCD_FillRect>:
{
 800513c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800513e:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 8005142:	4f0e      	ldr	r7, [pc, #56]	; (800517c <BSP_LCD_FillRect+0x40>)
 8005144:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8005148:	4d0d      	ldr	r5, [pc, #52]	; (8005180 <BSP_LCD_FillRect+0x44>)
 800514a:	eb07 0684 	add.w	r6, r7, r4, lsl #2
 800514e:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
{
 8005152:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005154:	68b7      	ldr	r7, [r6, #8]
 8005156:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800515a:	1ae4      	subs	r4, r4, r3
 800515c:	461a      	mov	r2, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800515e:	fb0e 5507 	mla	r5, lr, r7, r5
 8005162:	6937      	ldr	r7, [r6, #16]
{
 8005164:	9e09      	ldr	r6, [sp, #36]	; 0x24
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005166:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8005168:	9400      	str	r4, [sp, #0]
 800516a:	fb07 3101 	mla	r1, r7, r1, r3
 800516e:	9b08      	ldr	r3, [sp, #32]
 8005170:	9601      	str	r6, [sp, #4]
 8005172:	f7ff ff2d 	bl	8004fd0 <LL_FillBuffer>
}
 8005176:	2000      	movs	r0, #0
 8005178:	b003      	add	sp, #12
 800517a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800517c:	24011514 	.word	0x24011514
 8005180:	2401146c 	.word	0x2401146c

08005184 <LTDC_MspInit.part.0>:
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005184:	4b0d      	ldr	r3, [pc, #52]	; (80051bc <LTDC_MspInit.part.0+0x38>)
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
 8005186:	b082      	sub	sp, #8
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005188:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800518c:	f042 0208 	orr.w	r2, r2, #8
 8005190:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005194:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005198:	f002 0208 	and.w	r2, r2, #8
 800519c:	9201      	str	r2, [sp, #4]
 800519e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_LTDC_FORCE_RESET();
 80051a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80051a4:	f042 0208 	orr.w	r2, r2, #8
 80051a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80051ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80051b0:	f022 0208 	bic.w	r2, r2, #8
 80051b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80051b8:	b002      	add	sp, #8
 80051ba:	4770      	bx	lr
 80051bc:	58024400 	.word	0x58024400

080051c0 <DMA2D_MspInit.part.0>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80051c0:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <DMA2D_MspInit.part.0+0x30>)
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
 80051c2:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80051c4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80051c8:	f042 0210 	orr.w	r2, r2, #16
 80051cc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80051d0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80051d4:	f002 0210 	and.w	r2, r2, #16
 80051d8:	9201      	str	r2, [sp, #4]
 80051da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80051dc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80051de:	f042 0210 	orr.w	r2, r2, #16
 80051e2:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80051e4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80051e6:	f022 0210 	bic.w	r2, r2, #16
 80051ea:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80051ec:	b002      	add	sp, #8
 80051ee:	4770      	bx	lr
 80051f0:	58024400 	.word	0x58024400

080051f4 <DSI_MspInit.part.0>:
    __HAL_RCC_DSI_CLK_ENABLE();
 80051f4:	4b0d      	ldr	r3, [pc, #52]	; (800522c <DSI_MspInit.part.0+0x38>)
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
 80051f6:	b082      	sub	sp, #8
    __HAL_RCC_DSI_CLK_ENABLE();
 80051f8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80051fc:	f042 0210 	orr.w	r2, r2, #16
 8005200:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005204:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005208:	f002 0210 	and.w	r2, r2, #16
 800520c:	9201      	str	r2, [sp, #4]
 800520e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DSI_FORCE_RESET();
 8005210:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005214:	f042 0210 	orr.w	r2, r2, #16
 8005218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 800521c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005220:	f022 0210 	bic.w	r2, r2, #16
 8005224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8005228:	b002      	add	sp, #8
 800522a:	4770      	bx	lr
 800522c:	58024400 	.word	0x58024400

08005230 <DSI_IO_Write>:
  if(Size <= 1U)
 8005230:	2b01      	cmp	r3, #1
{
 8005232:	b530      	push	{r4, r5, lr}
 8005234:	460d      	mov	r5, r1
 8005236:	b083      	sub	sp, #12
 8005238:	4601      	mov	r1, r0
  if(Size <= 1U)
 800523a:	d909      	bls.n	8005250 <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 800523c:	480a      	ldr	r0, [pc, #40]	; (8005268 <DSI_IO_Write+0x38>)
 800523e:	e9cd 5200 	strd	r5, r2, [sp]
 8005242:	2239      	movs	r2, #57	; 0x39
 8005244:	f001 fd46 	bl	8006cd4 <HAL_DSI_LongWrite>
 8005248:	b958      	cbnz	r0, 8005262 <DSI_IO_Write+0x32>
  int32_t ret = BSP_ERROR_NONE;
 800524a:	2000      	movs	r0, #0
}
 800524c:	b003      	add	sp, #12
 800524e:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8005250:	5cd0      	ldrb	r0, [r2, r3]
 8005252:	462b      	mov	r3, r5
 8005254:	2215      	movs	r2, #21
 8005256:	9000      	str	r0, [sp, #0]
 8005258:	4803      	ldr	r0, [pc, #12]	; (8005268 <DSI_IO_Write+0x38>)
 800525a:	f001 fd27 	bl	8006cac <HAL_DSI_ShortWrite>
 800525e:	2800      	cmp	r0, #0
 8005260:	d0f3      	beq.n	800524a <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 8005262:	f06f 0007 	mvn.w	r0, #7
 8005266:	e7f1      	b.n	800524c <DSI_IO_Write+0x1c>
 8005268:	24011530 	.word	0x24011530

0800526c <BSP_LCD_Reset>:
  LCD_RESET_GPIO_CLK_ENABLE();
 800526c:	4b16      	ldr	r3, [pc, #88]	; (80052c8 <BSP_LCD_Reset+0x5c>)
 800526e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
{
 8005276:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 8005278:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 800527c:	b087      	sub	sp, #28
  LCD_RESET_GPIO_CLK_ENABLE();
 800527e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8005282:	2508      	movs	r5, #8
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8005284:	4c11      	ldr	r4, [pc, #68]	; (80052cc <BSP_LCD_Reset+0x60>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005286:	2601      	movs	r6, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 8005288:	f003 0340 	and.w	r3, r3, #64	; 0x40
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800528c:	2703      	movs	r7, #3
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800528e:	4620      	mov	r0, r4
 8005290:	a901      	add	r1, sp, #4
  LCD_RESET_GPIO_CLK_ENABLE();
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8005296:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005298:	9704      	str	r7, [sp, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800529a:	e9cd 6602 	strd	r6, r6, [sp, #8]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800529e:	f001 fe0d 	bl	8006ebc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 80052a2:	4629      	mov	r1, r5
 80052a4:	4620      	mov	r0, r4
 80052a6:	2200      	movs	r2, #0
 80052a8:	f001 ff2c 	bl	8007104 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 80052ac:	2014      	movs	r0, #20
 80052ae:	f000 fb9d 	bl	80059ec <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 80052b2:	4632      	mov	r2, r6
 80052b4:	4629      	mov	r1, r5
 80052b6:	4620      	mov	r0, r4
 80052b8:	f001 ff24 	bl	8007104 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 80052bc:	200a      	movs	r0, #10
 80052be:	f000 fb95 	bl	80059ec <HAL_Delay>
}
 80052c2:	b007      	add	sp, #28
 80052c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c6:	bf00      	nop
 80052c8:	58024400 	.word	0x58024400
 80052cc:	58021800 	.word	0x58021800

080052d0 <MX_DSIHOST_DSI_Init>:
{
 80052d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdsi->Instance = DSI;
 80052d4:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
{
 80052d8:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80052da:	2500      	movs	r5, #0
  hdsi->Init.TXEscapeCkdiv = 4;
 80052dc:	f04f 0904 	mov.w	r9, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80052e0:	2601      	movs	r6, #1
  PLLInit.PLLNDIV = 100;
 80052e2:	f04f 0e64 	mov.w	lr, #100	; 0x64
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80052e6:	f04f 0c05 	mov.w	ip, #5
  hdsi->Instance = DSI;
 80052ea:	6007      	str	r7, [r0, #0]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80052ec:	60c6      	str	r6, [r0, #12]
{
 80052ee:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 80052f0:	4669      	mov	r1, sp
{
 80052f2:	4604      	mov	r4, r0
 80052f4:	4690      	mov	r8, r2
 80052f6:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80052f8:	9502      	str	r5, [sp, #8]
  hdsi->Init.TXEscapeCkdiv = 4;
 80052fa:	e9c0 5901 	strd	r5, r9, [r0, #4]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80052fe:	e9cd ec00 	strd	lr, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8005302:	f001 fa3b 	bl	800677c <HAL_DSI_Init>
 8005306:	b118      	cbz	r0, 8005310 <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 8005308:	4630      	mov	r0, r6
}
 800530a:	b01e      	add	sp, #120	; 0x78
 800530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005310:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005314:	4a22      	ldr	r2, [pc, #136]	; (80053a0 <MX_DSIHOST_DSI_Init+0xd0>)
 8005316:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005318:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800531a:	fb03 2207 	mla	r2, r3, r7, r2
 800531e:	4b21      	ldr	r3, [pc, #132]	; (80053a4 <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8005320:	2402      	movs	r4, #2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8005322:	2110      	movs	r1, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005324:	fba3 2302 	umull	r2, r3, r3, r2
  VidCfg.NullPacketSize = 0xFFFU;
 8005328:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 800532c:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8005330:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005334:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 8005336:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8005338:	9505      	str	r5, [sp, #20]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800533a:	950a      	str	r5, [sp, #40]	; 0x28
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 800533c:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800533e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 8005342:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8005346:	f44f 6800 	mov.w	r8, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 800534a:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800534c:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800534e:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8005352:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005354:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.NullPacketSize = 0xFFFU;
 8005358:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 800535a:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.ColorCoding = PixelFormat;
 800535e:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8005362:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8005366:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800536a:	9614      	str	r6, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 800536c:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8005370:	270f      	movs	r7, #15
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8005372:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005376:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800537a:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800537e:	a903      	add	r1, sp, #12
  VidCfg.LPVACTLargestPacketSize = 4;
 8005380:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005384:	e9cd e517 	strd	lr, r5, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005388:	e9cd 8419 	strd	r8, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800538c:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005390:	f001 fb2c 	bl	80069ec <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 8005394:	3800      	subs	r0, #0
 8005396:	bf18      	it	ne
 8005398:	2001      	movne	r0, #1
}
 800539a:	b01e      	add	sp, #120	; 0x78
 800539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a0:	0042c1d8 	.word	0x0042c1d8
 80053a4:	4c751ce3 	.word	0x4c751ce3

080053a8 <MX_LTDC_Init>:
{
 80053a8:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Instance = LTDC;
 80053aa:	4d0e      	ldr	r5, [pc, #56]	; (80053e4 <MX_LTDC_Init+0x3c>)
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 80053ac:	f101 0423 	add.w	r4, r1, #35	; 0x23
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 80053b0:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 80053b2:	2701      	movs	r7, #1
  hltdc->Instance = LTDC;
 80053b4:	6005      	str	r5, [r0, #0]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 80053b6:	250f      	movs	r5, #15
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 80053b8:	2623      	movs	r6, #35	; 0x23
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 80053ba:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 80053bc:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 80053be:	1954      	adds	r4, r2, r5
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80053c0:	2100      	movs	r1, #0
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 80053c2:	321f      	adds	r2, #31
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 80053c4:	6147      	str	r7, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 80053c6:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 80053c8:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 80053ca:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 80053cc:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 80053ce:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 80053d2:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 80053d4:	6181      	str	r1, [r0, #24]
}
 80053d6:	bcf0      	pop	{r4, r5, r6, r7}
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80053d8:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80053dc:	e9c0 1103 	strd	r1, r1, [r0, #12]
  return HAL_LTDC_Init(hltdc);
 80053e0:	f001 bf4e 	b.w	8007280 <HAL_LTDC_Init>
 80053e4:	50001000 	.word	0x50001000

080053e8 <MX_LTDC_ConfigLayer>:
{
 80053e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ea:	4613      	mov	r3, r2
 80053ec:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 80053ee:	24ff      	movs	r4, #255	; 0xff
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80053f0:	460a      	mov	r2, r1
  pLayerCfg.WindowY0 = Config->Y0;
 80053f2:	6899      	ldr	r1, [r3, #8]
  pLayerCfg.Alpha0 = 0;
 80053f4:	2500      	movs	r5, #0
  pLayerCfg.Alpha = 255;
 80053f6:	9406      	str	r4, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80053f8:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.WindowY0 = Config->Y0;
 80053fc:	9103      	str	r1, [sp, #12]
  pLayerCfg.Alpha0 = 0;
 80053fe:	9507      	str	r5, [sp, #28]
  pLayerCfg.Backcolor.Blue = 0;
 8005400:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 8005404:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  pLayerCfg.WindowX1 = Config->X1;
 8005408:	e9d3 4600 	ldrd	r4, r6, [r3]
  pLayerCfg.WindowX0 = Config->X0;
 800540c:	9401      	str	r4, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800540e:	1b34      	subs	r4, r6, r4
  pLayerCfg.WindowX1 = Config->X1;
 8005410:	9602      	str	r6, [sp, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005412:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8005414:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 8005416:	68dc      	ldr	r4, [r3, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8005418:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 800541a:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800541c:	910c      	str	r1, [sp, #48]	; 0x30
  pLayerCfg.FBStartAdress = Config->Address;
 800541e:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005422:	e9cd 7608 	strd	r7, r6, [sp, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8005426:	9105      	str	r1, [sp, #20]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005428:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 800542a:	930a      	str	r3, [sp, #40]	; 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800542c:	f002 f802 	bl	8007434 <HAL_LTDC_ConfigLayer>
}
 8005430:	b00f      	add	sp, #60	; 0x3c
 8005432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005434 <MX_LTDC_ClockConfig>:
{
 8005434:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8005436:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 800543a:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 800543c:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800543e:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8005440:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8005444:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8005446:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005448:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 800544a:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 800544c:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800544e:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 8005450:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8005452:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8005456:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800545a:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800545e:	f002 feeb 	bl	8008238 <HAL_RCCEx_PeriphCLKConfig>
}
 8005462:	b031      	add	sp, #196	; 0xc4
 8005464:	bd30      	pop	{r4, r5, pc}
 8005466:	bf00      	nop

08005468 <BSP_LCD_InitEx>:
{
 8005468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800546c:	2901      	cmp	r1, #1
{
 800546e:	b093      	sub	sp, #76	; 0x4c
 8005470:	461d      	mov	r5, r3
 8005472:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005476:	9103      	str	r1, [sp, #12]
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005478:	f200 80f2 	bhi.w	8005660 <BSP_LCD_InitEx+0x1f8>
 800547c:	1e03      	subs	r3, r0, #0
 800547e:	bf18      	it	ne
 8005480:	2301      	movne	r3, #1
 8005482:	2800      	cmp	r0, #0
 8005484:	f040 80ec 	bne.w	8005660 <BSP_LCD_InitEx+0x1f8>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8005488:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800548a:	2901      	cmp	r1, #1
 800548c:	f200 80e8 	bhi.w	8005660 <BSP_LCD_InitEx+0x1f8>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005490:	2a02      	cmp	r2, #2
 8005492:	f000 80ab 	beq.w	80055ec <BSP_LCD_InitEx+0x184>
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 8005496:	9301      	str	r3, [sp, #4]
      Lcd_Ctx[Instance].BppFactor = 4U;
 8005498:	2104      	movs	r1, #4
      dsi_pixel_format = DSI_RGB888;
 800549a:	2305      	movs	r3, #5
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800549c:	4c72      	ldr	r4, [pc, #456]	; (8005668 <BSP_LCD_InitEx+0x200>)
    BSP_LCD_Reset(Instance);
 800549e:	2000      	movs	r0, #0
 80054a0:	4f72      	ldr	r7, [pc, #456]	; (800566c <BSP_LCD_InitEx+0x204>)
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80054a2:	2600      	movs	r6, #0
 80054a4:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 80054a6:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 80054aa:	6139      	str	r1, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80054ac:	f04f 0b02 	mov.w	fp, #2
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 80054b0:	60fa      	str	r2, [r7, #12]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 80054b2:	f04f 0a04 	mov.w	sl, #4
    Lcd_Ctx[Instance].XSize  = Width;
 80054b6:	603d      	str	r5, [r7, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 80054b8:	f8c7 8004 	str.w	r8, [r7, #4]
    BSP_LCD_Reset(Instance);
 80054bc:	f7ff fed6 	bl	800526c <BSP_LCD_Reset>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80054c0:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80054c4:	2201      	movs	r2, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80054c6:	a90c      	add	r1, sp, #48	; 0x30
 80054c8:	4869      	ldr	r0, [pc, #420]	; (8005670 <BSP_LCD_InitEx+0x208>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80054ca:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 80054ce:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 80054d2:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 80054d6:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80054da:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80054de:	920d      	str	r2, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80054e0:	960e      	str	r6, [sp, #56]	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80054e2:	f8cd c014 	str.w	ip, [sp, #20]
 80054e6:	f8dd c014 	ldr.w	ip, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80054ea:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80054ee:	f001 fce5 	bl	8006ebc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80054f2:	2201      	movs	r2, #1
 80054f4:	4649      	mov	r1, r9
 80054f6:	485e      	ldr	r0, [pc, #376]	; (8005670 <BSP_LCD_InitEx+0x208>)
 80054f8:	f001 fe04 	bl	8007104 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 80054fc:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8005500:	a90c      	add	r1, sp, #48	; 0x30
 8005502:	485b      	ldr	r0, [pc, #364]	; (8005670 <BSP_LCD_InitEx+0x208>)
  LCD_TE_GPIO_CLK_ENABLE();
 8005504:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
    hlcd_dma2d.Instance = DMA2D;
 8005508:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80056a0 <BSP_LCD_InitEx+0x238>
  LCD_TE_GPIO_CLK_ENABLE();
 800550c:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8005510:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8005514:	960d      	str	r6, [sp, #52]	; 0x34
  LCD_TE_GPIO_CLK_ENABLE();
 8005516:	f404 7400 	and.w	r4, r4, #512	; 0x200
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800551a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  gpio_init_structure.Pin       = LCD_TE_PIN;
 800551e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  LCD_TE_GPIO_CLK_ENABLE();
 8005522:	9406      	str	r4, [sp, #24]
 8005524:	9c06      	ldr	r4, [sp, #24]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8005526:	f001 fcc9 	bl	8006ebc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 800552a:	2201      	movs	r2, #1
 800552c:	4651      	mov	r1, sl
 800552e:	4850      	ldr	r0, [pc, #320]	; (8005670 <BSP_LCD_InitEx+0x208>)
 8005530:	f001 fde8 	bl	8007104 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8005534:	4632      	mov	r2, r6
 8005536:	210f      	movs	r1, #15
 8005538:	2058      	movs	r0, #88	; 0x58
 800553a:	f000 fefb 	bl	8006334 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800553e:	2058      	movs	r0, #88	; 0x58
 8005540:	f000 ff32 	bl	80063a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8005544:	4632      	mov	r2, r6
 8005546:	210f      	movs	r1, #15
 8005548:	205a      	movs	r0, #90	; 0x5a
 800554a:	f000 fef3 	bl	8006334 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800554e:	205a      	movs	r0, #90	; 0x5a
 8005550:	f000 ff2a 	bl	80063a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 8005554:	4632      	mov	r2, r6
 8005556:	210f      	movs	r1, #15
 8005558:	207b      	movs	r0, #123	; 0x7b
 800555a:	f000 feeb 	bl	8006334 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800555e:	207b      	movs	r0, #123	; 0x7b
 8005560:	f000 ff22 	bl	80063a8 <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 8005564:	4c43      	ldr	r4, [pc, #268]	; (8005674 <BSP_LCD_InitEx+0x20c>)
    hlcd_dma2d.Instance = DMA2D;
 8005566:	4844      	ldr	r0, [pc, #272]	; (8005678 <BSP_LCD_InitEx+0x210>)
    hlcd_dsi.Instance = DSI;
 8005568:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800556c:	4943      	ldr	r1, [pc, #268]	; (800567c <BSP_LCD_InitEx+0x214>)
    hlcd_ltdc.Instance = LTDC;
 800556e:	4e44      	ldr	r6, [pc, #272]	; (8005680 <BSP_LCD_InitEx+0x218>)
    hlcd_dsi.Instance = DSI;
 8005570:	600a      	str	r2, [r1, #0]
    hlcd_ltdc.Instance = LTDC;
 8005572:	6026      	str	r6, [r4, #0]
    hlcd_dma2d.Instance = DMA2D;
 8005574:	f8c9 0000 	str.w	r0, [r9]
  if(hltdc->Instance == LTDC)
 8005578:	f7ff fe04 	bl	8005184 <LTDC_MspInit.part.0>
  if(hdma2d->Instance == DMA2D)
 800557c:	f8d9 2000 	ldr.w	r2, [r9]
 8005580:	9b02      	ldr	r3, [sp, #8]
 8005582:	4282      	cmp	r2, r0
 8005584:	d03a      	beq.n	80055fc <BSP_LCD_InitEx+0x194>
  if(hdsi->Instance == DSI)
 8005586:	680a      	ldr	r2, [r1, #0]
 8005588:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800558c:	d031      	beq.n	80055f2 <BSP_LCD_InitEx+0x18a>
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800558e:	4642      	mov	r2, r8
 8005590:	4629      	mov	r1, r5
 8005592:	483a      	ldr	r0, [pc, #232]	; (800567c <BSP_LCD_InitEx+0x214>)
 8005594:	f7ff fe9c 	bl	80052d0 <MX_DSIHOST_DSI_Init>
 8005598:	2800      	cmp	r0, #0
 800559a:	d15c      	bne.n	8005656 <BSP_LCD_InitEx+0x1ee>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800559c:	4835      	ldr	r0, [pc, #212]	; (8005674 <BSP_LCD_InitEx+0x20c>)
 800559e:	f7ff ff49 	bl	8005434 <MX_LTDC_ClockConfig>
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d157      	bne.n	8005656 <BSP_LCD_InitEx+0x1ee>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 80055a6:	4642      	mov	r2, r8
 80055a8:	4629      	mov	r1, r5
 80055aa:	4832      	ldr	r0, [pc, #200]	; (8005674 <BSP_LCD_InitEx+0x20c>)
 80055ac:	f7ff fefc 	bl	80053a8 <MX_LTDC_Init>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d150      	bne.n	8005656 <BSP_LCD_InitEx+0x1ee>
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 80055b4:	f000 f8b2 	bl	800571c <BSP_SDRAM_Init>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d14c      	bne.n	8005656 <BSP_LCD_InitEx+0x1ee>
      config.PixelFormat = ltdc_pixel_format;
 80055bc:	9c01      	ldr	r4, [sp, #4]
      config.Address     = LCD_LAYER_0_ADDRESS;
 80055be:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80055c2:	4601      	mov	r1, r0
      config.X0          = 0;
 80055c4:	900c      	str	r0, [sp, #48]	; 0x30
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80055c6:	aa0c      	add	r2, sp, #48	; 0x30
      config.Y1          = Height;
 80055c8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      config.Y0          = 0;
 80055cc:	e9cd 500d 	strd	r5, r0, [sp, #52]	; 0x34
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80055d0:	4828      	ldr	r0, [pc, #160]	; (8005674 <BSP_LCD_InitEx+0x20c>)
      config.Address     = LCD_LAYER_0_ADDRESS;
 80055d2:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80055d6:	f7ff ff07 	bl	80053e8 <MX_LTDC_ConfigLayer>
 80055da:	4604      	mov	r4, r0
 80055dc:	b190      	cbz	r0, 8005604 <BSP_LCD_InitEx+0x19c>
        ret = BSP_ERROR_PERIPH_FAILURE;
 80055de:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 80055e2:	2301      	movs	r3, #1
 80055e4:	61bb      	str	r3, [r7, #24]
}
 80055e6:	b013      	add	sp, #76	; 0x4c
 80055e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Lcd_Ctx[Instance].BppFactor = 2U;
 80055ec:	4611      	mov	r1, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 80055ee:	9201      	str	r2, [sp, #4]
 80055f0:	e754      	b.n	800549c <BSP_LCD_InitEx+0x34>
 80055f2:	9302      	str	r3, [sp, #8]
 80055f4:	f7ff fdfe 	bl	80051f4 <DSI_MspInit.part.0>
 80055f8:	9b02      	ldr	r3, [sp, #8]
 80055fa:	e7c8      	b.n	800558e <BSP_LCD_InitEx+0x126>
 80055fc:	f7ff fde0 	bl	80051c0 <DMA2D_MspInit.part.0>
 8005600:	9b02      	ldr	r3, [sp, #8]
 8005602:	e7c0      	b.n	8005586 <BSP_LCD_InitEx+0x11e>
        (void)HAL_DSI_Start(&hlcd_dsi);
 8005604:	481d      	ldr	r0, [pc, #116]	; (800567c <BSP_LCD_InitEx+0x214>)
 8005606:	f001 fb29 	bl	8006c5c <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 800560a:	2104      	movs	r1, #4
 800560c:	481b      	ldr	r0, [pc, #108]	; (800567c <BSP_LCD_InitEx+0x214>)
 800560e:	f001 fb11 	bl	8006c34 <HAL_DSI_ConfigFlowControl>
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
 8005612:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <BSP_LCD_InitEx+0x21c>)
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005614:	4d1c      	ldr	r5, [pc, #112]	; (8005688 <BSP_LCD_InitEx+0x220>)
 8005616:	a908      	add	r1, sp, #32
  IOCtx.WriteReg    = DSI_IO_Write;
 8005618:	4a1c      	ldr	r2, [pc, #112]	; (800568c <BSP_LCD_InitEx+0x224>)
  IOCtx.GetTick     = BSP_GetTick;
 800561a:	930b      	str	r3, [sp, #44]	; 0x2c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800561c:	4628      	mov	r0, r5
  IOCtx.ReadReg     = DSI_IO_Read;
 800561e:	4b1c      	ldr	r3, [pc, #112]	; (8005690 <BSP_LCD_InitEx+0x228>)
  IOCtx.Address     = 0;
 8005620:	f8ad 4020 	strh.w	r4, [sp, #32]
  IOCtx.ReadReg     = DSI_IO_Read;
 8005624:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005628:	f7ff fb22 	bl	8004c70 <OTM8009A_RegisterBusIO>
 800562c:	b980      	cbnz	r0, 8005650 <BSP_LCD_InitEx+0x1e8>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 800562e:	4c19      	ldr	r4, [pc, #100]	; (8005694 <BSP_LCD_InitEx+0x22c>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8005630:	4628      	mov	r0, r5
 8005632:	a907      	add	r1, sp, #28
    Lcd_CompObj = &OTM8009AObj;
 8005634:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8005636:	f7ff fb07 	bl	8004c48 <OTM8009A_ReadID>
 800563a:	b948      	cbnz	r0, 8005650 <BSP_LCD_InitEx+0x1e8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800563c:	4b16      	ldr	r3, [pc, #88]	; (8005698 <BSP_LCD_InitEx+0x230>)
 800563e:	4d17      	ldr	r5, [pc, #92]	; (800569c <BSP_LCD_InitEx+0x234>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8005640:	6820      	ldr	r0, [r4, #0]
 8005642:	9a03      	ldr	r2, [sp, #12]
 8005644:	9901      	ldr	r1, [sp, #4]
 8005646:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8005648:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800564a:	47a0      	blx	r4
 800564c:	2800      	cmp	r0, #0
 800564e:	d0c8      	beq.n	80055e2 <BSP_LCD_InitEx+0x17a>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005650:	f06f 0006 	mvn.w	r0, #6
 8005654:	e7c5      	b.n	80055e2 <BSP_LCD_InitEx+0x17a>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005656:	f06f 0003 	mvn.w	r0, #3
}
 800565a:	b013      	add	sp, #76	; 0x4c
 800565c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005660:	f06f 0001 	mvn.w	r0, #1
 8005664:	e7bf      	b.n	80055e6 <BSP_LCD_InitEx+0x17e>
 8005666:	bf00      	nop
 8005668:	58024400 	.word	0x58024400
 800566c:	24011514 	.word	0x24011514
 8005670:	58022400 	.word	0x58022400
 8005674:	2401146c 	.word	0x2401146c
 8005678:	52001000 	.word	0x52001000
 800567c:	24011530 	.word	0x24011530
 8005680:	50001000 	.word	0x50001000
 8005684:	08004cc1 	.word	0x08004cc1
 8005688:	24001134 	.word	0x24001134
 800568c:	08005231 	.word	0x08005231
 8005690:	08004e51 	.word	0x08004e51
 8005694:	2400112c 	.word	0x2400112c
 8005698:	24001018 	.word	0x24001018
 800569c:	24001130 	.word	0x24001130
 80056a0:	2401154c 	.word	0x2401154c

080056a4 <BSP_LCD_Init>:
{
 80056a4:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 80056a6:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 80056aa:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 80056ac:	f44f 7348 	mov.w	r3, #800	; 0x320
 80056b0:	2201      	movs	r2, #1
 80056b2:	9400      	str	r4, [sp, #0]
 80056b4:	f7ff fed8 	bl	8005468 <BSP_LCD_InitEx>
}
 80056b8:	b002      	add	sp, #8
 80056ba:	bd10      	pop	{r4, pc}

080056bc <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 80056bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 80056be:	4915      	ldr	r1, [pc, #84]	; (8005714 <MX_SDRAM_Init+0x58>)

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80056c0:	2620      	movs	r6, #32
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80056c2:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80056c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80056c8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 80056cc:	b089      	sub	sp, #36	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80056ce:	4b12      	ldr	r3, [pc, #72]	; (8005718 <MX_SDRAM_Init+0x5c>)
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80056d0:	f44f 77c0 	mov.w	r7, #384	; 0x180
  hSdram->Instance = FMC_SDRAM_DEVICE;
 80056d4:	6001      	str	r1, [r0, #0]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80056d6:	2101      	movs	r1, #1
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80056d8:	6106      	str	r6, [r0, #16]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80056da:	2604      	movs	r6, #4
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80056dc:	6145      	str	r5, [r0, #20]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80056de:	2500      	movs	r5, #0
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80056e0:	6202      	str	r2, [r0, #32]

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 80056e2:	2202      	movs	r2, #2
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80056e4:	6244      	str	r4, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 80056e6:	2407      	movs	r4, #7
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80056e8:	6187      	str	r7, [r0, #24]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80056ea:	60c6      	str	r6, [r0, #12]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80056ec:	61c5      	str	r5, [r0, #28]
  sdram_timing.SelfRefreshTime      = 4;
 80056ee:	9603      	str	r6, [sp, #12]
  sdram_timing.LoadToActiveDelay    = 2;
 80056f0:	9201      	str	r2, [sp, #4]
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 80056f2:	9207      	str	r2, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80056f4:	9402      	str	r4, [sp, #8]
  sdram_timing.RowCycleDelay        = 7;
 80056f6:	9404      	str	r4, [sp, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80056f8:	e9c0 1101 	strd	r1, r1, [r0, #4]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80056fc:	eb0d 0106 	add.w	r1, sp, r6
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005700:	629d      	str	r5, [r3, #40]	; 0x28
  sdram_timing.RPDelay              = 2;
 8005702:	e9cd 2205 	strd	r2, r2, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005706:	f003 ff15 	bl	8009534 <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }
  return HAL_OK;
}
 800570a:	1b40      	subs	r0, r0, r5
 800570c:	bf18      	it	ne
 800570e:	2001      	movne	r0, #1
 8005710:	b009      	add	sp, #36	; 0x24
 8005712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005714:	52004140 	.word	0x52004140
 8005718:	240115b4 	.word	0x240115b4

0800571c <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
 800571c:	2800      	cmp	r0, #0
 800571e:	f040 80e1 	bne.w	80058e4 <BSP_SDRAM_Init+0x1c8>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005722:	4b73      	ldr	r3, [pc, #460]	; (80058f0 <BSP_SDRAM_Init+0x1d4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005724:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 8005726:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800572a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
 800572e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8005730:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
 8005734:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_FMC_CLK_ENABLE();
 8005736:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800573a:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800573c:	2002      	movs	r0, #2
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800573e:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8005740:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005744:	2703      	movs	r7, #3
  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8005746:	f240 2602 	movw	r6, #514	; 0x202
  __HAL_RCC_FMC_CLK_ENABLE();
 800574a:	9201      	str	r2, [sp, #4]
 800574c:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 800574e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005752:	430a      	orrs	r2, r1
 8005754:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005758:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800575c:	400a      	ands	r2, r1
 800575e:	9202      	str	r2, [sp, #8]
 8005760:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005762:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005766:	f042 0208 	orr.w	r2, r2, #8
 800576a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800576e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005772:	f002 0208 	and.w	r2, r2, #8
 8005776:	9203      	str	r2, [sp, #12]
 8005778:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800577a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800577e:	f042 0210 	orr.w	r2, r2, #16
 8005782:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005786:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800578a:	f002 0210 	and.w	r2, r2, #16
 800578e:	9204      	str	r2, [sp, #16]
 8005790:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005792:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005796:	f042 0220 	orr.w	r2, r2, #32
 800579a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800579e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80057a2:	f002 0220 	and.w	r2, r2, #32
 80057a6:	9205      	str	r2, [sp, #20]
 80057a8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80057aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80057ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057b2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80057b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80057ba:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80057be:	9206      	str	r2, [sp, #24]
 80057c0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80057c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80057c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80057ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80057d2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80057d6:	9207      	str	r2, [sp, #28]
 80057d8:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80057da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80057de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80057e6:	f24c 7203 	movw	r2, #50947	; 0xc703
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80057ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80057ee:	900a      	str	r0, [sp, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80057f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80057f4:	483f      	ldr	r0, [pc, #252]	; (80058f4 <BSP_SDRAM_Init+0x1d8>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80057f6:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80057f8:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80057fa:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80057fc:	9209      	str	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80057fe:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005800:	940d      	str	r4, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005802:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005804:	f001 fb5a 	bl	8006ebc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005808:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800580c:	a909      	add	r1, sp, #36	; 0x24
 800580e:	483a      	ldr	r0, [pc, #232]	; (80058f8 <BSP_SDRAM_Init+0x1dc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005810:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005812:	f001 fb53 	bl	8006ebc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005816:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800581a:	a909      	add	r1, sp, #36	; 0x24
 800581c:	4837      	ldr	r0, [pc, #220]	; (80058fc <BSP_SDRAM_Init+0x1e0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800581e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005820:	f001 fb4c 	bl	8006ebc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005824:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005828:	a909      	add	r1, sp, #36	; 0x24
 800582a:	4835      	ldr	r0, [pc, #212]	; (8005900 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800582c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800582e:	f001 fb45 	bl	8006ebc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005832:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005836:	a909      	add	r1, sp, #36	; 0x24
 8005838:	4832      	ldr	r0, [pc, #200]	; (8005904 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800583a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800583c:	f001 fb3e 	bl	8006ebc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005840:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005844:	a909      	add	r1, sp, #36	; 0x24
 8005846:	4830      	ldr	r0, [pc, #192]	; (8005908 <BSP_SDRAM_Init+0x1ec>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005848:	4c30      	ldr	r4, [pc, #192]	; (800590c <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800584a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800584c:	f001 fb36 	bl	8006ebc <HAL_GPIO_Init>
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005850:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005854:	f640 0008 	movw	r0, #2056	; 0x808
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005858:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800585c:	2120      	movs	r1, #32
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 800585e:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005860:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005864:	60a3      	str	r3, [r4, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005866:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005868:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
  mdma_handle.Init.BufferTransferLength     = 128;
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800586a:	4a29      	ldr	r2, [pc, #164]	; (8005910 <BSP_SDRAM_Init+0x1f4>)
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800586c:	60e3      	str	r3, [r4, #12]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800586e:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength     = 128;
 8005870:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005872:	61e1      	str	r1, [r4, #28]
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005874:	6022      	str	r2, [r4, #0]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005876:	6125      	str	r5, [r4, #16]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005878:	e9c4 6005 	strd	r6, r0, [r4, #20]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800587c:	4e25      	ldr	r6, [pc, #148]	; (8005914 <BSP_SDRAM_Init+0x1f8>)

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800587e:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005880:	6334      	str	r4, [r6, #48]	; 0x30
 8005882:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8005884:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8005888:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800588c:	f001 fe9c 	bl	80075c8 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8005890:	4620      	mov	r0, r4
 8005892:	f001 fe1f 	bl	80074d4 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8005896:	462a      	mov	r2, r5
 8005898:	210f      	movs	r1, #15
 800589a:	207a      	movs	r0, #122	; 0x7a
 800589c:	f000 fd4a 	bl	8006334 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80058a0:	207a      	movs	r0, #122	; 0x7a
 80058a2:	f000 fd81 	bl	80063a8 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 80058a6:	4630      	mov	r0, r6
 80058a8:	f7ff ff08 	bl	80056bc <MX_SDRAM_Init>
 80058ac:	4603      	mov	r3, r0
 80058ae:	b9e0      	cbnz	r0, 80058ea <BSP_SDRAM_Init+0x1ce>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80058b0:	4919      	ldr	r1, [pc, #100]	; (8005918 <BSP_SDRAM_Init+0x1fc>)
 80058b2:	f04f 0c08 	mov.w	ip, #8
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80058b6:	f44f 7200 	mov.w	r2, #512	; 0x200
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80058ba:	f240 6503 	movw	r5, #1539	; 0x603
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 80058be:	2430      	movs	r4, #48	; 0x30
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80058c0:	4630      	mov	r0, r6
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 80058c2:	604f      	str	r7, [r1, #4]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 80058c4:	60cb      	str	r3, [r1, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 80058c6:	610b      	str	r3, [r1, #16]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 80058c8:	618b      	str	r3, [r1, #24]
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80058ca:	f8c1 c000 	str.w	ip, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80058ce:	608d      	str	r5, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 80058d0:	614c      	str	r4, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80058d2:	61ca      	str	r2, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80058d4:	f7fe fc62 	bl	800419c <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80058d8:	2800      	cmp	r0, #0
 80058da:	bf18      	it	ne
 80058dc:	f06f 0004 	mvnne.w	r0, #4
}
 80058e0:	b00f      	add	sp, #60	; 0x3c
 80058e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80058e4:	f06f 0001 	mvn.w	r0, #1
}
 80058e8:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
 80058ea:	f04f 30ff 	mov.w	r0, #4294967295
 80058ee:	e7f7      	b.n	80058e0 <BSP_SDRAM_Init+0x1c4>
 80058f0:	58024400 	.word	0x58024400
 80058f4:	58020c00 	.word	0x58020c00
 80058f8:	58021000 	.word	0x58021000
 80058fc:	58021400 	.word	0x58021400
 8005900:	58021800 	.word	0x58021800
 8005904:	58021c00 	.word	0x58021c00
 8005908:	58022000 	.word	0x58022000
 800590c:	24001154 	.word	0x24001154
 8005910:	52000040 	.word	0x52000040
 8005914:	240115b4 	.word	0x240115b4
 8005918:	240011c0 	.word	0x240011c0

0800591c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800591c:	4b0f      	ldr	r3, [pc, #60]	; (800595c <HAL_InitTick+0x40>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b90b      	cbnz	r3, 8005926 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8005922:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8005924:	4770      	bx	lr
{
 8005926:	b510      	push	{r4, lr}
 8005928:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800592a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800592e:	4a0c      	ldr	r2, [pc, #48]	; (8005960 <HAL_InitTick+0x44>)
 8005930:	fbb0 f3f3 	udiv	r3, r0, r3
 8005934:	6810      	ldr	r0, [r2, #0]
 8005936:	fbb0 f0f3 	udiv	r0, r0, r3
 800593a:	f000 fd43 	bl	80063c4 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800593e:	2c0f      	cmp	r4, #15
 8005940:	d800      	bhi.n	8005944 <HAL_InitTick+0x28>
 8005942:	b108      	cbz	r0, 8005948 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8005944:	2001      	movs	r0, #1
}
 8005946:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005948:	2200      	movs	r2, #0
 800594a:	4621      	mov	r1, r4
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	f000 fcf0 	bl	8006334 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005954:	4b03      	ldr	r3, [pc, #12]	; (8005964 <HAL_InitTick+0x48>)
 8005956:	2000      	movs	r0, #0
 8005958:	601c      	str	r4, [r3, #0]
}
 800595a:	bd10      	pop	{r4, pc}
 800595c:	24001064 	.word	0x24001064
 8005960:	24000000 	.word	0x24000000
 8005964:	24001068 	.word	0x24001068

08005968 <HAL_Init>:
{
 8005968:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800596a:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800596c:	4c12      	ldr	r4, [pc, #72]	; (80059b8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800596e:	f000 fccd 	bl	800630c <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005972:	4d12      	ldr	r5, [pc, #72]	; (80059bc <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005974:	f002 f97c 	bl	8007c70 <HAL_RCC_GetSysClockFreq>
 8005978:	4b11      	ldr	r3, [pc, #68]	; (80059c0 <HAL_Init+0x58>)
 800597a:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800597c:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800597e:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005980:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005982:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005986:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005988:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800598a:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800598c:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 8005990:	4c0c      	ldr	r4, [pc, #48]	; (80059c4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005992:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005996:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005998:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800599c:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800599e:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059a0:	f7ff ffbc 	bl	800591c <HAL_InitTick>
 80059a4:	b110      	cbz	r0, 80059ac <HAL_Init+0x44>
    return HAL_ERROR;
 80059a6:	2401      	movs	r4, #1
}
 80059a8:	4620      	mov	r0, r4
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	4604      	mov	r4, r0
  HAL_MspInit();
 80059ae:	f7fe faf3 	bl	8003f98 <HAL_MspInit>
}
 80059b2:	4620      	mov	r0, r4
 80059b4:	bd38      	pop	{r3, r4, r5, pc}
 80059b6:	bf00      	nop
 80059b8:	08009908 	.word	0x08009908
 80059bc:	24000004 	.word	0x24000004
 80059c0:	58024400 	.word	0x58024400
 80059c4:	24000000 	.word	0x24000000

080059c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80059c8:	4a03      	ldr	r2, [pc, #12]	; (80059d8 <HAL_IncTick+0x10>)
 80059ca:	4b04      	ldr	r3, [pc, #16]	; (80059dc <HAL_IncTick+0x14>)
 80059cc:	6811      	ldr	r1, [r2, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	440b      	add	r3, r1
 80059d2:	6013      	str	r3, [r2, #0]
}
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	240115e8 	.word	0x240115e8
 80059dc:	24001064 	.word	0x24001064

080059e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80059e0:	4b01      	ldr	r3, [pc, #4]	; (80059e8 <HAL_GetTick+0x8>)
 80059e2:	6818      	ldr	r0, [r3, #0]
}
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	240115e8 	.word	0x240115e8

080059ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80059f0:	f7ff fff6 	bl	80059e0 <HAL_GetTick>
 80059f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059f6:	1c63      	adds	r3, r4, #1
 80059f8:	d002      	beq.n	8005a00 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80059fa:	4b04      	ldr	r3, [pc, #16]	; (8005a0c <HAL_Delay+0x20>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a00:	f7ff ffee 	bl	80059e0 <HAL_GetTick>
 8005a04:	1b43      	subs	r3, r0, r5
 8005a06:	42a3      	cmp	r3, r4
 8005a08:	d3fa      	bcc.n	8005a00 <HAL_Delay+0x14>
  {
  }
}
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	24001064 	.word	0x24001064

08005a10 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8005a10:	4b01      	ldr	r3, [pc, #4]	; (8005a18 <HAL_GetREVID+0x8>)
 8005a12:	6818      	ldr	r0, [r3, #0]
}
 8005a14:	0c00      	lsrs	r0, r0, #16
 8005a16:	4770      	bx	lr
 8005a18:	5c001000 	.word	0x5c001000

08005a1c <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005a1c:	4a03      	ldr	r2, [pc, #12]	; (8005a2c <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 8005a1e:	6853      	ldr	r3, [r2, #4]
 8005a20:	ea23 0000 	bic.w	r0, r3, r0
 8005a24:	4301      	orrs	r1, r0
 8005a26:	6051      	str	r1, [r2, #4]
}
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	58000400 	.word	0x58000400

08005a30 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8005a30:	4a02      	ldr	r2, [pc, #8]	; (8005a3c <HAL_EnableCompensationCell+0xc>)
 8005a32:	6a13      	ldr	r3, [r2, #32]
 8005a34:	f043 0301 	orr.w	r3, r3, #1
 8005a38:	6213      	str	r3, [r2, #32]
}
 8005a3a:	4770      	bx	lr
 8005a3c:	58000400 	.word	0x58000400

08005a40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005a40:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005a42:	2200      	movs	r2, #0
{
 8005a44:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8005a46:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a48:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8005a4c:	2a01      	cmp	r2, #1
 8005a4e:	f000 813a 	beq.w	8005cc6 <HAL_ADC_ConfigChannel+0x286>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a56:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8005a58:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a5c:	6894      	ldr	r4, [r2, #8]
 8005a5e:	0766      	lsls	r6, r4, #29
 8005a60:	f100 8099 	bmi.w	8005b96 <HAL_ADC_ConfigChannel+0x156>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005a64:	680c      	ldr	r4, [r1, #0]
 8005a66:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8005a6a:	2d00      	cmp	r5, #0
 8005a6c:	f040 809e 	bne.w	8005bac <HAL_ADC_ConfigChannel+0x16c>
 8005a70:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8005a74:	fa00 f00c 	lsl.w	r0, r0, ip
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005a78:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8005a7a:	261f      	movs	r6, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005a7c:	69d5      	ldr	r5, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a7e:	09a7      	lsrs	r7, r4, #6
  MODIFY_REG(*preg,
 8005a80:	4034      	ands	r4, r6
 8005a82:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a84:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8005a88:	f007 070c 	and.w	r7, r7, #12
  MODIFY_REG(*preg,
 8005a8c:	40a6      	lsls	r6, r4
 8005a8e:	61d0      	str	r0, [r2, #28]
 8005a90:	fa0c f404 	lsl.w	r4, ip, r4
 8005a94:	5978      	ldr	r0, [r7, r5]
 8005a96:	ea20 0006 	bic.w	r0, r0, r6
 8005a9a:	4320      	orrs	r0, r4
 8005a9c:	5178      	str	r0, [r7, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a9e:	6890      	ldr	r0, [r2, #8]
 8005aa0:	0745      	lsls	r5, r0, #29
 8005aa2:	f100 8081 	bmi.w	8005ba8 <HAL_ADC_ConfigChannel+0x168>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005aa6:	6895      	ldr	r5, [r2, #8]
 8005aa8:	f015 0508 	ands.w	r5, r5, #8
 8005aac:	d157      	bne.n	8005b5e <HAL_ADC_ConfigChannel+0x11e>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005aae:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005ab0:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8005ab4:	2007      	movs	r0, #7
 8005ab6:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005ab8:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8005abc:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005ac0:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8005ac4:	fa00 fe04 	lsl.w	lr, r0, r4
 8005ac8:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005acc:	4fc3      	ldr	r7, [pc, #780]	; (8005ddc <HAL_ADC_ConfigChannel+0x39c>)
 8005ace:	f85c 0006 	ldr.w	r0, [ip, r6]
 8005ad2:	ea20 000e 	bic.w	r0, r0, lr
 8005ad6:	4320      	orrs	r0, r4
 8005ad8:	f84c 0006 	str.w	r0, [ip, r6]
 8005adc:	6838      	ldr	r0, [r7, #0]
 8005ade:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8005ae2:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8005ae6:	f000 8098 	beq.w	8005c1a <HAL_ADC_ConfigChannel+0x1da>
 8005aea:	68d0      	ldr	r0, [r2, #12]
 8005aec:	68d6      	ldr	r6, [r2, #12]
 8005aee:	f010 0f10 	tst.w	r0, #16
 8005af2:	6948      	ldr	r0, [r1, #20]
 8005af4:	f040 8107 	bne.w	8005d06 <HAL_ADC_ConfigChannel+0x2c6>
 8005af8:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8005afc:	0076      	lsls	r6, r6, #1
 8005afe:	fa00 f606 	lsl.w	r6, r0, r6
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005b02:	690f      	ldr	r7, [r1, #16]
 8005b04:	2f04      	cmp	r7, #4
 8005b06:	f000 80e1 	beq.w	8005ccc <HAL_ADC_ConfigChannel+0x28c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b0a:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 8005b0e:	6808      	ldr	r0, [r1, #0]
 8005b10:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8005b14:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005b18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8005b1c:	ea40 000c 	orr.w	r0, r0, ip
 8005b20:	4330      	orrs	r0, r6
 8005b22:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005b26:	7e4f      	ldrb	r7, [r1, #25]
 8005b28:	690e      	ldr	r6, [r1, #16]
 8005b2a:	2f01      	cmp	r7, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005b2c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8005b30:	bf0c      	ite	eq
 8005b32:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 8005b36:	2700      	movne	r7, #0
 8005b38:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005b3c:	4338      	orrs	r0, r7
 8005b3e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005b42:	7e0c      	ldrb	r4, [r1, #24]
 8005b44:	6908      	ldr	r0, [r1, #16]
 8005b46:	2c01      	cmp	r4, #1
 8005b48:	d104      	bne.n	8005b54 <HAL_ADC_ConfigChannel+0x114>
 8005b4a:	f000 001f 	and.w	r0, r0, #31
 8005b4e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8005b52:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005b54:	6910      	ldr	r0, [r2, #16]
 8005b56:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8005b5a:	4305      	orrs	r5, r0
 8005b5c:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b5e:	6890      	ldr	r0, [r2, #8]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b60:	07c4      	lsls	r4, r0, #31
 8005b62:	d416      	bmi.n	8005b92 <HAL_ADC_ConfigChannel+0x152>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005b64:	68ce      	ldr	r6, [r1, #12]
 8005b66:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8005b68:	f006 0718 	and.w	r7, r6, #24
 8005b6c:	4c9c      	ldr	r4, [pc, #624]	; (8005de0 <HAL_ADC_ConfigChannel+0x3a0>)
 8005b6e:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 8005b72:	40fc      	lsrs	r4, r7
 8005b74:	f3c0 0713 	ubfx	r7, r0, #0, #20

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005b78:	f8df c288 	ldr.w	ip, [pc, #648]	; 8005e04 <HAL_ADC_ConfigChannel+0x3c4>
 8005b7c:	4004      	ands	r4, r0
 8005b7e:	ea25 0507 	bic.w	r5, r5, r7
 8005b82:	4566      	cmp	r6, ip
 8005b84:	ea44 0405 	orr.w	r4, r4, r5
 8005b88:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 8005b8c:	d04d      	beq.n	8005c2a <HAL_ADC_ConfigChannel+0x1ea>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	db15      	blt.n	8005bbe <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b92:	2000      	movs	r0, #0
 8005b94:	e003      	b.n	8005b9e <HAL_ADC_ConfigChannel+0x15e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b98:	f042 0220 	orr.w	r2, r2, #32
 8005b9c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8005ba4:	b003      	add	sp, #12
 8005ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005ba8:	6890      	ldr	r0, [r2, #8]
 8005baa:	e7d8      	b.n	8005b5e <HAL_ADC_ConfigChannel+0x11e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bac:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005bb0:	b115      	cbz	r5, 8005bb8 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8005bb2:	fab5 f585 	clz	r5, r5
 8005bb6:	40a8      	lsls	r0, r5
 8005bb8:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8005bbc:	e75c      	b.n	8005a78 <HAL_ADC_ConfigChannel+0x38>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bbe:	4989      	ldr	r1, [pc, #548]	; (8005de4 <HAL_ADC_ConfigChannel+0x3a4>)
 8005bc0:	428a      	cmp	r2, r1
 8005bc2:	f000 80c6 	beq.w	8005d52 <HAL_ADC_ConfigChannel+0x312>
 8005bc6:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8005bca:	428a      	cmp	r2, r1
 8005bcc:	f000 80c1 	beq.w	8005d52 <HAL_ADC_ConfigChannel+0x312>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bd0:	4e85      	ldr	r6, [pc, #532]	; (8005de8 <HAL_ADC_ConfigChannel+0x3a8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005bd2:	4d86      	ldr	r5, [pc, #536]	; (8005dec <HAL_ADC_ConfigChannel+0x3ac>)
 8005bd4:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bd6:	68b4      	ldr	r4, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005bd8:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005bdc:	43e4      	mvns	r4, r4
 8005bde:	f004 0401 	and.w	r4, r4, #1
 8005be2:	2c00      	cmp	r4, #0
 8005be4:	f000 80c3 	beq.w	8005d6e <HAL_ADC_ConfigChannel+0x32e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005be8:	4c81      	ldr	r4, [pc, #516]	; (8005df0 <HAL_ADC_ConfigChannel+0x3b0>)
 8005bea:	42a0      	cmp	r0, r4
 8005bec:	f000 810c 	beq.w	8005e08 <HAL_ADC_ConfigChannel+0x3c8>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005bf0:	4c80      	ldr	r4, [pc, #512]	; (8005df4 <HAL_ADC_ConfigChannel+0x3b4>)
 8005bf2:	42a0      	cmp	r0, r4
 8005bf4:	f000 812b 	beq.w	8005e4e <HAL_ADC_ConfigChannel+0x40e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005bf8:	4c7f      	ldr	r4, [pc, #508]	; (8005df8 <HAL_ADC_ConfigChannel+0x3b8>)
 8005bfa:	42a0      	cmp	r0, r4
 8005bfc:	d1c9      	bne.n	8005b92 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 8005bfe:	0249      	lsls	r1, r1, #9
 8005c00:	d4c7      	bmi.n	8005b92 <HAL_ADC_ConfigChannel+0x152>
 8005c02:	4979      	ldr	r1, [pc, #484]	; (8005de8 <HAL_ADC_ConfigChannel+0x3a8>)
 8005c04:	428a      	cmp	r2, r1
 8005c06:	d1c4      	bne.n	8005b92 <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005c08:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005c10:	4332      	orrs	r2, r6
 8005c12:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005c16:	60aa      	str	r2, [r5, #8]
}
 8005c18:	e7c1      	b.n	8005b9e <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005c1a:	68d6      	ldr	r6, [r2, #12]
 8005c1c:	6948      	ldr	r0, [r1, #20]
 8005c1e:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8005c22:	0076      	lsls	r6, r6, #1
 8005c24:	fa00 f606 	lsl.w	r6, r0, r6
 8005c28:	e76b      	b.n	8005b02 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c2a:	2f00      	cmp	r7, #0
 8005c2c:	d071      	beq.n	8005d12 <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2e:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005c32:	2c00      	cmp	r4, #0
 8005c34:	f000 80af 	beq.w	8005d96 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8005c38:	fab4 f484 	clz	r4, r4
 8005c3c:	3401      	adds	r4, #1
 8005c3e:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c42:	2c09      	cmp	r4, #9
 8005c44:	f240 80a7 	bls.w	8005d96 <HAL_ADC_ConfigChannel+0x356>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c48:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005c4c:	2d00      	cmp	r5, #0
 8005c4e:	f000 8112 	beq.w	8005e76 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8005c52:	fab5 f585 	clz	r5, r5
 8005c56:	3501      	adds	r5, #1
 8005c58:	06ad      	lsls	r5, r5, #26
 8005c5a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5e:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005c62:	2c00      	cmp	r4, #0
 8005c64:	f000 8105 	beq.w	8005e72 <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 8005c68:	2601      	movs	r6, #1
 8005c6a:	fab4 f484 	clz	r4, r4
 8005c6e:	4434      	add	r4, r6
 8005c70:	f004 041f 	and.w	r4, r4, #31
 8005c74:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c78:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	f000 80f5 	beq.w	8005e6e <HAL_ADC_ConfigChannel+0x42e>
  return __builtin_clz(value);
 8005c84:	fab0 f480 	clz	r4, r0
 8005c88:	3401      	adds	r4, #1
 8005c8a:	f004 041f 	and.w	r4, r4, #31
 8005c8e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005c92:	f1a4 001e 	sub.w	r0, r4, #30
 8005c96:	0500      	lsls	r0, r0, #20
 8005c98:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c9c:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8005c9e:	f04f 0c07 	mov.w	ip, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005ca2:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8005ca6:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005ca8:	0dc7      	lsrs	r7, r0, #23
  MODIFY_REG(*preg,
 8005caa:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005cae:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8005cb2:	fa0c fc00 	lsl.w	ip, ip, r0
 8005cb6:	4086      	lsls	r6, r0
 8005cb8:	597c      	ldr	r4, [r7, r5]
 8005cba:	ea24 000c 	bic.w	r0, r4, ip
 8005cbe:	4330      	orrs	r0, r6
 8005cc0:	5178      	str	r0, [r7, r5]
 8005cc2:	6808      	ldr	r0, [r1, #0]
}
 8005cc4:	e763      	b.n	8005b8e <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8005cc6:	2002      	movs	r0, #2
}
 8005cc8:	b003      	add	sp, #12
 8005cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ccc:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005cce:	680d      	ldr	r5, [r1, #0]
 8005cd0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005cd4:	06ac      	lsls	r4, r5, #26
 8005cd6:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8005cda:	d030      	beq.n	8005d3e <HAL_ADC_ConfigChannel+0x2fe>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005cdc:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005cde:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005ce2:	4284      	cmp	r4, r0
 8005ce4:	d026      	beq.n	8005d34 <HAL_ADC_ConfigChannel+0x2f4>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ce6:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005ce8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005cec:	4284      	cmp	r4, r0
 8005cee:	d02b      	beq.n	8005d48 <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005cf0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005cf2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005cf6:	4284      	cmp	r4, r0
 8005cf8:	f47f af31 	bne.w	8005b5e <HAL_ADC_ConfigChannel+0x11e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005cfc:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005cfe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d02:	66d0      	str	r0, [r2, #108]	; 0x6c
 8005d04:	e72b      	b.n	8005b5e <HAL_ADC_ConfigChannel+0x11e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005d06:	0876      	lsrs	r6, r6, #1
 8005d08:	f006 0608 	and.w	r6, r6, #8
 8005d0c:	fa00 f606 	lsl.w	r6, r0, r6
 8005d10:	e6f7      	b.n	8005b02 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d12:	0e80      	lsrs	r0, r0, #26
 8005d14:	1c44      	adds	r4, r0, #1
 8005d16:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d1a:	2e09      	cmp	r6, #9
 8005d1c:	d82d      	bhi.n	8005d7a <HAL_ADC_ConfigChannel+0x33a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d1e:	06a5      	lsls	r5, r4, #26
 8005d20:	2401      	movs	r4, #1
 8005d22:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005d26:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005d2a:	fa04 f606 	lsl.w	r6, r4, r6
 8005d2e:	0500      	lsls	r0, r0, #20
 8005d30:	4335      	orrs	r5, r6
 8005d32:	e7b3      	b.n	8005c9c <HAL_ADC_ConfigChannel+0x25c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005d34:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005d36:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d3a:	6650      	str	r0, [r2, #100]	; 0x64
 8005d3c:	e7d3      	b.n	8005ce6 <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005d3e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005d40:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d44:	6610      	str	r0, [r2, #96]	; 0x60
 8005d46:	e7c9      	b.n	8005cdc <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005d48:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005d4a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d4e:	6690      	str	r0, [r2, #104]	; 0x68
 8005d50:	e7ce      	b.n	8005cf0 <HAL_ADC_ConfigChannel+0x2b0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005d52:	492a      	ldr	r1, [pc, #168]	; (8005dfc <HAL_ADC_ConfigChannel+0x3bc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d54:	4e23      	ldr	r6, [pc, #140]	; (8005de4 <HAL_ADC_ConfigChannel+0x3a4>)
 8005d56:	4c2a      	ldr	r4, [pc, #168]	; (8005e00 <HAL_ADC_ConfigChannel+0x3c0>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d58:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005d5a:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d5c:	68b7      	ldr	r7, [r6, #8]
 8005d5e:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005d60:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d64:	433c      	orrs	r4, r7
 8005d66:	43e4      	mvns	r4, r4
 8005d68:	f004 0401 	and.w	r4, r4, #1
 8005d6c:	e739      	b.n	8005be2 <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8005d70:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d72:	f042 0220 	orr.w	r2, r2, #32
 8005d76:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8005d78:	e711      	b.n	8005b9e <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d7a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005d7e:	2701      	movs	r7, #1
 8005d80:	06a5      	lsls	r5, r4, #26
 8005d82:	381e      	subs	r0, #30
 8005d84:	fa07 f606 	lsl.w	r6, r7, r6
 8005d88:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005d8c:	0500      	lsls	r0, r0, #20
 8005d8e:	4335      	orrs	r5, r6
 8005d90:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8005d94:	e782      	b.n	8005c9c <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d96:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005d9a:	2c00      	cmp	r4, #0
 8005d9c:	d073      	beq.n	8005e86 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8005d9e:	fab4 f484 	clz	r4, r4
 8005da2:	3401      	adds	r4, #1
 8005da4:	06a4      	lsls	r4, r4, #26
 8005da6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005daa:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8005dae:	2e00      	cmp	r6, #0
 8005db0:	d067      	beq.n	8005e82 <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 8005db2:	2501      	movs	r5, #1
 8005db4:	fab6 f686 	clz	r6, r6
 8005db8:	442e      	add	r6, r5
 8005dba:	f006 061f 	and.w	r6, r6, #31
 8005dbe:	40b5      	lsls	r5, r6
 8005dc0:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc2:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d058      	beq.n	8005e7c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8005dca:	fab0 f480 	clz	r4, r0
 8005dce:	3401      	adds	r4, #1
 8005dd0:	f004 041f 	and.w	r4, r4, #31
 8005dd4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005dd8:	0520      	lsls	r0, r4, #20
 8005dda:	e75f      	b.n	8005c9c <HAL_ADC_ConfigChannel+0x25c>
 8005ddc:	5c001000 	.word	0x5c001000
 8005de0:	000fffff 	.word	0x000fffff
 8005de4:	40022000 	.word	0x40022000
 8005de8:	58026000 	.word	0x58026000
 8005dec:	58026300 	.word	0x58026300
 8005df0:	cb840000 	.word	0xcb840000
 8005df4:	c7520000 	.word	0xc7520000
 8005df8:	cfb80000 	.word	0xcfb80000
 8005dfc:	40022300 	.word	0x40022300
 8005e00:	40022100 	.word	0x40022100
 8005e04:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005e08:	0208      	lsls	r0, r1, #8
 8005e0a:	f53f aec2 	bmi.w	8005b92 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e0e:	491f      	ldr	r1, [pc, #124]	; (8005e8c <HAL_ADC_ConfigChannel+0x44c>)
 8005e10:	428a      	cmp	r2, r1
 8005e12:	f47f aebe 	bne.w	8005b92 <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e16:	4a1e      	ldr	r2, [pc, #120]	; (8005e90 <HAL_ADC_ConfigChannel+0x450>)
 8005e18:	481e      	ldr	r0, [pc, #120]	; (8005e94 <HAL_ADC_ConfigChannel+0x454>)
 8005e1a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005e1c:	68a9      	ldr	r1, [r5, #8]
 8005e1e:	0992      	lsrs	r2, r2, #6
 8005e20:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005e24:	fba0 0202 	umull	r0, r2, r0, r2
 8005e28:	4331      	orrs	r1, r6
 8005e2a:	0992      	lsrs	r2, r2, #6
 8005e2c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005e30:	3201      	adds	r2, #1
 8005e32:	60a9      	str	r1, [r5, #8]
 8005e34:	0052      	lsls	r2, r2, #1
 8005e36:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8005e38:	9a01      	ldr	r2, [sp, #4]
 8005e3a:	2a00      	cmp	r2, #0
 8005e3c:	f43f aea9 	beq.w	8005b92 <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 8005e40:	9a01      	ldr	r2, [sp, #4]
 8005e42:	3a01      	subs	r2, #1
 8005e44:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8005e46:	9a01      	ldr	r2, [sp, #4]
 8005e48:	2a00      	cmp	r2, #0
 8005e4a:	d1f9      	bne.n	8005e40 <HAL_ADC_ConfigChannel+0x400>
 8005e4c:	e6a1      	b.n	8005b92 <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e4e:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8005e52:	f47f ae9e 	bne.w	8005b92 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e56:	490d      	ldr	r1, [pc, #52]	; (8005e8c <HAL_ADC_ConfigChannel+0x44c>)
 8005e58:	428a      	cmp	r2, r1
 8005e5a:	f47f ae9a 	bne.w	8005b92 <HAL_ADC_ConfigChannel+0x152>
 8005e5e:	68aa      	ldr	r2, [r5, #8]
 8005e60:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005e64:	4332      	orrs	r2, r6
 8005e66:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005e6a:	60aa      	str	r2, [r5, #8]
}
 8005e6c:	e697      	b.n	8005b9e <HAL_ADC_ConfigChannel+0x15e>
 8005e6e:	480a      	ldr	r0, [pc, #40]	; (8005e98 <HAL_ADC_ConfigChannel+0x458>)
 8005e70:	e714      	b.n	8005c9c <HAL_ADC_ConfigChannel+0x25c>
 8005e72:	2402      	movs	r4, #2
 8005e74:	e700      	b.n	8005c78 <HAL_ADC_ConfigChannel+0x238>
 8005e76:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8005e7a:	e6f0      	b.n	8005c5e <HAL_ADC_ConfigChannel+0x21e>
 8005e7c:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8005e80:	e70c      	b.n	8005c9c <HAL_ADC_ConfigChannel+0x25c>
 8005e82:	2502      	movs	r5, #2
 8005e84:	e79c      	b.n	8005dc0 <HAL_ADC_ConfigChannel+0x380>
 8005e86:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8005e8a:	e78e      	b.n	8005daa <HAL_ADC_ConfigChannel+0x36a>
 8005e8c:	58026000 	.word	0x58026000
 8005e90:	24000000 	.word	0x24000000
 8005e94:	053e2d63 	.word	0x053e2d63
 8005e98:	fe500000 	.word	0xfe500000

08005e9c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005e9c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005e9e:	4a5a      	ldr	r2, [pc, #360]	; (8006008 <ADC_ConfigureBoostMode+0x16c>)
{
 8005ea0:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005ea2:	6803      	ldr	r3, [r0, #0]
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d029      	beq.n	8005efc <ADC_ConfigureBoostMode+0x60>
 8005ea8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d025      	beq.n	8005efc <ADC_ConfigureBoostMode+0x60>
 8005eb0:	4b56      	ldr	r3, [pc, #344]	; (800600c <ADC_ConfigureBoostMode+0x170>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8005eb8:	bf14      	ite	ne
 8005eba:	2301      	movne	r3, #1
 8005ebc:	2300      	moveq	r3, #0
 8005ebe:	b333      	cbz	r3, 8005f0e <ADC_ConfigureBoostMode+0x72>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005ec0:	f002 f8a0 	bl	8008004 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8005ec4:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8005ec6:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8005ec8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ecc:	f000 808b 	beq.w	8005fe6 <ADC_ConfigureBoostMode+0x14a>
 8005ed0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ed4:	d06f      	beq.n	8005fb6 <ADC_ConfigureBoostMode+0x11a>
 8005ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eda:	f000 8084 	beq.w	8005fe6 <ADC_ConfigureBoostMode+0x14a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005ede:	f7ff fd97 	bl	8005a10 <HAL_GetREVID>
 8005ee2:	f241 0303 	movw	r3, #4099	; 0x1003
 8005ee6:	4298      	cmp	r0, r3
 8005ee8:	d84e      	bhi.n	8005f88 <ADC_ConfigureBoostMode+0xec>
  {
    if (freq > 20000000UL)
 8005eea:	4b49      	ldr	r3, [pc, #292]	; (8006010 <ADC_ConfigureBoostMode+0x174>)
 8005eec:	429d      	cmp	r5, r3
 8005eee:	d92d      	bls.n	8005f4c <ADC_ConfigureBoostMode+0xb0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005ef0:	6822      	ldr	r2, [r4, #0]
 8005ef2:	6893      	ldr	r3, [r2, #8]
 8005ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ef8:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005efa:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005efc:	4b45      	ldr	r3, [pc, #276]	; (8006014 <ADC_ConfigureBoostMode+0x178>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8005f04:	bf14      	ite	ne
 8005f06:	2301      	movne	r3, #1
 8005f08:	2300      	moveq	r3, #0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1d8      	bne.n	8005ec0 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005f0e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005f12:	f003 f98b 	bl	800922c <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8005f16:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005f18:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8005f1a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005f1e:	d06c      	beq.n	8005ffa <ADC_ConfigureBoostMode+0x15e>
 8005f20:	d808      	bhi.n	8005f34 <ADC_ConfigureBoostMode+0x98>
 8005f22:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005f26:	d050      	beq.n	8005fca <ADC_ConfigureBoostMode+0x12e>
 8005f28:	d916      	bls.n	8005f58 <ADC_ConfigureBoostMode+0xbc>
 8005f2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f2e:	d1d6      	bne.n	8005ede <ADC_ConfigureBoostMode+0x42>
        freq /= 32UL;
 8005f30:	0945      	lsrs	r5, r0, #5
        break;
 8005f32:	e7d4      	b.n	8005ede <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8005f34:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005f38:	d045      	beq.n	8005fc6 <ADC_ConfigureBoostMode+0x12a>
 8005f3a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005f3e:	d1ce      	bne.n	8005ede <ADC_ConfigureBoostMode+0x42>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005f40:	f7ff fd66 	bl	8005a10 <HAL_GetREVID>
 8005f44:	f241 0303 	movw	r3, #4099	; 0x1003
 8005f48:	4298      	cmp	r0, r3
 8005f4a:	d840      	bhi.n	8005fce <ADC_ConfigureBoostMode+0x132>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005f4c:	6822      	ldr	r2, [r4, #0]
 8005f4e:	6893      	ldr	r3, [r2, #8]
 8005f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f54:	6093      	str	r3, [r2, #8]
}
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8005f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f5c:	d006      	beq.n	8005f6c <ADC_ConfigureBoostMode+0xd0>
 8005f5e:	d90a      	bls.n	8005f76 <ADC_ConfigureBoostMode+0xda>
 8005f60:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005f64:	d002      	beq.n	8005f6c <ADC_ConfigureBoostMode+0xd0>
 8005f66:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005f6a:	d1b8      	bne.n	8005ede <ADC_ConfigureBoostMode+0x42>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005f6c:	0c9b      	lsrs	r3, r3, #18
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8005f74:	e7b3      	b.n	8005ede <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8005f76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f7a:	d0f7      	beq.n	8005f6c <ADC_ConfigureBoostMode+0xd0>
 8005f7c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f80:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8005f84:	d0f2      	beq.n	8005f6c <ADC_ConfigureBoostMode+0xd0>
 8005f86:	e7aa      	b.n	8005ede <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8005f88:	4b23      	ldr	r3, [pc, #140]	; (8006018 <ADC_ConfigureBoostMode+0x17c>)
 8005f8a:	429d      	cmp	r5, r3
 8005f8c:	d805      	bhi.n	8005f9a <ADC_ConfigureBoostMode+0xfe>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005f8e:	6822      	ldr	r2, [r4, #0]
 8005f90:	6893      	ldr	r3, [r2, #8]
 8005f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f96:	6093      	str	r3, [r2, #8]
}
 8005f98:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8005f9a:	4b20      	ldr	r3, [pc, #128]	; (800601c <ADC_ConfigureBoostMode+0x180>)
 8005f9c:	429d      	cmp	r5, r3
 8005f9e:	d91a      	bls.n	8005fd6 <ADC_ConfigureBoostMode+0x13a>
    else if (freq <= 25000000UL)
 8005fa0:	4b1f      	ldr	r3, [pc, #124]	; (8006020 <ADC_ConfigureBoostMode+0x184>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005fa2:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8005fa4:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005fa6:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8005fa8:	d829      	bhi.n	8005ffe <ADC_ConfigureBoostMode+0x162>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fb2:	6093      	str	r3, [r2, #8]
}
 8005fb4:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8005fb6:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005fb8:	f7ff fd2a 	bl	8005a10 <HAL_GetREVID>
 8005fbc:	f241 0303 	movw	r3, #4099	; 0x1003
 8005fc0:	4298      	cmp	r0, r3
 8005fc2:	d8e1      	bhi.n	8005f88 <ADC_ConfigureBoostMode+0xec>
 8005fc4:	e791      	b.n	8005eea <ADC_ConfigureBoostMode+0x4e>
        freq /= 128UL;
 8005fc6:	09c5      	lsrs	r5, r0, #7
        break;
 8005fc8:	e789      	b.n	8005ede <ADC_ConfigureBoostMode+0x42>
        freq /= 16UL;
 8005fca:	0905      	lsrs	r5, r0, #4
        break;
 8005fcc:	e787      	b.n	8005ede <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8005fce:	4b12      	ldr	r3, [pc, #72]	; (8006018 <ADC_ConfigureBoostMode+0x17c>)
 8005fd0:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8005fd4:	d2db      	bcs.n	8005f8e <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005fd6:	6822      	ldr	r2, [r4, #0]
 8005fd8:	6893      	ldr	r3, [r2, #8]
 8005fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe2:	6093      	str	r3, [r2, #8]
}
 8005fe4:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005fe6:	0c1b      	lsrs	r3, r3, #16
 8005fe8:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005fec:	f7ff fd10 	bl	8005a10 <HAL_GetREVID>
 8005ff0:	f241 0303 	movw	r3, #4099	; 0x1003
 8005ff4:	4298      	cmp	r0, r3
 8005ff6:	d8c7      	bhi.n	8005f88 <ADC_ConfigureBoostMode+0xec>
 8005ff8:	e777      	b.n	8005eea <ADC_ConfigureBoostMode+0x4e>
        freq /= 64UL;
 8005ffa:	0985      	lsrs	r5, r0, #6
        break;
 8005ffc:	e76f      	b.n	8005ede <ADC_ConfigureBoostMode+0x42>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005ffe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006002:	6093      	str	r3, [r2, #8]
}
 8006004:	bd38      	pop	{r3, r4, r5, pc}
 8006006:	bf00      	nop
 8006008:	40022000 	.word	0x40022000
 800600c:	58026300 	.word	0x58026300
 8006010:	01312d00 	.word	0x01312d00
 8006014:	40022300 	.word	0x40022300
 8006018:	00bebc21 	.word	0x00bebc21
 800601c:	017d7841 	.word	0x017d7841
 8006020:	02faf081 	.word	0x02faf081

08006024 <HAL_ADC_Init>:
{
 8006024:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8006026:	2300      	movs	r3, #0
{
 8006028:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 800602a:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 800602c:	2800      	cmp	r0, #0
 800602e:	f000 80d0 	beq.w	80061d2 <HAL_ADC_Init+0x1ae>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006032:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8006034:	4604      	mov	r4, r0
 8006036:	2d00      	cmp	r5, #0
 8006038:	f000 80ba 	beq.w	80061b0 <HAL_ADC_Init+0x18c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800603c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800603e:	6893      	ldr	r3, [r2, #8]
 8006040:	009d      	lsls	r5, r3, #2
 8006042:	d503      	bpl.n	800604c <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006044:	6891      	ldr	r1, [r2, #8]
 8006046:	4b71      	ldr	r3, [pc, #452]	; (800620c <HAL_ADC_Init+0x1e8>)
 8006048:	400b      	ands	r3, r1
 800604a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800604c:	6893      	ldr	r3, [r2, #8]
 800604e:	00d8      	lsls	r0, r3, #3
 8006050:	d416      	bmi.n	8006080 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006052:	4b6f      	ldr	r3, [pc, #444]	; (8006210 <HAL_ADC_Init+0x1ec>)
 8006054:	4d6f      	ldr	r5, [pc, #444]	; (8006214 <HAL_ADC_Init+0x1f0>)
 8006056:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8006058:	6890      	ldr	r0, [r2, #8]
 800605a:	099b      	lsrs	r3, r3, #6
 800605c:	496e      	ldr	r1, [pc, #440]	; (8006218 <HAL_ADC_Init+0x1f4>)
 800605e:	fba5 5303 	umull	r5, r3, r5, r3
 8006062:	4001      	ands	r1, r0
 8006064:	099b      	lsrs	r3, r3, #6
 8006066:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800606a:	3301      	adds	r3, #1
 800606c:	6091      	str	r1, [r2, #8]
 800606e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006070:	9b01      	ldr	r3, [sp, #4]
 8006072:	b12b      	cbz	r3, 8006080 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8006074:	9b01      	ldr	r3, [sp, #4]
 8006076:	3b01      	subs	r3, #1
 8006078:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800607a:	9b01      	ldr	r3, [sp, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1f9      	bne.n	8006074 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006080:	6893      	ldr	r3, [r2, #8]
 8006082:	00d9      	lsls	r1, r3, #3
 8006084:	d424      	bmi.n	80060d0 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006086:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006088:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800608a:	f043 0310 	orr.w	r3, r3, #16
 800608e:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006090:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006092:	432b      	orrs	r3, r5
 8006094:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006096:	6893      	ldr	r3, [r2, #8]
 8006098:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800609c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800609e:	d11d      	bne.n	80060dc <HAL_ADC_Init+0xb8>
 80060a0:	06db      	lsls	r3, r3, #27
 80060a2:	d41b      	bmi.n	80060dc <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 80060a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80060a6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80060aa:	f043 0302 	orr.w	r3, r3, #2
 80060ae:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060b0:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80060b2:	07de      	lsls	r6, r3, #31
 80060b4:	d428      	bmi.n	8006108 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060b6:	4b59      	ldr	r3, [pc, #356]	; (800621c <HAL_ADC_Init+0x1f8>)
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d017      	beq.n	80060ec <HAL_ADC_Init+0xc8>
 80060bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d013      	beq.n	80060ec <HAL_ADC_Init+0xc8>
 80060c4:	4b56      	ldr	r3, [pc, #344]	; (8006220 <HAL_ADC_Init+0x1fc>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	07d9      	lsls	r1, r3, #31
 80060ca:	d41d      	bmi.n	8006108 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80060cc:	4a55      	ldr	r2, [pc, #340]	; (8006224 <HAL_ADC_Init+0x200>)
 80060ce:	e015      	b.n	80060fc <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060d0:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060d2:	2500      	movs	r5, #0
 80060d4:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80060d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80060da:	d0e1      	beq.n	80060a0 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80060de:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060e0:	f043 0310 	orr.w	r3, r3, #16
}
 80060e4:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060e6:	6563      	str	r3, [r4, #84]	; 0x54
}
 80060e8:	b002      	add	sp, #8
 80060ea:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060ec:	4a4b      	ldr	r2, [pc, #300]	; (800621c <HAL_ADC_Init+0x1f8>)
 80060ee:	4b4e      	ldr	r3, [pc, #312]	; (8006228 <HAL_ADC_Init+0x204>)
 80060f0:	6892      	ldr	r2, [r2, #8]
 80060f2:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	07d8      	lsls	r0, r3, #31
 80060f8:	d406      	bmi.n	8006108 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80060fa:	4a4c      	ldr	r2, [pc, #304]	; (800622c <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80060fc:	6893      	ldr	r3, [r2, #8]
 80060fe:	6861      	ldr	r1, [r4, #4]
 8006100:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006104:	430b      	orrs	r3, r1
 8006106:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006108:	f7ff fc82 	bl	8005a10 <HAL_GetREVID>
 800610c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006110:	68a1      	ldr	r1, [r4, #8]
 8006112:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006114:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006116:	d851      	bhi.n	80061bc <HAL_ADC_Init+0x198>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006118:	7d66      	ldrb	r6, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800611a:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800611c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800611e:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
 8006122:	4302      	orrs	r2, r0
 8006124:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006126:	2b01      	cmp	r3, #1
 8006128:	d103      	bne.n	8006132 <HAL_ADC_Init+0x10e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800612a:	6a23      	ldr	r3, [r4, #32]
 800612c:	3b01      	subs	r3, #1
 800612e:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006134:	b123      	cbz	r3, 8006140 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006136:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800613a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800613c:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800613e:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	493b      	ldr	r1, [pc, #236]	; (8006230 <HAL_ADC_Init+0x20c>)
 8006144:	68d8      	ldr	r0, [r3, #12]
 8006146:	4001      	ands	r1, r0
 8006148:	430a      	orrs	r2, r1
 800614a:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006152:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006154:	d11c      	bne.n	8006190 <HAL_ADC_Init+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006156:	0712      	lsls	r2, r2, #28
 8006158:	d41a      	bmi.n	8006190 <HAL_ADC_Init+0x16c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800615a:	68d9      	ldr	r1, [r3, #12]
 800615c:	4a35      	ldr	r2, [pc, #212]	; (8006234 <HAL_ADC_Init+0x210>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800615e:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006160:	400a      	ands	r2, r1
 8006162:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006164:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 8006168:	430a      	orrs	r2, r1
 800616a:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 800616c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8006170:	2a01      	cmp	r2, #1
 8006172:	d03a      	beq.n	80061ea <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	f022 0201 	bic.w	r2, r2, #1
 800617a:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800617c:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800617e:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006182:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006186:	430a      	orrs	r2, r1
 8006188:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800618a:	f7ff fe87 	bl	8005e9c <ADC_ConfigureBoostMode>
 800618e:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006190:	68e2      	ldr	r2, [r4, #12]
 8006192:	2a01      	cmp	r2, #1
 8006194:	d021      	beq.n	80061da <HAL_ADC_Init+0x1b6>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006198:	f022 020f 	bic.w	r2, r2, #15
 800619c:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800619e:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 80061a0:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80061a2:	f023 0303 	bic.w	r3, r3, #3
 80061a6:	f043 0301 	orr.w	r3, r3, #1
 80061aa:	6563      	str	r3, [r4, #84]	; 0x54
}
 80061ac:	b002      	add	sp, #8
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80061b0:	f7fd ff04 	bl	8003fbc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80061b4:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80061b6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80061ba:	e73f      	b.n	800603c <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80061bc:	2910      	cmp	r1, #16
 80061be:	d1ab      	bne.n	8006118 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80061c0:	7d60      	ldrb	r0, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80061c2:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80061c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80061c6:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 80061ca:	430a      	orrs	r2, r1
 80061cc:	f042 021c 	orr.w	r2, r2, #28
 80061d0:	e7a9      	b.n	8006126 <HAL_ADC_Init+0x102>
    return HAL_ERROR;
 80061d2:	2501      	movs	r5, #1
}
 80061d4:	4628      	mov	r0, r5
 80061d6:	b002      	add	sp, #8
 80061d8:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80061da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061dc:	69a2      	ldr	r2, [r4, #24]
 80061de:	f021 010f 	bic.w	r1, r1, #15
 80061e2:	3a01      	subs	r2, #1
 80061e4:	430a      	orrs	r2, r1
 80061e6:	631a      	str	r2, [r3, #48]	; 0x30
 80061e8:	e7d9      	b.n	800619e <HAL_ADC_Init+0x17a>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80061ea:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 80061ee:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80061f0:	3901      	subs	r1, #1
 80061f2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80061f4:	4332      	orrs	r2, r6
 80061f6:	691e      	ldr	r6, [r3, #16]
 80061f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80061fc:	490e      	ldr	r1, [pc, #56]	; (8006238 <HAL_ADC_Init+0x214>)
 80061fe:	4302      	orrs	r2, r0
 8006200:	4031      	ands	r1, r6
 8006202:	430a      	orrs	r2, r1
 8006204:	f042 0201 	orr.w	r2, r2, #1
 8006208:	611a      	str	r2, [r3, #16]
 800620a:	e7b7      	b.n	800617c <HAL_ADC_Init+0x158>
 800620c:	5fffffc0 	.word	0x5fffffc0
 8006210:	24000000 	.word	0x24000000
 8006214:	053e2d63 	.word	0x053e2d63
 8006218:	6fffffc0 	.word	0x6fffffc0
 800621c:	40022000 	.word	0x40022000
 8006220:	58026000 	.word	0x58026000
 8006224:	58026300 	.word	0x58026300
 8006228:	40022100 	.word	0x40022100
 800622c:	40022300 	.word	0x40022300
 8006230:	fff0c003 	.word	0xfff0c003
 8006234:	ffffbffc 	.word	0xffffbffc
 8006238:	fc00f81e 	.word	0xfc00f81e

0800623c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800623c:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800623e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8006242:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006244:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8006246:	2a01      	cmp	r2, #1
 8006248:	d04d      	beq.n	80062e6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800624a:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800624c:	4c2b      	ldr	r4, [pc, #172]	; (80062fc <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800624e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8006250:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006252:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006254:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006256:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8006258:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800625c:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800625e:	d008      	beq.n	8006272 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006260:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006266:	f041 0120 	orr.w	r1, r1, #32
 800626a:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800626c:	b01a      	add	sp, #104	; 0x68
 800626e:	bcf0      	pop	{r4, r5, r6, r7}
 8006270:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006272:	4c23      	ldr	r4, [pc, #140]	; (8006300 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8006274:	68a2      	ldr	r2, [r4, #8]
 8006276:	0752      	lsls	r2, r2, #29
 8006278:	d50b      	bpl.n	8006292 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800627a:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800627c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800627e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006280:	f042 0220 	orr.w	r2, r2, #32
 8006284:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800628c:	b01a      	add	sp, #104	; 0x68
 800628e:	bcf0      	pop	{r4, r5, r6, r7}
 8006290:	4770      	bx	lr
 8006292:	68a8      	ldr	r0, [r5, #8]
 8006294:	f010 0004 	ands.w	r0, r0, #4
 8006298:	d1f0      	bne.n	800627c <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800629a:	b1c6      	cbz	r6, 80062ce <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800629c:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006308 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80062a0:	684f      	ldr	r7, [r1, #4]
 80062a2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80062a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80062aa:	433a      	orrs	r2, r7
 80062ac:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062b0:	68ad      	ldr	r5, [r5, #8]
 80062b2:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062b4:	432a      	orrs	r2, r5
 80062b6:	07d4      	lsls	r4, r2, #31
 80062b8:	d413      	bmi.n	80062e2 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 80062ba:	688a      	ldr	r2, [r1, #8]
 80062bc:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80062c0:	4910      	ldr	r1, [pc, #64]	; (8006304 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80062c2:	4316      	orrs	r6, r2
 80062c4:	4021      	ands	r1, r4
 80062c6:	430e      	orrs	r6, r1
 80062c8:	f8cc 6008 	str.w	r6, [ip, #8]
 80062cc:	e7db      	b.n	8006286 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80062ce:	490e      	ldr	r1, [pc, #56]	; (8006308 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 80062d0:	688a      	ldr	r2, [r1, #8]
 80062d2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80062d6:	608a      	str	r2, [r1, #8]
 80062d8:	68a8      	ldr	r0, [r5, #8]
 80062da:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062dc:	4302      	orrs	r2, r0
 80062de:	07d0      	lsls	r0, r2, #31
 80062e0:	d505      	bpl.n	80062ee <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062e2:	2000      	movs	r0, #0
 80062e4:	e7cf      	b.n	8006286 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80062e6:	2002      	movs	r0, #2
}
 80062e8:	b01a      	add	sp, #104	; 0x68
 80062ea:	bcf0      	pop	{r4, r5, r6, r7}
 80062ec:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80062ee:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062f0:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80062f2:	4a04      	ldr	r2, [pc, #16]	; (8006304 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80062f4:	4022      	ands	r2, r4
 80062f6:	608a      	str	r2, [r1, #8]
 80062f8:	e7c5      	b.n	8006286 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80062fa:	bf00      	nop
 80062fc:	40022000 	.word	0x40022000
 8006300:	40022100 	.word	0x40022100
 8006304:	fffff0e0 	.word	0xfffff0e0
 8006308:	40022300 	.word	0x40022300

0800630c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800630c:	4907      	ldr	r1, [pc, #28]	; (800632c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800630e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8006310:	4b07      	ldr	r3, [pc, #28]	; (8006330 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006312:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006314:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006318:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800631a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800631e:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006320:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006324:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8006326:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8006328:	60cb      	str	r3, [r1, #12]
 800632a:	4770      	bx	lr
 800632c:	e000ed00 	.word	0xe000ed00
 8006330:	05fa0000 	.word	0x05fa0000

08006334 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006334:	4b19      	ldr	r3, [pc, #100]	; (800639c <HAL_NVIC_SetPriority+0x68>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800633c:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800633e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006342:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006344:	2d04      	cmp	r5, #4
 8006346:	bf28      	it	cs
 8006348:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800634a:	2c06      	cmp	r4, #6
 800634c:	d919      	bls.n	8006382 <HAL_NVIC_SetPriority+0x4e>
 800634e:	3b03      	subs	r3, #3
 8006350:	f04f 34ff 	mov.w	r4, #4294967295
 8006354:	409c      	lsls	r4, r3
 8006356:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800635a:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800635e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006360:	fa04 f405 	lsl.w	r4, r4, r5
 8006364:	ea21 0104 	bic.w	r1, r1, r4
 8006368:	fa01 f103 	lsl.w	r1, r1, r3
 800636c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006370:	db0a      	blt.n	8006388 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006372:	0109      	lsls	r1, r1, #4
 8006374:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <HAL_NVIC_SetPriority+0x6c>)
 8006376:	b2c9      	uxtb	r1, r1
 8006378:	4403      	add	r3, r0
 800637a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800637e:	bc30      	pop	{r4, r5}
 8006380:	4770      	bx	lr
 8006382:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006384:	4613      	mov	r3, r2
 8006386:	e7e8      	b.n	800635a <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006388:	f000 000f 	and.w	r0, r0, #15
 800638c:	0109      	lsls	r1, r1, #4
 800638e:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <HAL_NVIC_SetPriority+0x70>)
 8006390:	b2c9      	uxtb	r1, r1
 8006392:	4403      	add	r3, r0
 8006394:	7619      	strb	r1, [r3, #24]
 8006396:	bc30      	pop	{r4, r5}
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	e000ed00 	.word	0xe000ed00
 80063a0:	e000e100 	.word	0xe000e100
 80063a4:	e000ecfc 	.word	0xe000ecfc

080063a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80063a8:	2800      	cmp	r0, #0
 80063aa:	db07      	blt.n	80063bc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063ac:	2301      	movs	r3, #1
 80063ae:	f000 011f 	and.w	r1, r0, #31
 80063b2:	4a03      	ldr	r2, [pc, #12]	; (80063c0 <HAL_NVIC_EnableIRQ+0x18>)
 80063b4:	0940      	lsrs	r0, r0, #5
 80063b6:	408b      	lsls	r3, r1
 80063b8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	e000e100 	.word	0xe000e100

080063c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063c4:	3801      	subs	r0, #1
 80063c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80063ca:	d20d      	bcs.n	80063e8 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063cc:	4b07      	ldr	r3, [pc, #28]	; (80063ec <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063ce:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063d0:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063d2:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063d4:	25f0      	movs	r5, #240	; 0xf0
 80063d6:	4c06      	ldr	r4, [pc, #24]	; (80063f0 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063d8:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063da:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063dc:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063e2:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80063e4:	bc30      	pop	{r4, r5}
 80063e6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80063e8:	2001      	movs	r0, #1
 80063ea:	4770      	bx	lr
 80063ec:	e000e010 	.word	0xe000e010
 80063f0:	e000ed00 	.word	0xe000ed00

080063f4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80063f4:	b470      	push	{r4, r5, r6}
 80063f6:	9c03      	ldr	r4, [sp, #12]

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80063f8:	e9d0 5600 	ldrd	r5, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80063fc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8006400:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006402:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006406:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 800640a:	ea43 0304 	orr.w	r3, r3, r4
 800640e:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006410:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006412:	d008      	beq.n	8006426 <DMA2D_SetConfig+0x32>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8006414:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8006418:	d002      	beq.n	8006420 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800641a:	60e9      	str	r1, [r5, #12]
  }
}
 800641c:	bc70      	pop	{r4, r5, r6}
 800641e:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8006420:	6169      	str	r1, [r5, #20]
}
 8006422:	bc70      	pop	{r4, r5, r6}
 8006424:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006426:	6883      	ldr	r3, [r0, #8]
 8006428:	b1b3      	cbz	r3, 8006458 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800642a:	2b01      	cmp	r3, #1
 800642c:	d017      	beq.n	800645e <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800642e:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006430:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006434:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006438:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800643a:	d01e      	beq.n	800647a <DMA2D_SetConfig+0x86>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800643c:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800643e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006442:	d00f      	beq.n	8006464 <DMA2D_SetConfig+0x70>
      tmp2 = (tmp2 >> 20U);
 8006444:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 8006446:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006448:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 800644a:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800644c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8006450:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8006454:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006458:	63a9      	str	r1, [r5, #56]	; 0x38
}
 800645a:	bc70      	pop	{r4, r5, r6}
 800645c:	4770      	bx	lr
      tmp = (tmp3 | tmp2 | tmp4);
 800645e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006462:	e7f9      	b.n	8006458 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 8006464:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 8006466:	0ae4      	lsrs	r4, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006468:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 800646a:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800646c:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8006470:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8006474:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8006478:	e7ee      	b.n	8006458 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 800647a:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 800647c:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800647e:	02c9      	lsls	r1, r1, #11
 8006480:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8006484:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8006488:	e7e6      	b.n	8006458 <DMA2D_SetConfig+0x64>
 800648a:	bf00      	nop

0800648c <HAL_DMA2D_MspInit>:
}
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop

08006490 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8006490:	2800      	cmp	r0, #0
 8006492:	d036      	beq.n	8006502 <HAL_DMA2D_Init+0x72>
{
 8006494:	b570      	push	{r4, r5, r6, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006496:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800649a:	4604      	mov	r4, r0
 800649c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80064a0:	b353      	cbz	r3, 80064f8 <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80064a2:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80064a4:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80064a6:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80064a8:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80064aa:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80064ae:	4916      	ldr	r1, [pc, #88]	; (8006508 <HAL_DMA2D_Init+0x78>)
 80064b0:	681e      	ldr	r6, [r3, #0]
 80064b2:	6862      	ldr	r2, [r4, #4]
 80064b4:	4031      	ands	r1, r6
 80064b6:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80064b8:	4814      	ldr	r0, [pc, #80]	; (800650c <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80064ba:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80064bc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80064be:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80064c0:	69a1      	ldr	r1, [r4, #24]
 80064c2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80064c4:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80064c6:	4912      	ldr	r1, [pc, #72]	; (8006510 <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80064c8:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80064ca:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80064cc:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80064ce:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80064d0:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80064d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064d4:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80064d6:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80064d8:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80064da:	0552      	lsls	r2, r2, #21
 80064dc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80064de:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80064e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80064e2:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 80064e6:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80064e8:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80064ec:	430a      	orrs	r2, r1
 80064ee:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80064f0:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80064f2:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 80064f8:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 80064fc:	f7ff ffc6 	bl	800648c <HAL_DMA2D_MspInit>
 8006500:	e7cf      	b.n	80064a2 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 8006502:	2001      	movs	r0, #1
}
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	fff8ffbf 	.word	0xfff8ffbf
 800650c:	fffffef8 	.word	0xfffffef8
 8006510:	ffff0000 	.word	0xffff0000

08006514 <HAL_DMA2D_Start>:
{
 8006514:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8006516:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
{
 800651a:	b083      	sub	sp, #12
  __HAL_LOCK(hdma2d);
 800651c:	2d01      	cmp	r5, #1
 800651e:	d011      	beq.n	8006544 <HAL_DMA2D_Start+0x30>
 8006520:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006522:	9f08      	ldr	r7, [sp, #32]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006524:	2502      	movs	r5, #2
 8006526:	4604      	mov	r4, r0
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006528:	9700      	str	r7, [sp, #0]
  __HAL_LOCK(hdma2d);
 800652a:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800652e:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006532:	f7ff ff5f 	bl	80063f4 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8006536:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8006538:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 800653a:	6813      	ldr	r3, [r2, #0]
 800653c:	4333      	orrs	r3, r6
 800653e:	6013      	str	r3, [r2, #0]
}
 8006540:	b003      	add	sp, #12
 8006542:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma2d);
 8006544:	2002      	movs	r0, #2
}
 8006546:	b003      	add	sp, #12
 8006548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800654a:	bf00      	nop

0800654c <HAL_DMA2D_PollForTransfer>:
{
 800654c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800654e:	2300      	movs	r3, #0
{
 8006550:	b082      	sub	sp, #8
 8006552:	4605      	mov	r5, r0
 8006554:	460c      	mov	r4, r1
  __IO uint32_t isrflags = 0x0U;
 8006556:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006558:	6803      	ldr	r3, [r0, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	07d2      	lsls	r2, r2, #31
 800655e:	d40f      	bmi.n	8006580 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006560:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006562:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006564:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 8006566:	0692      	lsls	r2, r2, #26
 8006568:	d433      	bmi.n	80065d2 <HAL_DMA2D_PollForTransfer+0x86>
  __HAL_UNLOCK(hdma2d);
 800656a:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800656c:	2412      	movs	r4, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800656e:	2101      	movs	r1, #1
  return HAL_OK;
 8006570:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006572:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8006574:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006578:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
}
 800657c:	b002      	add	sp, #8
 800657e:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8006580:	f7ff fa2e 	bl	80059e0 <HAL_GetTick>
 8006584:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006586:	682b      	ldr	r3, [r5, #0]
 8006588:	e001      	b.n	800658e <HAL_DMA2D_PollForTransfer+0x42>
      if (Timeout != HAL_MAX_DELAY)
 800658a:	1c60      	adds	r0, r4, #1
 800658c:	d148      	bne.n	8006620 <HAL_DMA2D_PollForTransfer+0xd4>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	0791      	lsls	r1, r2, #30
 8006592:	d4e5      	bmi.n	8006560 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006598:	9a01      	ldr	r2, [sp, #4]
 800659a:	f012 0f21 	tst.w	r2, #33	; 0x21
 800659e:	d0f4      	beq.n	800658a <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80065a0:	9a01      	ldr	r2, [sp, #4]
 80065a2:	0696      	lsls	r6, r2, #26
 80065a4:	d503      	bpl.n	80065ae <HAL_DMA2D_PollForTransfer+0x62>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80065a6:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80065a8:	f042 0202 	orr.w	r2, r2, #2
 80065ac:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80065ae:	9a01      	ldr	r2, [sp, #4]
 80065b0:	07d4      	lsls	r4, r2, #31
 80065b2:	d503      	bpl.n	80065bc <HAL_DMA2D_PollForTransfer+0x70>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80065b4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80065b6:	f042 0201 	orr.w	r2, r2, #1
 80065ba:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80065bc:	2421      	movs	r4, #33	; 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80065be:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 80065c0:	2200      	movs	r2, #0
        return HAL_ERROR;
 80065c2:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80065c4:	609c      	str	r4, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80065c6:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 80065ca:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
}
 80065ce:	b002      	add	sp, #8
 80065d0:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 80065d2:	f7ff fa05 	bl	80059e0 <HAL_GetTick>
 80065d6:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80065d8:	682b      	ldr	r3, [r5, #0]
 80065da:	e001      	b.n	80065e0 <HAL_DMA2D_PollForTransfer+0x94>
      if (Timeout != HAL_MAX_DELAY)
 80065dc:	1c61      	adds	r1, r4, #1
 80065de:	d132      	bne.n	8006646 <HAL_DMA2D_PollForTransfer+0xfa>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	06d2      	lsls	r2, r2, #27
 80065e4:	d4c1      	bmi.n	800656a <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80065ea:	9a01      	ldr	r2, [sp, #4]
 80065ec:	f012 0f29 	tst.w	r2, #41	; 0x29
 80065f0:	d0f4      	beq.n	80065dc <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80065f2:	9a01      	ldr	r2, [sp, #4]
 80065f4:	0716      	lsls	r6, r2, #28
 80065f6:	d503      	bpl.n	8006600 <HAL_DMA2D_PollForTransfer+0xb4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80065f8:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80065fa:	f042 0204 	orr.w	r2, r2, #4
 80065fe:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006600:	9a01      	ldr	r2, [sp, #4]
 8006602:	0694      	lsls	r4, r2, #26
 8006604:	d503      	bpl.n	800660e <HAL_DMA2D_PollForTransfer+0xc2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006606:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006608:	f042 0202 	orr.w	r2, r2, #2
 800660c:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800660e:	9a01      	ldr	r2, [sp, #4]
 8006610:	07d0      	lsls	r0, r2, #31
 8006612:	d503      	bpl.n	800661c <HAL_DMA2D_PollForTransfer+0xd0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006614:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006616:	f042 0201 	orr.w	r2, r2, #1
 800661a:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800661c:	2429      	movs	r4, #41	; 0x29
 800661e:	e7ce      	b.n	80065be <HAL_DMA2D_PollForTransfer+0x72>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006620:	f7ff f9de 	bl	80059e0 <HAL_GetTick>
 8006624:	1b80      	subs	r0, r0, r6
 8006626:	42a0      	cmp	r0, r4
 8006628:	d801      	bhi.n	800662e <HAL_DMA2D_PollForTransfer+0xe2>
 800662a:	2c00      	cmp	r4, #0
 800662c:	d1ab      	bne.n	8006586 <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800662e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006630:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 8006632:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006634:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 8006638:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 800663a:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800663e:	666b      	str	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006640:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
          return HAL_TIMEOUT;
 8006644:	e79a      	b.n	800657c <HAL_DMA2D_PollForTransfer+0x30>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006646:	f7ff f9cb 	bl	80059e0 <HAL_GetTick>
 800664a:	1b80      	subs	r0, r0, r6
 800664c:	42a0      	cmp	r0, r4
 800664e:	d8ee      	bhi.n	800662e <HAL_DMA2D_PollForTransfer+0xe2>
 8006650:	2c00      	cmp	r4, #0
 8006652:	d1c1      	bne.n	80065d8 <HAL_DMA2D_PollForTransfer+0x8c>
 8006654:	e7eb      	b.n	800662e <HAL_DMA2D_PollForTransfer+0xe2>
 8006656:	bf00      	nop

08006658 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8006658:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 800665c:	2a01      	cmp	r2, #1
 800665e:	d063      	beq.n	8006728 <HAL_DMA2D_ConfigLayer+0xd0>
 8006660:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006662:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006666:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006668:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 800666c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 800666e:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006670:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 8006674:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006678:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800667a:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800667c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800667e:	0512      	lsls	r2, r2, #20
 8006680:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006682:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006686:	f1a4 0609 	sub.w	r6, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800668a:	4322      	orrs	r2, r4
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800668c:	2e01      	cmp	r6, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800668e:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006692:	d922      	bls.n	80066da <HAL_DMA2D_ConfigLayer+0x82>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006694:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006696:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800669a:	b981      	cbnz	r1, 80066be <HAL_DMA2D_ConfigLayer+0x66>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	4923      	ldr	r1, [pc, #140]	; (800672c <HAL_DMA2D_ConfigLayer+0xd4>)
 80066a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80066a2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80066a4:	4029      	ands	r1, r5
 80066a6:	430a      	orrs	r2, r1
 80066a8:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80066aa:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 80066ac:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80066ae:	2101      	movs	r1, #1
  return HAL_OK;
 80066b0:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80066b2:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 80066b6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 80066ba:	bc70      	pop	{r4, r5, r6}
 80066bc:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80066be:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80066c0:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80066c2:	d129      	bne.n	8006718 <HAL_DMA2D_ConfigLayer+0xc0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80066c4:	69e6      	ldr	r6, [r4, #28]
 80066c6:	491a      	ldr	r1, [pc, #104]	; (8006730 <HAL_DMA2D_ConfigLayer+0xd8>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80066c8:	6c05      	ldr	r5, [r0, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80066ca:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80066cc:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80066ce:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 80066d2:	430a      	orrs	r2, r1
 80066d4:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80066d6:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80066d8:	e7e8      	b.n	80066ac <HAL_DMA2D_ConfigLayer+0x54>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80066da:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80066dc:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 80066e0:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80066e2:	b161      	cbz	r1, 80066fe <HAL_DMA2D_ConfigLayer+0xa6>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80066e4:	6819      	ldr	r1, [r3, #0]
 80066e6:	4c11      	ldr	r4, [pc, #68]	; (800672c <HAL_DMA2D_ConfigLayer+0xd4>)
 80066e8:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80066ea:	6b45      	ldr	r5, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80066ec:	4034      	ands	r4, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80066ee:	6a86      	ldr	r6, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80066f0:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80066f4:	4322      	orrs	r2, r4
 80066f6:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80066f8:	610e      	str	r6, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80066fa:	620d      	str	r5, [r1, #32]
 80066fc:	e7d6      	b.n	80066ac <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80066fe:	6819      	ldr	r1, [r3, #0]
 8006700:	4c0a      	ldr	r4, [pc, #40]	; (800672c <HAL_DMA2D_ConfigLayer+0xd4>)
 8006702:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006704:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006706:	402c      	ands	r4, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006708:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800670a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800670e:	4322      	orrs	r2, r4
 8006710:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006712:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006714:	6288      	str	r0, [r1, #40]	; 0x28
 8006716:	e7c9      	b.n	80066ac <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006718:	69e5      	ldr	r5, [r4, #28]
 800671a:	4904      	ldr	r1, [pc, #16]	; (800672c <HAL_DMA2D_ConfigLayer+0xd4>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800671c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800671e:	4029      	ands	r1, r5
 8006720:	430a      	orrs	r2, r1
 8006722:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006724:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006726:	e7c1      	b.n	80066ac <HAL_DMA2D_ConfigLayer+0x54>
  __HAL_LOCK(hdma2d);
 8006728:	2002      	movs	r0, #2
}
 800672a:	4770      	bx	lr
 800672c:	00ccfff0 	.word	0x00ccfff0
 8006730:	00c0fff0 	.word	0x00c0fff0

08006734 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8006734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006738:	4605      	mov	r5, r0
 800673a:	4688      	mov	r8, r1
 800673c:	4617      	mov	r7, r2
 800673e:	4699      	mov	r9, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006740:	f7ff f94e 	bl	80059e0 <HAL_GetTick>
 8006744:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006746:	e005      	b.n	8006754 <DSI_ShortWrite+0x20>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8006748:	f7ff f94a 	bl	80059e0 <HAL_GetTick>
 800674c:	1b84      	subs	r4, r0, r6
 800674e:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8006752:	d80e      	bhi.n	8006772 <DSI_ShortWrite+0x3e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006754:	682c      	ldr	r4, [r5, #0]
 8006756:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006758:	07db      	lsls	r3, r3, #31
 800675a:	d5f5      	bpl.n	8006748 <DSI_ShortWrite+0x14>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800675c:	ea47 2109 	orr.w	r1, r7, r9, lsl #8
 8006760:	9b08      	ldr	r3, [sp, #32]

  return HAL_OK;
 8006762:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006764:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006768:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 800676c:	66e1      	str	r1, [r4, #108]	; 0x6c
}
 800676e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8006772:	2003      	movs	r0, #3
}
 8006774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006778 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop

0800677c <HAL_DSI_Init>:
  if (hdsi == NULL)
 800677c:	2800      	cmp	r0, #0
 800677e:	f000 80b3 	beq.w	80068e8 <HAL_DSI_Init+0x16c>
{
 8006782:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006784:	7c43      	ldrb	r3, [r0, #17]
{
 8006786:	b083      	sub	sp, #12
 8006788:	460d      	mov	r5, r1
 800678a:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 80a8 	beq.w	80068e2 <HAL_DSI_Init+0x166>
  __HAL_DSI_REG_ENABLE(hdsi);
 8006792:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006794:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 8006796:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006798:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800679a:	9200      	str	r2, [sp, #0]
 800679c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80067a0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80067a4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80067a8:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80067ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 80067b4:	f7ff f914 	bl	80059e0 <HAL_GetTick>
 80067b8:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80067ba:	e006      	b.n	80067ca <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80067bc:	f7ff f910 	bl	80059e0 <HAL_GetTick>
 80067c0:	1b83      	subs	r3, r0, r6
 80067c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067c6:	f200 8089 	bhi.w	80068dc <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80067d0:	04d1      	lsls	r1, r2, #19
 80067d2:	d5f3      	bpl.n	80067bc <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80067d4:	686a      	ldr	r2, [r5, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 80067d6:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80067d8:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80067dc:	682e      	ldr	r6, [r5, #0]
 80067de:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80067e0:	4942      	ldr	r1, [pc, #264]	; (80068ec <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80067e2:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 80067e6:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80067e8:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80067ea:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80067ee:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80067f2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80067f6:	430a      	orrs	r2, r1
 80067f8:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80067fc:	9001      	str	r0, [sp, #4]
 80067fe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8006802:	f042 0201 	orr.w	r2, r2, #1
 8006806:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800680a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	9301      	str	r3, [sp, #4]
 8006814:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 8006816:	f7ff f8e3 	bl	80059e0 <HAL_GetTick>
 800681a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800681c:	e005      	b.n	800682a <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800681e:	f7ff f8df 	bl	80059e0 <HAL_GetTick>
 8006822:	1b80      	subs	r0, r0, r6
 8006824:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006828:	d858      	bhi.n	80068dc <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006830:	05d2      	lsls	r2, r2, #23
 8006832:	d5f4      	bpl.n	800681e <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8006834:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006838:	f246 1ca8 	movw	ip, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800683c:	6867      	ldr	r7, [r4, #4]
  hdsi->Instance->IER[0U] = 0U;
 800683e:	2100      	movs	r1, #0
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8006840:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006844:	68e6      	ldr	r6, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006846:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800684a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800684e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006852:	f022 0203 	bic.w	r2, r2, #3
 8006856:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800685a:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800685e:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006860:	4338      	orrs	r0, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006862:	2a01      	cmp	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006864:	f040 0001 	orr.w	r0, r0, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006868:	bf38      	it	cc
 800686a:	2201      	movcc	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800686c:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8006870:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006874:	4617      	mov	r7, r2
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8006876:	f020 0003 	bic.w	r0, r0, #3
 800687a:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800687e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006882:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006884:	4332      	orrs	r2, r6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006886:	682d      	ldr	r5, [r5, #0]
 8006888:	f000 0003 	and.w	r0, r0, #3
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800688c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006890:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006892:	fb0c f505 	mul.w	r5, ip, r5
 8006896:	4a16      	ldr	r2, [pc, #88]	; (80068f0 <HAL_DSI_Init+0x174>)
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006898:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800689c:	fb02 f207 	mul.w	r2, r2, r7
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80068a0:	609e      	str	r6, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80068a2:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80068a4:	4082      	lsls	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80068a6:	ea46 060e 	orr.w	r6, r6, lr
 80068aa:	609e      	str	r6, [r3, #8]
  hdsi->State = HAL_DSI_STATE_READY;
 80068ac:	2601      	movs	r6, #1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80068ae:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80068b2:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80068b6:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80068ba:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 80068be:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80068c0:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 80068c4:	432a      	orrs	r2, r5
 80068c6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 80068ca:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80068ce:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80068d2:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 80068d4:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 80068d6:	7466      	strb	r6, [r4, #17]
}
 80068d8:	b003      	add	sp, #12
 80068da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 80068dc:	2003      	movs	r0, #3
}
 80068de:	b003      	add	sp, #12
 80068e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 80068e2:	f7ff ff49 	bl	8006778 <HAL_DSI_MspInit>
 80068e6:	e754      	b.n	8006792 <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 80068e8:	2001      	movs	r0, #1
}
 80068ea:	4770      	bx	lr
 80068ec:	fffc8603 	.word	0xfffc8603
 80068f0:	003d0900 	.word	0x003d0900

080068f4 <HAL_DSI_TearingEffectCallback>:
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop

080068f8 <HAL_DSI_EndOfRefreshCallback>:
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop

080068fc <HAL_DSI_ErrorCallback>:
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop

08006900 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006900:	6803      	ldr	r3, [r0, #0]
 8006902:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006906:	07d1      	lsls	r1, r2, #31
{
 8006908:	b510      	push	{r4, lr}
 800690a:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800690c:	d503      	bpl.n	8006916 <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800690e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006912:	07d2      	lsls	r2, r2, #31
 8006914:	d462      	bmi.n	80069dc <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8006916:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800691a:	0791      	lsls	r1, r2, #30
 800691c:	d503      	bpl.n	8006926 <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800691e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006922:	0792      	lsls	r2, r2, #30
 8006924:	d44f      	bmi.n	80069c6 <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8006926:	69a3      	ldr	r3, [r4, #24]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d04b      	beq.n	80069c4 <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800692c:	6821      	ldr	r1, [r4, #0]
 800692e:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006932:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8006936:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800693a:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800693c:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006940:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006942:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006944:	b119      	cbz	r1, 800694e <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8006946:	6961      	ldr	r1, [r4, #20]
 8006948:	f041 0101 	orr.w	r1, r1, #1
 800694c:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800694e:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8006952:	d003      	beq.n	800695c <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8006954:	6962      	ldr	r2, [r4, #20]
 8006956:	f042 0202 	orr.w	r2, r2, #2
 800695a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800695c:	07d8      	lsls	r0, r3, #31
 800695e:	d503      	bpl.n	8006968 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8006960:	6962      	ldr	r2, [r4, #20]
 8006962:	f042 0204 	orr.w	r2, r2, #4
 8006966:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8006968:	0799      	lsls	r1, r3, #30
 800696a:	d503      	bpl.n	8006974 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800696c:	6962      	ldr	r2, [r4, #20]
 800696e:	f042 0208 	orr.w	r2, r2, #8
 8006972:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8006974:	f013 0f0c 	tst.w	r3, #12
 8006978:	d003      	beq.n	8006982 <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800697a:	6962      	ldr	r2, [r4, #20]
 800697c:	f042 0210 	orr.w	r2, r2, #16
 8006980:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8006982:	06da      	lsls	r2, r3, #27
 8006984:	d503      	bpl.n	800698e <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8006986:	6962      	ldr	r2, [r4, #20]
 8006988:	f042 0220 	orr.w	r2, r2, #32
 800698c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800698e:	0698      	lsls	r0, r3, #26
 8006990:	d503      	bpl.n	800699a <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006992:	6962      	ldr	r2, [r4, #20]
 8006994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006998:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800699a:	0659      	lsls	r1, r3, #25
 800699c:	d503      	bpl.n	80069a6 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800699e:	6962      	ldr	r2, [r4, #20]
 80069a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80069a4:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80069a6:	061a      	lsls	r2, r3, #24
 80069a8:	d503      	bpl.n	80069b2 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80069aa:	6962      	ldr	r2, [r4, #20]
 80069ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b0:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80069b2:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 80069b6:	d003      	beq.n	80069c0 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80069b8:	6963      	ldr	r3, [r4, #20]
 80069ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069be:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80069c0:	6963      	ldr	r3, [r4, #20]
 80069c2:	b93b      	cbnz	r3, 80069d4 <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80069c4:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80069c6:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80069c8:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80069ca:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80069ce:	f7ff ff93 	bl	80068f8 <HAL_DSI_EndOfRefreshCallback>
 80069d2:	e7a8      	b.n	8006926 <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 80069d4:	4620      	mov	r0, r4
 80069d6:	f7ff ff91 	bl	80068fc <HAL_DSI_ErrorCallback>
}
 80069da:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80069dc:	2201      	movs	r2, #1
 80069de:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 80069e2:	f7ff ff87 	bl	80068f4 <HAL_DSI_TearingEffectCallback>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	e795      	b.n	8006916 <HAL_DSI_IRQHandler+0x16>
 80069ea:	bf00      	nop

080069ec <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80069ec:	7c03      	ldrb	r3, [r0, #16]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	f000 8113 	beq.w	8006c1a <HAL_DSI_ConfigVideoMode+0x22e>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80069f4:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 80069f6:	2201      	movs	r2, #1
{
 80069f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 80069fc:	7402      	strb	r2, [r0, #16]
  if (VidCfg->ColorCoding == DSI_RGB666)
 80069fe:	4604      	mov	r4, r0
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8006a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 8006a02:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8006a04:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8006a08:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8006a0c:	4e84      	ldr	r6, [pc, #528]	; (8006c20 <HAL_DSI_ConfigVideoMode+0x234>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8006a0e:	2803      	cmp	r0, #3
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8006a10:	4d84      	ldr	r5, [pc, #528]	; (8006c24 <HAL_DSI_ConfigVideoMode+0x238>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8006a12:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8006a16:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8006a18:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006a1c:	f022 0201 	bic.w	r2, r2, #1
 8006a20:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8006a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a26:	f022 0203 	bic.w	r2, r2, #3
 8006a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8006a2c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8006a2e:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8006a32:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8006a36:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8006a38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a3a:	ea06 0602 	and.w	r6, r6, r2
 8006a3e:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8006a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a42:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8006a46:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8006a4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8006a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a4e:	ea02 0205 	and.w	r2, r2, r5
 8006a52:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8006a54:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8006a56:	ea47 0708 	orr.w	r7, r7, r8
 8006a5a:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8006a5c:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 8006a5e:	ea06 0605 	and.w	r6, r6, r5
 8006a62:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8006a64:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8006a66:	ea45 050e 	orr.w	r5, r5, lr
 8006a6a:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8006a6c:	68dd      	ldr	r5, [r3, #12]
 8006a6e:	f025 0503 	bic.w	r5, r5, #3
 8006a72:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8006a74:	68da      	ldr	r2, [r3, #12]
 8006a76:	ea42 020c 	orr.w	r2, r2, ip
 8006a7a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006a7c:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8006a7e:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006a80:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8006a84:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006a88:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8006a8a:	ea42 0206 	orr.w	r2, r2, r6
 8006a8e:	695d      	ldr	r5, [r3, #20]
 8006a90:	ea42 0207 	orr.w	r2, r2, r7
 8006a94:	ea42 0205 	orr.w	r2, r2, r5
 8006a98:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	f022 020f 	bic.w	r2, r2, #15
 8006aa0:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8006aa2:	691a      	ldr	r2, [r3, #16]
 8006aa4:	ea42 0200 	orr.w	r2, r2, r0
 8006aa8:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006aaa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006aae:	f022 020e 	bic.w	r2, r2, #14
 8006ab2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8006ab6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006aba:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8006abe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 8006ac2:	d107      	bne.n	8006ad4 <HAL_DSI_ConfigVideoMode+0xe8>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8006ac4:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8006ac6:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8006ac8:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8006acc:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	432a      	orrs	r2, r5
 8006ad2:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8006ad4:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006ad6:	2600      	movs	r6, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8006ad8:	4a53      	ldr	r2, [pc, #332]	; (8006c28 <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8006ada:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8006adc:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8006ade:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8006ae2:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8006ae6:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8006ae8:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8006aea:	4f50      	ldr	r7, [pc, #320]	; (8006c2c <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8006aec:	4305      	orrs	r5, r0
 8006aee:	649d      	str	r5, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8006af0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006af2:	4010      	ands	r0, r2
 8006af4:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8006af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8006af8:	484d      	ldr	r0, [pc, #308]	; (8006c30 <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8006afa:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8006afe:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8006b02:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8006b04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b06:	4017      	ands	r7, r2
 8006b08:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8006b0a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8006b0c:	ea45 050e 	orr.w	r5, r5, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8006b10:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8006b14:	651d      	str	r5, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8006b16:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8006b18:	4005      	ands	r5, r0
 8006b1a:	655d      	str	r5, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8006b1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b1e:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8006b22:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8006b26:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8006b28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b2a:	4002      	ands	r2, r0
 8006b2c:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8006b2e:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8006b30:	4a3b      	ldr	r2, [pc, #236]	; (8006c20 <HAL_DSI_ConfigVideoMode+0x234>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8006b32:	ea47 070e 	orr.w	r7, r7, lr
 8006b36:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8006b38:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8006b3a:	4007      	ands	r7, r0

  return HAL_OK;
 8006b3c:	4630      	mov	r0, r6
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8006b3e:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8006b40:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006b42:	ea45 050c 	orr.w	r5, r5, ip
 8006b46:	65dd      	str	r5, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8006b48:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8006b4a:	402a      	ands	r2, r5
 8006b4c:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8006b4e:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8006b50:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8006b52:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8006b56:	4315      	orrs	r5, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8006b58:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8006b5c:	661d      	str	r5, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8006b5e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8006b60:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 8006b64:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8006b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b68:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8006b6c:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8006b70:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8006b72:	699f      	ldr	r7, [r3, #24]
 8006b74:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 8006b78:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8006b7a:	699d      	ldr	r5, [r3, #24]
 8006b7c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8006b80:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8006b84:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8006b86:	699d      	ldr	r5, [r3, #24]
 8006b88:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8006b8c:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8006b8e:	699a      	ldr	r2, [r3, #24]
 8006b90:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8006b94:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8006b98:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8006b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8006ba2:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8006ba4:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8006ba8:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8006bac:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8006bae:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8006bb0:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 8006bb4:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8006bb6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8006bb8:	ea45 050e 	orr.w	r5, r5, lr
 8006bbc:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8006bbe:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8006bc0:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8006bc4:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8006bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bc8:	ea42 020c 	orr.w	r2, r2, ip
 8006bcc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8006bce:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8006bd0:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8006bd2:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8006bd6:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8006bda:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8006bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bde:	432a      	orrs	r2, r5
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8006be0:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8006be4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8006be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006be8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006bec:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8006bee:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8006bf0:	ea45 050e 	orr.w	r5, r5, lr
 8006bf4:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8006bf6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8006bf8:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8006bfc:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8006bfe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006c00:	ea41 010c 	orr.w	r1, r1, ip
 8006c04:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8006c06:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006c08:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8006c0c:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8006c0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c10:	433a      	orrs	r2, r7
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 8006c14:	7426      	strb	r6, [r4, #16]
}
 8006c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 8006c1a:	2002      	movs	r0, #2
}
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	ffffc000 	.word	0xffffc000
 8006c24:	ffffe000 	.word	0xffffe000
 8006c28:	fffff000 	.word	0xfffff000
 8006c2c:	ffff8000 	.word	0xffff8000
 8006c30:	fffffc00 	.word	0xfffffc00

08006c34 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c34:	7c02      	ldrb	r2, [r0, #16]
 8006c36:	2a01      	cmp	r2, #1
 8006c38:	d00e      	beq.n	8006c58 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006c3a:	6802      	ldr	r2, [r0, #0]
 8006c3c:	4603      	mov	r3, r0
{
 8006c3e:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006c40:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006c42:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006c44:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 8006c48:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006c4a:	62d4      	str	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006c4c:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8006c4e:	4321      	orrs	r1, r4
 8006c50:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 8006c52:	741d      	strb	r5, [r3, #16]
}
 8006c54:	bc30      	pop	{r4, r5}
 8006c56:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006c58:	2002      	movs	r0, #2
}
 8006c5a:	4770      	bx	lr

08006c5c <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c5c:	7c03      	ldrb	r3, [r0, #16]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d021      	beq.n	8006ca6 <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8006c62:	6803      	ldr	r3, [r0, #0]
 8006c64:	2100      	movs	r1, #0
 8006c66:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8006c68:	4608      	mov	r0, r1
{
 8006c6a:	b410      	push	{r4}
 8006c6c:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 8006c6e:	9100      	str	r1, [sp, #0]
 8006c70:	685c      	ldr	r4, [r3, #4]
 8006c72:	f044 0401 	orr.w	r4, r4, #1
 8006c76:	605c      	str	r4, [r3, #4]
 8006c78:	685c      	ldr	r4, [r3, #4]
 8006c7a:	f004 0401 	and.w	r4, r4, #1
 8006c7e:	9400      	str	r4, [sp, #0]
 8006c80:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006c82:	9101      	str	r1, [sp, #4]
 8006c84:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8006c88:	f044 0408 	orr.w	r4, r4, #8
 8006c8c:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 8006c90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 8006c94:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006c96:	f003 0308 	and.w	r3, r3, #8
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	9b01      	ldr	r3, [sp, #4]
}
 8006c9e:	b003      	add	sp, #12
 8006ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ca4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006ca6:	2002      	movs	r0, #2
}
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop

08006cac <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8006cac:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006cae:	7c05      	ldrb	r5, [r0, #16]
{
 8006cb0:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8006cb2:	2d01      	cmp	r5, #1
 8006cb4:	d00a      	beq.n	8006ccc <HAL_DSI_ShortWrite+0x20>

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006cb6:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdsi);
 8006cb8:	2501      	movs	r5, #1
 8006cba:	4604      	mov	r4, r0
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006cbc:	9600      	str	r6, [sp, #0]
  __HAL_LOCK(hdsi);
 8006cbe:	7405      	strb	r5, [r0, #16]
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006cc0:	f7ff fd38 	bl	8006734 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	7423      	strb	r3, [r4, #16]

  return status;
}
 8006cc8:	b002      	add	sp, #8
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 8006ccc:	2002      	movs	r0, #2
}
 8006cce:	b002      	add	sp, #8
 8006cd0:	bd70      	pop	{r4, r5, r6, pc}
 8006cd2:	bf00      	nop

08006cd4 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8006cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd8:	4698      	mov	r8, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006cda:	7c03      	ldrb	r3, [r0, #16]
{
 8006cdc:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hdsi);
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d05e      	beq.n	8006da0 <HAL_DSI_LongWrite+0xcc>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	4607      	mov	r7, r0
 8006ce6:	4689      	mov	r9, r1
 8006ce8:	4692      	mov	sl, r2
 8006cea:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cec:	f7fe fe78 	bl	80059e0 <HAL_GetTick>
 8006cf0:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006cf2:	e005      	b.n	8006d00 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006cf4:	f7fe fe74 	bl	80059e0 <HAL_GetTick>
 8006cf8:	1b40      	subs	r0, r0, r5
 8006cfa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006cfe:	d84b      	bhi.n	8006d98 <HAL_DSI_LongWrite+0xc4>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 8006d04:	f014 0401 	ands.w	r4, r4, #1
 8006d08:	d0f4      	beq.n	8006cf4 <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	2803      	cmp	r0, #3
 8006d0e:	bf28      	it	cs
 8006d10:	2003      	movcs	r0, #3

  for (count = 0U; count < nbBytes; count++)
 8006d12:	f1b8 0f00 	cmp.w	r8, #0
 8006d16:	d046      	beq.n	8006da6 <HAL_DSI_LongWrite+0xd2>
 8006d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d1a:	1e5c      	subs	r4, r3, #1
 8006d1c:	2300      	movs	r3, #0
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006d1e:	3301      	adds	r3, #1
 8006d20:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8006d24:	00dd      	lsls	r5, r3, #3
  for (count = 0U; count < nbBytes; count++)
 8006d26:	4283      	cmp	r3, r0
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006d28:	fa02 f205 	lsl.w	r2, r2, r5
 8006d2c:	ea46 0602 	orr.w	r6, r6, r2
  for (count = 0U; count < nbBytes; count++)
 8006d30:	d3f5      	bcc.n	8006d1e <HAL_DSI_LongWrite+0x4a>
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 8006d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hdsi->Instance->GPDR = fifoword;
 8006d34:	670e      	str	r6, [r1, #112]	; 0x70
  pparams += nbBytes;
 8006d36:	181e      	adds	r6, r3, r0
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8006d38:	ebb8 0000 	subs.w	r0, r8, r0
 8006d3c:	d017      	beq.n	8006d6e <HAL_DSI_LongWrite+0x9a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006d3e:	2804      	cmp	r0, #4
 8006d40:	4684      	mov	ip, r0
 8006d42:	f04f 0500 	mov.w	r5, #0
 8006d46:	bf28      	it	cs
 8006d48:	f04f 0c04 	movcs.w	ip, #4
    fifoword = 0U;
 8006d4c:	462b      	mov	r3, r5
 8006d4e:	eb06 020c 	add.w	r2, r6, ip
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006d52:	f816 4b01 	ldrb.w	r4, [r6], #1
 8006d56:	40ac      	lsls	r4, r5
    for (count = 0U; count < nbBytes; count++)
 8006d58:	42b2      	cmp	r2, r6
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006d5a:	f105 0508 	add.w	r5, r5, #8
 8006d5e:	ea43 0304 	orr.w	r3, r3, r4
    for (count = 0U; count < nbBytes; count++)
 8006d62:	d1f6      	bne.n	8006d52 <HAL_DSI_LongWrite+0x7e>
  while (uicounter != 0U)
 8006d64:	ebb0 000c 	subs.w	r0, r0, ip
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 8006d68:	4616      	mov	r6, r2
    hdsi->Instance->GPDR = fifoword;
 8006d6a:	670b      	str	r3, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8006d6c:	d1e7      	bne.n	8006d3e <HAL_DSI_LongWrite+0x6a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8006d6e:	f108 0801 	add.w	r8, r8, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d72:	ea4a 1389 	orr.w	r3, sl, r9, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006d76:	2200      	movs	r2, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d78:	ea4f 2908 	mov.w	r9, r8, lsl #8

  return HAL_OK;
 8006d7c:	4610      	mov	r0, r2
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d7e:	46c8      	mov	r8, r9
 8006d80:	fa1f f989 	uxth.w	r9, r9
 8006d84:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 8006d88:	ea43 0309 	orr.w	r3, r3, r9
 8006d8c:	ea43 0308 	orr.w	r3, r3, r8
 8006d90:	66cb      	str	r3, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8006d92:	743a      	strb	r2, [r7, #16]
}
 8006d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_TIMEOUT;
 8006d98:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006d9a:	743c      	strb	r4, [r7, #16]
}
 8006d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8006da0:	2002      	movs	r0, #2
}
 8006da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdsi->Instance->GPDR = fifoword;
 8006da6:	670e      	str	r6, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8006da8:	e7e1      	b.n	8006d6e <HAL_DSI_LongWrite+0x9a>
 8006daa:	bf00      	nop

08006dac <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8006dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db0:	4615      	mov	r5, r2
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006db2:	7c02      	ldrb	r2, [r0, #16]
{
 8006db4:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8006db6:	2a01      	cmp	r2, #1
{
 8006db8:	9c08      	ldr	r4, [sp, #32]
  __HAL_LOCK(hdsi);
 8006dba:	d070      	beq.n	8006e9e <HAL_DSI_Read+0xf2>
 8006dbc:	461e      	mov	r6, r3
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	4607      	mov	r7, r0
 8006dc2:	4688      	mov	r8, r1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8006dc4:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8006dc6:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8006dc8:	d80d      	bhi.n	8006de6 <HAL_DSI_Read+0x3a>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8006dca:	2c06      	cmp	r4, #6
 8006dcc:	d017      	beq.n	8006dfe <HAL_DSI_Read+0x52>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8006dce:	2c04      	cmp	r4, #4
 8006dd0:	d04f      	beq.n	8006e72 <HAL_DSI_Read+0xc6>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8006dd2:	2c14      	cmp	r4, #20
 8006dd4:	d067      	beq.n	8006ea6 <HAL_DSI_Read+0xfa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8006dd6:	2c24      	cmp	r4, #36	; 0x24
 8006dd8:	d052      	beq.n	8006e80 <HAL_DSI_Read+0xd4>
      __HAL_UNLOCK(hdsi);
 8006dda:	2300      	movs	r3, #0
      return HAL_ERROR;
 8006ddc:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8006dde:	743b      	strb	r3, [r7, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8006de0:	b002      	add	sp, #8
 8006de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8006de6:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8006dea:	b2f3      	uxtb	r3, r6
 8006dec:	2237      	movs	r2, #55	; 0x37
 8006dee:	f8cd c000 	str.w	ip, [sp]
 8006df2:	f7ff fc9f 	bl	8006734 <DSI_ShortWrite>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d1ef      	bne.n	8006dda <HAL_DSI_Read+0x2e>
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8006dfa:	2c06      	cmp	r4, #6
 8006dfc:	d1e7      	bne.n	8006dce <HAL_DSI_Read+0x22>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8006e00:	6839      	ldr	r1, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e02:	021a      	lsls	r2, r3, #8
 8006e04:	ea42 1388 	orr.w	r3, r2, r8, lsl #6
 8006e08:	f043 0306 	orr.w	r3, r3, #6
 8006e0c:	66cb      	str	r3, [r1, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8006e0e:	f7fe fde7 	bl	80059e0 <HAL_GetTick>
 8006e12:	4680      	mov	r8, r0
  while (((int32_t)(datasize)) > 0)
 8006e14:	e006      	b.n	8006e24 <HAL_DSI_Read+0x78>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006e16:	f7fe fde3 	bl	80059e0 <HAL_GetTick>
 8006e1a:	eba0 0008 	sub.w	r0, r0, r8
 8006e1e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006e22:	d81b      	bhi.n	8006e5c <HAL_DSI_Read+0xb0>
  while (((int32_t)(datasize)) > 0)
 8006e24:	2e00      	cmp	r6, #0
 8006e26:	dd1f      	ble.n	8006e68 <HAL_DSI_Read+0xbc>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8006e2c:	f011 0110 	ands.w	r1, r1, #16
 8006e30:	d1f1      	bne.n	8006e16 <HAL_DSI_Read+0x6a>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006e32:	2e04      	cmp	r6, #4
 8006e34:	4630      	mov	r0, r6
      fifoword = hdsi->Instance->GPDR;
 8006e36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006e38:	bf28      	it	cs
 8006e3a:	2004      	movcs	r0, #4
      for (count = 0U; count < nbbytes; count++)
 8006e3c:	182b      	adds	r3, r5, r0
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8006e3e:	fa22 f401 	lsr.w	r4, r2, r1
 8006e42:	3108      	adds	r1, #8
 8006e44:	f805 4b01 	strb.w	r4, [r5], #1
      for (count = 0U; count < nbbytes; count++)
 8006e48:	429d      	cmp	r5, r3
 8006e4a:	d1f8      	bne.n	8006e3e <HAL_DSI_Read+0x92>
 8006e4c:	1a36      	subs	r6, r6, r0
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006e4e:	f7fe fdc7 	bl	80059e0 <HAL_GetTick>
 8006e52:	eba0 0008 	sub.w	r0, r0, r8
 8006e56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006e5a:	d9e3      	bls.n	8006e24 <HAL_DSI_Read+0x78>
      __HAL_UNLOCK(hdsi);
 8006e5c:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8006e5e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006e60:	743b      	strb	r3, [r7, #16]
}
 8006e62:	b002      	add	sp, #8
 8006e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_UNLOCK(hdsi);
 8006e68:	2000      	movs	r0, #0
 8006e6a:	7438      	strb	r0, [r7, #16]
}
 8006e6c:	b002      	add	sp, #8
 8006e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e72:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8006e76:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e78:	f043 0304 	orr.w	r3, r3, #4
 8006e7c:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8006e7e:	e7c6      	b.n	8006e0e <HAL_DSI_Read+0x62>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e82:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006e86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e88:	7852      	ldrb	r2, [r2, #1]
 8006e8a:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006e90:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e92:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006e96:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8006e9a:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8006e9c:	e7b7      	b.n	8006e0e <HAL_DSI_Read+0x62>
  __HAL_LOCK(hdsi);
 8006e9e:	2002      	movs	r0, #2
}
 8006ea0:	b002      	add	sp, #8
 8006ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006ea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006ea8:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006eac:	7811      	ldrb	r1, [r2, #0]
 8006eae:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006eb0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006eb4:	f043 0314 	orr.w	r3, r3, #20
 8006eb8:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8006eba:	e7a8      	b.n	8006e0e <HAL_DSI_Read+0x62>

08006ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ec0:	680e      	ldr	r6, [r1, #0]
{
 8006ec2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ec4:	2e00      	cmp	r6, #0
 8006ec6:	f000 80d3 	beq.w	8007070 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 8006eca:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ecc:	f8df a220 	ldr.w	sl, [pc, #544]	; 80070f0 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006ed0:	f8df b220 	ldr.w	fp, [pc, #544]	; 80070f4 <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ed4:	46b1      	mov	r9, r6
 8006ed6:	e020      	b.n	8006f1a <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 8006ed8:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006eda:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ede:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ee2:	f04f 0e0f 	mov.w	lr, #15
 8006ee6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006eea:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006eec:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ef0:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 8006ef4:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ef6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006efa:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006efe:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f02:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8006f06:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8006f08:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f0a:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f0c:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 8006f0e:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 8006f10:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f12:	fa39 f203 	lsrs.w	r2, r9, r3
 8006f16:	f000 80ab 	beq.w	8007070 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8006f1e:	ea12 0809 	ands.w	r8, r2, r9
 8006f22:	d0f5      	beq.n	8006f10 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006f24:	684c      	ldr	r4, [r1, #4]
 8006f26:	005f      	lsls	r7, r3, #1
 8006f28:	f024 0c10 	bic.w	ip, r4, #16
 8006f2c:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f30:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f32:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f36:	f200 809e 	bhi.w	8007076 <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f3a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 8006f3e:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f42:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f44:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f46:	ea2e 0e05 	bic.w	lr, lr, r5
 8006f4a:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f4c:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f4e:	68ce      	ldr	r6, [r1, #12]
 8006f50:	40be      	lsls	r6, r7
 8006f52:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f56:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 8006f58:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8006f5c:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f60:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f64:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8006f66:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8006f68:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f6a:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f6e:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f70:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f74:	fa02 f207 	lsl.w	r2, r2, r7
 8006f78:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8006f7c:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f7e:	d0ab      	beq.n	8006ed8 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 8006f80:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f82:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f86:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f88:	fa02 f707 	lsl.w	r7, r2, r7
 8006f8c:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8006f8e:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f90:	00e6      	lsls	r6, r4, #3
 8006f92:	d5bd      	bpl.n	8006f10 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f94:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 8006f98:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f9c:	f003 0203 	and.w	r2, r3, #3
 8006fa0:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fa2:	f046 0602 	orr.w	r6, r6, #2
 8006fa6:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006faa:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fac:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 8006fb0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8006fb4:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fb8:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fbc:	f006 0602 	and.w	r6, r6, #2
 8006fc0:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fc2:	4e42      	ldr	r6, [pc, #264]	; (80070cc <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fc4:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fc6:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 8006fc8:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fca:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fce:	d020      	beq.n	8007012 <HAL_GPIO_Init+0x156>
 8006fd0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006fd4:	42b0      	cmp	r0, r6
 8006fd6:	d056      	beq.n	8007086 <HAL_GPIO_Init+0x1ca>
 8006fd8:	4e3d      	ldr	r6, [pc, #244]	; (80070d0 <HAL_GPIO_Init+0x214>)
 8006fda:	42b0      	cmp	r0, r6
 8006fdc:	d058      	beq.n	8007090 <HAL_GPIO_Init+0x1d4>
 8006fde:	4e3d      	ldr	r6, [pc, #244]	; (80070d4 <HAL_GPIO_Init+0x218>)
 8006fe0:	42b0      	cmp	r0, r6
 8006fe2:	d04b      	beq.n	800707c <HAL_GPIO_Init+0x1c0>
 8006fe4:	4e3c      	ldr	r6, [pc, #240]	; (80070d8 <HAL_GPIO_Init+0x21c>)
 8006fe6:	42b0      	cmp	r0, r6
 8006fe8:	d05c      	beq.n	80070a4 <HAL_GPIO_Init+0x1e8>
 8006fea:	4e3c      	ldr	r6, [pc, #240]	; (80070dc <HAL_GPIO_Init+0x220>)
 8006fec:	42b0      	cmp	r0, r6
 8006fee:	d05e      	beq.n	80070ae <HAL_GPIO_Init+0x1f2>
 8006ff0:	4e3b      	ldr	r6, [pc, #236]	; (80070e0 <HAL_GPIO_Init+0x224>)
 8006ff2:	42b0      	cmp	r0, r6
 8006ff4:	d051      	beq.n	800709a <HAL_GPIO_Init+0x1de>
 8006ff6:	4e3b      	ldr	r6, [pc, #236]	; (80070e4 <HAL_GPIO_Init+0x228>)
 8006ff8:	42b0      	cmp	r0, r6
 8006ffa:	d05d      	beq.n	80070b8 <HAL_GPIO_Init+0x1fc>
 8006ffc:	4e3a      	ldr	r6, [pc, #232]	; (80070e8 <HAL_GPIO_Init+0x22c>)
 8006ffe:	42b0      	cmp	r0, r6
 8007000:	d05f      	beq.n	80070c2 <HAL_GPIO_Init+0x206>
 8007002:	4e3a      	ldr	r6, [pc, #232]	; (80070ec <HAL_GPIO_Init+0x230>)
 8007004:	42b0      	cmp	r0, r6
 8007006:	bf0c      	ite	eq
 8007008:	2609      	moveq	r6, #9
 800700a:	260a      	movne	r6, #10
 800700c:	fa06 f202 	lsl.w	r2, r6, r2
 8007010:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007012:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8007014:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 8007018:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800701c:	03e5      	lsls	r5, r4, #15
    position++;
 800701e:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 8007022:	bf54      	ite	pl
 8007024:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8007026:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800702a:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800702e:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 8007030:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8007034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8007038:	bf54      	ite	pl
 800703a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800703c:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007040:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 8007042:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8007046:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 8007048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800704c:	bf54      	ite	pl
 800704e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8007050:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007054:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 8007056:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 800705a:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 800705c:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 800705e:	bf54      	ite	pl
 8007060:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8007062:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8007066:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007068:	fa39 f203 	lsrs.w	r2, r9, r3
 800706c:	f47f af55 	bne.w	8006f1a <HAL_GPIO_Init+0x5e>
  }
}
 8007070:	b005      	add	sp, #20
 8007072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007076:	40bd      	lsls	r5, r7
 8007078:	43ed      	mvns	r5, r5
 800707a:	e775      	b.n	8006f68 <HAL_GPIO_Init+0xac>
 800707c:	2603      	movs	r6, #3
 800707e:	fa06 f202 	lsl.w	r2, r6, r2
 8007082:	4315      	orrs	r5, r2
 8007084:	e7c5      	b.n	8007012 <HAL_GPIO_Init+0x156>
 8007086:	2601      	movs	r6, #1
 8007088:	fa06 f202 	lsl.w	r2, r6, r2
 800708c:	4315      	orrs	r5, r2
 800708e:	e7c0      	b.n	8007012 <HAL_GPIO_Init+0x156>
 8007090:	2602      	movs	r6, #2
 8007092:	fa06 f202 	lsl.w	r2, r6, r2
 8007096:	4315      	orrs	r5, r2
 8007098:	e7bb      	b.n	8007012 <HAL_GPIO_Init+0x156>
 800709a:	2606      	movs	r6, #6
 800709c:	fa06 f202 	lsl.w	r2, r6, r2
 80070a0:	4315      	orrs	r5, r2
 80070a2:	e7b6      	b.n	8007012 <HAL_GPIO_Init+0x156>
 80070a4:	2604      	movs	r6, #4
 80070a6:	fa06 f202 	lsl.w	r2, r6, r2
 80070aa:	4315      	orrs	r5, r2
 80070ac:	e7b1      	b.n	8007012 <HAL_GPIO_Init+0x156>
 80070ae:	2605      	movs	r6, #5
 80070b0:	fa06 f202 	lsl.w	r2, r6, r2
 80070b4:	4315      	orrs	r5, r2
 80070b6:	e7ac      	b.n	8007012 <HAL_GPIO_Init+0x156>
 80070b8:	2607      	movs	r6, #7
 80070ba:	fa06 f202 	lsl.w	r2, r6, r2
 80070be:	4315      	orrs	r5, r2
 80070c0:	e7a7      	b.n	8007012 <HAL_GPIO_Init+0x156>
 80070c2:	2608      	movs	r6, #8
 80070c4:	fa06 f202 	lsl.w	r2, r6, r2
 80070c8:	4315      	orrs	r5, r2
 80070ca:	e7a2      	b.n	8007012 <HAL_GPIO_Init+0x156>
 80070cc:	58020000 	.word	0x58020000
 80070d0:	58020800 	.word	0x58020800
 80070d4:	58020c00 	.word	0x58020c00
 80070d8:	58021000 	.word	0x58021000
 80070dc:	58021400 	.word	0x58021400
 80070e0:	58021800 	.word	0x58021800
 80070e4:	58021c00 	.word	0x58021c00
 80070e8:	58022000 	.word	0x58022000
 80070ec:	58022400 	.word	0x58022400
 80070f0:	58024400 	.word	0x58024400
 80070f4:	58000080 	.word	0x58000080

080070f8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80070f8:	6903      	ldr	r3, [r0, #16]
 80070fa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80070fc:	bf14      	ite	ne
 80070fe:	2001      	movne	r0, #1
 8007100:	2000      	moveq	r0, #0
 8007102:	4770      	bx	lr

08007104 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007104:	b902      	cbnz	r2, 8007108 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007106:	0409      	lsls	r1, r1, #16
 8007108:	6181      	str	r1, [r0, #24]
  }
}
 800710a:	4770      	bx	lr

0800710c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800710c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800710e:	ea01 0203 	and.w	r2, r1, r3
 8007112:	ea21 0103 	bic.w	r1, r1, r3
 8007116:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800711a:	6181      	str	r1, [r0, #24]
}
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop

08007120 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007120:	4a04      	ldr	r2, [pc, #16]	; (8007134 <HAL_HSEM_FastTake+0x14>)
 8007122:	3020      	adds	r0, #32
 8007124:	4b04      	ldr	r3, [pc, #16]	; (8007138 <HAL_HSEM_FastTake+0x18>)
 8007126:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800712a:	1ac0      	subs	r0, r0, r3
 800712c:	bf18      	it	ne
 800712e:	2001      	movne	r0, #1
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	58026400 	.word	0x58026400
 8007138:	80000300 	.word	0x80000300

0800713c <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800713c:	4b02      	ldr	r3, [pc, #8]	; (8007148 <HAL_HSEM_Release+0xc>)
 800713e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8007142:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8007146:	4770      	bx	lr
 8007148:	58026400 	.word	0x58026400

0800714c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800714c:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800714e:	f04f 0c00 	mov.w	ip, #0
{
 8007152:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007156:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007158:	6804      	ldr	r4, [r0, #0]
 800715a:	6848      	ldr	r0, [r1, #4]
{
 800715c:	b083      	sub	sp, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800715e:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007160:	68e5      	ldr	r5, [r4, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007162:	f8d1 800c 	ldr.w	r8, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007166:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800716a:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800716e:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007170:	eb05 0a00 	add.w	sl, r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007174:	f40e 4570 	and.w	r5, lr, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007178:	9001      	str	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800717a:	f106 0b01 	add.w	fp, r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800717e:	6888      	ldr	r0, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007180:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007182:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007184:	f100 0901 	add.w	r9, r0, #1
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007188:	f8d1 e010 	ldr.w	lr, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800718c:	f3c5 450b 	ubfx	r5, r5, #16, #12
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007190:	4f38      	ldr	r7, [pc, #224]	; (8007274 <LTDC_SetConfig+0x128>)
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007192:	445d      	add	r5, fp
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007194:	f8d1 b018 	ldr.w	fp, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007198:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800719c:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800719e:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80071a2:	689d      	ldr	r5, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80071a4:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80071a8:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80071ac:	44c2      	add	sl, r8
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80071ae:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80071b2:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80071b4:	68e5      	ldr	r5, [r4, #12]
 80071b6:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80071ba:	444d      	add	r5, r9
 80071bc:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80071c0:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80071c2:	691d      	ldr	r5, [r3, #16]
 80071c4:	f025 0507 	bic.w	r5, r5, #7
 80071c8:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80071ca:	f8c3 e010 	str.w	lr, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80071ce:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80071d0:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80071d4:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80071d8:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80071dc:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80071e0:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 80071e4:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 80071e8:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80071ec:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80071ee:	695d      	ldr	r5, [r3, #20]
 80071f0:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80071f4:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80071f6:	f8c3 8014 	str.w	r8, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80071fa:	69dd      	ldr	r5, [r3, #28]
 80071fc:	402f      	ands	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80071fe:	69cd      	ldr	r5, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007200:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007202:	e9d1 0708 	ldrd	r0, r7, [r1, #32]
 8007206:	4305      	orrs	r5, r0
 8007208:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800720a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800720c:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007210:	629f      	str	r7, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007212:	f1be 0f00 	cmp.w	lr, #0
 8007216:	d00b      	beq.n	8007230 <LTDC_SetConfig+0xe4>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007218:	f1be 0f01 	cmp.w	lr, #1
 800721c:	d026      	beq.n	800726c <LTDC_SetConfig+0x120>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800721e:	f1ae 0502 	sub.w	r5, lr, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007222:	2d02      	cmp	r5, #2
 8007224:	d902      	bls.n	800722c <LTDC_SetConfig+0xe0>
 8007226:	f1be 0f07 	cmp.w	lr, #7
 800722a:	d121      	bne.n	8007270 <LTDC_SetConfig+0x124>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800722c:	2702      	movs	r7, #2
 800722e:	e000      	b.n	8007232 <LTDC_SetConfig+0xe6>
    tmp = 4U;
 8007230:	2704      	movs	r7, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007232:	9801      	ldr	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007234:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007236:	1b80      	subs	r0, r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007238:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800723c:	fb07 f000 	mul.w	r0, r7, r0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007240:	e9d1 6c0a 	ldrd	r6, ip, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007244:	3007      	adds	r0, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007246:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007248:	fb06 f607 	mul.w	r6, r6, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800724c:	490a      	ldr	r1, [pc, #40]	; (8007278 <LTDC_SetConfig+0x12c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800724e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8007252:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007254:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007256:	4001      	ands	r1, r0
 8007258:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800725a:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800725e:	58a3      	ldr	r3, [r4, r2]
 8007260:	f043 0301 	orr.w	r3, r3, #1
 8007264:	50a3      	str	r3, [r4, r2]
}
 8007266:	b003      	add	sp, #12
 8007268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3U;
 800726c:	2703      	movs	r7, #3
 800726e:	e7e0      	b.n	8007232 <LTDC_SetConfig+0xe6>
    tmp = 1U;
 8007270:	2701      	movs	r7, #1
 8007272:	e7de      	b.n	8007232 <LTDC_SetConfig+0xe6>
 8007274:	fffff8f8 	.word	0xfffff8f8
 8007278:	fffff800 	.word	0xfffff800

0800727c <HAL_LTDC_MspInit>:
}
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop

08007280 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8007280:	2800      	cmp	r0, #0
 8007282:	d06d      	beq.n	8007360 <HAL_LTDC_Init+0xe0>
{
 8007284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007286:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800728a:	4604      	mov	r4, r0
 800728c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007290:	2b00      	cmp	r3, #0
 8007292:	d060      	beq.n	8007356 <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007294:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007296:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007298:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800729a:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800729c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072a0:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80072a2:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80072a4:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072a8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80072ac:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80072ae:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072b0:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80072b2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80072b6:	4e2b      	ldr	r6, [pc, #172]	; (8007364 <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80072b8:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072ba:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072bc:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80072be:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072c0:	4302      	orrs	r2, r0
 80072c2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	4032      	ands	r2, r6
 80072c8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80072ca:	6898      	ldr	r0, [r3, #8]
 80072cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80072d0:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80072d2:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80072d6:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80072da:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80072dc:	68d8      	ldr	r0, [r3, #12]
 80072de:	4030      	ands	r0, r6
 80072e0:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80072e8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80072ea:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80072ee:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80072f2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80072f4:	691a      	ldr	r2, [r3, #16]
 80072f6:	4032      	ands	r2, r6
 80072f8:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80072fa:	6918      	ldr	r0, [r3, #16]
 80072fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007300:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007302:	ea40 000c 	orr.w	r0, r0, ip
 8007306:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007308:	6958      	ldr	r0, [r3, #20]
 800730a:	4006      	ands	r6, r0
 800730c:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800730e:	695a      	ldr	r2, [r3, #20]
 8007310:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007312:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8007316:	4302      	orrs	r2, r0
 8007318:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800731a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800731c:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007320:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007324:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007328:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800732a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800732c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8007330:	4302      	orrs	r2, r0
  return HAL_OK;
 8007332:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007334:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8007338:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800733c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800733e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007340:	f042 0206 	orr.w	r2, r2, #6
 8007344:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8007346:	699a      	ldr	r2, [r3, #24]
 8007348:	432a      	orrs	r2, r5
 800734a:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800734c:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8007350:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 8007354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8007356:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800735a:	f7ff ff8f 	bl	800727c <HAL_LTDC_MspInit>
 800735e:	e799      	b.n	8007294 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8007360:	2001      	movs	r0, #1
}
 8007362:	4770      	bx	lr
 8007364:	f000f800 	.word	0xf000f800

08007368 <HAL_LTDC_ErrorCallback>:
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop

0800736c <HAL_LTDC_ReloadEventCallback>:
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop

08007370 <HAL_LTDC_IRQHandler>:
{
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007372:	6803      	ldr	r3, [r0, #0]
{
 8007374:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007376:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007378:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800737a:	0769      	lsls	r1, r5, #29
 800737c:	d501      	bpl.n	8007382 <HAL_LTDC_IRQHandler+0x12>
 800737e:	0772      	lsls	r2, r6, #29
 8007380:	d41d      	bmi.n	80073be <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007382:	07ab      	lsls	r3, r5, #30
 8007384:	d501      	bpl.n	800738a <HAL_LTDC_IRQHandler+0x1a>
 8007386:	07b7      	lsls	r7, r6, #30
 8007388:	d42d      	bmi.n	80073e6 <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800738a:	07e8      	lsls	r0, r5, #31
 800738c:	d501      	bpl.n	8007392 <HAL_LTDC_IRQHandler+0x22>
 800738e:	07f1      	lsls	r1, r6, #31
 8007390:	d440      	bmi.n	8007414 <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007392:	072a      	lsls	r2, r5, #28
 8007394:	d501      	bpl.n	800739a <HAL_LTDC_IRQHandler+0x2a>
 8007396:	0733      	lsls	r3, r6, #28
 8007398:	d400      	bmi.n	800739c <HAL_LTDC_IRQHandler+0x2c>
}
 800739a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800739c:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800739e:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 80073a0:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 80073a2:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80073a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 80073a6:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80073a8:	f022 0208 	bic.w	r2, r2, #8
 80073ac:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80073ae:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80073b0:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80073b4:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80073b8:	f7ff ffd8 	bl	800736c <HAL_LTDC_ReloadEventCallback>
}
 80073bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80073be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80073c0:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 80073c2:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80073c4:	f022 0204 	bic.w	r2, r2, #4
 80073c8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80073ca:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80073cc:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80073d0:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80073d4:	f043 0301 	orr.w	r3, r3, #1
 80073d8:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80073dc:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 80073e0:	f7ff ffc2 	bl	8007368 <HAL_LTDC_ErrorCallback>
 80073e4:	e7cd      	b.n	8007382 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80073e6:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80073e8:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80073ea:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80073ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ee:	f022 0202 	bic.w	r2, r2, #2
 80073f2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 80073f4:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80073f6:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 80073f8:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80073fa:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80073fe:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007402:	f043 0302 	orr.w	r3, r3, #2
 8007406:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800740a:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 800740e:	f7ff ffab 	bl	8007368 <HAL_LTDC_ErrorCallback>
 8007412:	e7ba      	b.n	800738a <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007414:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007416:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 8007418:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 800741a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800741c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800741e:	f022 0201 	bic.w	r2, r2, #1
 8007422:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007424:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8007426:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800742a:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800742e:	f7fc fd2b 	bl	8003e88 <HAL_LTDC_LineEventCallback>
 8007432:	e7ae      	b.n	8007392 <HAL_LTDC_IRQHandler+0x22>

08007434 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8007434:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8007438:	2b01      	cmp	r3, #1
 800743a:	d028      	beq.n	800748e <HAL_LTDC_ConfigLayer+0x5a>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800743c:	2302      	movs	r3, #2
 800743e:	4694      	mov	ip, r2
{
 8007440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007444:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007446:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800744a:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800744c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007450:	fb04 0402 	mla	r4, r4, r2, r0
 8007454:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8007456:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800745a:	460f      	mov	r7, r1
 800745c:	3438      	adds	r4, #56	; 0x38
 800745e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800746a:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800746c:	4662      	mov	r2, ip
 800746e:	4630      	mov	r0, r6
 8007470:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007472:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007474:	f7ff fe6a 	bl	800714c <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8007478:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800747a:	6832      	ldr	r2, [r6, #0]
  return HAL_OK;
 800747c:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800747e:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007482:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007486:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
}
 800748a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 800748e:	2002      	movs	r0, #2
}
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop

08007494 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8007494:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 8007498:	2a01      	cmp	r2, #1
 800749a:	d017      	beq.n	80074cc <HAL_LTDC_ProgramLineEvent+0x38>
 800749c:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800749e:	2002      	movs	r0, #2
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80074a0:	681a      	ldr	r2, [r3, #0]
{
 80074a2:	b470      	push	{r4, r5, r6}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80074a4:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  hltdc->State = HAL_LTDC_STATE_READY;
 80074a8:	2501      	movs	r5, #1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80074aa:	6b50      	ldr	r0, [r2, #52]	; 0x34
  __HAL_UNLOCK(hltdc);
 80074ac:	2400      	movs	r4, #0
  LTDC->LIPCR = (uint32_t)Line;
 80074ae:	4e08      	ldr	r6, [pc, #32]	; (80074d0 <HAL_LTDC_ProgramLineEvent+0x3c>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80074b0:	f020 0001 	bic.w	r0, r0, #1
 80074b4:	6350      	str	r0, [r2, #52]	; 0x34
  return HAL_OK;
 80074b6:	4620      	mov	r0, r4
  LTDC->LIPCR = (uint32_t)Line;
 80074b8:	6431      	str	r1, [r6, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80074ba:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80074bc:	4329      	orrs	r1, r5
 80074be:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80074c0:	f883 50a1 	strb.w	r5, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80074c4:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
}
 80074c8:	bc70      	pop	{r4, r5, r6}
 80074ca:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80074cc:	2002      	movs	r0, #2
}
 80074ce:	4770      	bx	lr
 80074d0:	50001000 	.word	0x50001000

080074d4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80074d8:	f7fe fa82 	bl	80059e0 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80074dc:	2c00      	cmp	r4, #0
 80074de:	d05a      	beq.n	8007596 <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80074e0:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80074e2:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 80074e4:	2100      	movs	r1, #0
 80074e6:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80074e8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 80074ec:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 80074f0:	68da      	ldr	r2, [r3, #12]
 80074f2:	f022 0201 	bic.w	r2, r2, #1
 80074f6:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80074f8:	e005      	b.n	8007506 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80074fa:	f7fe fa71 	bl	80059e0 <HAL_GetTick>
 80074fe:	1b43      	subs	r3, r0, r5
 8007500:	2b05      	cmp	r3, #5
 8007502:	d841      	bhi.n	8007588 <HAL_MDMA_Init+0xb4>
 8007504:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007506:	68da      	ldr	r2, [r3, #12]
 8007508:	07d2      	lsls	r2, r2, #31
 800750a:	d4f6      	bmi.n	80074fa <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800750c:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8007510:	69e1      	ldr	r1, [r4, #28]
 8007512:	4302      	orrs	r2, r0
 8007514:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 8007518:	430a      	orrs	r2, r1
 800751a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800751c:	432a      	orrs	r2, r5
 800751e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007520:	4302      	orrs	r2, r0
 8007522:	68a0      	ldr	r0, [r4, #8]
 8007524:	430a      	orrs	r2, r1
 8007526:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007528:	432a      	orrs	r2, r5
 800752a:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800752c:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800752e:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007530:	6920      	ldr	r0, [r4, #16]
 8007532:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007534:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007536:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800753a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800753e:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007540:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007542:	d103      	bne.n	800754c <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800754a:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800754c:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800754e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007550:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 8007552:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8007554:	db30      	blt.n	80075b8 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8007556:	b292      	uxth	r2, r2
 8007558:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800755a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800755c:	2a00      	cmp	r2, #0
 800755e:	db1c      	blt.n	800759a <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007560:	6a18      	ldr	r0, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007562:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007566:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800756a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800756c:	d021      	beq.n	80075b2 <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800756e:	b2c9      	uxtb	r1, r1
 8007570:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8007572:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8007574:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8007576:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8007578:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800757a:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800757c:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800757e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8007582:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8007586:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007588:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800758a:	2303      	movs	r3, #3
      return HAL_ERROR;
 800758c:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800758e:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007590:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007594:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007596:	2001      	movs	r0, #1
}
 8007598:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800759a:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800759c:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800759e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80075a2:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 80075a6:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80075a8:	6a18      	ldr	r0, [r3, #32]
 80075aa:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 80075ae:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80075b0:	d1dd      	bne.n	800756e <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 80075b2:	2200      	movs	r2, #0
 80075b4:	629a      	str	r2, [r3, #40]	; 0x28
 80075b6:	e7dc      	b.n	8007572 <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80075b8:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80075ba:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80075bc:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80075c0:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80075c2:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80075c4:	621a      	str	r2, [r3, #32]
 80075c6:	e7c8      	b.n	800755a <HAL_MDMA_Init+0x86>

080075c8 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 80075c8:	b1f0      	cbz	r0, 8007608 <HAL_MDMA_DeInit+0x40>
  __HAL_MDMA_DISABLE(hmdma);
 80075ca:	6802      	ldr	r2, [r0, #0]
  hmdma->Instance->CCR  = 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	4601      	mov	r1, r0
  return HAL_OK;
 80075d0:	4618      	mov	r0, r3
{
 80075d2:	b430      	push	{r4, r5}
  __HAL_MDMA_DISABLE(hmdma);
 80075d4:	68d4      	ldr	r4, [r2, #12]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80075d6:	251f      	movs	r5, #31
  __HAL_MDMA_DISABLE(hmdma);
 80075d8:	f024 0401 	bic.w	r4, r4, #1
 80075dc:	60d4      	str	r4, [r2, #12]
  hmdma->Instance->CCR  = 0;
 80075de:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 80075e0:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 80075e2:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 80075e4:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 80075e6:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 80075e8:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 80075ea:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 80075ec:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 80075ee:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 80075f0:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80075f2:	6055      	str	r5, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80075f4:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
 80075f6:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 80075fa:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
  hmdma->LinkedListNodeCounter  = 0;
 80075fe:	664b      	str	r3, [r1, #100]	; 0x64
}
 8007600:	bc30      	pop	{r4, r5}
  hmdma->LastLinkedListNodeAddress   = 0;
 8007602:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
 8007606:	4770      	bx	lr
    return HAL_ERROR;
 8007608:	2001      	movs	r0, #1
}
 800760a:	4770      	bx	lr

0800760c <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800760c:	4a1c      	ldr	r2, [pc, #112]	; (8007680 <HAL_PWREx_ConfigSupply+0x74>)
 800760e:	68d3      	ldr	r3, [r2, #12]
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007616:	68d3      	ldr	r3, [r2, #12]
{
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800761c:	d005      	beq.n	800762a <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800761e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007622:	1a18      	subs	r0, r3, r0
 8007624:	bf18      	it	ne
 8007626:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8007628:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800762a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800762e:	4616      	mov	r6, r2
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007630:	4303      	orrs	r3, r0
 8007632:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8007634:	f7fe f9d4 	bl	80059e0 <HAL_GetTick>
 8007638:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800763a:	e005      	b.n	8007648 <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800763c:	f7fe f9d0 	bl	80059e0 <HAL_GetTick>
 8007640:	1b43      	subs	r3, r0, r5
 8007642:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007646:	d819      	bhi.n	800767c <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007648:	6873      	ldr	r3, [r6, #4]
 800764a:	049a      	lsls	r2, r3, #18
 800764c:	d5f6      	bpl.n	800763c <HAL_PWREx_ConfigSupply+0x30>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800764e:	f1a4 031d 	sub.w	r3, r4, #29
 8007652:	2b01      	cmp	r3, #1
 8007654:	d905      	bls.n	8007662 <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8007656:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800765a:	2801      	cmp	r0, #1
 800765c:	d901      	bls.n	8007662 <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 800765e:	2000      	movs	r0, #0
}
 8007660:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 8007662:	f7fe f9bd 	bl	80059e0 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007666:	4d06      	ldr	r5, [pc, #24]	; (8007680 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8007668:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800766a:	68eb      	ldr	r3, [r5, #12]
 800766c:	03db      	lsls	r3, r3, #15
 800766e:	d4f6      	bmi.n	800765e <HAL_PWREx_ConfigSupply+0x52>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007670:	f7fe f9b6 	bl	80059e0 <HAL_GetTick>
 8007674:	1b00      	subs	r0, r0, r4
 8007676:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800767a:	d9f6      	bls.n	800766a <HAL_PWREx_ConfigSupply+0x5e>
      return HAL_ERROR;
 800767c:	2001      	movs	r0, #1
}
 800767e:	bd70      	pop	{r4, r5, r6, pc}
 8007680:	58024800 	.word	0x58024800

08007684 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007684:	2800      	cmp	r0, #0
 8007686:	f000 81f7 	beq.w	8007a78 <HAL_RCC_OscConfig+0x3f4>
{
 800768a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800768c:	6803      	ldr	r3, [r0, #0]
 800768e:	4604      	mov	r4, r0
 8007690:	07d9      	lsls	r1, r3, #31
 8007692:	d52e      	bpl.n	80076f2 <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007694:	49b4      	ldr	r1, [pc, #720]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
 8007696:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007698:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800769a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800769e:	2a10      	cmp	r2, #16
 80076a0:	f000 812c 	beq.w	80078fc <HAL_RCC_OscConfig+0x278>
 80076a4:	2a18      	cmp	r2, #24
 80076a6:	f000 8124 	beq.w	80078f2 <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076aa:	6863      	ldr	r3, [r4, #4]
 80076ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b0:	f000 8167 	beq.w	8007982 <HAL_RCC_OscConfig+0x2fe>
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 817f 	beq.w	80079b8 <HAL_RCC_OscConfig+0x334>
 80076ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076be:	4baa      	ldr	r3, [pc, #680]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	f000 8278 	beq.w	8007bb6 <HAL_RCC_OscConfig+0x532>
 80076c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80076d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d4:	f7fe f984 	bl	80059e0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076d8:	4ea3      	ldr	r6, [pc, #652]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 80076da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076dc:	e005      	b.n	80076ea <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076de:	f7fe f97f 	bl	80059e0 <HAL_GetTick>
 80076e2:	1b40      	subs	r0, r0, r5
 80076e4:	2864      	cmp	r0, #100	; 0x64
 80076e6:	f200 8165 	bhi.w	80079b4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076ea:	6833      	ldr	r3, [r6, #0]
 80076ec:	039f      	lsls	r7, r3, #14
 80076ee:	d5f6      	bpl.n	80076de <HAL_RCC_OscConfig+0x5a>
 80076f0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076f2:	0799      	lsls	r1, r3, #30
 80076f4:	d521      	bpl.n	800773a <HAL_RCC_OscConfig+0xb6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076f6:	4a9c      	ldr	r2, [pc, #624]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
 80076f8:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076fa:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80076fc:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8007700:	f040 80a8 	bne.w	8007854 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007704:	4b98      	ldr	r3, [pc, #608]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	075b      	lsls	r3, r3, #29
 800770a:	d503      	bpl.n	8007714 <HAL_RCC_OscConfig+0x90>
 800770c:	68e3      	ldr	r3, [r4, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 80ed 	beq.w	80078ee <HAL_RCC_OscConfig+0x26a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007714:	f7fe f97c 	bl	8005a10 <HAL_GetREVID>
 8007718:	f241 0303 	movw	r3, #4099	; 0x1003
 800771c:	4298      	cmp	r0, r3
 800771e:	f200 8189 	bhi.w	8007a34 <HAL_RCC_OscConfig+0x3b0>
 8007722:	6922      	ldr	r2, [r4, #16]
 8007724:	2a40      	cmp	r2, #64	; 0x40
 8007726:	f000 824e 	beq.w	8007bc6 <HAL_RCC_OscConfig+0x542>
 800772a:	498f      	ldr	r1, [pc, #572]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
 800772c:	684b      	ldr	r3, [r1, #4]
 800772e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007732:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007736:	604b      	str	r3, [r1, #4]
 8007738:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800773a:	06d9      	lsls	r1, r3, #27
 800773c:	d456      	bmi.n	80077ec <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800773e:	071d      	lsls	r5, r3, #28
 8007740:	d517      	bpl.n	8007772 <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007742:	6963      	ldr	r3, [r4, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 80b4 	beq.w	80078b2 <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800774a:	4b87      	ldr	r3, [pc, #540]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
 800774c:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800774e:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8007750:	f042 0201 	orr.w	r2, r2, #1
 8007754:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007756:	f7fe f943 	bl	80059e0 <HAL_GetTick>
 800775a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800775c:	e005      	b.n	800776a <HAL_RCC_OscConfig+0xe6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800775e:	f7fe f93f 	bl	80059e0 <HAL_GetTick>
 8007762:	1b40      	subs	r0, r0, r5
 8007764:	2802      	cmp	r0, #2
 8007766:	f200 8125 	bhi.w	80079b4 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800776a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800776c:	0798      	lsls	r0, r3, #30
 800776e:	d5f6      	bpl.n	800775e <HAL_RCC_OscConfig+0xda>
 8007770:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007772:	069a      	lsls	r2, r3, #26
 8007774:	d517      	bpl.n	80077a6 <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007776:	69a3      	ldr	r3, [r4, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 8134 	beq.w	80079e6 <HAL_RCC_OscConfig+0x362>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800777e:	4b7a      	ldr	r3, [pc, #488]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
 8007780:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007782:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8007784:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007788:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800778a:	f7fe f929 	bl	80059e0 <HAL_GetTick>
 800778e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007790:	e005      	b.n	800779e <HAL_RCC_OscConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007792:	f7fe f925 	bl	80059e0 <HAL_GetTick>
 8007796:	1b40      	subs	r0, r0, r5
 8007798:	2802      	cmp	r0, #2
 800779a:	f200 810b 	bhi.w	80079b4 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800779e:	6833      	ldr	r3, [r6, #0]
 80077a0:	049f      	lsls	r7, r3, #18
 80077a2:	d5f6      	bpl.n	8007792 <HAL_RCC_OscConfig+0x10e>
 80077a4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077a6:	0759      	lsls	r1, r3, #29
 80077a8:	f100 80b2 	bmi.w	8007910 <HAL_RCC_OscConfig+0x28c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80077ae:	b1d8      	cbz	r0, 80077e8 <HAL_RCC_OscConfig+0x164>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80077b0:	4b6d      	ldr	r3, [pc, #436]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80077b8:	2a18      	cmp	r2, #24
 80077ba:	f000 81ce 	beq.w	8007b5a <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077be:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077c0:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077c2:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 80077c4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80077c8:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077ca:	f000 8161 	beq.w	8007a90 <HAL_RCC_OscConfig+0x40c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ce:	f7fe f907 	bl	80059e0 <HAL_GetTick>
 80077d2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077d4:	e005      	b.n	80077e2 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077d6:	f7fe f903 	bl	80059e0 <HAL_GetTick>
 80077da:	1b00      	subs	r0, r0, r4
 80077dc:	2802      	cmp	r0, #2
 80077de:	f200 80e9 	bhi.w	80079b4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077e2:	682b      	ldr	r3, [r5, #0]
 80077e4:	019b      	lsls	r3, r3, #6
 80077e6:	d4f6      	bmi.n	80077d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80077e8:	2000      	movs	r0, #0
}
 80077ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077ec:	4a5e      	ldr	r2, [pc, #376]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
 80077ee:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80077f6:	2b08      	cmp	r3, #8
 80077f8:	d072      	beq.n	80078e0 <HAL_RCC_OscConfig+0x25c>
 80077fa:	2b18      	cmp	r3, #24
 80077fc:	d06c      	beq.n	80078d8 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80077fe:	69e3      	ldr	r3, [r4, #28]
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 8103 	beq.w	8007a0c <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 8007806:	4b58      	ldr	r3, [pc, #352]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
 8007808:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800780a:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 800780c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007810:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007812:	f7fe f8e5 	bl	80059e0 <HAL_GetTick>
 8007816:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007818:	e005      	b.n	8007826 <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800781a:	f7fe f8e1 	bl	80059e0 <HAL_GetTick>
 800781e:	1b40      	subs	r0, r0, r5
 8007820:	2802      	cmp	r0, #2
 8007822:	f200 80c7 	bhi.w	80079b4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007826:	6833      	ldr	r3, [r6, #0]
 8007828:	05db      	lsls	r3, r3, #23
 800782a:	d5f6      	bpl.n	800781a <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800782c:	f7fe f8f0 	bl	8005a10 <HAL_GetREVID>
 8007830:	f241 0303 	movw	r3, #4099	; 0x1003
 8007834:	4298      	cmp	r0, r3
 8007836:	f200 81e9 	bhi.w	8007c0c <HAL_RCC_OscConfig+0x588>
 800783a:	6a22      	ldr	r2, [r4, #32]
 800783c:	6873      	ldr	r3, [r6, #4]
 800783e:	2a20      	cmp	r2, #32
 8007840:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007844:	bf0c      	ite	eq
 8007846:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800784a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800784e:	6073      	str	r3, [r6, #4]
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	e774      	b.n	800773e <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007854:	2b18      	cmp	r3, #24
 8007856:	f000 810b 	beq.w	8007a70 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800785a:	68e2      	ldr	r2, [r4, #12]
 800785c:	2a00      	cmp	r2, #0
 800785e:	f000 80f3 	beq.w	8007a48 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007862:	4941      	ldr	r1, [pc, #260]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
 8007864:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007866:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007868:	f023 0319 	bic.w	r3, r3, #25
 800786c:	4313      	orrs	r3, r2
 800786e:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8007870:	f7fe f8b6 	bl	80059e0 <HAL_GetTick>
 8007874:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007876:	e005      	b.n	8007884 <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007878:	f7fe f8b2 	bl	80059e0 <HAL_GetTick>
 800787c:	1b40      	subs	r0, r0, r5
 800787e:	2802      	cmp	r0, #2
 8007880:	f200 8098 	bhi.w	80079b4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007884:	6833      	ldr	r3, [r6, #0]
 8007886:	075f      	lsls	r7, r3, #29
 8007888:	d5f6      	bpl.n	8007878 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800788a:	f7fe f8c1 	bl	8005a10 <HAL_GetREVID>
 800788e:	f241 0303 	movw	r3, #4099	; 0x1003
 8007892:	4298      	cmp	r0, r3
 8007894:	f200 81c3 	bhi.w	8007c1e <HAL_RCC_OscConfig+0x59a>
 8007898:	6922      	ldr	r2, [r4, #16]
 800789a:	6873      	ldr	r3, [r6, #4]
 800789c:	2a40      	cmp	r2, #64	; 0x40
 800789e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80078a2:	bf0c      	ite	eq
 80078a4:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80078a8:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80078ac:	6073      	str	r3, [r6, #4]
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	e743      	b.n	800773a <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 80078b2:	4b2d      	ldr	r3, [pc, #180]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
 80078b4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80078b6:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 80078b8:	f022 0201 	bic.w	r2, r2, #1
 80078bc:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80078be:	f7fe f88f 	bl	80059e0 <HAL_GetTick>
 80078c2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80078c4:	e004      	b.n	80078d0 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078c6:	f7fe f88b 	bl	80059e0 <HAL_GetTick>
 80078ca:	1b40      	subs	r0, r0, r5
 80078cc:	2802      	cmp	r0, #2
 80078ce:	d871      	bhi.n	80079b4 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80078d0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80078d2:	0799      	lsls	r1, r3, #30
 80078d4:	d4f7      	bmi.n	80078c6 <HAL_RCC_OscConfig+0x242>
 80078d6:	e74b      	b.n	8007770 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80078d8:	f002 0203 	and.w	r2, r2, #3
 80078dc:	2a01      	cmp	r2, #1
 80078de:	d18e      	bne.n	80077fe <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078e0:	4b21      	ldr	r3, [pc, #132]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	05da      	lsls	r2, r3, #23
 80078e6:	d552      	bpl.n	800798e <HAL_RCC_OscConfig+0x30a>
 80078e8:	69e3      	ldr	r3, [r4, #28]
 80078ea:	2b80      	cmp	r3, #128	; 0x80
 80078ec:	d04f      	beq.n	800798e <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 80078ee:	2001      	movs	r0, #1
}
 80078f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80078f2:	f001 0103 	and.w	r1, r1, #3
 80078f6:	2902      	cmp	r1, #2
 80078f8:	f47f aed7 	bne.w	80076aa <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078fc:	4a1a      	ldr	r2, [pc, #104]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
 80078fe:	6812      	ldr	r2, [r2, #0]
 8007900:	0392      	lsls	r2, r2, #14
 8007902:	f57f aef6 	bpl.w	80076f2 <HAL_RCC_OscConfig+0x6e>
 8007906:	6862      	ldr	r2, [r4, #4]
 8007908:	2a00      	cmp	r2, #0
 800790a:	f47f aef2 	bne.w	80076f2 <HAL_RCC_OscConfig+0x6e>
 800790e:	e7ee      	b.n	80078ee <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 8007910:	4b16      	ldr	r3, [pc, #88]	; (800796c <HAL_RCC_OscConfig+0x2e8>)
 8007912:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007914:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8007916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800791a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800791c:	f7fe f860 	bl	80059e0 <HAL_GetTick>
 8007920:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007922:	e004      	b.n	800792e <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007924:	f7fe f85c 	bl	80059e0 <HAL_GetTick>
 8007928:	1b40      	subs	r0, r0, r5
 800792a:	2864      	cmp	r0, #100	; 0x64
 800792c:	d842      	bhi.n	80079b4 <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800792e:	6833      	ldr	r3, [r6, #0]
 8007930:	05da      	lsls	r2, r3, #23
 8007932:	d5f7      	bpl.n	8007924 <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007934:	68a3      	ldr	r3, [r4, #8]
 8007936:	2b01      	cmp	r3, #1
 8007938:	f000 817a 	beq.w	8007c30 <HAL_RCC_OscConfig+0x5ac>
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 814b 	beq.w	8007bd8 <HAL_RCC_OscConfig+0x554>
 8007942:	2b05      	cmp	r3, #5
 8007944:	4b08      	ldr	r3, [pc, #32]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
 8007946:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007948:	f000 8187 	beq.w	8007c5a <HAL_RCC_OscConfig+0x5d6>
 800794c:	f022 0201 	bic.w	r2, r2, #1
 8007950:	671a      	str	r2, [r3, #112]	; 0x70
 8007952:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007954:	f022 0204 	bic.w	r2, r2, #4
 8007958:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800795a:	f7fe f841 	bl	80059e0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800795e:	4e02      	ldr	r6, [pc, #8]	; (8007968 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007960:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007964:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007966:	e008      	b.n	800797a <HAL_RCC_OscConfig+0x2f6>
 8007968:	58024400 	.word	0x58024400
 800796c:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007970:	f7fe f836 	bl	80059e0 <HAL_GetTick>
 8007974:	1b40      	subs	r0, r0, r5
 8007976:	42b8      	cmp	r0, r7
 8007978:	d81c      	bhi.n	80079b4 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800797a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800797c:	079b      	lsls	r3, r3, #30
 800797e:	d5f7      	bpl.n	8007970 <HAL_RCC_OscConfig+0x2ec>
 8007980:	e714      	b.n	80077ac <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007982:	4aae      	ldr	r2, [pc, #696]	; (8007c3c <HAL_RCC_OscConfig+0x5b8>)
 8007984:	6813      	ldr	r3, [r2, #0]
 8007986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800798a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800798c:	e6a2      	b.n	80076d4 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800798e:	f7fe f83f 	bl	8005a10 <HAL_GetREVID>
 8007992:	f241 0303 	movw	r3, #4099	; 0x1003
 8007996:	4298      	cmp	r0, r3
 8007998:	d870      	bhi.n	8007a7c <HAL_RCC_OscConfig+0x3f8>
 800799a:	6a22      	ldr	r2, [r4, #32]
 800799c:	2a20      	cmp	r2, #32
 800799e:	f000 8153 	beq.w	8007c48 <HAL_RCC_OscConfig+0x5c4>
 80079a2:	49a6      	ldr	r1, [pc, #664]	; (8007c3c <HAL_RCC_OscConfig+0x5b8>)
 80079a4:	684b      	ldr	r3, [r1, #4]
 80079a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80079aa:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80079ae:	604b      	str	r3, [r1, #4]
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	e6c4      	b.n	800773e <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 80079b4:	2003      	movs	r0, #3
}
 80079b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079b8:	4ba0      	ldr	r3, [pc, #640]	; (8007c3c <HAL_RCC_OscConfig+0x5b8>)
 80079ba:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079bc:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80079cc:	f7fe f808 	bl	80059e0 <HAL_GetTick>
 80079d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079d2:	e004      	b.n	80079de <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079d4:	f7fe f804 	bl	80059e0 <HAL_GetTick>
 80079d8:	1b40      	subs	r0, r0, r5
 80079da:	2864      	cmp	r0, #100	; 0x64
 80079dc:	d8ea      	bhi.n	80079b4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079de:	6833      	ldr	r3, [r6, #0]
 80079e0:	0398      	lsls	r0, r3, #14
 80079e2:	d4f7      	bmi.n	80079d4 <HAL_RCC_OscConfig+0x350>
 80079e4:	e684      	b.n	80076f0 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 80079e6:	4b95      	ldr	r3, [pc, #596]	; (8007c3c <HAL_RCC_OscConfig+0x5b8>)
 80079e8:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80079ea:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 80079ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079f0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80079f2:	f7fd fff5 	bl	80059e0 <HAL_GetTick>
 80079f6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80079f8:	e004      	b.n	8007a04 <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80079fa:	f7fd fff1 	bl	80059e0 <HAL_GetTick>
 80079fe:	1b40      	subs	r0, r0, r5
 8007a00:	2802      	cmp	r0, #2
 8007a02:	d8d7      	bhi.n	80079b4 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a04:	6833      	ldr	r3, [r6, #0]
 8007a06:	0498      	lsls	r0, r3, #18
 8007a08:	d4f7      	bmi.n	80079fa <HAL_RCC_OscConfig+0x376>
 8007a0a:	e6cb      	b.n	80077a4 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 8007a0c:	4b8b      	ldr	r3, [pc, #556]	; (8007c3c <HAL_RCC_OscConfig+0x5b8>)
 8007a0e:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a10:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 8007a12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007a18:	f7fd ffe2 	bl	80059e0 <HAL_GetTick>
 8007a1c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a1e:	e004      	b.n	8007a2a <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007a20:	f7fd ffde 	bl	80059e0 <HAL_GetTick>
 8007a24:	1b40      	subs	r0, r0, r5
 8007a26:	2802      	cmp	r0, #2
 8007a28:	d8c4      	bhi.n	80079b4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a2a:	6833      	ldr	r3, [r6, #0]
 8007a2c:	05df      	lsls	r7, r3, #23
 8007a2e:	d4f7      	bmi.n	8007a20 <HAL_RCC_OscConfig+0x39c>
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	e684      	b.n	800773e <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a34:	4a81      	ldr	r2, [pc, #516]	; (8007c3c <HAL_RCC_OscConfig+0x5b8>)
 8007a36:	6921      	ldr	r1, [r4, #16]
 8007a38:	6853      	ldr	r3, [r2, #4]
 8007a3a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007a3e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007a42:	6053      	str	r3, [r2, #4]
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	e678      	b.n	800773a <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 8007a48:	4b7c      	ldr	r3, [pc, #496]	; (8007c3c <HAL_RCC_OscConfig+0x5b8>)
 8007a4a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a4c:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8007a4e:	f022 0201 	bic.w	r2, r2, #1
 8007a52:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007a54:	f7fd ffc4 	bl	80059e0 <HAL_GetTick>
 8007a58:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a5a:	e004      	b.n	8007a66 <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a5c:	f7fd ffc0 	bl	80059e0 <HAL_GetTick>
 8007a60:	1b40      	subs	r0, r0, r5
 8007a62:	2802      	cmp	r0, #2
 8007a64:	d8a6      	bhi.n	80079b4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a66:	6833      	ldr	r3, [r6, #0]
 8007a68:	0758      	lsls	r0, r3, #29
 8007a6a:	d4f7      	bmi.n	8007a5c <HAL_RCC_OscConfig+0x3d8>
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	e664      	b.n	800773a <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007a70:	0792      	lsls	r2, r2, #30
 8007a72:	f47f aef2 	bne.w	800785a <HAL_RCC_OscConfig+0x1d6>
 8007a76:	e645      	b.n	8007704 <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8007a78:	2001      	movs	r0, #1
}
 8007a7a:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a7c:	4a6f      	ldr	r2, [pc, #444]	; (8007c3c <HAL_RCC_OscConfig+0x5b8>)
 8007a7e:	6a21      	ldr	r1, [r4, #32]
 8007a80:	68d3      	ldr	r3, [r2, #12]
 8007a82:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8007a86:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007a8a:	60d3      	str	r3, [r2, #12]
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	e656      	b.n	800773e <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8007a90:	f7fd ffa6 	bl	80059e0 <HAL_GetTick>
 8007a94:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a96:	e004      	b.n	8007aa2 <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a98:	f7fd ffa2 	bl	80059e0 <HAL_GetTick>
 8007a9c:	1b80      	subs	r0, r0, r6
 8007a9e:	2802      	cmp	r0, #2
 8007aa0:	d888      	bhi.n	80079b4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007aa2:	682b      	ldr	r3, [r5, #0]
 8007aa4:	0199      	lsls	r1, r3, #6
 8007aa6:	d4f7      	bmi.n	8007a98 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007aa8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007aaa:	4b65      	ldr	r3, [pc, #404]	; (8007c40 <HAL_RCC_OscConfig+0x5bc>)
 8007aac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007aae:	4013      	ands	r3, r2
 8007ab0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ab2:	4964      	ldr	r1, [pc, #400]	; (8007c44 <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ab4:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ab6:	4e61      	ldr	r6, [pc, #388]	; (8007c3c <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ab8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8007abc:	62ab      	str	r3, [r5, #40]	; 0x28
 8007abe:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8007ac0:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8007ac4:	3f01      	subs	r7, #1
 8007ac6:	1e50      	subs	r0, r2, #1
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007acc:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8007ad0:	025b      	lsls	r3, r3, #9
 8007ad2:	0400      	lsls	r0, r0, #16
 8007ad4:	3a01      	subs	r2, #1
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8007adc:	0612      	lsls	r2, r2, #24
 8007ade:	4303      	orrs	r3, r0
 8007ae0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007ae4:	433b      	orrs	r3, r7
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8007aea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007aec:	f023 0301 	bic.w	r3, r3, #1
 8007af0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007af2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8007af4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007af6:	4011      	ands	r1, r2
 8007af8:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8007afc:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007afe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007b00:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007b02:	f023 030c 	bic.w	r3, r3, #12
 8007b06:	4313      	orrs	r3, r2
 8007b08:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007b0a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007b0c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007b0e:	f023 0302 	bic.w	r3, r3, #2
 8007b12:	4313      	orrs	r3, r2
 8007b14:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b1c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b24:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007b26:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b2c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8007b2e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007b30:	f043 0301 	orr.w	r3, r3, #1
 8007b34:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8007b36:	682b      	ldr	r3, [r5, #0]
 8007b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b3c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007b3e:	f7fd ff4f 	bl	80059e0 <HAL_GetTick>
 8007b42:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b44:	e005      	b.n	8007b52 <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b46:	f7fd ff4b 	bl	80059e0 <HAL_GetTick>
 8007b4a:	1b00      	subs	r0, r0, r4
 8007b4c:	2802      	cmp	r0, #2
 8007b4e:	f63f af31 	bhi.w	80079b4 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b52:	6833      	ldr	r3, [r6, #0]
 8007b54:	019a      	lsls	r2, r3, #6
 8007b56:	d5f6      	bpl.n	8007b46 <HAL_RCC_OscConfig+0x4c2>
 8007b58:	e646      	b.n	80077e8 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b5a:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007b5e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b60:	f43f ae43 	beq.w	80077ea <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b64:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b68:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007b6a:	428b      	cmp	r3, r1
 8007b6c:	f47f aebf 	bne.w	80078ee <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b70:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b76:	429a      	cmp	r2, r3
 8007b78:	f47f aeb9 	bne.w	80078ee <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007b7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007b7e:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8007b82:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b84:	429a      	cmp	r2, r3
 8007b86:	f47f aeb2 	bne.w	80078ee <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007b8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b8c:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8007b90:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007b92:	429a      	cmp	r2, r3
 8007b94:	f47f aeab 	bne.w	80078ee <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007b98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b9a:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8007b9e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	f47f aea4 	bne.w	80078ee <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007ba6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007ba8:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8007bac:	3801      	subs	r0, #1
  return HAL_OK;
 8007bae:	1a28      	subs	r0, r5, r0
 8007bb0:	bf18      	it	ne
 8007bb2:	2001      	movne	r0, #1
}
 8007bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bb6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	e586      	b.n	80076d4 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bc6:	4a1d      	ldr	r2, [pc, #116]	; (8007c3c <HAL_RCC_OscConfig+0x5b8>)
 8007bc8:	6853      	ldr	r3, [r2, #4]
 8007bca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd2:	6053      	str	r3, [r2, #4]
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	e5b0      	b.n	800773a <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bd8:	4b18      	ldr	r3, [pc, #96]	; (8007c3c <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bda:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007be0:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007be2:	f022 0201 	bic.w	r2, r2, #1
 8007be6:	671a      	str	r2, [r3, #112]	; 0x70
 8007be8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bea:	f022 0204 	bic.w	r2, r2, #4
 8007bee:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8007bf0:	f7fd fef6 	bl	80059e0 <HAL_GetTick>
 8007bf4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007bf6:	e005      	b.n	8007c04 <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bf8:	f7fd fef2 	bl	80059e0 <HAL_GetTick>
 8007bfc:	1b40      	subs	r0, r0, r5
 8007bfe:	42b8      	cmp	r0, r7
 8007c00:	f63f aed8 	bhi.w	80079b4 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c04:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8007c06:	0798      	lsls	r0, r3, #30
 8007c08:	d4f6      	bmi.n	8007bf8 <HAL_RCC_OscConfig+0x574>
 8007c0a:	e5cf      	b.n	80077ac <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c0c:	68f3      	ldr	r3, [r6, #12]
 8007c0e:	6a22      	ldr	r2, [r4, #32]
 8007c10:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8007c14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007c18:	60f3      	str	r3, [r6, #12]
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	e58f      	b.n	800773e <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c1e:	6873      	ldr	r3, [r6, #4]
 8007c20:	6922      	ldr	r2, [r4, #16]
 8007c22:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007c26:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007c2a:	6073      	str	r3, [r6, #4]
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	e584      	b.n	800773a <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c30:	4a02      	ldr	r2, [pc, #8]	; (8007c3c <HAL_RCC_OscConfig+0x5b8>)
 8007c32:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8007c34:	f043 0301 	orr.w	r3, r3, #1
 8007c38:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c3a:	e68e      	b.n	800795a <HAL_RCC_OscConfig+0x2d6>
 8007c3c:	58024400 	.word	0x58024400
 8007c40:	fffffc0c 	.word	0xfffffc0c
 8007c44:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c48:	4a08      	ldr	r2, [pc, #32]	; (8007c6c <HAL_RCC_OscConfig+0x5e8>)
 8007c4a:	6853      	ldr	r3, [r2, #4]
 8007c4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c54:	6053      	str	r3, [r2, #4]
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	e571      	b.n	800773e <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c5a:	f042 0204 	orr.w	r2, r2, #4
 8007c5e:	671a      	str	r2, [r3, #112]	; 0x70
 8007c60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c62:	f042 0201 	orr.w	r2, r2, #1
 8007c66:	671a      	str	r2, [r3, #112]	; 0x70
 8007c68:	e677      	b.n	800795a <HAL_RCC_OscConfig+0x2d6>
 8007c6a:	bf00      	nop
 8007c6c:	58024400 	.word	0x58024400

08007c70 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c70:	4a47      	ldr	r2, [pc, #284]	; (8007d90 <HAL_RCC_GetSysClockFreq+0x120>)
 8007c72:	6913      	ldr	r3, [r2, #16]
 8007c74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c78:	2b10      	cmp	r3, #16
 8007c7a:	d004      	beq.n	8007c86 <HAL_RCC_GetSysClockFreq+0x16>
 8007c7c:	2b18      	cmp	r3, #24
 8007c7e:	d00d      	beq.n	8007c9c <HAL_RCC_GetSysClockFreq+0x2c>
 8007c80:	b11b      	cbz	r3, 8007c8a <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007c82:	4844      	ldr	r0, [pc, #272]	; (8007d94 <HAL_RCC_GetSysClockFreq+0x124>)
 8007c84:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c86:	4844      	ldr	r0, [pc, #272]	; (8007d98 <HAL_RCC_GetSysClockFreq+0x128>)
 8007c88:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c8a:	6813      	ldr	r3, [r2, #0]
 8007c8c:	0699      	lsls	r1, r3, #26
 8007c8e:	d54a      	bpl.n	8007d26 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c90:	6813      	ldr	r3, [r2, #0]
 8007c92:	4842      	ldr	r0, [pc, #264]	; (8007d9c <HAL_RCC_GetSysClockFreq+0x12c>)
 8007c94:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007c98:	40d8      	lsrs	r0, r3
 8007c9a:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c9c:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8007c9e:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007ca0:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007ca2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8007ca4:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007ca8:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007cac:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8007cae:	d038      	beq.n	8007d22 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007cb0:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007cb4:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cb8:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007cbc:	fb01 f105 	mul.w	r1, r1, r5
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	ee07 1a90 	vmov	s15, r1
 8007cc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8007cca:	d002      	beq.n	8007cd2 <HAL_RCC_GetSysClockFreq+0x62>
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d02c      	beq.n	8007d2a <HAL_RCC_GetSysClockFreq+0xba>
 8007cd0:	b393      	cbz	r3, 8007d38 <HAL_RCC_GetSysClockFreq+0xc8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cd2:	ee07 0a90 	vmov	s15, r0
 8007cd6:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8007da0 <HAL_RCC_GetSysClockFreq+0x130>
 8007cda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cde:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007ce0:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8007ce4:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8007da4 <HAL_RCC_GetSysClockFreq+0x134>
 8007ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cec:	ee07 3a90 	vmov	s15, r3
 8007cf0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cf8:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007cfc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007d00:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007d04:	4b22      	ldr	r3, [pc, #136]	; (8007d90 <HAL_RCC_GetSysClockFreq+0x120>)
 8007d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d08:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007d0c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007d0e:	ee07 3a90 	vmov	s15, r3
 8007d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d1e:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8007d22:	bc30      	pop	{r4, r5}
 8007d24:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007d26:	481d      	ldr	r0, [pc, #116]	; (8007d9c <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8007d28:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d2a:	ee07 0a90 	vmov	s15, r0
 8007d2e:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8007da8 <HAL_RCC_GetSysClockFreq+0x138>
 8007d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d36:	e7d2      	b.n	8007cde <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d38:	6813      	ldr	r3, [r2, #0]
 8007d3a:	069b      	lsls	r3, r3, #26
 8007d3c:	d520      	bpl.n	8007d80 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d3e:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d40:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d44:	4915      	ldr	r1, [pc, #84]	; (8007d9c <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d46:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d4a:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d52:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d54:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d56:	eddf 4a13 	vldr	s9, [pc, #76]	; 8007da4 <HAL_RCC_GetSysClockFreq+0x134>
 8007d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d5e:	ee06 1a10 	vmov	s12, r1
 8007d62:	ee06 3a90 	vmov	s13, r3
 8007d66:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007d6a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007d6e:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8007d72:	eee7 6a24 	vfma.f32	s13, s14, s9
 8007d76:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007d7a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8007d7e:	e7c1      	b.n	8007d04 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d80:	ee07 0a90 	vmov	s15, r0
 8007d84:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8007dac <HAL_RCC_GetSysClockFreq+0x13c>
 8007d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d8c:	e7a7      	b.n	8007cde <HAL_RCC_GetSysClockFreq+0x6e>
 8007d8e:	bf00      	nop
 8007d90:	58024400 	.word	0x58024400
 8007d94:	003d0900 	.word	0x003d0900
 8007d98:	017d7840 	.word	0x017d7840
 8007d9c:	03d09000 	.word	0x03d09000
 8007da0:	4a742400 	.word	0x4a742400
 8007da4:	39000000 	.word	0x39000000
 8007da8:	4bbebc20 	.word	0x4bbebc20
 8007dac:	4c742400 	.word	0x4c742400

08007db0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007db0:	2800      	cmp	r0, #0
 8007db2:	f000 810e 	beq.w	8007fd2 <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007db6:	4a8d      	ldr	r2, [pc, #564]	; (8007fec <HAL_RCC_ClockConfig+0x23c>)
 8007db8:	6813      	ldr	r3, [r2, #0]
 8007dba:	f003 030f 	and.w	r3, r3, #15
 8007dbe:	428b      	cmp	r3, r1
{
 8007dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007dc8:	d20c      	bcs.n	8007de4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dca:	6813      	ldr	r3, [r2, #0]
 8007dcc:	f023 030f 	bic.w	r3, r3, #15
 8007dd0:	430b      	orrs	r3, r1
 8007dd2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dd4:	6813      	ldr	r3, [r2, #0]
 8007dd6:	f003 030f 	and.w	r3, r3, #15
 8007dda:	428b      	cmp	r3, r1
 8007ddc:	d002      	beq.n	8007de4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8007dde:	2001      	movs	r0, #1
}
 8007de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	075f      	lsls	r7, r3, #29
 8007de8:	d50b      	bpl.n	8007e02 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007dea:	4981      	ldr	r1, [pc, #516]	; (8007ff0 <HAL_RCC_ClockConfig+0x240>)
 8007dec:	6920      	ldr	r0, [r4, #16]
 8007dee:	698a      	ldr	r2, [r1, #24]
 8007df0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007df4:	4290      	cmp	r0, r2
 8007df6:	d904      	bls.n	8007e02 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007df8:	698a      	ldr	r2, [r1, #24]
 8007dfa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007dfe:	4302      	orrs	r2, r0
 8007e00:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e02:	071e      	lsls	r6, r3, #28
 8007e04:	d50b      	bpl.n	8007e1e <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007e06:	497a      	ldr	r1, [pc, #488]	; (8007ff0 <HAL_RCC_ClockConfig+0x240>)
 8007e08:	6960      	ldr	r0, [r4, #20]
 8007e0a:	69ca      	ldr	r2, [r1, #28]
 8007e0c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007e10:	4290      	cmp	r0, r2
 8007e12:	d904      	bls.n	8007e1e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007e14:	69ca      	ldr	r2, [r1, #28]
 8007e16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007e1a:	4302      	orrs	r2, r0
 8007e1c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e1e:	06d8      	lsls	r0, r3, #27
 8007e20:	d50b      	bpl.n	8007e3a <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007e22:	4973      	ldr	r1, [pc, #460]	; (8007ff0 <HAL_RCC_ClockConfig+0x240>)
 8007e24:	69a0      	ldr	r0, [r4, #24]
 8007e26:	69ca      	ldr	r2, [r1, #28]
 8007e28:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007e2c:	4290      	cmp	r0, r2
 8007e2e:	d904      	bls.n	8007e3a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007e30:	69ca      	ldr	r2, [r1, #28]
 8007e32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e36:	4302      	orrs	r2, r0
 8007e38:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e3a:	0699      	lsls	r1, r3, #26
 8007e3c:	d50b      	bpl.n	8007e56 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007e3e:	496c      	ldr	r1, [pc, #432]	; (8007ff0 <HAL_RCC_ClockConfig+0x240>)
 8007e40:	69e0      	ldr	r0, [r4, #28]
 8007e42:	6a0a      	ldr	r2, [r1, #32]
 8007e44:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007e48:	4290      	cmp	r0, r2
 8007e4a:	d904      	bls.n	8007e56 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007e4c:	6a0a      	ldr	r2, [r1, #32]
 8007e4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007e52:	4302      	orrs	r2, r0
 8007e54:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e56:	079a      	lsls	r2, r3, #30
 8007e58:	f140 80ad 	bpl.w	8007fb6 <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e5c:	4864      	ldr	r0, [pc, #400]	; (8007ff0 <HAL_RCC_ClockConfig+0x240>)
 8007e5e:	68e1      	ldr	r1, [r4, #12]
 8007e60:	6982      	ldr	r2, [r0, #24]
 8007e62:	f002 020f 	and.w	r2, r2, #15
 8007e66:	4291      	cmp	r1, r2
 8007e68:	d904      	bls.n	8007e74 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e6a:	6982      	ldr	r2, [r0, #24]
 8007e6c:	f022 020f 	bic.w	r2, r2, #15
 8007e70:	430a      	orrs	r2, r1
 8007e72:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e74:	07d8      	lsls	r0, r3, #31
 8007e76:	d531      	bpl.n	8007edc <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007e78:	4a5d      	ldr	r2, [pc, #372]	; (8007ff0 <HAL_RCC_ClockConfig+0x240>)
 8007e7a:	68a1      	ldr	r1, [r4, #8]
 8007e7c:	6993      	ldr	r3, [r2, #24]
 8007e7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007e82:	430b      	orrs	r3, r1
 8007e84:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e86:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e88:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e8a:	2902      	cmp	r1, #2
 8007e8c:	f000 80a3 	beq.w	8007fd6 <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e90:	2903      	cmp	r1, #3
 8007e92:	f000 809a 	beq.w	8007fca <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007e96:	2901      	cmp	r1, #1
 8007e98:	f000 80a3 	beq.w	8007fe2 <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e9c:	0758      	lsls	r0, r3, #29
 8007e9e:	d59e      	bpl.n	8007dde <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ea0:	4a53      	ldr	r2, [pc, #332]	; (8007ff0 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ea2:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ea6:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ea8:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007eaa:	f023 0307 	bic.w	r3, r3, #7
 8007eae:	430b      	orrs	r3, r1
 8007eb0:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 8007eb2:	f7fd fd95 	bl	80059e0 <HAL_GetTick>
 8007eb6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eb8:	e005      	b.n	8007ec6 <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007eba:	f7fd fd91 	bl	80059e0 <HAL_GetTick>
 8007ebe:	1b80      	subs	r0, r0, r6
 8007ec0:	4540      	cmp	r0, r8
 8007ec2:	f200 808c 	bhi.w	8007fde <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	6862      	ldr	r2, [r4, #4]
 8007eca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ece:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8007ed2:	d1f2      	bne.n	8007eba <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	0799      	lsls	r1, r3, #30
 8007ed8:	d506      	bpl.n	8007ee8 <HAL_RCC_ClockConfig+0x138>
 8007eda:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007edc:	4844      	ldr	r0, [pc, #272]	; (8007ff0 <HAL_RCC_ClockConfig+0x240>)
 8007ede:	6982      	ldr	r2, [r0, #24]
 8007ee0:	f002 020f 	and.w	r2, r2, #15
 8007ee4:	428a      	cmp	r2, r1
 8007ee6:	d86a      	bhi.n	8007fbe <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ee8:	4940      	ldr	r1, [pc, #256]	; (8007fec <HAL_RCC_ClockConfig+0x23c>)
 8007eea:	680a      	ldr	r2, [r1, #0]
 8007eec:	f002 020f 	and.w	r2, r2, #15
 8007ef0:	42aa      	cmp	r2, r5
 8007ef2:	d90a      	bls.n	8007f0a <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ef4:	680a      	ldr	r2, [r1, #0]
 8007ef6:	f022 020f 	bic.w	r2, r2, #15
 8007efa:	432a      	orrs	r2, r5
 8007efc:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007efe:	680a      	ldr	r2, [r1, #0]
 8007f00:	f002 020f 	and.w	r2, r2, #15
 8007f04:	42aa      	cmp	r2, r5
 8007f06:	f47f af6a 	bne.w	8007dde <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f0a:	075a      	lsls	r2, r3, #29
 8007f0c:	d50b      	bpl.n	8007f26 <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f0e:	4938      	ldr	r1, [pc, #224]	; (8007ff0 <HAL_RCC_ClockConfig+0x240>)
 8007f10:	6920      	ldr	r0, [r4, #16]
 8007f12:	698a      	ldr	r2, [r1, #24]
 8007f14:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007f18:	4290      	cmp	r0, r2
 8007f1a:	d204      	bcs.n	8007f26 <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f1c:	698a      	ldr	r2, [r1, #24]
 8007f1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007f22:	4302      	orrs	r2, r0
 8007f24:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f26:	071f      	lsls	r7, r3, #28
 8007f28:	d50b      	bpl.n	8007f42 <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f2a:	4931      	ldr	r1, [pc, #196]	; (8007ff0 <HAL_RCC_ClockConfig+0x240>)
 8007f2c:	6960      	ldr	r0, [r4, #20]
 8007f2e:	69ca      	ldr	r2, [r1, #28]
 8007f30:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007f34:	4290      	cmp	r0, r2
 8007f36:	d204      	bcs.n	8007f42 <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f38:	69ca      	ldr	r2, [r1, #28]
 8007f3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007f3e:	4302      	orrs	r2, r0
 8007f40:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f42:	06de      	lsls	r6, r3, #27
 8007f44:	d50b      	bpl.n	8007f5e <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f46:	492a      	ldr	r1, [pc, #168]	; (8007ff0 <HAL_RCC_ClockConfig+0x240>)
 8007f48:	69a0      	ldr	r0, [r4, #24]
 8007f4a:	69ca      	ldr	r2, [r1, #28]
 8007f4c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007f50:	4290      	cmp	r0, r2
 8007f52:	d204      	bcs.n	8007f5e <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f54:	69ca      	ldr	r2, [r1, #28]
 8007f56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f5a:	4302      	orrs	r2, r0
 8007f5c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f5e:	069d      	lsls	r5, r3, #26
 8007f60:	d50b      	bpl.n	8007f7a <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f62:	4a23      	ldr	r2, [pc, #140]	; (8007ff0 <HAL_RCC_ClockConfig+0x240>)
 8007f64:	69e1      	ldr	r1, [r4, #28]
 8007f66:	6a13      	ldr	r3, [r2, #32]
 8007f68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f6c:	4299      	cmp	r1, r3
 8007f6e:	d204      	bcs.n	8007f7a <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007f70:	6a13      	ldr	r3, [r2, #32]
 8007f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f76:	430b      	orrs	r3, r1
 8007f78:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f7a:	f7ff fe79 	bl	8007c70 <HAL_RCC_GetSysClockFreq>
 8007f7e:	4b1c      	ldr	r3, [pc, #112]	; (8007ff0 <HAL_RCC_ClockConfig+0x240>)
 8007f80:	4602      	mov	r2, r0
 8007f82:	481c      	ldr	r0, [pc, #112]	; (8007ff4 <HAL_RCC_ClockConfig+0x244>)
 8007f84:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f86:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f88:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8007f8c:	4d1a      	ldr	r5, [pc, #104]	; (8007ff8 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f8e:	f003 030f 	and.w	r3, r3, #15
 8007f92:	4c1a      	ldr	r4, [pc, #104]	; (8007ffc <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f94:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f96:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f98:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8007f9c:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f9e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8007fa2:	4d17      	ldr	r5, [pc, #92]	; (8008000 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007fa4:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007fa6:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8007faa:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007fac:	6023      	str	r3, [r4, #0]
}
 8007fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8007fb2:	f7fd bcb3 	b.w	800591c <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fb6:	07da      	lsls	r2, r3, #31
 8007fb8:	f53f af5e 	bmi.w	8007e78 <HAL_RCC_ClockConfig+0xc8>
 8007fbc:	e794      	b.n	8007ee8 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fbe:	6982      	ldr	r2, [r0, #24]
 8007fc0:	f022 020f 	bic.w	r2, r2, #15
 8007fc4:	4311      	orrs	r1, r2
 8007fc6:	6181      	str	r1, [r0, #24]
 8007fc8:	e78e      	b.n	8007ee8 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007fca:	019f      	lsls	r7, r3, #6
 8007fcc:	f53f af68 	bmi.w	8007ea0 <HAL_RCC_ClockConfig+0xf0>
 8007fd0:	e705      	b.n	8007dde <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8007fd2:	2001      	movs	r0, #1
}
 8007fd4:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fd6:	039b      	lsls	r3, r3, #14
 8007fd8:	f53f af62 	bmi.w	8007ea0 <HAL_RCC_ClockConfig+0xf0>
 8007fdc:	e6ff      	b.n	8007dde <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8007fde:	2003      	movs	r0, #3
 8007fe0:	e6fe      	b.n	8007de0 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fe2:	05de      	lsls	r6, r3, #23
 8007fe4:	f53f af5c 	bmi.w	8007ea0 <HAL_RCC_ClockConfig+0xf0>
 8007fe8:	e6f9      	b.n	8007dde <HAL_RCC_ClockConfig+0x2e>
 8007fea:	bf00      	nop
 8007fec:	52002000 	.word	0x52002000
 8007ff0:	58024400 	.word	0x58024400
 8007ff4:	08009908 	.word	0x08009908
 8007ff8:	24001068 	.word	0x24001068
 8007ffc:	24000004 	.word	0x24000004
 8008000:	24000000 	.word	0x24000000

08008004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008004:	b538      	push	{r3, r4, r5, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008006:	f7ff fe33 	bl	8007c70 <HAL_RCC_GetSysClockFreq>
 800800a:	4b0b      	ldr	r3, [pc, #44]	; (8008038 <HAL_RCC_GetHCLKFreq+0x34>)
 800800c:	490b      	ldr	r1, [pc, #44]	; (800803c <HAL_RCC_GetHCLKFreq+0x38>)
 800800e:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008010:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008012:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008016:	4c0a      	ldr	r4, [pc, #40]	; (8008040 <HAL_RCC_GetHCLKFreq+0x3c>)
 8008018:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800801c:	4d09      	ldr	r5, [pc, #36]	; (8008044 <HAL_RCC_GetHCLKFreq+0x40>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800801e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008020:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008022:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008026:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800802a:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800802e:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 8008032:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008034:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	58024400 	.word	0x58024400
 800803c:	08009908 	.word	0x08009908
 8008040:	24000004 	.word	0x24000004
 8008044:	24000000 	.word	0x24000000

08008048 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008048:	4a3b      	ldr	r2, [pc, #236]	; (8008138 <RCCEx_PLL2_Config+0xf0>)
{
 800804a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800804c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	2b03      	cmp	r3, #3
 8008054:	d069      	beq.n	800812a <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008056:	6813      	ldr	r3, [r2, #0]
 8008058:	4606      	mov	r6, r0
 800805a:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800805c:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 800805e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008062:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008064:	f7fd fcbc 	bl	80059e0 <HAL_GetTick>
 8008068:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800806a:	e004      	b.n	8008076 <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800806c:	f7fd fcb8 	bl	80059e0 <HAL_GetTick>
 8008070:	1b43      	subs	r3, r0, r5
 8008072:	2b02      	cmp	r3, #2
 8008074:	d857      	bhi.n	8008126 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	011a      	lsls	r2, r3, #4
 800807a:	d4f7      	bmi.n	800806c <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800807c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800807e:	6832      	ldr	r2, [r6, #0]
 8008080:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008084:	492d      	ldr	r1, [pc, #180]	; (800813c <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008086:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800808a:	62a3      	str	r3, [r4, #40]	; 0x28
 800808c:	6875      	ldr	r5, [r6, #4]
 800808e:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008092:	3d01      	subs	r5, #1
 8008094:	1e50      	subs	r0, r2, #1
 8008096:	3b01      	subs	r3, #1
 8008098:	6932      	ldr	r2, [r6, #16]
 800809a:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800809e:	025b      	lsls	r3, r3, #9
 80080a0:	0400      	lsls	r0, r0, #16
 80080a2:	3a01      	subs	r2, #1
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80080aa:	0612      	lsls	r2, r2, #24
 80080ac:	4303      	orrs	r3, r0
 80080ae:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80080b2:	432b      	orrs	r3, r5
 80080b4:	4313      	orrs	r3, r2
 80080b6:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80080b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80080ba:	6972      	ldr	r2, [r6, #20]
 80080bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80080c0:	4313      	orrs	r3, r2
 80080c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80080c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80080c6:	69b2      	ldr	r2, [r6, #24]
 80080c8:	f023 0320 	bic.w	r3, r3, #32
 80080cc:	4313      	orrs	r3, r2
 80080ce:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80080d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80080d2:	f023 0310 	bic.w	r3, r3, #16
 80080d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80080d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80080da:	69f3      	ldr	r3, [r6, #28]
 80080dc:	4011      	ands	r1, r2
 80080de:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80080e2:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80080e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80080e6:	f043 0310 	orr.w	r3, r3, #16
 80080ea:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80080ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80080ee:	b1f7      	cbz	r7, 800812e <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80080f0:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080f2:	bf0c      	ite	eq
 80080f4:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80080f8:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80080fc:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80080fe:	4b0e      	ldr	r3, [pc, #56]	; (8008138 <RCCEx_PLL2_Config+0xf0>)
 8008100:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008102:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 8008104:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008108:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800810a:	f7fd fc69 	bl	80059e0 <HAL_GetTick>
 800810e:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008110:	e004      	b.n	800811c <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008112:	f7fd fc65 	bl	80059e0 <HAL_GetTick>
 8008116:	1b00      	subs	r0, r0, r4
 8008118:	2802      	cmp	r0, #2
 800811a:	d804      	bhi.n	8008126 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	d5f7      	bpl.n	8008112 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8008122:	2000      	movs	r0, #0
}
 8008124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008126:	2003      	movs	r0, #3
}
 8008128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800812a:	2001      	movs	r0, #1
}
 800812c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800812e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008132:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008134:	e7e3      	b.n	80080fe <RCCEx_PLL2_Config+0xb6>
 8008136:	bf00      	nop
 8008138:	58024400 	.word	0x58024400
 800813c:	ffff0007 	.word	0xffff0007

08008140 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008140:	4a3b      	ldr	r2, [pc, #236]	; (8008230 <RCCEx_PLL3_Config+0xf0>)
{
 8008142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008144:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008146:	f003 0303 	and.w	r3, r3, #3
 800814a:	2b03      	cmp	r3, #3
 800814c:	d069      	beq.n	8008222 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800814e:	6813      	ldr	r3, [r2, #0]
 8008150:	4606      	mov	r6, r0
 8008152:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008154:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8008156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800815a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800815c:	f7fd fc40 	bl	80059e0 <HAL_GetTick>
 8008160:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008162:	e004      	b.n	800816e <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008164:	f7fd fc3c 	bl	80059e0 <HAL_GetTick>
 8008168:	1b43      	subs	r3, r0, r5
 800816a:	2b02      	cmp	r3, #2
 800816c:	d857      	bhi.n	800821e <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	009a      	lsls	r2, r3, #2
 8008172:	d4f7      	bmi.n	8008164 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008174:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008176:	6832      	ldr	r2, [r6, #0]
 8008178:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800817c:	492d      	ldr	r1, [pc, #180]	; (8008234 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800817e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008182:	62a3      	str	r3, [r4, #40]	; 0x28
 8008184:	6875      	ldr	r5, [r6, #4]
 8008186:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800818a:	3d01      	subs	r5, #1
 800818c:	1e50      	subs	r0, r2, #1
 800818e:	3b01      	subs	r3, #1
 8008190:	6932      	ldr	r2, [r6, #16]
 8008192:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008196:	025b      	lsls	r3, r3, #9
 8008198:	0400      	lsls	r0, r0, #16
 800819a:	3a01      	subs	r2, #1
 800819c:	b29b      	uxth	r3, r3
 800819e:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80081a2:	0612      	lsls	r2, r2, #24
 80081a4:	4303      	orrs	r3, r0
 80081a6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80081aa:	432b      	orrs	r3, r5
 80081ac:	4313      	orrs	r3, r2
 80081ae:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80081b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80081b2:	6972      	ldr	r2, [r6, #20]
 80081b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80081b8:	4313      	orrs	r3, r2
 80081ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80081bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80081be:	69b2      	ldr	r2, [r6, #24]
 80081c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081c4:	4313      	orrs	r3, r2
 80081c6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80081c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80081ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081ce:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081d0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80081d2:	69f3      	ldr	r3, [r6, #28]
 80081d4:	4011      	ands	r1, r2
 80081d6:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80081da:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80081dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80081de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80081e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80081e6:	b1f7      	cbz	r7, 8008226 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80081e8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80081ea:	bf0c      	ite	eq
 80081ec:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80081f0:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80081f4:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80081f6:	4b0e      	ldr	r3, [pc, #56]	; (8008230 <RCCEx_PLL3_Config+0xf0>)
 80081f8:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081fa:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 80081fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008200:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008202:	f7fd fbed 	bl	80059e0 <HAL_GetTick>
 8008206:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008208:	e004      	b.n	8008214 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800820a:	f7fd fbe9 	bl	80059e0 <HAL_GetTick>
 800820e:	1b00      	subs	r0, r0, r4
 8008210:	2802      	cmp	r0, #2
 8008212:	d804      	bhi.n	800821e <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	d5f7      	bpl.n	800820a <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 800821a:	2000      	movs	r0, #0
}
 800821c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800821e:	2003      	movs	r0, #3
}
 8008220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008222:	2001      	movs	r0, #1
}
 8008224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008226:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800822a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800822c:	e7e3      	b.n	80081f6 <RCCEx_PLL3_Config+0xb6>
 800822e:	bf00      	nop
 8008230:	58024400 	.word	0x58024400
 8008234:	ffff0007 	.word	0xffff0007

08008238 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800823c:	6803      	ldr	r3, [r0, #0]
{
 800823e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008240:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8008244:	d01c      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008246:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8008248:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800824c:	f000 84c7 	beq.w	8008bde <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8008250:	d823      	bhi.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008252:	2a00      	cmp	r2, #0
 8008254:	f000 842c 	beq.w	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8008258:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800825c:	d120      	bne.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800825e:	2102      	movs	r1, #2
 8008260:	3004      	adds	r0, #4
 8008262:	f7ff fef1 	bl	8008048 <RCCEx_PLL2_Config>
 8008266:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008268:	2e00      	cmp	r6, #0
 800826a:	f040 84c0 	bne.w	8008bee <HAL_RCCEx_PeriphCLKConfig+0x9b6>
 800826e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8008270:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008272:	48b0      	ldr	r0, [pc, #704]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008274:	2600      	movs	r6, #0
 8008276:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8008278:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800827c:	430a      	orrs	r2, r1
 800827e:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008280:	05da      	lsls	r2, r3, #23
 8008282:	d511      	bpl.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008284:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008286:	2a04      	cmp	r2, #4
 8008288:	f200 8580 	bhi.w	8008d8c <HAL_RCCEx_PeriphCLKConfig+0xb54>
 800828c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008290:	04c104ba 	.word	0x04c104ba
 8008294:	033b04b2 	.word	0x033b04b2
 8008298:	033b      	.short	0x033b
    switch(PeriphClkInit->SpdifrxClockSelection)
 800829a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800829e:	d0e8      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80082a0:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 80082a2:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80082a6:	d4ed      	bmi.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80082a8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80082aa:	059f      	lsls	r7, r3, #22
 80082ac:	d51b      	bpl.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 80082ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80082b0:	2a80      	cmp	r2, #128	; 0x80
 80082b2:	f000 84b7 	beq.w	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 80082b6:	f200 8127 	bhi.w	8008508 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80082ba:	2a00      	cmp	r2, #0
 80082bc:	f000 83e6 	beq.w	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x854>
 80082c0:	2a40      	cmp	r2, #64	; 0x40
 80082c2:	f040 8128 	bne.w	8008516 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082c6:	2100      	movs	r1, #0
 80082c8:	1d20      	adds	r0, r4, #4
 80082ca:	f7ff febd 	bl	8008048 <RCCEx_PLL2_Config>
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80082d2:	2d00      	cmp	r5, #0
 80082d4:	f040 83cc 	bne.w	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80082d8:	4996      	ldr	r1, [pc, #600]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80082da:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80082dc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80082de:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 80082e2:	4302      	orrs	r2, r0
 80082e4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80082e6:	0558      	lsls	r0, r3, #21
 80082e8:	d51f      	bpl.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 80082ea:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80082ee:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80082f2:	f000 8462 	beq.w	8008bba <HAL_RCCEx_PeriphCLKConfig+0x982>
 80082f6:	f200 8111 	bhi.w	800851c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80082fa:	2a00      	cmp	r2, #0
 80082fc:	f000 83c0 	beq.w	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8008300:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008304:	f040 8112 	bne.w	800852c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008308:	2100      	movs	r1, #0
 800830a:	1d20      	adds	r0, r4, #4
 800830c:	f7ff fe9c 	bl	8008048 <RCCEx_PLL2_Config>
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008314:	2d00      	cmp	r5, #0
 8008316:	f040 83b1 	bne.w	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800831a:	4986      	ldr	r1, [pc, #536]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800831c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8008320:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008322:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8008326:	4302      	orrs	r2, r0
 8008328:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800832a:	0519      	lsls	r1, r3, #20
 800832c:	d51f      	bpl.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 800832e:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8008332:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8008336:	f000 8437 	beq.w	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x970>
 800833a:	f200 80fd 	bhi.w	8008538 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800833e:	2a00      	cmp	r2, #0
 8008340:	f000 83aa 	beq.w	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8008344:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008348:	f040 80fe 	bne.w	8008548 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800834c:	2100      	movs	r1, #0
 800834e:	1d20      	adds	r0, r4, #4
 8008350:	f7ff fe7a 	bl	8008048 <RCCEx_PLL2_Config>
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008358:	2d00      	cmp	r5, #0
 800835a:	f040 8387 	bne.w	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800835e:	4975      	ldr	r1, [pc, #468]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008360:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8008364:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008366:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800836a:	4302      	orrs	r2, r0
 800836c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800836e:	019a      	lsls	r2, r3, #6
 8008370:	d518      	bpl.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 8008372:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008374:	2a20      	cmp	r2, #32
 8008376:	f000 840d 	beq.w	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800837a:	f200 80e8 	bhi.w	800854e <HAL_RCCEx_PeriphCLKConfig+0x316>
 800837e:	b13a      	cbz	r2, 8008390 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8008380:	2a10      	cmp	r2, #16
 8008382:	f040 80e7 	bne.w	8008554 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008386:	496b      	ldr	r1, [pc, #428]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008388:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800838a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800838e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008390:	2d00      	cmp	r5, #0
 8008392:	f040 83ba 	bne.w	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008396:	4967      	ldr	r1, [pc, #412]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008398:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800839a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800839c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80083a0:	4302      	orrs	r2, r0
 80083a2:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80083a4:	04df      	lsls	r7, r3, #19
 80083a6:	d51d      	bpl.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 80083a8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80083aa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80083ae:	f000 840d 	beq.w	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x994>
 80083b2:	f200 80d2 	bhi.w	800855a <HAL_RCCEx_PeriphCLKConfig+0x322>
 80083b6:	2a00      	cmp	r2, #0
 80083b8:	f000 8374 	beq.w	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 80083bc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80083c0:	f040 80d3 	bne.w	800856a <HAL_RCCEx_PeriphCLKConfig+0x332>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083c4:	2100      	movs	r1, #0
 80083c6:	1d20      	adds	r0, r4, #4
 80083c8:	f7ff fe3e 	bl	8008048 <RCCEx_PLL2_Config>
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80083d0:	2d00      	cmp	r5, #0
 80083d2:	f040 834f 	bne.w	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80083d6:	4957      	ldr	r1, [pc, #348]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80083d8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80083da:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80083dc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80083e0:	4302      	orrs	r2, r0
 80083e2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80083e4:	0498      	lsls	r0, r3, #18
 80083e6:	d51b      	bpl.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 80083e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083ea:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80083ee:	f000 83bd 	beq.w	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80083f2:	f200 80bd 	bhi.w	8008570 <HAL_RCCEx_PeriphCLKConfig+0x338>
 80083f6:	b14a      	cbz	r2, 800840c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80083f8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80083fc:	f040 80c2 	bne.w	8008584 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008400:	2101      	movs	r1, #1
 8008402:	1d20      	adds	r0, r4, #4
 8008404:	f7ff fe20 	bl	8008048 <RCCEx_PLL2_Config>
 8008408:	6823      	ldr	r3, [r4, #0]
 800840a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800840c:	2d00      	cmp	r5, #0
 800840e:	f040 837e 	bne.w	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x8d6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008412:	4948      	ldr	r1, [pc, #288]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008414:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8008416:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008418:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800841c:	4302      	orrs	r2, r0
 800841e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008420:	0459      	lsls	r1, r3, #17
 8008422:	d51d      	bpl.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008424:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8008428:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800842c:	f000 83a8 	beq.w	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8008430:	f200 80ab 	bhi.w	800858a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8008434:	b14a      	cbz	r2, 800844a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8008436:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800843a:	f040 80b0 	bne.w	800859e <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800843e:	2101      	movs	r1, #1
 8008440:	1d20      	adds	r0, r4, #4
 8008442:	f7ff fe01 	bl	8008048 <RCCEx_PLL2_Config>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800844a:	2d00      	cmp	r5, #0
 800844c:	f040 8363 	bne.w	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008450:	4938      	ldr	r1, [pc, #224]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008452:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8008456:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008458:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800845c:	4302      	orrs	r2, r0
 800845e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	d509      	bpl.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->DsiClockSelection)
 8008464:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008466:	2a00      	cmp	r2, #0
 8008468:	f000 8264 	beq.w	8008934 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 800846c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008470:	f000 825a 	beq.w	8008928 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8008474:	2601      	movs	r6, #1
 8008476:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008478:	041f      	lsls	r7, r3, #16
 800847a:	d50d      	bpl.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch(PeriphClkInit->FdcanClockSelection)
 800847c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800847e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008482:	f000 8420 	beq.w	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 8008486:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800848a:	f000 82ce 	beq.w	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800848e:	2a00      	cmp	r2, #0
 8008490:	f000 82d1 	beq.w	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8008494:	2601      	movs	r6, #1
 8008496:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008498:	01d8      	lsls	r0, r3, #7
 800849a:	f100 81cf 	bmi.w	800883c <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800849e:	0259      	lsls	r1, r3, #9
 80084a0:	f100 81ef 	bmi.w	8008882 <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80084a4:	07df      	lsls	r7, r3, #31
 80084a6:	f140 8088 	bpl.w	80085ba <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch(PeriphClkInit->Usart16ClockSelection)
 80084aa:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80084ac:	2a28      	cmp	r2, #40	; 0x28
 80084ae:	f200 81cf 	bhi.w	8008850 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80084b2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80084b6:	007e      	.short	0x007e
 80084b8:	01cd01cd 	.word	0x01cd01cd
 80084bc:	01cd01cd 	.word	0x01cd01cd
 80084c0:	01cd01cd 	.word	0x01cd01cd
 80084c4:	03d401cd 	.word	0x03d401cd
 80084c8:	01cd01cd 	.word	0x01cd01cd
 80084cc:	01cd01cd 	.word	0x01cd01cd
 80084d0:	01cd01cd 	.word	0x01cd01cd
 80084d4:	007701cd 	.word	0x007701cd
 80084d8:	01cd01cd 	.word	0x01cd01cd
 80084dc:	01cd01cd 	.word	0x01cd01cd
 80084e0:	01cd01cd 	.word	0x01cd01cd
 80084e4:	007e01cd 	.word	0x007e01cd
 80084e8:	01cd01cd 	.word	0x01cd01cd
 80084ec:	01cd01cd 	.word	0x01cd01cd
 80084f0:	01cd01cd 	.word	0x01cd01cd
 80084f4:	007e01cd 	.word	0x007e01cd
 80084f8:	01cd01cd 	.word	0x01cd01cd
 80084fc:	01cd01cd 	.word	0x01cd01cd
 8008500:	01cd01cd 	.word	0x01cd01cd
 8008504:	007e01cd 	.word	0x007e01cd
    switch(PeriphClkInit->Sai23ClockSelection)
 8008508:	2ac0      	cmp	r2, #192	; 0xc0
 800850a:	f43f aee2 	beq.w	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800850e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008512:	f43f aede 	beq.w	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8008516:	2601      	movs	r6, #1
 8008518:	4635      	mov	r5, r6
 800851a:	e6e4      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 800851c:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8008520:	f43f aef8 	beq.w	8008314 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8008524:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008528:	f43f aef4 	beq.w	8008314 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800852c:	2601      	movs	r6, #1
 800852e:	4635      	mov	r5, r6
 8008530:	e6fb      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8008532:	bf00      	nop
 8008534:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 8008538:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800853c:	f43f af0c 	beq.w	8008358 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8008540:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8008544:	f43f af08 	beq.w	8008358 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8008548:	2601      	movs	r6, #1
 800854a:	4635      	mov	r5, r6
 800854c:	e70f      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 800854e:	2a30      	cmp	r2, #48	; 0x30
 8008550:	f43f af1e 	beq.w	8008390 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8008554:	2601      	movs	r6, #1
 8008556:	4635      	mov	r5, r6
 8008558:	e724      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800855a:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800855e:	f43f af37 	beq.w	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008562:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8008566:	f43f af33 	beq.w	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800856a:	2601      	movs	r6, #1
 800856c:	4635      	mov	r5, r6
 800856e:	e739      	b.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008570:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8008574:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8008578:	f43f af48 	beq.w	800840c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800857c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8008580:	f43f af44 	beq.w	800840c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008584:	2601      	movs	r6, #1
 8008586:	4635      	mov	r5, r6
 8008588:	e74a      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 800858a:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800858e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8008592:	f43f af5a 	beq.w	800844a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8008596:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800859a:	f43f af56 	beq.w	800844a <HAL_RCCEx_PeriphCLKConfig+0x212>
 800859e:	2601      	movs	r6, #1
 80085a0:	4635      	mov	r5, r6
 80085a2:	e75d      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085a4:	2101      	movs	r1, #1
 80085a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80085aa:	f7ff fdc9 	bl	8008140 <RCCEx_PLL3_Config>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80085b2:	2d00      	cmp	r5, #0
 80085b4:	f000 82c0 	beq.w	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x900>
 80085b8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80085ba:	0798      	lsls	r0, r3, #30
 80085bc:	d516      	bpl.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80085be:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80085c0:	2a05      	cmp	r2, #5
 80085c2:	f200 83e6 	bhi.w	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 80085c6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80085ca:	000d      	.short	0x000d
 80085cc:	00060336 	.word	0x00060336
 80085d0:	000d000d 	.word	0x000d000d
 80085d4:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085d6:	2101      	movs	r1, #1
 80085d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80085dc:	f7ff fdb0 	bl	8008140 <RCCEx_PLL3_Config>
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80085e4:	2d00      	cmp	r5, #0
 80085e6:	f000 8279 	beq.w	8008adc <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80085ea:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80085ec:	0759      	lsls	r1, r3, #29
 80085ee:	d517      	bpl.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80085f0:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80085f4:	2a05      	cmp	r2, #5
 80085f6:	f200 83c6 	bhi.w	8008d86 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 80085fa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80085fe:	000d      	.short	0x000d
 8008600:	00060326 	.word	0x00060326
 8008604:	000d000d 	.word	0x000d000d
 8008608:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800860a:	2101      	movs	r1, #1
 800860c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008610:	f7ff fd96 	bl	8008140 <RCCEx_PLL3_Config>
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008618:	2d00      	cmp	r5, #0
 800861a:	f000 826a 	beq.w	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800861e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008620:	069a      	lsls	r2, r3, #26
 8008622:	d51d      	bpl.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008624:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8008628:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800862c:	f000 8340 	beq.w	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xa78>
 8008630:	f200 81af 	bhi.w	8008992 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8008634:	b14a      	cbz	r2, 800864a <HAL_RCCEx_PeriphCLKConfig+0x412>
 8008636:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800863a:	f040 81b4 	bne.w	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x76e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800863e:	2100      	movs	r1, #0
 8008640:	1d20      	adds	r0, r4, #4
 8008642:	f7ff fd01 	bl	8008048 <RCCEx_PLL2_Config>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800864a:	2d00      	cmp	r5, #0
 800864c:	f040 823c 	bne.w	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008650:	49b3      	ldr	r1, [pc, #716]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008652:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8008656:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8008658:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800865c:	4302      	orrs	r2, r0
 800865e:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008660:	065f      	lsls	r7, r3, #25
 8008662:	d51d      	bpl.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008664:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8008668:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800866c:	f000 8334 	beq.w	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8008670:	f200 817f 	bhi.w	8008972 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008674:	b14a      	cbz	r2, 800868a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008676:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800867a:	f040 8184 	bne.w	8008986 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800867e:	2100      	movs	r1, #0
 8008680:	1d20      	adds	r0, r4, #4
 8008682:	f7ff fce1 	bl	8008048 <RCCEx_PLL2_Config>
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800868a:	2d00      	cmp	r5, #0
 800868c:	f040 8221 	bne.w	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008690:	49a3      	ldr	r1, [pc, #652]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008692:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8008696:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008698:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800869c:	4302      	orrs	r2, r0
 800869e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80086a0:	0618      	lsls	r0, r3, #24
 80086a2:	d51d      	bpl.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80086a4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80086a8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80086ac:	f000 831f 	beq.w	8008cee <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80086b0:	f200 814f 	bhi.w	8008952 <HAL_RCCEx_PeriphCLKConfig+0x71a>
 80086b4:	b14a      	cbz	r2, 80086ca <HAL_RCCEx_PeriphCLKConfig+0x492>
 80086b6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80086ba:	f040 8154 	bne.w	8008966 <HAL_RCCEx_PeriphCLKConfig+0x72e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086be:	2100      	movs	r1, #0
 80086c0:	1d20      	adds	r0, r4, #4
 80086c2:	f7ff fcc1 	bl	8008048 <RCCEx_PLL2_Config>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80086ca:	2d00      	cmp	r5, #0
 80086cc:	f040 81f7 	bne.w	8008abe <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80086d0:	4993      	ldr	r1, [pc, #588]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80086d2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80086d6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80086d8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80086dc:	4302      	orrs	r2, r0
 80086de:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80086e0:	0719      	lsls	r1, r3, #28
 80086e2:	d50b      	bpl.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80086e4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80086e8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80086ec:	f000 831e 	beq.w	8008d2c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80086f0:	488b      	ldr	r0, [pc, #556]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80086f2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80086f4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80086f8:	430a      	orrs	r2, r1
 80086fa:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086fc:	06da      	lsls	r2, r3, #27
 80086fe:	d50b      	bpl.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008700:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8008704:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008708:	f000 8305 	beq.w	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xade>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800870c:	4884      	ldr	r0, [pc, #528]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800870e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8008710:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008714:	430a      	orrs	r2, r1
 8008716:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008718:	031f      	lsls	r7, r3, #12
 800871a:	d50e      	bpl.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->AdcClockSelection)
 800871c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8008720:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8008724:	f000 816b 	beq.w	80089fe <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8008728:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800872c:	f000 816e 	beq.w	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8008730:	2900      	cmp	r1, #0
 8008732:	f000 82e7 	beq.w	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008736:	2601      	movs	r6, #1
 8008738:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800873a:	0358      	lsls	r0, r3, #13
 800873c:	d50f      	bpl.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->UsbClockSelection)
 800873e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8008742:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008746:	f000 8144 	beq.w	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800874a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800874e:	f000 8147 	beq.w	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 8008752:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008756:	f000 82a2 	beq.w	8008c9e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800875a:	2601      	movs	r6, #1
 800875c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800875e:	03d9      	lsls	r1, r3, #15
 8008760:	d517      	bpl.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->SdmmcClockSelection)
 8008762:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008764:	2a00      	cmp	r2, #0
 8008766:	f000 8288 	beq.w	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xa42>
 800876a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800876e:	f040 817a 	bne.w	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008772:	2102      	movs	r1, #2
 8008774:	1d20      	adds	r0, r4, #4
 8008776:	f7ff fc67 	bl	8008048 <RCCEx_PLL2_Config>
 800877a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	2d00      	cmp	r5, #0
 8008780:	f040 81e5 	bne.w	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008784:	4966      	ldr	r1, [pc, #408]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008786:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008788:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800878a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800878e:	4302      	orrs	r2, r0
 8008790:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008792:	009a      	lsls	r2, r3, #2
 8008794:	f100 815c 	bmi.w	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x818>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008798:	039f      	lsls	r7, r3, #14
 800879a:	d43f      	bmi.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 800879c:	1e30      	subs	r0, r6, #0
 800879e:	bf18      	it	ne
 80087a0:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80087a2:	02de      	lsls	r6, r3, #11
 80087a4:	d506      	bpl.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80087a6:	495e      	ldr	r1, [pc, #376]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80087a8:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80087aa:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80087ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80087b0:	432a      	orrs	r2, r5
 80087b2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80087b4:	00dd      	lsls	r5, r3, #3
 80087b6:	d507      	bpl.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80087b8:	4959      	ldr	r1, [pc, #356]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80087ba:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80087be:	690a      	ldr	r2, [r1, #16]
 80087c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80087c4:	432a      	orrs	r2, r5
 80087c6:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80087c8:	0299      	lsls	r1, r3, #10
 80087ca:	d506      	bpl.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80087cc:	4954      	ldr	r1, [pc, #336]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80087ce:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80087d0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80087d2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80087d6:	432a      	orrs	r2, r5
 80087d8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80087da:	005a      	lsls	r2, r3, #1
 80087dc:	d509      	bpl.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087de:	4a50      	ldr	r2, [pc, #320]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80087e0:	6911      	ldr	r1, [r2, #16]
 80087e2:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80087e6:	6111      	str	r1, [r2, #16]
 80087e8:	6911      	ldr	r1, [r2, #16]
 80087ea:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 80087ee:	4329      	orrs	r1, r5
 80087f0:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	da06      	bge.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80087f6:	494a      	ldr	r1, [pc, #296]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80087f8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80087fa:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80087fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008800:	432a      	orrs	r2, r5
 8008802:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008804:	021b      	lsls	r3, r3, #8
 8008806:	d507      	bpl.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008808:	4a45      	ldr	r2, [pc, #276]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800880a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800880e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008810:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008814:	430b      	orrs	r3, r1
 8008816:	6553      	str	r3, [r2, #84]	; 0x54
}
 8008818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 800881c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8008820:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008824:	f000 8232 	beq.w	8008c8c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8008828:	f240 80c3 	bls.w	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x77a>
 800882c:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8008830:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008834:	f000 80c0 	beq.w	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8008838:	2001      	movs	r0, #1
 800883a:	e7b2      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->FmcClockSelection)
 800883c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800883e:	2a03      	cmp	r2, #3
 8008840:	f200 82aa 	bhi.w	8008d98 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 8008844:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008848:	018a0010 	.word	0x018a0010
 800884c:	0010000a 	.word	0x0010000a
    switch(PeriphClkInit->Usart16ClockSelection)
 8008850:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008852:	0798      	lsls	r0, r3, #30
    switch(PeriphClkInit->Usart16ClockSelection)
 8008854:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008856:	f57f aec9 	bpl.w	80085ec <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800885a:	e6b0      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800885c:	2102      	movs	r1, #2
 800885e:	1d20      	adds	r0, r4, #4
 8008860:	f7ff fbf2 	bl	8008048 <RCCEx_PLL2_Config>
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008868:	2d00      	cmp	r5, #0
 800886a:	f040 8152 	bne.w	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800886e:	492c      	ldr	r1, [pc, #176]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008870:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008872:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8008874:	f022 0203 	bic.w	r2, r2, #3
 8008878:	4302      	orrs	r2, r0
 800887a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800887c:	0259      	lsls	r1, r3, #9
 800887e:	f57f ae11 	bpl.w	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008882:	4b28      	ldr	r3, [pc, #160]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8008884:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008886:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800888c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800888e:	f7fd f8a7 	bl	80059e0 <HAL_GetTick>
 8008892:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008894:	e005      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008896:	f7fd f8a3 	bl	80059e0 <HAL_GetTick>
 800889a:	1bc0      	subs	r0, r0, r7
 800889c:	2864      	cmp	r0, #100	; 0x64
 800889e:	f200 81e8 	bhi.w	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088a2:	f8d8 3000 	ldr.w	r3, [r8]
 80088a6:	05da      	lsls	r2, r3, #23
 80088a8:	d5f5      	bpl.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x65e>
    if(ret == HAL_OK)
 80088aa:	2d00      	cmp	r5, #0
 80088ac:	f040 8267 	bne.w	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80088b0:	4a1b      	ldr	r2, [pc, #108]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80088b2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 80088b6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80088b8:	4059      	eors	r1, r3
 80088ba:	f411 7f40 	tst.w	r1, #768	; 0x300
 80088be:	d00b      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80088c0:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80088c2:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80088c4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80088c8:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80088cc:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80088ce:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80088d0:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80088d4:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80088d6:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80088d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088dc:	f000 8231 	beq.w	8008d42 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088e0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80088e4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80088e8:	f000 823f 	beq.w	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xb32>
 80088ec:	490c      	ldr	r1, [pc, #48]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80088ee:	690a      	ldr	r2, [r1, #16]
 80088f0:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80088f4:	610a      	str	r2, [r1, #16]
 80088f6:	4a0a      	ldr	r2, [pc, #40]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80088f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088fc:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80088fe:	430b      	orrs	r3, r1
 8008900:	6713      	str	r3, [r2, #112]	; 0x70
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	e5ce      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008906:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8008908:	2d00      	cmp	r5, #0
 800890a:	f040 80b5 	bne.w	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800890e:	4904      	ldr	r1, [pc, #16]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008912:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008914:	f022 0207 	bic.w	r2, r2, #7
 8008918:	4302      	orrs	r2, r0
 800891a:	650a      	str	r2, [r1, #80]	; 0x50
 800891c:	e4c5      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x72>
 800891e:	bf00      	nop
 8008920:	58024400 	.word	0x58024400
 8008924:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008928:	2101      	movs	r1, #1
 800892a:	1d20      	adds	r0, r4, #4
 800892c:	f7ff fb8c 	bl	8008048 <RCCEx_PLL2_Config>
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008934:	2d00      	cmp	r5, #0
 8008936:	f040 810c 	bne.w	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800893a:	49b9      	ldr	r1, [pc, #740]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800893c:	041f      	lsls	r7, r3, #16
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800893e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008940:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8008942:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008946:	ea42 0200 	orr.w	r2, r2, r0
 800894a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800894c:	f57f ada4 	bpl.w	8008498 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8008950:	e594      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008952:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8008956:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800895a:	f43f aeb6 	beq.w	80086ca <HAL_RCCEx_PeriphCLKConfig+0x492>
 800895e:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8008962:	f43f aeb2 	beq.w	80086ca <HAL_RCCEx_PeriphCLKConfig+0x492>
 8008966:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008968:	0719      	lsls	r1, r3, #28
    switch(PeriphClkInit->Lptim345ClockSelection)
 800896a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800896c:	f57f aec6 	bpl.w	80086fc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8008970:	e6b8      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008972:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8008976:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800897a:	f43f ae86 	beq.w	800868a <HAL_RCCEx_PeriphCLKConfig+0x452>
 800897e:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8008982:	f43f ae82 	beq.w	800868a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008986:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008988:	0618      	lsls	r0, r3, #24
    switch(PeriphClkInit->Lptim2ClockSelection)
 800898a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800898c:	f57f aea8 	bpl.w	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008990:	e688      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008992:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8008996:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800899a:	f43f ae56 	beq.w	800864a <HAL_RCCEx_PeriphCLKConfig+0x412>
 800899e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80089a2:	f43f ae52 	beq.w	800864a <HAL_RCCEx_PeriphCLKConfig+0x412>
 80089a6:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80089a8:	065f      	lsls	r7, r3, #25
    switch(PeriphClkInit->Lptim1ClockSelection)
 80089aa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80089ac:	f57f ae78 	bpl.w	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
 80089b0:	e658      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->RngClockSelection)
 80089b2:	2a00      	cmp	r2, #0
 80089b4:	f47f af40 	bne.w	8008838 <HAL_RCCEx_PeriphCLKConfig+0x600>
    if(ret == HAL_OK)
 80089b8:	2d00      	cmp	r5, #0
 80089ba:	f47f af3d 	bne.w	8008838 <HAL_RCCEx_PeriphCLKConfig+0x600>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089be:	4d98      	ldr	r5, [pc, #608]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80089c0:	1e30      	subs	r0, r6, #0
 80089c2:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80089c4:	bf18      	it	ne
 80089c6:	2001      	movne	r0, #1
 80089c8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80089cc:	430a      	orrs	r2, r1
 80089ce:	656a      	str	r2, [r5, #84]	; 0x54
 80089d0:	e6e7      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x56a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089d2:	2101      	movs	r1, #1
 80089d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80089d8:	f7ff fbb2 	bl	8008140 <RCCEx_PLL3_Config>
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80089e0:	2d00      	cmp	r5, #0
 80089e2:	f040 80a4 	bne.w	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80089e6:	498e      	ldr	r1, [pc, #568]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80089e8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80089ec:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80089ee:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80089f2:	4302      	orrs	r2, r0
 80089f4:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80089f6:	03d9      	lsls	r1, r3, #15
 80089f8:	f57f aecb 	bpl.w	8008792 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80089fc:	e6b1      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089fe:	2102      	movs	r1, #2
 8008a00:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a04:	f7ff fb9c 	bl	8008140 <RCCEx_PLL3_Config>
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008a0c:	2d00      	cmp	r5, #0
 8008a0e:	f040 8089 	bne.w	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a12:	4983      	ldr	r1, [pc, #524]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008a14:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8008a18:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008a1a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8008a1e:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008a20:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a22:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008a24:	f57f ae9b 	bpl.w	800875e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008a28:	e689      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	1d20      	adds	r0, r4, #4
 8008a2e:	f7ff fb0b 	bl	8008048 <RCCEx_PLL2_Config>
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008a36:	2d00      	cmp	r5, #0
 8008a38:	d16f      	bne.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a3a:	4979      	ldr	r1, [pc, #484]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008a3c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008a3e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008a40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008a44:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008a46:	01d8      	lsls	r0, r3, #7
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a48:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008a4a:	f57f ad28 	bpl.w	800849e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8008a4e:	e6f5      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008a50:	2102      	movs	r1, #2
 8008a52:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a56:	f7ff fb73 	bl	8008140 <RCCEx_PLL3_Config>
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	f43f ae9b 	beq.w	8008798 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status=HAL_ERROR;
 8008a62:	2601      	movs	r6, #1
 8008a64:	e698      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->SdmmcClockSelection)
 8008a66:	2601      	movs	r6, #1
 8008a68:	4635      	mov	r5, r6
 8008a6a:	e692      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8008a6c:	462e      	mov	r6, r5
 8008a6e:	e47e      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008a70:	462e      	mov	r6, r5
 8008a72:	e438      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xae>
 8008a74:	462e      	mov	r6, r5
 8008a76:	e4b5      	b.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8008a78:	462e      	mov	r6, r5
 8008a7a:	e416      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8008a7c:	462e      	mov	r6, r5
 8008a7e:	e454      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a80:	4967      	ldr	r1, [pc, #412]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008a82:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008a84:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008a88:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008a8a:	e443      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a8c:	4964      	ldr	r1, [pc, #400]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008a8e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008a90:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008a94:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008a96:	e41c      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a98:	4961      	ldr	r1, [pc, #388]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008a9a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008a9c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008aa0:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008aa2:	e459      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aa4:	495e      	ldr	r1, [pc, #376]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008aa6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008aa8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008aac:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008aae:	e48f      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ab0:	485b      	ldr	r0, [pc, #364]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008ab2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008ab4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008ab8:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8008aba:	f7ff bbda 	b.w	8008272 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008abe:	0719      	lsls	r1, r3, #28
 8008ac0:	462e      	mov	r6, r5
 8008ac2:	f57f ae1b 	bpl.w	80086fc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8008ac6:	e60d      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ac8:	065f      	lsls	r7, r3, #25
 8008aca:	462e      	mov	r6, r5
 8008acc:	f57f ade8 	bpl.w	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8008ad0:	e5c8      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008ad2:	0618      	lsls	r0, r3, #24
 8008ad4:	462e      	mov	r6, r5
 8008ad6:	f57f ae03 	bpl.w	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008ada:	e5e3      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008adc:	4950      	ldr	r1, [pc, #320]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008ade:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8008ae0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8008ae2:	f022 0207 	bic.w	r2, r2, #7
 8008ae6:	4302      	orrs	r2, r0
 8008ae8:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008aea:	0759      	lsls	r1, r3, #29
 8008aec:	f57f ad98 	bpl.w	8008620 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008af0:	e57e      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008af2:	494b      	ldr	r1, [pc, #300]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008af4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8008af8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008afa:	f022 0207 	bic.w	r2, r2, #7
 8008afe:	4302      	orrs	r2, r0
 8008b00:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b02:	069a      	lsls	r2, r3, #26
 8008b04:	f57f adac 	bpl.w	8008660 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008b08:	e58c      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008b0a:	462e      	mov	r6, r5
 8008b0c:	e44a      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008b0e:	462e      	mov	r6, r5
 8008b10:	e486      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008b12:	462e      	mov	r6, r5
 8008b14:	e4c3      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8008b16:	462e      	mov	r6, r5
 8008b18:	e4a2      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x228>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008b1a:	01d8      	lsls	r0, r3, #7
 8008b1c:	462e      	mov	r6, r5
 8008b1e:	f57f acbe 	bpl.w	800849e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8008b22:	e68b      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b24:	0358      	lsls	r0, r3, #13
 8008b26:	462e      	mov	r6, r5
 8008b28:	f57f ae19 	bpl.w	800875e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008b2c:	e607      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x506>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008b2e:	03d9      	lsls	r1, r3, #15
 8008b30:	462e      	mov	r6, r5
 8008b32:	f57f ae2e 	bpl.w	8008792 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8008b36:	e614      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b38:	4939      	ldr	r1, [pc, #228]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008b3a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008b3c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8008b3e:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8008b42:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b44:	0798      	lsls	r0, r3, #30
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b46:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b48:	f57f ad50 	bpl.w	80085ec <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8008b4c:	e537      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x386>
 8008b4e:	462e      	mov	r6, r5
 8008b50:	e61f      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008b52:	041f      	lsls	r7, r3, #16
 8008b54:	462e      	mov	r6, r5
 8008b56:	f57f ac9f 	bpl.w	8008498 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8008b5a:	e48f      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b5c:	4930      	ldr	r1, [pc, #192]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008b5e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008b60:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008b64:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008b66:	2d00      	cmp	r5, #0
 8008b68:	d1d3      	bne.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8008b6a:	e680      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b72:	f7ff fae5 	bl	8008140 <RCCEx_PLL3_Config>
 8008b76:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	2d00      	cmp	r5, #0
 8008b7c:	d1c7      	bne.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8008b7e:	e448      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b80:	2101      	movs	r1, #1
 8008b82:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b86:	f7ff fadb 	bl	8008140 <RCCEx_PLL3_Config>
 8008b8a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	2d00      	cmp	r5, #0
 8008b90:	d1c1      	bne.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8008b92:	e45d      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b94:	2102      	movs	r1, #2
 8008b96:	1d20      	adds	r0, r4, #4
 8008b98:	f7ff fa56 	bl	8008048 <RCCEx_PLL2_Config>
 8008b9c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	2d00      	cmp	r5, #0
 8008ba2:	d1b2      	bne.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8008ba4:	f7ff bbf7 	b.w	8008396 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ba8:	2100      	movs	r1, #0
 8008baa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008bae:	f7ff fac7 	bl	8008140 <RCCEx_PLL3_Config>
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	4605      	mov	r5, r0
      break;
 8008bb6:	f7ff bbcf 	b.w	8008358 <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008bba:	2100      	movs	r1, #0
 8008bbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008bc0:	f7ff fabe 	bl	8008140 <RCCEx_PLL3_Config>
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	4605      	mov	r5, r0
      break;
 8008bc8:	f7ff bba4 	b.w	8008314 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008bcc:	2100      	movs	r1, #0
 8008bce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008bd2:	f7ff fab5 	bl	8008140 <RCCEx_PLL3_Config>
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	4605      	mov	r5, r0
      break;
 8008bda:	f7ff bbf9 	b.w	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008bde:	2102      	movs	r1, #2
 8008be0:	3024      	adds	r0, #36	; 0x24
 8008be2:	f7ff faad 	bl	8008140 <RCCEx_PLL3_Config>
 8008be6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008be8:	2e00      	cmp	r6, #0
 8008bea:	f43f ab40 	beq.w	800826e <HAL_RCCEx_PeriphCLKConfig+0x36>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	f7ff bb46 	b.w	8008280 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008bfa:	f7ff faa1 	bl	8008140 <RCCEx_PLL3_Config>
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	4605      	mov	r5, r0
      break;
 8008c02:	e681      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c04:	4906      	ldr	r1, [pc, #24]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 8008c06:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c08:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008c0a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008c0e:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008c10:	e67a      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c12:	2100      	movs	r1, #0
 8008c14:	1d20      	adds	r0, r4, #4
 8008c16:	f7ff fa17 	bl	8008048 <RCCEx_PLL2_Config>
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	4605      	mov	r5, r0
      break;
 8008c1e:	e673      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8008c20:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c24:	2100      	movs	r1, #0
 8008c26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008c2a:	f7ff fa89 	bl	8008140 <RCCEx_PLL3_Config>
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	4605      	mov	r5, r0
      break;
 8008c32:	f7ff bb4e 	b.w	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c36:	2101      	movs	r1, #1
 8008c38:	1d20      	adds	r0, r4, #4
 8008c3a:	f7ff fa05 	bl	8008048 <RCCEx_PLL2_Config>
 8008c3e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	2d00      	cmp	r5, #0
 8008c44:	f47f acd1 	bne.w	80085ea <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8008c48:	e748      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c4a:	2101      	movs	r1, #1
 8008c4c:	1d20      	adds	r0, r4, #4
 8008c4e:	f7ff f9fb 	bl	8008048 <RCCEx_PLL2_Config>
 8008c52:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	2d00      	cmp	r5, #0
 8008c58:	f47f ace1 	bne.w	800861e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008c5c:	e749      	b.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c5e:	2101      	movs	r1, #1
 8008c60:	1d20      	adds	r0, r4, #4
 8008c62:	f7ff f9f1 	bl	8008048 <RCCEx_PLL2_Config>
 8008c66:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008c68:	6823      	ldr	r3, [r4, #0]
 8008c6a:	2d00      	cmp	r5, #0
 8008c6c:	f47f aca4 	bne.w	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8008c70:	e762      	b.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x900>
            ret = HAL_TIMEOUT;
 8008c72:	2603      	movs	r6, #3
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	4635      	mov	r5, r6
 8008c78:	e414      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c7a:	4949      	ldr	r1, [pc, #292]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8008c7c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008c7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008c82:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008c84:	2d00      	cmp	r5, #0
 8008c86:	f47f af62 	bne.w	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x916>
 8008c8a:	e57b      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c8c:	4844      	ldr	r0, [pc, #272]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8008c8e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008c90:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008c94:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8008c96:	2d00      	cmp	r5, #0
 8008c98:	f47f adce 	bne.w	8008838 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8008c9c:	e68f      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c9e:	4940      	ldr	r1, [pc, #256]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8008ca0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008ca2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008ca6:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008ca8:	2d00      	cmp	r5, #0
 8008caa:	f47f af40 	bne.w	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8008cae:	e69a      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cb0:	2102      	movs	r1, #2
 8008cb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008cb6:	f7ff fa43 	bl	8008140 <RCCEx_PLL3_Config>
 8008cba:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	2d00      	cmp	r5, #0
 8008cc0:	f47f af02 	bne.w	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8008cc4:	e4c4      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cc6:	4936      	ldr	r1, [pc, #216]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8008cc8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008cca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008cce:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008cd0:	2d00      	cmp	r5, #0
 8008cd2:	f47f af22 	bne.w	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008cd6:	e6b0      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x802>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cd8:	2102      	movs	r1, #2
 8008cda:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008cde:	f7ff fa2f 	bl	8008140 <RCCEx_PLL3_Config>
 8008ce2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	2d00      	cmp	r5, #0
 8008ce8:	f47f aef3 	bne.w	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8008cec:	e4d0      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x458>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cee:	2102      	movs	r1, #2
 8008cf0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008cf4:	f7ff fa24 	bl	8008140 <RCCEx_PLL3_Config>
 8008cf8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	2d00      	cmp	r5, #0
 8008cfe:	f47f aede 	bne.w	8008abe <HAL_RCCEx_PeriphCLKConfig+0x886>
 8008d02:	e4e5      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d04:	1d20      	adds	r0, r4, #4
 8008d06:	f7ff f99f 	bl	8008048 <RCCEx_PLL2_Config>
 8008d0a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	2d00      	cmp	r5, #0
 8008d10:	f47f af08 	bne.w	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008d14:	e67d      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008d16:	2102      	movs	r1, #2
 8008d18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d1c:	f7ff fa10 	bl	8008140 <RCCEx_PLL3_Config>
 8008d20:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8008d24:	b100      	cbz	r0, 8008d28 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
        status = HAL_ERROR;
 8008d26:	2601      	movs	r6, #1
 8008d28:	6823      	ldr	r3, [r4, #0]
 8008d2a:	e4ef      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008d2c:	2102      	movs	r1, #2
 8008d2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d32:	f7ff fa05 	bl	8008140 <RCCEx_PLL3_Config>
 8008d36:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8008d3a:	b100      	cbz	r0, 8008d3e <HAL_RCCEx_PeriphCLKConfig+0xb06>
          status = HAL_ERROR;
 8008d3c:	2601      	movs	r6, #1
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	e4d6      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        tickstart = HAL_GetTick();
 8008d42:	f7fc fe4d 	bl	80059e0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d46:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8008da0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d4a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8008d4e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d50:	e004      	b.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xb24>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d52:	f7fc fe45 	bl	80059e0 <HAL_GetTick>
 8008d56:	1bc0      	subs	r0, r0, r7
 8008d58:	4548      	cmp	r0, r9
 8008d5a:	d88a      	bhi.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d5c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8008d60:	079b      	lsls	r3, r3, #30
 8008d62:	d5f6      	bpl.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008d64:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8008d68:	e5ba      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d6a:	480d      	ldr	r0, [pc, #52]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8008d6c:	4a0d      	ldr	r2, [pc, #52]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
 8008d6e:	6901      	ldr	r1, [r0, #16]
 8008d70:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8008d74:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8008d78:	430a      	orrs	r2, r1
 8008d7a:	6102      	str	r2, [r0, #16]
 8008d7c:	e5bb      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8008d7e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008d80:	462e      	mov	r6, r5
 8008d82:	f7ff bb8f 	b.w	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008d86:	2601      	movs	r6, #1
 8008d88:	4635      	mov	r5, r6
 8008d8a:	e449      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008d8c:	2601      	movs	r6, #1
 8008d8e:	f7ff ba8b 	b.w	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008d92:	2601      	movs	r6, #1
 8008d94:	4635      	mov	r5, r6
 8008d96:	e429      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 8008d98:	2601      	movs	r6, #1
 8008d9a:	4635      	mov	r5, r6
 8008d9c:	f7ff bb7f 	b.w	800849e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8008da0:	58024400 	.word	0x58024400
 8008da4:	00ffffcf 	.word	0x00ffffcf

08008da8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008da8:	4b58      	ldr	r3, [pc, #352]	; (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
{
 8008daa:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008dac:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008dae:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008db0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8008db2:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008db6:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008dba:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8008dbc:	d05c      	beq.n	8008e78 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008dbe:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008dc2:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008dc6:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008dca:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8008dce:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008dd0:	ee07 4a90 	vmov	s15, r4
 8008dd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008dd8:	d003      	beq.n	8008de2 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8008dda:	2902      	cmp	r1, #2
 8008ddc:	d075      	beq.n	8008eca <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8008dde:	2900      	cmp	r1, #0
 8008de0:	d04f      	beq.n	8008e82 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008de2:	ee07 2a90 	vmov	s15, r2
 8008de6:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8008f10 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8008dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8008df4:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 8008df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dfc:	ee06 3a90 	vmov	s13, r3
 8008e00:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008e04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008e08:	eee7 6a05 	vfma.f32	s13, s14, s10
 8008e0c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8008e10:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008e14:	4a3d      	ldr	r2, [pc, #244]	; (8008f0c <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
 8008e16:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008e1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008e1c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008e20:	ee07 3a10 	vmov	s14, r3
 8008e24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8008e28:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008e2a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e36:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008e3a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008e3c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008e40:	ee07 3a10 	vmov	s14, r3
 8008e44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008e48:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e54:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008e58:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008e5a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008e5e:	ee07 3a90 	vmov	s15, r3
 8008e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e66:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e6e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008e72:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8008e76:	4770      	bx	lr
 8008e78:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e7a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e7e:	6082      	str	r2, [r0, #8]
}
 8008e80:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e82:	6819      	ldr	r1, [r3, #0]
 8008e84:	0689      	lsls	r1, r1, #26
 8008e86:	d527      	bpl.n	8008ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e88:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e8a:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e8e:	4a22      	ldr	r2, [pc, #136]	; (8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x170>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e90:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e94:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e9e:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ea0:	eddf 4a1c 	vldr	s9, [pc, #112]	; 8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 8008ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea8:	ee06 2a10 	vmov	s12, r2
 8008eac:	ee06 3a90 	vmov	s13, r3
 8008eb0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008eb4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008eb8:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8008ebc:	eee7 6a24 	vfma.f32	s13, s14, s9
 8008ec0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008ec4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008ec8:	e7a4      	b.n	8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008eca:	ee07 2a90 	vmov	s15, r2
 8008ece:	eddf 6a13 	vldr	s13, [pc, #76]	; 8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x174>
 8008ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ed6:	e78a      	b.n	8008dee <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ed8:	ee07 2a90 	vmov	s15, r2
 8008edc:	ed9f 5a10 	vldr	s10, [pc, #64]	; 8008f20 <HAL_RCCEx_GetPLL2ClockFreq+0x178>
 8008ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008eea:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 8008eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef2:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8008ef6:	ee07 3a90 	vmov	s15, r3
 8008efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008efe:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008f02:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008f06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008f0a:	e783      	b.n	8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008f0c:	58024400 	.word	0x58024400
 8008f10:	4a742400 	.word	0x4a742400
 8008f14:	39000000 	.word	0x39000000
 8008f18:	03d09000 	.word	0x03d09000
 8008f1c:	4bbebc20 	.word	0x4bbebc20
 8008f20:	4c742400 	.word	0x4c742400

08008f24 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f24:	4b58      	ldr	r3, [pc, #352]	; (8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
{
 8008f26:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f28:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008f2a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f2c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8008f2e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008f32:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008f36:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8008f38:	d05c      	beq.n	8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008f3a:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f3e:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f42:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008f46:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8008f4a:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008f4c:	ee07 4a90 	vmov	s15, r4
 8008f50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008f54:	d003      	beq.n	8008f5e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8008f56:	2902      	cmp	r1, #2
 8008f58:	d075      	beq.n	8009046 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8008f5a:	2900      	cmp	r1, #0
 8008f5c:	d04f      	beq.n	8008ffe <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f5e:	ee07 2a90 	vmov	s15, r2
 8008f62:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800908c <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8008f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8008f70:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8009090 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 8008f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f78:	ee06 3a90 	vmov	s13, r3
 8008f7c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008f80:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008f84:	eee7 6a05 	vfma.f32	s13, s14, s10
 8008f88:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8008f8c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008f90:	4a3d      	ldr	r2, [pc, #244]	; (8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
 8008f92:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008f96:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008f98:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008f9c:	ee07 3a10 	vmov	s14, r3
 8008fa0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8008fa4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008fa6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fb2:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008fb6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008fb8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008fbc:	ee07 3a10 	vmov	s14, r3
 8008fc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008fc4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fd0:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008fd4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008fd6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008fda:	ee07 3a90 	vmov	s15, r3
 8008fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fe2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fea:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008fee:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8008ff2:	4770      	bx	lr
 8008ff4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ff6:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ffa:	6082      	str	r2, [r0, #8]
}
 8008ffc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ffe:	6819      	ldr	r1, [r3, #0]
 8009000:	0689      	lsls	r1, r1, #26
 8009002:	d527      	bpl.n	8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009004:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009006:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800900a:	4a22      	ldr	r2, [pc, #136]	; (8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x170>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800900c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009010:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800901a:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800901c:	eddf 4a1c 	vldr	s9, [pc, #112]	; 8009090 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 8009020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009024:	ee06 2a10 	vmov	s12, r2
 8009028:	ee06 3a90 	vmov	s13, r3
 800902c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009030:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009034:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8009038:	eee7 6a24 	vfma.f32	s13, s14, s9
 800903c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009040:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009044:	e7a4      	b.n	8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009046:	ee07 2a90 	vmov	s15, r2
 800904a:	eddf 6a13 	vldr	s13, [pc, #76]	; 8009098 <HAL_RCCEx_GetPLL3ClockFreq+0x174>
 800904e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009052:	e78a      	b.n	8008f6a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009054:	ee07 2a90 	vmov	s15, r2
 8009058:	ed9f 5a10 	vldr	s10, [pc, #64]	; 800909c <HAL_RCCEx_GetPLL3ClockFreq+0x178>
 800905c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009066:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8009090 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 800906a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906e:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800907a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800907e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009082:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009086:	e783      	b.n	8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009088:	58024400 	.word	0x58024400
 800908c:	4a742400 	.word	0x4a742400
 8009090:	39000000 	.word	0x39000000
 8009094:	03d09000 	.word	0x03d09000
 8009098:	4bbebc20 	.word	0x4bbebc20
 800909c:	4c742400 	.word	0x4c742400

080090a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090a0:	4b5c      	ldr	r3, [pc, #368]	; (8009214 <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
{
 80090a2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090a4:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80090a6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80090a8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 80090aa:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80090ae:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80090b2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 80090b4:	d05c      	beq.n	8009170 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80090b6:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80090ba:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090be:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80090c2:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 80090c6:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80090c8:	ee07 4a90 	vmov	s15, r4
 80090cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80090d0:	d07e      	beq.n	80091d0 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 80090d2:	2902      	cmp	r1, #2
 80090d4:	d075      	beq.n	80091c2 <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 80090d6:	2900      	cmp	r1, #0
 80090d8:	d04f      	beq.n	800917a <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090da:	ee07 2a90 	vmov	s15, r2
 80090de:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009218 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 80090e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80090ec:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 800921c <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 80090f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f4:	ee06 3a90 	vmov	s13, r3
 80090f8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80090fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009100:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009104:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009108:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800910c:	4a41      	ldr	r2, [pc, #260]	; (8009214 <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
 800910e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009112:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009114:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009118:	ee07 3a10 	vmov	s14, r3
 800911c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009120:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009122:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800912a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800912e:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009132:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009134:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009138:	ee07 3a10 	vmov	s14, r3
 800913c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009140:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800914c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009150:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009152:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009156:	ee07 3a90 	vmov	s15, r3
 800915a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800915e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009166:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800916a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800916e:	4770      	bx	lr
 8009170:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009172:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009176:	6082      	str	r2, [r0, #8]
}
 8009178:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800917a:	6819      	ldr	r1, [r3, #0]
 800917c:	0689      	lsls	r1, r1, #26
 800917e:	d52e      	bpl.n	80091de <HAL_RCCEx_GetPLL1ClockFreq+0x13e>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009180:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009182:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009186:	4a26      	ldr	r2, [pc, #152]	; (8009220 <HAL_RCCEx_GetPLL1ClockFreq+0x180>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009188:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800918c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009196:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009198:	eddf 4a20 	vldr	s9, [pc, #128]	; 800921c <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 800919c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091a0:	ee06 2a10 	vmov	s12, r2
 80091a4:	ee06 3a90 	vmov	s13, r3
 80091a8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80091ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80091b0:	eec6 5a27 	vdiv.f32	s11, s12, s15
 80091b4:	eee7 6a24 	vfma.f32	s13, s14, s9
 80091b8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80091bc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80091c0:	e7a4      	b.n	800910c <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091c2:	ee07 2a90 	vmov	s15, r2
 80091c6:	eddf 6a17 	vldr	s13, [pc, #92]	; 8009224 <HAL_RCCEx_GetPLL1ClockFreq+0x184>
 80091ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091ce:	e78a      	b.n	80090e6 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091d0:	ee07 2a90 	vmov	s15, r2
 80091d4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8009228 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80091d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091dc:	e783      	b.n	80090e6 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091de:	ee07 2a90 	vmov	s15, r2
 80091e2:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 8009218 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 80091e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80091ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091f0:	eddf 5a0a 	vldr	s11, [pc, #40]	; 800921c <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 80091f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f8:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80091fc:	ee07 3a90 	vmov	s15, r3
 8009200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009204:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009208:	ee77 7a86 	vadd.f32	s15, s15, s12
 800920c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009210:	e77c      	b.n	800910c <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
 8009212:	bf00      	nop
 8009214:	58024400 	.word	0x58024400
 8009218:	4c742400 	.word	0x4c742400
 800921c:	39000000 	.word	0x39000000
 8009220:	03d09000 	.word	0x03d09000
 8009224:	4bbebc20 	.word	0x4bbebc20
 8009228:	4a742400 	.word	0x4a742400

0800922c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800922c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8009230:	b500      	push	{lr}
 8009232:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009234:	d077      	beq.n	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009236:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800923a:	d02e      	beq.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800923c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009240:	f000 80cf 	beq.w	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009244:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8009248:	f000 8080 	beq.w	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800924c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009250:	d05a      	beq.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009252:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8009256:	f000 8105 	beq.w	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800925a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800925e:	f000 8110 	beq.w	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009262:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8009266:	f000 80e2 	beq.w	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800926a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800926e:	d13a      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009270:	4ba9      	ldr	r3, [pc, #676]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8009278:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800927c:	f000 808e 	beq.w	800939c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8009280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009284:	f000 812e 	beq.w	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009288:	bb6b      	cbnz	r3, 80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800928a:	4aa3      	ldr	r2, [pc, #652]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = HSE_VALUE;
 800928c:	4ba3      	ldr	r3, [pc, #652]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800928e:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 8009290:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009294:	bf18      	it	ne
 8009296:	4618      	movne	r0, r3
 8009298:	e042      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800929a:	4a9f      	ldr	r2, [pc, #636]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800929c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800929e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 80092a2:	2b80      	cmp	r3, #128	; 0x80
 80092a4:	f000 8098 	beq.w	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80092a8:	d921      	bls.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 80092aa:	2bc0      	cmp	r3, #192	; 0xc0
 80092ac:	d037      	beq.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80092ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b2:	d118      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80092b4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092b6:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80092b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092bc:	0749      	lsls	r1, r1, #29
 80092be:	d502      	bpl.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 80ae 	beq.w	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092c6:	4a94      	ldr	r2, [pc, #592]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80092c8:	6812      	ldr	r2, [r2, #0]
 80092ca:	05d0      	lsls	r0, r2, #23
 80092cc:	d503      	bpl.n	80092d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80092ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092d2:	f000 80fb 	beq.w	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092d6:	4a90      	ldr	r2, [pc, #576]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80092d8:	6812      	ldr	r2, [r2, #0]
 80092da:	0391      	lsls	r1, r2, #14
 80092dc:	d503      	bpl.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80092de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092e2:	f000 80bd 	beq.w	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      switch (srcclk)
 80092e6:	2000      	movs	r0, #0
}
 80092e8:	b005      	add	sp, #20
 80092ea:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d04b      	beq.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80092f2:	2b40      	cmp	r3, #64	; 0x40
 80092f4:	d1f7      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092f6:	6810      	ldr	r0, [r2, #0]
 80092f8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80092fc:	d010      	beq.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092fe:	a801      	add	r0, sp, #4
 8009300:	f7ff fd52 	bl	8008da8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009304:	9801      	ldr	r0, [sp, #4]
 8009306:	e00b      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009308:	4a83      	ldr	r2, [pc, #524]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800930a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800930c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8009310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009314:	d060      	beq.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009316:	d936      	bls.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8009318:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800931c:	d178      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = EXTERNAL_CLOCK_VALUE;
 800931e:	4880      	ldr	r0, [pc, #512]	; (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
}
 8009320:	b005      	add	sp, #20
 8009322:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009326:	4b7c      	ldr	r3, [pc, #496]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800932a:	f003 0307 	and.w	r3, r3, #7
 800932e:	2b04      	cmp	r3, #4
 8009330:	d8d9      	bhi.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009332:	a201      	add	r2, pc, #4	; (adr r2, 8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8009334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009338:	0800939d 	.word	0x0800939d
 800933c:	080093c1 	.word	0x080093c1
 8009340:	080093ad 	.word	0x080093ad
 8009344:	0800931f 	.word	0x0800931f
 8009348:	080093a9 	.word	0x080093a9
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800934c:	4a72      	ldr	r2, [pc, #456]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800934e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009350:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8009354:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009358:	d03e      	beq.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800935a:	d937      	bls.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 800935c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009360:	d0dd      	beq.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009362:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009366:	d1be      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009368:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800936a:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800936c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009370:	0752      	lsls	r2, r2, #29
 8009372:	d5a8      	bpl.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1a6      	bne.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009378:	4b67      	ldr	r3, [pc, #412]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800937a:	486a      	ldr	r0, [pc, #424]	; (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009382:	40d8      	lsrs	r0, r3
 8009384:	e7cc      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8009386:	2b00      	cmp	r3, #0
 8009388:	d146      	bne.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800938a:	6810      	ldr	r0, [r2, #0]
 800938c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009390:	d0c6      	beq.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009392:	a801      	add	r0, sp, #4
 8009394:	f7ff fe84 	bl	80090a0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009398:	9802      	ldr	r0, [sp, #8]
 800939a:	e7c1      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800939c:	4b5e      	ldr	r3, [pc, #376]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800939e:	6818      	ldr	r0, [r3, #0]
 80093a0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80093a4:	d0bc      	beq.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80093a6:	e7f4      	b.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80093a8:	4a5b      	ldr	r2, [pc, #364]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80093aa:	e783      	b.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093ac:	4b5a      	ldr	r3, [pc, #360]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80093ae:	6818      	ldr	r0, [r3, #0]
 80093b0:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80093b4:	d0b4      	beq.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093b6:	a801      	add	r0, sp, #4
 80093b8:	f7ff fdb4 	bl	8008f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093bc:	9801      	ldr	r0, [sp, #4]
 80093be:	e7af      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093c0:	4b55      	ldr	r3, [pc, #340]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80093c2:	6818      	ldr	r0, [r3, #0]
 80093c4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80093c8:	d0aa      	beq.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80093ca:	e798      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      switch (saiclocksource)
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d0dc      	beq.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80093d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80093d4:	d08f      	beq.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 80093d6:	e786      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093d8:	6810      	ldr	r0, [r2, #0]
 80093da:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80093de:	d09f      	beq.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80093e0:	e7e9      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80093e2:	4a4d      	ldr	r2, [pc, #308]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80093e4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80093e6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 80093ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093ee:	d0f3      	beq.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80093f0:	d806      	bhi.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d0c9      	beq.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80093f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093fa:	f43f af7c 	beq.w	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 80093fe:	e772      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009400:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009404:	d08b      	beq.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009406:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800940a:	f43f af53 	beq.w	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 800940e:	e76a      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      switch (srcclk)
 8009410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009414:	d0a8      	beq.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009416:	e766      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800941c:	f43f af6b 	beq.w	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009420:	e761      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009422:	6813      	ldr	r3, [r2, #0]
 8009424:	483f      	ldr	r0, [pc, #252]	; (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009426:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800942a:	40d8      	lsrs	r0, r3
 800942c:	e778      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800942e:	4a3a      	ldr	r2, [pc, #232]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009430:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009432:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8009436:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800943a:	d066      	beq.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800943c:	d82f      	bhi.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800943e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009442:	d04f      	beq.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009448:	d131      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x282>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800944a:	4b33      	ldr	r3, [pc, #204]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800944c:	6818      	ldr	r0, [r3, #0]
 800944e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009452:	f43f af65 	beq.w	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009456:	a801      	add	r0, sp, #4
 8009458:	f7ff fd64 	bl	8008f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800945c:	9802      	ldr	r0, [sp, #8]
 800945e:	e75f      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = HSE_VALUE;
 8009460:	482e      	ldr	r0, [pc, #184]	; (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009462:	e75d      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009464:	4a2c      	ldr	r2, [pc, #176]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009466:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800946c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009470:	d02e      	beq.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8009472:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009476:	f43f af77 	beq.w	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800947a:	2b00      	cmp	r3, #0
 800947c:	f47f af33 	bne.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009480:	e739      	b.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009482:	4b25      	ldr	r3, [pc, #148]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009484:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 8009486:	03d2      	lsls	r2, r2, #15
 8009488:	d589      	bpl.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x172>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800948a:	6818      	ldr	r0, [r3, #0]
 800948c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009490:	f43f af46 	beq.w	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009494:	a801      	add	r0, sp, #4
 8009496:	f7ff fc87 	bl	8008da8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800949a:	9803      	ldr	r0, [sp, #12]
 800949c:	e740      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 800949e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094a2:	d02a      	beq.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 80094a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094a8:	f43f aeef 	beq.w	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80094ac:	e71b      	b.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f47f af19 	bne.w	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80094b4:	f7fe fda6 	bl	8008004 <HAL_RCC_GetHCLKFreq>
 80094b8:	4b17      	ldr	r3, [pc, #92]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80094ba:	4a1b      	ldr	r2, [pc, #108]	; (8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80094c2:	5cd3      	ldrb	r3, [r2, r3]
 80094c4:	f003 031f 	and.w	r3, r3, #31
 80094c8:	40d8      	lsrs	r0, r3
          break;
 80094ca:	e729      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = CSI_VALUE;
 80094cc:	4817      	ldr	r0, [pc, #92]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80094ce:	e727      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094d0:	6810      	ldr	r0, [r2, #0]
 80094d2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80094d6:	f43f af23 	beq.w	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094da:	a801      	add	r0, sp, #4
 80094dc:	f7ff fd22 	bl	8008f24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094e0:	9803      	ldr	r0, [sp, #12]
 80094e2:	e71d      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094e4:	4b0c      	ldr	r3, [pc, #48]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80094e6:	6818      	ldr	r0, [r3, #0]
 80094e8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80094ec:	f43f af18 	beq.w	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094f0:	a801      	add	r0, sp, #4
 80094f2:	f7ff fc59 	bl	8008da8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094f6:	9802      	ldr	r0, [sp, #8]
 80094f8:	e712      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80094fa:	4a07      	ldr	r2, [pc, #28]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = CSI_VALUE;
 80094fc:	4b0b      	ldr	r3, [pc, #44]	; (800952c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80094fe:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 8009500:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8009504:	bf18      	it	ne
 8009506:	4618      	movne	r0, r3
 8009508:	e70a      	b.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800950a:	6810      	ldr	r0, [r2, #0]
 800950c:	f010 0004 	ands.w	r0, r0, #4
 8009510:	f43f af06 	beq.w	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009514:	e730      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8009516:	bf00      	nop
 8009518:	58024400 	.word	0x58024400
 800951c:	017d7840 	.word	0x017d7840
 8009520:	00bb8000 	.word	0x00bb8000
 8009524:	03d09000 	.word	0x03d09000
 8009528:	08009908 	.word	0x08009908
 800952c:	003d0900 	.word	0x003d0900

08009530 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop

08009534 <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 8009534:	b318      	cbz	r0, 800957e <HAL_SDRAM_Init+0x4a>
{
 8009536:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009538:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800953c:	460d      	mov	r5, r1
 800953e:	4604      	mov	r4, r0
 8009540:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009544:	b1b3      	cbz	r3, 8009574 <HAL_SDRAM_Init+0x40>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009546:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009548:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800954a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800954e:	f851 0b04 	ldr.w	r0, [r1], #4
 8009552:	f000 f851 	bl	80095f8 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009556:	4629      	mov	r1, r5
 8009558:	e9d4 0200 	ldrd	r0, r2, [r4]
 800955c:	f000 f888 	bl	8009670 <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 8009560:	4a08      	ldr	r2, [pc, #32]	; (8009584 <HAL_SDRAM_Init+0x50>)
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009562:	2101      	movs	r1, #1
  return HAL_OK;
 8009564:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8009566:	6813      	ldr	r3, [r2, #0]
 8009568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800956c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800956e:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 8009572:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8009574:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8009578:	f7ff ffda 	bl	8009530 <HAL_SDRAM_MspInit>
 800957c:	e7e3      	b.n	8009546 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800957e:	2001      	movs	r0, #1
}
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	52004000 	.word	0x52004000

08009588 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009588:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800958a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800958e:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009590:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009592:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8009594:	d004      	beq.n	80095a0 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009596:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800959a:	2c01      	cmp	r4, #1
 800959c:	d001      	beq.n	80095a2 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800959e:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80095a0:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095a2:	2302      	movs	r3, #2
 80095a4:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80095a6:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095a8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80095ac:	f000 f8ac 	bl	8009708 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80095b0:	6833      	ldr	r3, [r6, #0]
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d003      	beq.n	80095be <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 80095b6:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 80095b8:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
 80095bc:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80095be:	2305      	movs	r3, #5
  return HAL_OK;
 80095c0:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80095c2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 80095c6:	bd70      	pop	{r4, r5, r6, pc}

080095c8 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80095c8:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80095ca:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80095ce:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	b2d8      	uxtb	r0, r3
 80095d4:	d005      	beq.n	80095e2 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80095d6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80095da:	2b01      	cmp	r3, #1
 80095dc:	b2dd      	uxtb	r5, r3
 80095de:	d001      	beq.n	80095e4 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 80095e0:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80095e2:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095e4:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80095e6:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095e8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80095ec:	f000 f8a2 	bl	8009734 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 80095f0:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 80095f2:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 80095f6:	bd38      	pop	{r3, r4, r5, pc}

080095f8 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80095f8:	680b      	ldr	r3, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80095fa:	6802      	ldr	r2, [r0, #0]
{
 80095fc:	b470      	push	{r4, r5, r6}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80095fe:	b9c3      	cbnz	r3, 8009632 <FMC_SDRAM_Init+0x3a>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009600:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009604:	684c      	ldr	r4, [r1, #4]
 8009606:	698e      	ldr	r6, [r1, #24]
 8009608:	4013      	ands	r3, r2
 800960a:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800960e:	4323      	orrs	r3, r4
 8009610:	690c      	ldr	r4, [r1, #16]
 8009612:	4313      	orrs	r3, r2
 8009614:	694a      	ldr	r2, [r1, #20]
 8009616:	432b      	orrs	r3, r5
 8009618:	69cd      	ldr	r5, [r1, #28]
 800961a:	4323      	orrs	r3, r4
 800961c:	4313      	orrs	r3, r2
 800961e:	4333      	orrs	r3, r6
 8009620:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 8009624:	432b      	orrs	r3, r5
 8009626:	4323      	orrs	r3, r4
 8009628:	4313      	orrs	r3, r2
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800962a:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800962c:	6003      	str	r3, [r0, #0]
}
 800962e:	2000      	movs	r0, #0
 8009630:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009632:	69cb      	ldr	r3, [r1, #28]
 8009634:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009638:	68ce      	ldr	r6, [r1, #12]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800963a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800963c:	4b0b      	ldr	r3, [pc, #44]	; (800966c <FMC_SDRAM_Init+0x74>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800963e:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
 8009642:	432a      	orrs	r2, r5
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009644:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009646:	4322      	orrs	r2, r4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009648:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800964a:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800964c:	6842      	ldr	r2, [r0, #4]
 800964e:	4013      	ands	r3, r2
 8009650:	432b      	orrs	r3, r5
 8009652:	690d      	ldr	r5, [r1, #16]
 8009654:	4323      	orrs	r3, r4
 8009656:	4333      	orrs	r3, r6
 8009658:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800965c:	432b      	orrs	r3, r5
 800965e:	4323      	orrs	r3, r4
 8009660:	4313      	orrs	r3, r2
}
 8009662:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009664:	6043      	str	r3, [r0, #4]
}
 8009666:	2000      	movs	r0, #0
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	ffff8000 	.word	0xffff8000

08009670 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009670:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009672:	bb0a      	cbnz	r2, 80096b8 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009674:	684c      	ldr	r4, [r1, #4]
 8009676:	6882      	ldr	r2, [r0, #8]
 8009678:	680d      	ldr	r5, [r1, #0]
 800967a:	1e63      	subs	r3, r4, #1
 800967c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8009680:	688c      	ldr	r4, [r1, #8]
 8009682:	1e6e      	subs	r6, r5, #1
 8009684:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8009688:	1e65      	subs	r5, r4, #1
 800968a:	68cc      	ldr	r4, [r1, #12]
 800968c:	4333      	orrs	r3, r6
 800968e:	690a      	ldr	r2, [r1, #16]
 8009690:	1e66      	subs	r6, r4, #1
 8009692:	694c      	ldr	r4, [r1, #20]
 8009694:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8009698:	1e55      	subs	r5, r2, #1
 800969a:	698a      	ldr	r2, [r1, #24]
 800969c:	1e61      	subs	r1, r4, #1
 800969e:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 80096a2:	3a01      	subs	r2, #1
 80096a4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80096a8:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80096ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 80096b0:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80096b2:	6083      	str	r3, [r0, #8]
}
 80096b4:	2000      	movs	r0, #0
 80096b6:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80096b8:	6882      	ldr	r2, [r0, #8]
 80096ba:	68cb      	ldr	r3, [r1, #12]
 80096bc:	4c11      	ldr	r4, [pc, #68]	; (8009704 <FMC_SDRAM_Timing_Init+0x94>)
 80096be:	1e5d      	subs	r5, r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80096c0:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80096c2:	4014      	ands	r4, r2
 80096c4:	694a      	ldr	r2, [r1, #20]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80096c6:	1e5e      	subs	r6, r3, #1
 80096c8:	680b      	ldr	r3, [r1, #0]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80096ca:	3a01      	subs	r2, #1
 80096cc:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80096d0:	688d      	ldr	r5, [r1, #8]
 80096d2:	3b01      	subs	r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80096d4:	ea44 5402 	orr.w	r4, r4, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80096d8:	3d01      	subs	r5, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80096da:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80096dc:	68c2      	ldr	r2, [r0, #12]
 80096de:	690c      	ldr	r4, [r1, #16]
 80096e0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80096e4:	6989      	ldr	r1, [r1, #24]
 80096e6:	3c01      	subs	r4, #1
 80096e8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 80096ec:	3901      	subs	r1, #1
 80096ee:	4313      	orrs	r3, r2
 80096f0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80096f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80096f8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
 80096fc:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80096fe:	60c3      	str	r3, [r0, #12]
}
 8009700:	2000      	movs	r0, #0
 8009702:	4770      	bx	lr
 8009704:	ff0f0fff 	.word	0xff0f0fff

08009708 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009708:	b470      	push	{r4, r5, r6}
 800970a:	4602      	mov	r2, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800970c:	68ce      	ldr	r6, [r1, #12]
 800970e:	4c08      	ldr	r4, [pc, #32]	; (8009730 <FMC_SDRAM_SendCommand+0x28>)
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8009710:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8009712:	e9d1 3500 	ldrd	r3, r5, [r1]
 8009716:	6889      	ldr	r1, [r1, #8]
 8009718:	432b      	orrs	r3, r5
 800971a:	6915      	ldr	r5, [r2, #16]
 800971c:	3901      	subs	r1, #1
 800971e:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 8009722:	402c      	ands	r4, r5
 8009724:	4323      	orrs	r3, r4
 8009726:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
}
 800972a:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800972c:	6113      	str	r3, [r2, #16]
}
 800972e:	4770      	bx	lr
 8009730:	ffc00000 	.word	0xffc00000

08009734 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009734:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009736:	4b05      	ldr	r3, [pc, #20]	; (800974c <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 8009738:	2000      	movs	r0, #0
{
 800973a:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800973c:	6954      	ldr	r4, [r2, #20]
 800973e:	4023      	ands	r3, r4
}
 8009740:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009744:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8009748:	6151      	str	r1, [r2, #20]
}
 800974a:	4770      	bx	lr
 800974c:	ffffc001 	.word	0xffffc001

08009750 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8009750:	4603      	mov	r3, r0
 8009752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8009756:	4c15      	ldr	r4, [pc, #84]	; (80097ac <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 8009758:	2500      	movs	r5, #0
 800975a:	4e15      	ldr	r6, [pc, #84]	; (80097b0 <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800975c:	4628      	mov	r0, r5
 800975e:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8009762:	e9d3 7200 	ldrd	r7, r2, [r3]
 8009766:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800976a:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  DrawProp->LcdLayer = 0;
 800976e:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8009770:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 8009774:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 8009776:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 8009778:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800977a:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 800977e:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8009782:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 8009786:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800978a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800978c:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800978e:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8009790:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8009792:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8009794:	6a23      	ldr	r3, [r4, #32]
 8009796:	f106 0118 	add.w	r1, r6, #24
 800979a:	4628      	mov	r0, r5
 800979c:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800979e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80097a0:	f106 011c 	add.w	r1, r6, #28
 80097a4:	4628      	mov	r0, r5
}
 80097a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 80097aa:	4718      	bx	r3
 80097ac:	24001220 	.word	0x24001220
 80097b0:	240011e0 	.word	0x240011e0

080097b4 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 80097b4:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 80097b6:	4b05      	ldr	r3, [pc, #20]	; (80097cc <UTIL_LCD_SetLayer+0x18>)
 80097b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ba:	b133      	cbz	r3, 80097ca <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 80097bc:	4d04      	ldr	r5, [pc, #16]	; (80097d0 <UTIL_LCD_SetLayer+0x1c>)
 80097be:	4604      	mov	r4, r0
 80097c0:	4601      	mov	r1, r0
 80097c2:	6928      	ldr	r0, [r5, #16]
 80097c4:	4798      	blx	r3
 80097c6:	b900      	cbnz	r0, 80097ca <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 80097c8:	60ec      	str	r4, [r5, #12]
    }
  }
}
 80097ca:	bd38      	pop	{r3, r4, r5, pc}
 80097cc:	24001220 	.word	0x24001220
 80097d0:	240011e0 	.word	0x240011e0

080097d4 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 80097d4:	4a02      	ldr	r2, [pc, #8]	; (80097e0 <UTIL_LCD_SetTextColor+0xc>)
 80097d6:	68d3      	ldr	r3, [r2, #12]
 80097d8:	015b      	lsls	r3, r3, #5
 80097da:	50d0      	str	r0, [r2, r3]
}
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	240011e0 	.word	0x240011e0

080097e4 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 80097e4:	4b02      	ldr	r3, [pc, #8]	; (80097f0 <UTIL_LCD_SetBackColor+0xc>)
 80097e6:	68da      	ldr	r2, [r3, #12]
 80097e8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80097ec:	6058      	str	r0, [r3, #4]
}
 80097ee:	4770      	bx	lr
 80097f0:	240011e0 	.word	0x240011e0

080097f4 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 80097f4:	4b02      	ldr	r3, [pc, #8]	; (8009800 <UTIL_LCD_SetFont+0xc>)
 80097f6:	68da      	ldr	r2, [r3, #12]
 80097f8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80097fc:	6098      	str	r0, [r3, #8]
}
 80097fe:	4770      	bx	lr
 8009800:	240011e0 	.word	0x240011e0

08009804 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8009804:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8009806:	4e13      	ldr	r6, [pc, #76]	; (8009854 <UTIL_LCD_FillRect+0x50>)
{
 8009808:	4615      	mov	r5, r2
 800980a:	b083      	sub	sp, #12
 800980c:	461c      	mov	r4, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800980e:	69f7      	ldr	r7, [r6, #28]
{
 8009810:	462b      	mov	r3, r5
 8009812:	460a      	mov	r2, r1
 8009814:	9d08      	ldr	r5, [sp, #32]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8009816:	2f02      	cmp	r7, #2
 8009818:	d008      	beq.n	800982c <UTIL_LCD_FillRect+0x28>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 800981a:	4f0f      	ldr	r7, [pc, #60]	; (8009858 <UTIL_LCD_FillRect+0x54>)
 800981c:	4601      	mov	r1, r0
 800981e:	e9cd 4500 	strd	r4, r5, [sp]
 8009822:	693c      	ldr	r4, [r7, #16]
 8009824:	6930      	ldr	r0, [r6, #16]
 8009826:	47a0      	blx	r4
  }
}
 8009828:	b003      	add	sp, #12
 800982a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800982c:	096f      	lsrs	r7, r5, #5
 800982e:	9400      	str	r4, [sp, #0]
 8009830:	0a29      	lsrs	r1, r5, #8
 8009832:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8009836:	f407 64fc 	and.w	r4, r7, #2016	; 0x7e0
 800983a:	f401 4778 	and.w	r7, r1, #63488	; 0xf800
 800983e:	4601      	mov	r1, r0
 8009840:	6930      	ldr	r0, [r6, #16]
 8009842:	433c      	orrs	r4, r7
 8009844:	4e04      	ldr	r6, [pc, #16]	; (8009858 <UTIL_LCD_FillRect+0x54>)
 8009846:	4325      	orrs	r5, r4
 8009848:	6934      	ldr	r4, [r6, #16]
 800984a:	9501      	str	r5, [sp, #4]
 800984c:	47a0      	blx	r4
}
 800984e:	b003      	add	sp, #12
 8009850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009852:	bf00      	nop
 8009854:	240011e0 	.word	0x240011e0
 8009858:	24001220 	.word	0x24001220

0800985c <UTIL_LCD_Clear>:
{
 800985c:	b500      	push	{lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800985e:	2100      	movs	r1, #0
{
 8009860:	b083      	sub	sp, #12
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8009862:	4a05      	ldr	r2, [pc, #20]	; (8009878 <UTIL_LCD_Clear+0x1c>)
 8009864:	9000      	str	r0, [sp, #0]
 8009866:	4608      	mov	r0, r1
 8009868:	6993      	ldr	r3, [r2, #24]
 800986a:	6952      	ldr	r2, [r2, #20]
 800986c:	f7ff ffca 	bl	8009804 <UTIL_LCD_FillRect>
}
 8009870:	b003      	add	sp, #12
 8009872:	f85d fb04 	ldr.w	pc, [sp], #4
 8009876:	bf00      	nop
 8009878:	240011e0 	.word	0x240011e0

0800987c <__libc_init_array>:
 800987c:	b570      	push	{r4, r5, r6, lr}
 800987e:	4d0d      	ldr	r5, [pc, #52]	; (80098b4 <__libc_init_array+0x38>)
 8009880:	4c0d      	ldr	r4, [pc, #52]	; (80098b8 <__libc_init_array+0x3c>)
 8009882:	1b64      	subs	r4, r4, r5
 8009884:	10a4      	asrs	r4, r4, #2
 8009886:	2600      	movs	r6, #0
 8009888:	42a6      	cmp	r6, r4
 800988a:	d109      	bne.n	80098a0 <__libc_init_array+0x24>
 800988c:	4d0b      	ldr	r5, [pc, #44]	; (80098bc <__libc_init_array+0x40>)
 800988e:	4c0c      	ldr	r4, [pc, #48]	; (80098c0 <__libc_init_array+0x44>)
 8009890:	f000 f82e 	bl	80098f0 <_init>
 8009894:	1b64      	subs	r4, r4, r5
 8009896:	10a4      	asrs	r4, r4, #2
 8009898:	2600      	movs	r6, #0
 800989a:	42a6      	cmp	r6, r4
 800989c:	d105      	bne.n	80098aa <__libc_init_array+0x2e>
 800989e:	bd70      	pop	{r4, r5, r6, pc}
 80098a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a4:	4798      	blx	r3
 80098a6:	3601      	adds	r6, #1
 80098a8:	e7ee      	b.n	8009888 <__libc_init_array+0xc>
 80098aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ae:	4798      	blx	r3
 80098b0:	3601      	adds	r6, #1
 80098b2:	e7f2      	b.n	800989a <__libc_init_array+0x1e>
 80098b4:	08013670 	.word	0x08013670
 80098b8:	08013670 	.word	0x08013670
 80098bc:	08013670 	.word	0x08013670
 80098c0:	08013674 	.word	0x08013674

080098c4 <memcpy>:
 80098c4:	440a      	add	r2, r1
 80098c6:	4291      	cmp	r1, r2
 80098c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80098cc:	d100      	bne.n	80098d0 <memcpy+0xc>
 80098ce:	4770      	bx	lr
 80098d0:	b510      	push	{r4, lr}
 80098d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098da:	4291      	cmp	r1, r2
 80098dc:	d1f9      	bne.n	80098d2 <memcpy+0xe>
 80098de:	bd10      	pop	{r4, pc}

080098e0 <memset>:
 80098e0:	4402      	add	r2, r0
 80098e2:	4603      	mov	r3, r0
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d100      	bne.n	80098ea <memset+0xa>
 80098e8:	4770      	bx	lr
 80098ea:	f803 1b01 	strb.w	r1, [r3], #1
 80098ee:	e7f9      	b.n	80098e4 <memset+0x4>

080098f0 <_init>:
 80098f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f2:	bf00      	nop
 80098f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098f6:	bc08      	pop	{r3}
 80098f8:	469e      	mov	lr, r3
 80098fa:	4770      	bx	lr

080098fc <_fini>:
 80098fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fe:	bf00      	nop
 8009900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009902:	bc08      	pop	{r3}
 8009904:	469e      	mov	lr, r3
 8009906:	4770      	bx	lr
