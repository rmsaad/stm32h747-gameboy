
stm32h747-gameboy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097ec  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d68  08009a84  08009a84  00019a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7ec  0800b7ec  0002906c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b7ec  0800b7ec  0002906c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b7ec  0800b7ec  0002906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7ec  0800b7ec  0001b7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7f0  0800b7f0  0001b7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000906c  24000000  0800b7f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001056c  24009070  08014860  00029070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240195dc  08014860  000295dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00053ace  00000000  00000000  0002909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ecd  00000000  00000000  0007cb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001a763  00000000  00000000  00083a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002540  00000000  00000000  0009e198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004690  00000000  00000000  000a06d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00048028  00000000  00000000  000a4d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fb1f  00000000  00000000  000ecd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c86c0  00000000  00000000  0011c8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002e4f6f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d50  00000000  00000000  002e4fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24009070 	.word	0x24009070
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009a6c 	.word	0x08009a6c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24009074 	.word	0x24009074
 80002d4:	08009a6c 	.word	0x08009a6c

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002da:	492e      	ldr	r1, [pc, #184]	; (8000394 <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80002e4:	b430      	push	{r4, r5}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	f042 0210 	orr.w	r2, r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f2:	680b      	ldr	r3, [r1, #0]
 80002f4:	f003 030f 	and.w	r3, r3, #15
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	d805      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fc:	680b      	ldr	r3, [r1, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030c:	4a23      	ldr	r2, [pc, #140]	; (800039c <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800030e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000310:	4820      	ldr	r0, [pc, #128]	; (8000394 <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 8000312:	f041 0101 	orr.w	r1, r1, #1
 8000316:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000318:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000320:	6803      	ldr	r3, [r0, #0]
 8000322:	071b      	lsls	r3, r3, #28
 8000324:	d505      	bpl.n	8000332 <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000326:	6803      	ldr	r3, [r0, #0]
 8000328:	f023 030f 	bic.w	r3, r3, #15
 800032c:	f043 0307 	orr.w	r3, r3, #7
 8000330:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <SystemInit+0xc0>)
 8000334:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000336:	491a      	ldr	r1, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
  RCC->PLLCKSELR = 0x02020200;
 8000338:	4c1a      	ldr	r4, [pc, #104]	; (80003a4 <SystemInit+0xcc>)
  RCC->PLLCFGR = 0x01FF0000;
 800033a:	481b      	ldr	r0, [pc, #108]	; (80003a8 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 800033c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800033e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000340:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000342:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000346:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800034a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800034c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800034e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000350:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000352:	6818      	ldr	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000354:	4c15      	ldr	r4, [pc, #84]	; (80003ac <SystemInit+0xd4>)
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800035a:	4d15      	ldr	r5, [pc, #84]	; (80003b0 <SystemInit+0xd8>)
 800035c:	4915      	ldr	r1, [pc, #84]	; (80003b4 <SystemInit+0xdc>)
  RCC->CR &= 0xFFFBFFFFU;
 800035e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000360:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8000362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000368:	6263      	str	r3, [r4, #36]	; 0x24
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800036a:	682b      	ldr	r3, [r5, #0]
 800036c:	4019      	ands	r1, r3
 800036e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000372:	d202      	bcs.n	800037a <SystemInit+0xa2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <SystemInit+0xe0>)
 8000376:	2201      	movs	r2, #1
 8000378:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800037a:	4910      	ldr	r1, [pc, #64]	; (80003bc <SystemInit+0xe4>)
 800037c:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <SystemInit+0xb8>)
 8000382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000386:	6008      	str	r0, [r1, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000388:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800038a:	bc30      	pop	{r4, r5}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	01010280 	.word	0x01010280
 80003a4:	02020200 	.word	0x02020200
 80003a8:	01ff0000 	.word	0x01ff0000
 80003ac:	580000c0 	.word	0x580000c0
 80003b0:	5c001000 	.word	0x5c001000
 80003b4:	ffff0000 	.word	0xffff0000
 80003b8:	51008108 	.word	0x51008108
 80003bc:	52004000 	.word	0x52004000

080003c0 <vNOP>:
};

/* Implementation*/

/*********************0x0X*/
void vNOP(){          }
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop

080003c4 <vINCs_BC>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
void vINCs_BC(){      reg.BC++;}
 80003c4:	4a02      	ldr	r2, [pc, #8]	; (80003d0 <vINCs_BC+0xc>)
 80003c6:	8853      	ldrh	r3, [r2, #2]
 80003c8:	3301      	adds	r3, #1
 80003ca:	8053      	strh	r3, [r2, #2]
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	24009254 	.word	0x24009254

080003d4 <vDECs_BC>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
void vLDs_a16_SP(){   vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
void vDECs_BC(){      reg.BC--;}
 80003d4:	4a02      	ldr	r2, [pc, #8]	; (80003e0 <vDECs_BC+0xc>)
 80003d6:	8853      	ldrh	r3, [r2, #2]
 80003d8:	3b01      	subs	r3, #1
 80003da:	8053      	strh	r3, [r2, #2]
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	24009254 	.word	0x24009254

080003e4 <vSTOP>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}

/*********************0x1X*/
void vSTOP(){         ucSTOPPED = 1;}                                    // MORE NEEDED TO IMPLEMENT LATER
 80003e4:	4b01      	ldr	r3, [pc, #4]	; (80003ec <vSTOP+0x8>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
 80003ea:	4770      	bx	lr
 80003ec:	2400909a 	.word	0x2400909a

080003f0 <vINCs_DE>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
void vINCs_DE(){      reg.DE++;}
 80003f0:	4a02      	ldr	r2, [pc, #8]	; (80003fc <vINCs_DE+0xc>)
 80003f2:	8893      	ldrh	r3, [r2, #4]
 80003f4:	3301      	adds	r3, #1
 80003f6:	8093      	strh	r3, [r2, #4]
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	24009254 	.word	0x24009254

08000400 <vDECs_DE>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
void vDECs_DE(){      reg.DE--;}
 8000400:	4a02      	ldr	r2, [pc, #8]	; (800040c <vDECs_DE+0xc>)
 8000402:	8893      	ldrh	r3, [r2, #4]
 8000404:	3b01      	subs	r3, #1
 8000406:	8093      	strh	r3, [r2, #4]
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	24009254 	.word	0x24009254

08000410 <vINCs_HL>:

/*********************0x2X*/
void vJR_NZ_r8(){     customDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
void vINCs_HL(){      reg.HL++;}
 8000410:	4a02      	ldr	r2, [pc, #8]	; (800041c <vINCs_HL+0xc>)
 8000412:	88d3      	ldrh	r3, [r2, #6]
 8000414:	3301      	adds	r3, #1
 8000416:	80d3      	strh	r3, [r2, #6]
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	24009254 	.word	0x24009254

08000420 <vDECs_HL>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
void vJR_Z_r8(){      customDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
void vDECs_HL(){      reg.HL--;}
 8000420:	4a02      	ldr	r2, [pc, #8]	; (800042c <vDECs_HL+0xc>)
 8000422:	88d3      	ldrh	r3, [r2, #6]
 8000424:	3b01      	subs	r3, #1
 8000426:	80d3      	strh	r3, [r2, #6]
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	24009254 	.word	0x24009254

08000430 <vINCs_SP>:

/*********************0x3X*/
void vJR_NC_r8(){     customDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
void vINCs_SP(){      reg.SP++;}
 8000430:	4a02      	ldr	r2, [pc, #8]	; (800043c <vINCs_SP+0xc>)
 8000432:	8913      	ldrh	r3, [r2, #8]
 8000434:	3301      	adds	r3, #1
 8000436:	8113      	strh	r3, [r2, #8]
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	24009254 	.word	0x24009254

08000440 <vDECs_SP>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
void vSCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); setbit(&reg.F, C_FLAG);}
void vJR_C_r8(){      customDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
void vDECs_SP(){      reg.SP--;}
 8000440:	4a02      	ldr	r2, [pc, #8]	; (800044c <vDECs_SP+0xc>)
 8000442:	8913      	ldrh	r3, [r2, #8]
 8000444:	3b01      	subs	r3, #1
 8000446:	8113      	strh	r3, [r2, #8]
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	24009254 	.word	0x24009254

08000450 <vLD_B_C>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
void vCCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); (checkbit(reg.F, C_FLAG)) ? resetbit(&reg.F, C_FLAG) : setbit(&reg.F, C_FLAG);}

/*********************0x4X*/
void vLD_B_B(){       reg.B = reg.B;}
void vLD_B_C(){       reg.B = reg.C;}
 8000450:	4b01      	ldr	r3, [pc, #4]	; (8000458 <vLD_B_C+0x8>)
 8000452:	789a      	ldrb	r2, [r3, #2]
 8000454:	70da      	strb	r2, [r3, #3]
 8000456:	4770      	bx	lr
 8000458:	24009254 	.word	0x24009254

0800045c <vLD_B_D>:
void vLD_B_D(){       reg.B = reg.D;}
 800045c:	4b01      	ldr	r3, [pc, #4]	; (8000464 <vLD_B_D+0x8>)
 800045e:	795a      	ldrb	r2, [r3, #5]
 8000460:	70da      	strb	r2, [r3, #3]
 8000462:	4770      	bx	lr
 8000464:	24009254 	.word	0x24009254

08000468 <vLD_B_E>:
void vLD_B_E(){       reg.B = reg.E;}
 8000468:	4b01      	ldr	r3, [pc, #4]	; (8000470 <vLD_B_E+0x8>)
 800046a:	791a      	ldrb	r2, [r3, #4]
 800046c:	70da      	strb	r2, [r3, #3]
 800046e:	4770      	bx	lr
 8000470:	24009254 	.word	0x24009254

08000474 <vLD_B_H>:
void vLD_B_H(){       reg.B = reg.H;}
 8000474:	4b01      	ldr	r3, [pc, #4]	; (800047c <vLD_B_H+0x8>)
 8000476:	79da      	ldrb	r2, [r3, #7]
 8000478:	70da      	strb	r2, [r3, #3]
 800047a:	4770      	bx	lr
 800047c:	24009254 	.word	0x24009254

08000480 <vLD_B_L>:
void vLD_B_L(){       reg.B = reg.L;}
 8000480:	4b01      	ldr	r3, [pc, #4]	; (8000488 <vLD_B_L+0x8>)
 8000482:	799a      	ldrb	r2, [r3, #6]
 8000484:	70da      	strb	r2, [r3, #3]
 8000486:	4770      	bx	lr
 8000488:	24009254 	.word	0x24009254

0800048c <vLD_B_A>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
void vLD_B_A(){       reg.B = reg.A;}
 800048c:	4b01      	ldr	r3, [pc, #4]	; (8000494 <vLD_B_A+0x8>)
 800048e:	785a      	ldrb	r2, [r3, #1]
 8000490:	70da      	strb	r2, [r3, #3]
 8000492:	4770      	bx	lr
 8000494:	24009254 	.word	0x24009254

08000498 <vLD_C_B>:
void vLD_C_B(){       reg.C = reg.B;}
 8000498:	4b01      	ldr	r3, [pc, #4]	; (80004a0 <vLD_C_B+0x8>)
 800049a:	78da      	ldrb	r2, [r3, #3]
 800049c:	709a      	strb	r2, [r3, #2]
 800049e:	4770      	bx	lr
 80004a0:	24009254 	.word	0x24009254

080004a4 <vLD_C_D>:
void vLD_C_C(){       reg.C = reg.C;}
void vLD_C_D(){       reg.C = reg.D;}
 80004a4:	4b01      	ldr	r3, [pc, #4]	; (80004ac <vLD_C_D+0x8>)
 80004a6:	795a      	ldrb	r2, [r3, #5]
 80004a8:	709a      	strb	r2, [r3, #2]
 80004aa:	4770      	bx	lr
 80004ac:	24009254 	.word	0x24009254

080004b0 <vLD_C_E>:
void vLD_C_E(){       reg.C = reg.E;}
 80004b0:	4b01      	ldr	r3, [pc, #4]	; (80004b8 <vLD_C_E+0x8>)
 80004b2:	791a      	ldrb	r2, [r3, #4]
 80004b4:	709a      	strb	r2, [r3, #2]
 80004b6:	4770      	bx	lr
 80004b8:	24009254 	.word	0x24009254

080004bc <vLD_C_H>:
void vLD_C_H(){       reg.C = reg.H;}
 80004bc:	4b01      	ldr	r3, [pc, #4]	; (80004c4 <vLD_C_H+0x8>)
 80004be:	79da      	ldrb	r2, [r3, #7]
 80004c0:	709a      	strb	r2, [r3, #2]
 80004c2:	4770      	bx	lr
 80004c4:	24009254 	.word	0x24009254

080004c8 <vLD_C_L>:
void vLD_C_L(){       reg.C = reg.L;}
 80004c8:	4b01      	ldr	r3, [pc, #4]	; (80004d0 <vLD_C_L+0x8>)
 80004ca:	799a      	ldrb	r2, [r3, #6]
 80004cc:	709a      	strb	r2, [r3, #2]
 80004ce:	4770      	bx	lr
 80004d0:	24009254 	.word	0x24009254

080004d4 <vLD_C_A>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
void vLD_C_A(){       reg.C = reg.A;}
 80004d4:	4b01      	ldr	r3, [pc, #4]	; (80004dc <vLD_C_A+0x8>)
 80004d6:	785a      	ldrb	r2, [r3, #1]
 80004d8:	709a      	strb	r2, [r3, #2]
 80004da:	4770      	bx	lr
 80004dc:	24009254 	.word	0x24009254

080004e0 <vLD_D_B>:

/*********************0x5X*/
void vLD_D_B(){       reg.D = reg.B;}
 80004e0:	4b01      	ldr	r3, [pc, #4]	; (80004e8 <vLD_D_B+0x8>)
 80004e2:	78da      	ldrb	r2, [r3, #3]
 80004e4:	715a      	strb	r2, [r3, #5]
 80004e6:	4770      	bx	lr
 80004e8:	24009254 	.word	0x24009254

080004ec <vLD_D_C>:
void vLD_D_C(){       reg.D = reg.C;}
 80004ec:	4b01      	ldr	r3, [pc, #4]	; (80004f4 <vLD_D_C+0x8>)
 80004ee:	789a      	ldrb	r2, [r3, #2]
 80004f0:	715a      	strb	r2, [r3, #5]
 80004f2:	4770      	bx	lr
 80004f4:	24009254 	.word	0x24009254

080004f8 <vLD_D_E>:
void vLD_D_D(){       reg.D = reg.D;}
void vLD_D_E(){       reg.D = reg.E;}
 80004f8:	4b01      	ldr	r3, [pc, #4]	; (8000500 <vLD_D_E+0x8>)
 80004fa:	791a      	ldrb	r2, [r3, #4]
 80004fc:	715a      	strb	r2, [r3, #5]
 80004fe:	4770      	bx	lr
 8000500:	24009254 	.word	0x24009254

08000504 <vLD_D_H>:
void vLD_D_H(){       reg.D = reg.H;}
 8000504:	4b01      	ldr	r3, [pc, #4]	; (800050c <vLD_D_H+0x8>)
 8000506:	79da      	ldrb	r2, [r3, #7]
 8000508:	715a      	strb	r2, [r3, #5]
 800050a:	4770      	bx	lr
 800050c:	24009254 	.word	0x24009254

08000510 <vLD_D_L>:
void vLD_D_L(){       reg.D = reg.L;}
 8000510:	4b01      	ldr	r3, [pc, #4]	; (8000518 <vLD_D_L+0x8>)
 8000512:	799a      	ldrb	r2, [r3, #6]
 8000514:	715a      	strb	r2, [r3, #5]
 8000516:	4770      	bx	lr
 8000518:	24009254 	.word	0x24009254

0800051c <vLD_D_A>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
void vLD_D_A(){       reg.D = reg.A;}
 800051c:	4b01      	ldr	r3, [pc, #4]	; (8000524 <vLD_D_A+0x8>)
 800051e:	785a      	ldrb	r2, [r3, #1]
 8000520:	715a      	strb	r2, [r3, #5]
 8000522:	4770      	bx	lr
 8000524:	24009254 	.word	0x24009254

08000528 <vLD_E_B>:
void vLD_E_B(){       reg.E = reg.B;}
 8000528:	4b01      	ldr	r3, [pc, #4]	; (8000530 <vLD_E_B+0x8>)
 800052a:	78da      	ldrb	r2, [r3, #3]
 800052c:	711a      	strb	r2, [r3, #4]
 800052e:	4770      	bx	lr
 8000530:	24009254 	.word	0x24009254

08000534 <vLD_E_C>:
void vLD_E_C(){       reg.E = reg.C;}
 8000534:	4b01      	ldr	r3, [pc, #4]	; (800053c <vLD_E_C+0x8>)
 8000536:	789a      	ldrb	r2, [r3, #2]
 8000538:	711a      	strb	r2, [r3, #4]
 800053a:	4770      	bx	lr
 800053c:	24009254 	.word	0x24009254

08000540 <vLD_E_D>:
void vLD_E_D(){       reg.E = reg.D;}
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <vLD_E_D+0x8>)
 8000542:	795a      	ldrb	r2, [r3, #5]
 8000544:	711a      	strb	r2, [r3, #4]
 8000546:	4770      	bx	lr
 8000548:	24009254 	.word	0x24009254

0800054c <vLD_E_H>:
void vLD_E_E(){       reg.E = reg.E;}
void vLD_E_H(){       reg.E = reg.H;}
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <vLD_E_H+0x8>)
 800054e:	79da      	ldrb	r2, [r3, #7]
 8000550:	711a      	strb	r2, [r3, #4]
 8000552:	4770      	bx	lr
 8000554:	24009254 	.word	0x24009254

08000558 <vLD_E_L>:
void vLD_E_L(){       reg.E = reg.L;}
 8000558:	4b01      	ldr	r3, [pc, #4]	; (8000560 <vLD_E_L+0x8>)
 800055a:	799a      	ldrb	r2, [r3, #6]
 800055c:	711a      	strb	r2, [r3, #4]
 800055e:	4770      	bx	lr
 8000560:	24009254 	.word	0x24009254

08000564 <vLD_E_A>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
void vLD_E_A(){       reg.E = reg.A;}
 8000564:	4b01      	ldr	r3, [pc, #4]	; (800056c <vLD_E_A+0x8>)
 8000566:	785a      	ldrb	r2, [r3, #1]
 8000568:	711a      	strb	r2, [r3, #4]
 800056a:	4770      	bx	lr
 800056c:	24009254 	.word	0x24009254

08000570 <vLD_H_B>:

/*********************0x6X*/
void vLD_H_B(){       reg.H = reg.B;}
 8000570:	4b01      	ldr	r3, [pc, #4]	; (8000578 <vLD_H_B+0x8>)
 8000572:	78da      	ldrb	r2, [r3, #3]
 8000574:	71da      	strb	r2, [r3, #7]
 8000576:	4770      	bx	lr
 8000578:	24009254 	.word	0x24009254

0800057c <vLD_H_C>:
void vLD_H_C(){       reg.H = reg.C;}
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <vLD_H_C+0x8>)
 800057e:	789a      	ldrb	r2, [r3, #2]
 8000580:	71da      	strb	r2, [r3, #7]
 8000582:	4770      	bx	lr
 8000584:	24009254 	.word	0x24009254

08000588 <vLD_H_D>:
void vLD_H_D(){       reg.H = reg.D;}
 8000588:	4b01      	ldr	r3, [pc, #4]	; (8000590 <vLD_H_D+0x8>)
 800058a:	795a      	ldrb	r2, [r3, #5]
 800058c:	71da      	strb	r2, [r3, #7]
 800058e:	4770      	bx	lr
 8000590:	24009254 	.word	0x24009254

08000594 <vLD_H_E>:
void vLD_H_E(){       reg.H = reg.E;}
 8000594:	4b01      	ldr	r3, [pc, #4]	; (800059c <vLD_H_E+0x8>)
 8000596:	791a      	ldrb	r2, [r3, #4]
 8000598:	71da      	strb	r2, [r3, #7]
 800059a:	4770      	bx	lr
 800059c:	24009254 	.word	0x24009254

080005a0 <vLD_H_L>:
void vLD_H_H(){       reg.H = reg.H;}
void vLD_H_L(){       reg.H = reg.L;}
 80005a0:	4b01      	ldr	r3, [pc, #4]	; (80005a8 <vLD_H_L+0x8>)
 80005a2:	799a      	ldrb	r2, [r3, #6]
 80005a4:	71da      	strb	r2, [r3, #7]
 80005a6:	4770      	bx	lr
 80005a8:	24009254 	.word	0x24009254

080005ac <vLD_H_A>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
void vLD_H_A(){       reg.H = reg.A;}
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <vLD_H_A+0x8>)
 80005ae:	785a      	ldrb	r2, [r3, #1]
 80005b0:	71da      	strb	r2, [r3, #7]
 80005b2:	4770      	bx	lr
 80005b4:	24009254 	.word	0x24009254

080005b8 <vLD_L_B>:
void vLD_L_B(){       reg.L = reg.B;}
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <vLD_L_B+0x8>)
 80005ba:	78da      	ldrb	r2, [r3, #3]
 80005bc:	719a      	strb	r2, [r3, #6]
 80005be:	4770      	bx	lr
 80005c0:	24009254 	.word	0x24009254

080005c4 <vLD_L_C>:
void vLD_L_C(){       reg.L = reg.C;}
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <vLD_L_C+0x8>)
 80005c6:	789a      	ldrb	r2, [r3, #2]
 80005c8:	719a      	strb	r2, [r3, #6]
 80005ca:	4770      	bx	lr
 80005cc:	24009254 	.word	0x24009254

080005d0 <vLD_L_D>:
void vLD_L_D(){       reg.L = reg.D;}
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <vLD_L_D+0x8>)
 80005d2:	795a      	ldrb	r2, [r3, #5]
 80005d4:	719a      	strb	r2, [r3, #6]
 80005d6:	4770      	bx	lr
 80005d8:	24009254 	.word	0x24009254

080005dc <vLD_L_E>:
void vLD_L_E(){       reg.L = reg.E;}
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <vLD_L_E+0x8>)
 80005de:	791a      	ldrb	r2, [r3, #4]
 80005e0:	719a      	strb	r2, [r3, #6]
 80005e2:	4770      	bx	lr
 80005e4:	24009254 	.word	0x24009254

080005e8 <vLD_L_H>:
void vLD_L_H(){       reg.L = reg.H;}
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <vLD_L_H+0x8>)
 80005ea:	79da      	ldrb	r2, [r3, #7]
 80005ec:	719a      	strb	r2, [r3, #6]
 80005ee:	4770      	bx	lr
 80005f0:	24009254 	.word	0x24009254

080005f4 <vLD_L_A>:
void vLD_L_L(){       reg.L = reg.L;}
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
void vLD_L_A(){       reg.L = reg.A;}
 80005f4:	4b01      	ldr	r3, [pc, #4]	; (80005fc <vLD_L_A+0x8>)
 80005f6:	785a      	ldrb	r2, [r3, #1]
 80005f8:	719a      	strb	r2, [r3, #6]
 80005fa:	4770      	bx	lr
 80005fc:	24009254 	.word	0x24009254

08000600 <vHALT>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
void vHALT(){         ucHALTED = 1;}
 8000600:	4b01      	ldr	r3, [pc, #4]	; (8000608 <vHALT+0x8>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	4770      	bx	lr
 8000608:	24009097 	.word	0x24009097

0800060c <vLD_A_B>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
void vLD_A_B(){       reg.A = reg.B;}
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <vLD_A_B+0x8>)
 800060e:	78da      	ldrb	r2, [r3, #3]
 8000610:	705a      	strb	r2, [r3, #1]
 8000612:	4770      	bx	lr
 8000614:	24009254 	.word	0x24009254

08000618 <vLD_A_C>:
void vLD_A_C(){       reg.A = reg.C;}
 8000618:	4b01      	ldr	r3, [pc, #4]	; (8000620 <vLD_A_C+0x8>)
 800061a:	789a      	ldrb	r2, [r3, #2]
 800061c:	705a      	strb	r2, [r3, #1]
 800061e:	4770      	bx	lr
 8000620:	24009254 	.word	0x24009254

08000624 <vLD_A_D>:
void vLD_A_D(){       reg.A = reg.D;}
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <vLD_A_D+0x8>)
 8000626:	795a      	ldrb	r2, [r3, #5]
 8000628:	705a      	strb	r2, [r3, #1]
 800062a:	4770      	bx	lr
 800062c:	24009254 	.word	0x24009254

08000630 <vLD_A_E>:
void vLD_A_E(){       reg.A = reg.E;}
 8000630:	4b01      	ldr	r3, [pc, #4]	; (8000638 <vLD_A_E+0x8>)
 8000632:	791a      	ldrb	r2, [r3, #4]
 8000634:	705a      	strb	r2, [r3, #1]
 8000636:	4770      	bx	lr
 8000638:	24009254 	.word	0x24009254

0800063c <vLD_A_H>:
void vLD_A_H(){       reg.A = reg.H;}
 800063c:	4b01      	ldr	r3, [pc, #4]	; (8000644 <vLD_A_H+0x8>)
 800063e:	79da      	ldrb	r2, [r3, #7]
 8000640:	705a      	strb	r2, [r3, #1]
 8000642:	4770      	bx	lr
 8000644:	24009254 	.word	0x24009254

08000648 <vLD_A_L>:
void vLD_A_L(){       reg.A = reg.L;}
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <vLD_A_L+0x8>)
 800064a:	799a      	ldrb	r2, [r3, #6]
 800064c:	705a      	strb	r2, [r3, #1]
 800064e:	4770      	bx	lr
 8000650:	24009254 	.word	0x24009254

08000654 <vAND_B>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}

/*********************0xAX*/
void vAND_B(){        reg.A &= reg.B; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <vAND_B+0x18>)
 8000656:	785a      	ldrb	r2, [r3, #1]
 8000658:	78d9      	ldrb	r1, [r3, #3]
 800065a:	400a      	ands	r2, r1
 800065c:	2a00      	cmp	r2, #0
 800065e:	705a      	strb	r2, [r3, #1]
 8000660:	bf0c      	ite	eq
 8000662:	22a0      	moveq	r2, #160	; 0xa0
 8000664:	2220      	movne	r2, #32
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	24009254 	.word	0x24009254

08000670 <vAND_C>:
void vAND_C(){        reg.A &= reg.C; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <vAND_C+0x18>)
 8000672:	785a      	ldrb	r2, [r3, #1]
 8000674:	7899      	ldrb	r1, [r3, #2]
 8000676:	400a      	ands	r2, r1
 8000678:	2a00      	cmp	r2, #0
 800067a:	705a      	strb	r2, [r3, #1]
 800067c:	bf0c      	ite	eq
 800067e:	22a0      	moveq	r2, #160	; 0xa0
 8000680:	2220      	movne	r2, #32
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	24009254 	.word	0x24009254

0800068c <vAND_D>:
void vAND_D(){        reg.A &= reg.D; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <vAND_D+0x18>)
 800068e:	785a      	ldrb	r2, [r3, #1]
 8000690:	7959      	ldrb	r1, [r3, #5]
 8000692:	400a      	ands	r2, r1
 8000694:	2a00      	cmp	r2, #0
 8000696:	705a      	strb	r2, [r3, #1]
 8000698:	bf0c      	ite	eq
 800069a:	22a0      	moveq	r2, #160	; 0xa0
 800069c:	2220      	movne	r2, #32
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	24009254 	.word	0x24009254

080006a8 <vAND_E>:
void vAND_E(){        reg.A &= reg.E; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <vAND_E+0x18>)
 80006aa:	785a      	ldrb	r2, [r3, #1]
 80006ac:	7919      	ldrb	r1, [r3, #4]
 80006ae:	400a      	ands	r2, r1
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	705a      	strb	r2, [r3, #1]
 80006b4:	bf0c      	ite	eq
 80006b6:	22a0      	moveq	r2, #160	; 0xa0
 80006b8:	2220      	movne	r2, #32
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	24009254 	.word	0x24009254

080006c4 <vAND_H>:
void vAND_H(){        reg.A &= reg.H; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <vAND_H+0x18>)
 80006c6:	785a      	ldrb	r2, [r3, #1]
 80006c8:	79d9      	ldrb	r1, [r3, #7]
 80006ca:	400a      	ands	r2, r1
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	705a      	strb	r2, [r3, #1]
 80006d0:	bf0c      	ite	eq
 80006d2:	22a0      	moveq	r2, #160	; 0xa0
 80006d4:	2220      	movne	r2, #32
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	24009254 	.word	0x24009254

080006e0 <vAND_L>:
void vAND_L(){        reg.A &= reg.L; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <vAND_L+0x18>)
 80006e2:	785a      	ldrb	r2, [r3, #1]
 80006e4:	7999      	ldrb	r1, [r3, #6]
 80006e6:	400a      	ands	r2, r1
 80006e8:	2a00      	cmp	r2, #0
 80006ea:	705a      	strb	r2, [r3, #1]
 80006ec:	bf0c      	ite	eq
 80006ee:	22a0      	moveq	r2, #160	; 0xa0
 80006f0:	2220      	movne	r2, #32
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	24009254 	.word	0x24009254

080006fc <vAND_A>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vAND_A(){        reg.A &= reg.A; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <vAND_A+0x10>)
 80006fe:	785a      	ldrb	r2, [r3, #1]
 8000700:	2a00      	cmp	r2, #0
 8000702:	bf0c      	ite	eq
 8000704:	22a0      	moveq	r2, #160	; 0xa0
 8000706:	2220      	movne	r2, #32
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	4770      	bx	lr
 800070c:	24009254 	.word	0x24009254

08000710 <vXOR_B>:
void vXOR_B(){        reg.A ^= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <vXOR_B+0x18>)
 8000712:	785a      	ldrb	r2, [r3, #1]
 8000714:	78d9      	ldrb	r1, [r3, #3]
 8000716:	ea82 0001 	eor.w	r0, r2, r1
 800071a:	428a      	cmp	r2, r1
 800071c:	bf0c      	ite	eq
 800071e:	2280      	moveq	r2, #128	; 0x80
 8000720:	2200      	movne	r2, #0
 8000722:	7058      	strb	r0, [r3, #1]
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	4770      	bx	lr
 8000728:	24009254 	.word	0x24009254

0800072c <vXOR_C>:
void vXOR_C(){        reg.A ^= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <vXOR_C+0x18>)
 800072e:	785a      	ldrb	r2, [r3, #1]
 8000730:	7899      	ldrb	r1, [r3, #2]
 8000732:	ea82 0001 	eor.w	r0, r2, r1
 8000736:	428a      	cmp	r2, r1
 8000738:	bf0c      	ite	eq
 800073a:	2280      	moveq	r2, #128	; 0x80
 800073c:	2200      	movne	r2, #0
 800073e:	7058      	strb	r0, [r3, #1]
 8000740:	701a      	strb	r2, [r3, #0]
 8000742:	4770      	bx	lr
 8000744:	24009254 	.word	0x24009254

08000748 <vXOR_D>:
void vXOR_D(){        reg.A ^= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <vXOR_D+0x18>)
 800074a:	785a      	ldrb	r2, [r3, #1]
 800074c:	7959      	ldrb	r1, [r3, #5]
 800074e:	ea82 0001 	eor.w	r0, r2, r1
 8000752:	428a      	cmp	r2, r1
 8000754:	bf0c      	ite	eq
 8000756:	2280      	moveq	r2, #128	; 0x80
 8000758:	2200      	movne	r2, #0
 800075a:	7058      	strb	r0, [r3, #1]
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	4770      	bx	lr
 8000760:	24009254 	.word	0x24009254

08000764 <vXOR_E>:
void vXOR_E(){        reg.A ^= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <vXOR_E+0x18>)
 8000766:	785a      	ldrb	r2, [r3, #1]
 8000768:	7919      	ldrb	r1, [r3, #4]
 800076a:	ea82 0001 	eor.w	r0, r2, r1
 800076e:	428a      	cmp	r2, r1
 8000770:	bf0c      	ite	eq
 8000772:	2280      	moveq	r2, #128	; 0x80
 8000774:	2200      	movne	r2, #0
 8000776:	7058      	strb	r0, [r3, #1]
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	4770      	bx	lr
 800077c:	24009254 	.word	0x24009254

08000780 <vXOR_H>:
void vXOR_H(){        reg.A ^= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <vXOR_H+0x18>)
 8000782:	785a      	ldrb	r2, [r3, #1]
 8000784:	79d9      	ldrb	r1, [r3, #7]
 8000786:	ea82 0001 	eor.w	r0, r2, r1
 800078a:	428a      	cmp	r2, r1
 800078c:	bf0c      	ite	eq
 800078e:	2280      	moveq	r2, #128	; 0x80
 8000790:	2200      	movne	r2, #0
 8000792:	7058      	strb	r0, [r3, #1]
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	4770      	bx	lr
 8000798:	24009254 	.word	0x24009254

0800079c <vXOR_L>:
void vXOR_L(){        reg.A ^= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <vXOR_L+0x18>)
 800079e:	785a      	ldrb	r2, [r3, #1]
 80007a0:	7999      	ldrb	r1, [r3, #6]
 80007a2:	ea82 0001 	eor.w	r0, r2, r1
 80007a6:	428a      	cmp	r2, r1
 80007a8:	bf0c      	ite	eq
 80007aa:	2280      	moveq	r2, #128	; 0x80
 80007ac:	2200      	movne	r2, #0
 80007ae:	7058      	strb	r0, [r3, #1]
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	4770      	bx	lr
 80007b4:	24009254 	.word	0x24009254

080007b8 <vXOR_A>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vXOR_A(){        reg.A ^= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007b8:	4b01      	ldr	r3, [pc, #4]	; (80007c0 <vXOR_A+0x8>)
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	801a      	strh	r2, [r3, #0]
 80007be:	4770      	bx	lr
 80007c0:	24009254 	.word	0x24009254

080007c4 <vOR_B>:

/*********************0xBX*/
void vOR_B(){         reg.A |= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <vOR_B+0x18>)
 80007c6:	785a      	ldrb	r2, [r3, #1]
 80007c8:	78d9      	ldrb	r1, [r3, #3]
 80007ca:	430a      	orrs	r2, r1
 80007cc:	2a00      	cmp	r2, #0
 80007ce:	705a      	strb	r2, [r3, #1]
 80007d0:	bf0c      	ite	eq
 80007d2:	2280      	moveq	r2, #128	; 0x80
 80007d4:	2200      	movne	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	24009254 	.word	0x24009254

080007e0 <vOR_C>:
void vOR_C(){         reg.A |= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <vOR_C+0x18>)
 80007e2:	785a      	ldrb	r2, [r3, #1]
 80007e4:	7899      	ldrb	r1, [r3, #2]
 80007e6:	430a      	orrs	r2, r1
 80007e8:	2a00      	cmp	r2, #0
 80007ea:	705a      	strb	r2, [r3, #1]
 80007ec:	bf0c      	ite	eq
 80007ee:	2280      	moveq	r2, #128	; 0x80
 80007f0:	2200      	movne	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	24009254 	.word	0x24009254

080007fc <vOR_D>:
void vOR_D(){         reg.A |= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <vOR_D+0x18>)
 80007fe:	785a      	ldrb	r2, [r3, #1]
 8000800:	7959      	ldrb	r1, [r3, #5]
 8000802:	430a      	orrs	r2, r1
 8000804:	2a00      	cmp	r2, #0
 8000806:	705a      	strb	r2, [r3, #1]
 8000808:	bf0c      	ite	eq
 800080a:	2280      	moveq	r2, #128	; 0x80
 800080c:	2200      	movne	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	24009254 	.word	0x24009254

08000818 <vOR_E>:
void vOR_E(){         reg.A |= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <vOR_E+0x18>)
 800081a:	785a      	ldrb	r2, [r3, #1]
 800081c:	7919      	ldrb	r1, [r3, #4]
 800081e:	430a      	orrs	r2, r1
 8000820:	2a00      	cmp	r2, #0
 8000822:	705a      	strb	r2, [r3, #1]
 8000824:	bf0c      	ite	eq
 8000826:	2280      	moveq	r2, #128	; 0x80
 8000828:	2200      	movne	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	24009254 	.word	0x24009254

08000834 <vOR_H>:
void vOR_H(){         reg.A |= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <vOR_H+0x18>)
 8000836:	785a      	ldrb	r2, [r3, #1]
 8000838:	79d9      	ldrb	r1, [r3, #7]
 800083a:	430a      	orrs	r2, r1
 800083c:	2a00      	cmp	r2, #0
 800083e:	705a      	strb	r2, [r3, #1]
 8000840:	bf0c      	ite	eq
 8000842:	2280      	moveq	r2, #128	; 0x80
 8000844:	2200      	movne	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	24009254 	.word	0x24009254

08000850 <vOR_L>:
void vOR_L(){         reg.A |= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <vOR_L+0x18>)
 8000852:	785a      	ldrb	r2, [r3, #1]
 8000854:	7999      	ldrb	r1, [r3, #6]
 8000856:	430a      	orrs	r2, r1
 8000858:	2a00      	cmp	r2, #0
 800085a:	705a      	strb	r2, [r3, #1]
 800085c:	bf0c      	ite	eq
 800085e:	2280      	moveq	r2, #128	; 0x80
 8000860:	2200      	movne	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	24009254 	.word	0x24009254

0800086c <vOR_A>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vOR_A(){         reg.A |= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <vOR_A+0x10>)
 800086e:	785a      	ldrb	r2, [r3, #1]
 8000870:	2a00      	cmp	r2, #0
 8000872:	bf0c      	ite	eq
 8000874:	2280      	moveq	r2, #128	; 0x80
 8000876:	2200      	movne	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	4770      	bx	lr
 800087c:	24009254 	.word	0x24009254

08000880 <vJP_HL>:
// -----------
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vJP_HL(){        reg.PC = reg.HL;}
 8000880:	4b01      	ldr	r3, [pc, #4]	; (8000888 <vJP_HL+0x8>)
 8000882:	88da      	ldrh	r2, [r3, #6]
 8000884:	815a      	strh	r2, [r3, #10]
 8000886:	4770      	bx	lr
 8000888:	24009254 	.word	0x24009254

0800088c <vDI>:

/*********************0xFX*/
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
void vDI(){           ucInterruptMasterEnable = 0;}
 800088c:	4b01      	ldr	r3, [pc, #4]	; (8000894 <vDI+0x8>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	4770      	bx	lr
 8000894:	24009098 	.word	0x24009098

08000898 <vLDs_SP_HL>:
// -----------
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_HL(){    reg.SP = reg.HL;}
 8000898:	4b01      	ldr	r3, [pc, #4]	; (80008a0 <vLDs_SP_HL+0x8>)
 800089a:	88da      	ldrh	r2, [r3, #6]
 800089c:	811a      	strh	r2, [r3, #8]
 800089e:	4770      	bx	lr
 80008a0:	24009254 	.word	0x24009254

080008a4 <vEI>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
void vEI(){           ucInterruptMasterEnable = 1;}
 80008a4:	4b01      	ldr	r3, [pc, #4]	; (80008ac <vEI+0x8>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
 80008aa:	4770      	bx	lr
 80008ac:	24009098 	.word	0x24009098

080008b0 <vLD_B_d8>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
 80008b0:	b510      	push	{r4, lr}
 80008b2:	4c04      	ldr	r4, [pc, #16]	; (80008c4 <vLD_B_d8+0x14>)
 80008b4:	8960      	ldrh	r0, [r4, #10]
 80008b6:	3801      	subs	r0, #1
 80008b8:	b280      	uxth	r0, r0
 80008ba:	f002 fe39 	bl	8003530 <ucGBMemoryRead>
 80008be:	70e0      	strb	r0, [r4, #3]
 80008c0:	bd10      	pop	{r4, pc}
 80008c2:	bf00      	nop
 80008c4:	24009254 	.word	0x24009254

080008c8 <vLD_A_BC>:
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
 80008c8:	b510      	push	{r4, lr}
 80008ca:	4c03      	ldr	r4, [pc, #12]	; (80008d8 <vLD_A_BC+0x10>)
 80008cc:	8860      	ldrh	r0, [r4, #2]
 80008ce:	f002 fe2f 	bl	8003530 <ucGBMemoryRead>
 80008d2:	7060      	strb	r0, [r4, #1]
 80008d4:	bd10      	pop	{r4, pc}
 80008d6:	bf00      	nop
 80008d8:	24009254 	.word	0x24009254

080008dc <vLD_C_d8>:
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
 80008dc:	b510      	push	{r4, lr}
 80008de:	4c04      	ldr	r4, [pc, #16]	; (80008f0 <vLD_C_d8+0x14>)
 80008e0:	8960      	ldrh	r0, [r4, #10]
 80008e2:	3801      	subs	r0, #1
 80008e4:	b280      	uxth	r0, r0
 80008e6:	f002 fe23 	bl	8003530 <ucGBMemoryRead>
 80008ea:	70a0      	strb	r0, [r4, #2]
 80008ec:	bd10      	pop	{r4, pc}
 80008ee:	bf00      	nop
 80008f0:	24009254 	.word	0x24009254

080008f4 <vLD_D_d8>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
 80008f4:	b510      	push	{r4, lr}
 80008f6:	4c04      	ldr	r4, [pc, #16]	; (8000908 <vLD_D_d8+0x14>)
 80008f8:	8960      	ldrh	r0, [r4, #10]
 80008fa:	3801      	subs	r0, #1
 80008fc:	b280      	uxth	r0, r0
 80008fe:	f002 fe17 	bl	8003530 <ucGBMemoryRead>
 8000902:	7160      	strb	r0, [r4, #5]
 8000904:	bd10      	pop	{r4, pc}
 8000906:	bf00      	nop
 8000908:	24009254 	.word	0x24009254

0800090c <vJR_r8>:
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
 800090c:	b510      	push	{r4, lr}
 800090e:	4c05      	ldr	r4, [pc, #20]	; (8000924 <vJR_r8+0x18>)
 8000910:	8960      	ldrh	r0, [r4, #10]
 8000912:	3801      	subs	r0, #1
 8000914:	b280      	uxth	r0, r0
 8000916:	f002 fe0b 	bl	8003530 <ucGBMemoryRead>
 800091a:	8963      	ldrh	r3, [r4, #10]
 800091c:	fa43 f080 	sxtab	r0, r3, r0
 8000920:	8160      	strh	r0, [r4, #10]
 8000922:	bd10      	pop	{r4, pc}
 8000924:	24009254 	.word	0x24009254

08000928 <vLD_A_DE>:
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
 8000928:	b510      	push	{r4, lr}
 800092a:	4c03      	ldr	r4, [pc, #12]	; (8000938 <vLD_A_DE+0x10>)
 800092c:	88a0      	ldrh	r0, [r4, #4]
 800092e:	f002 fdff 	bl	8003530 <ucGBMemoryRead>
 8000932:	7060      	strb	r0, [r4, #1]
 8000934:	bd10      	pop	{r4, pc}
 8000936:	bf00      	nop
 8000938:	24009254 	.word	0x24009254

0800093c <vLD_E_d8>:
void vLD_E_d8(){      reg.E = ucGBMemoryRead(reg.PC - 1);}
 800093c:	b510      	push	{r4, lr}
 800093e:	4c04      	ldr	r4, [pc, #16]	; (8000950 <vLD_E_d8+0x14>)
 8000940:	8960      	ldrh	r0, [r4, #10]
 8000942:	3801      	subs	r0, #1
 8000944:	b280      	uxth	r0, r0
 8000946:	f002 fdf3 	bl	8003530 <ucGBMemoryRead>
 800094a:	7120      	strb	r0, [r4, #4]
 800094c:	bd10      	pop	{r4, pc}
 800094e:	bf00      	nop
 8000950:	24009254 	.word	0x24009254

08000954 <vLD_H_d8>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
 8000954:	b510      	push	{r4, lr}
 8000956:	4c04      	ldr	r4, [pc, #16]	; (8000968 <vLD_H_d8+0x14>)
 8000958:	8960      	ldrh	r0, [r4, #10]
 800095a:	3801      	subs	r0, #1
 800095c:	b280      	uxth	r0, r0
 800095e:	f002 fde7 	bl	8003530 <ucGBMemoryRead>
 8000962:	71e0      	strb	r0, [r4, #7]
 8000964:	bd10      	pop	{r4, pc}
 8000966:	bf00      	nop
 8000968:	24009254 	.word	0x24009254

0800096c <vLD_A_HLI>:
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
 800096c:	b510      	push	{r4, lr}
 800096e:	4c04      	ldr	r4, [pc, #16]	; (8000980 <vLD_A_HLI+0x14>)
 8000970:	88e0      	ldrh	r0, [r4, #6]
 8000972:	f002 fddd 	bl	8003530 <ucGBMemoryRead>
 8000976:	88e3      	ldrh	r3, [r4, #6]
 8000978:	7060      	strb	r0, [r4, #1]
 800097a:	3301      	adds	r3, #1
 800097c:	80e3      	strh	r3, [r4, #6]
 800097e:	bd10      	pop	{r4, pc}
 8000980:	24009254 	.word	0x24009254

08000984 <vLD_L_d8>:
void vLD_L_d8(){      reg.L = ucGBMemoryRead(reg.PC - 1);}
 8000984:	b510      	push	{r4, lr}
 8000986:	4c04      	ldr	r4, [pc, #16]	; (8000998 <vLD_L_d8+0x14>)
 8000988:	8960      	ldrh	r0, [r4, #10]
 800098a:	3801      	subs	r0, #1
 800098c:	b280      	uxth	r0, r0
 800098e:	f002 fdcf 	bl	8003530 <ucGBMemoryRead>
 8000992:	71a0      	strb	r0, [r4, #6]
 8000994:	bd10      	pop	{r4, pc}
 8000996:	bf00      	nop
 8000998:	24009254 	.word	0x24009254

0800099c <vLD_A_HLD>:
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
 800099c:	b510      	push	{r4, lr}
 800099e:	4c04      	ldr	r4, [pc, #16]	; (80009b0 <vLD_A_HLD+0x14>)
 80009a0:	88e0      	ldrh	r0, [r4, #6]
 80009a2:	f002 fdc5 	bl	8003530 <ucGBMemoryRead>
 80009a6:	88e3      	ldrh	r3, [r4, #6]
 80009a8:	7060      	strb	r0, [r4, #1]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	80e3      	strh	r3, [r4, #6]
 80009ae:	bd10      	pop	{r4, pc}
 80009b0:	24009254 	.word	0x24009254

080009b4 <vLD_A_d8>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
 80009b4:	b510      	push	{r4, lr}
 80009b6:	4c04      	ldr	r4, [pc, #16]	; (80009c8 <vLD_A_d8+0x14>)
 80009b8:	8960      	ldrh	r0, [r4, #10]
 80009ba:	3801      	subs	r0, #1
 80009bc:	b280      	uxth	r0, r0
 80009be:	f002 fdb7 	bl	8003530 <ucGBMemoryRead>
 80009c2:	7060      	strb	r0, [r4, #1]
 80009c4:	bd10      	pop	{r4, pc}
 80009c6:	bf00      	nop
 80009c8:	24009254 	.word	0x24009254

080009cc <vLD_B_HL>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
 80009cc:	b510      	push	{r4, lr}
 80009ce:	4c03      	ldr	r4, [pc, #12]	; (80009dc <vLD_B_HL+0x10>)
 80009d0:	88e0      	ldrh	r0, [r4, #6]
 80009d2:	f002 fdad 	bl	8003530 <ucGBMemoryRead>
 80009d6:	70e0      	strb	r0, [r4, #3]
 80009d8:	bd10      	pop	{r4, pc}
 80009da:	bf00      	nop
 80009dc:	24009254 	.word	0x24009254

080009e0 <vLD_C_HL>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
 80009e0:	b510      	push	{r4, lr}
 80009e2:	4c03      	ldr	r4, [pc, #12]	; (80009f0 <vLD_C_HL+0x10>)
 80009e4:	88e0      	ldrh	r0, [r4, #6]
 80009e6:	f002 fda3 	bl	8003530 <ucGBMemoryRead>
 80009ea:	70a0      	strb	r0, [r4, #2]
 80009ec:	bd10      	pop	{r4, pc}
 80009ee:	bf00      	nop
 80009f0:	24009254 	.word	0x24009254

080009f4 <vLD_D_HL>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
 80009f4:	b510      	push	{r4, lr}
 80009f6:	4c03      	ldr	r4, [pc, #12]	; (8000a04 <vLD_D_HL+0x10>)
 80009f8:	88e0      	ldrh	r0, [r4, #6]
 80009fa:	f002 fd99 	bl	8003530 <ucGBMemoryRead>
 80009fe:	7160      	strb	r0, [r4, #5]
 8000a00:	bd10      	pop	{r4, pc}
 8000a02:	bf00      	nop
 8000a04:	24009254 	.word	0x24009254

08000a08 <vLD_E_HL>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
 8000a08:	b510      	push	{r4, lr}
 8000a0a:	4c03      	ldr	r4, [pc, #12]	; (8000a18 <vLD_E_HL+0x10>)
 8000a0c:	88e0      	ldrh	r0, [r4, #6]
 8000a0e:	f002 fd8f 	bl	8003530 <ucGBMemoryRead>
 8000a12:	7120      	strb	r0, [r4, #4]
 8000a14:	bd10      	pop	{r4, pc}
 8000a16:	bf00      	nop
 8000a18:	24009254 	.word	0x24009254

08000a1c <vLD_H_HL>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
 8000a1c:	b510      	push	{r4, lr}
 8000a1e:	4c03      	ldr	r4, [pc, #12]	; (8000a2c <vLD_H_HL+0x10>)
 8000a20:	88e0      	ldrh	r0, [r4, #6]
 8000a22:	f002 fd85 	bl	8003530 <ucGBMemoryRead>
 8000a26:	71e0      	strb	r0, [r4, #7]
 8000a28:	bd10      	pop	{r4, pc}
 8000a2a:	bf00      	nop
 8000a2c:	24009254 	.word	0x24009254

08000a30 <vLD_L_HL>:
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
 8000a30:	b510      	push	{r4, lr}
 8000a32:	4c03      	ldr	r4, [pc, #12]	; (8000a40 <vLD_L_HL+0x10>)
 8000a34:	88e0      	ldrh	r0, [r4, #6]
 8000a36:	f002 fd7b 	bl	8003530 <ucGBMemoryRead>
 8000a3a:	71a0      	strb	r0, [r4, #6]
 8000a3c:	bd10      	pop	{r4, pc}
 8000a3e:	bf00      	nop
 8000a40:	24009254 	.word	0x24009254

08000a44 <vLD_A_HL>:
void vLD_A_HL(){      reg.A = ucGBMemoryRead(reg.HL);}
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4c03      	ldr	r4, [pc, #12]	; (8000a54 <vLD_A_HL+0x10>)
 8000a48:	88e0      	ldrh	r0, [r4, #6]
 8000a4a:	f002 fd71 	bl	8003530 <ucGBMemoryRead>
 8000a4e:	7060      	strb	r0, [r4, #1]
 8000a50:	bd10      	pop	{r4, pc}
 8000a52:	bf00      	nop
 8000a54:	24009254 	.word	0x24009254

08000a58 <vAND_HL>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000a58:	b510      	push	{r4, lr}
 8000a5a:	4c06      	ldr	r4, [pc, #24]	; (8000a74 <vAND_HL+0x1c>)
 8000a5c:	88e0      	ldrh	r0, [r4, #6]
 8000a5e:	f002 fd67 	bl	8003530 <ucGBMemoryRead>
 8000a62:	7863      	ldrb	r3, [r4, #1]
 8000a64:	4018      	ands	r0, r3
 8000a66:	2800      	cmp	r0, #0
 8000a68:	7060      	strb	r0, [r4, #1]
 8000a6a:	bf0c      	ite	eq
 8000a6c:	23a0      	moveq	r3, #160	; 0xa0
 8000a6e:	2320      	movne	r3, #32
 8000a70:	7023      	strb	r3, [r4, #0]
 8000a72:	bd10      	pop	{r4, pc}
 8000a74:	24009254 	.word	0x24009254

08000a78 <vXOR_HL>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000a78:	b510      	push	{r4, lr}
 8000a7a:	4c07      	ldr	r4, [pc, #28]	; (8000a98 <vXOR_HL+0x20>)
 8000a7c:	88e0      	ldrh	r0, [r4, #6]
 8000a7e:	f002 fd57 	bl	8003530 <ucGBMemoryRead>
 8000a82:	7863      	ldrb	r3, [r4, #1]
 8000a84:	ea83 0200 	eor.w	r2, r3, r0
 8000a88:	4283      	cmp	r3, r0
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2080      	moveq	r0, #128	; 0x80
 8000a8e:	2000      	movne	r0, #0
 8000a90:	7062      	strb	r2, [r4, #1]
 8000a92:	7020      	strb	r0, [r4, #0]
 8000a94:	bd10      	pop	{r4, pc}
 8000a96:	bf00      	nop
 8000a98:	24009254 	.word	0x24009254

08000a9c <vOR_HL>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000a9c:	b510      	push	{r4, lr}
 8000a9e:	4c07      	ldr	r4, [pc, #28]	; (8000abc <vOR_HL+0x20>)
 8000aa0:	88e0      	ldrh	r0, [r4, #6]
 8000aa2:	f002 fd45 	bl	8003530 <ucGBMemoryRead>
 8000aa6:	7863      	ldrb	r3, [r4, #1]
 8000aa8:	4318      	orrs	r0, r3
 8000aaa:	b2c0      	uxtb	r0, r0
 8000aac:	2800      	cmp	r0, #0
 8000aae:	7060      	strb	r0, [r4, #1]
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2380      	moveq	r3, #128	; 0x80
 8000ab4:	2300      	movne	r3, #0
 8000ab6:	7023      	strb	r3, [r4, #0]
 8000ab8:	bd10      	pop	{r4, pc}
 8000aba:	bf00      	nop
 8000abc:	24009254 	.word	0x24009254

08000ac0 <vPREFIX>:
void vPREFIX(){       ((void (*)(void))prefix_instructions[ucGBMemoryRead(reg.PC - 1)].instr)();}
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <vPREFIX+0x1c>)
 8000ac2:	8958      	ldrh	r0, [r3, #10]
 8000ac4:	3801      	subs	r0, #1
 8000ac6:	b510      	push	{r4, lr}
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	f002 fd31 	bl	8003530 <ucGBMemoryRead>
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <vPREFIX+0x20>)
 8000ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ad4:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000ad8:	4718      	bx	r3
 8000ada:	bf00      	nop
 8000adc:	24009254 	.word	0x24009254
 8000ae0:	24000808 	.word	0x24000808

08000ae4 <vAND_d8>:
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000ae4:	b510      	push	{r4, lr}
 8000ae6:	4c07      	ldr	r4, [pc, #28]	; (8000b04 <vAND_d8+0x20>)
 8000ae8:	8960      	ldrh	r0, [r4, #10]
 8000aea:	3801      	subs	r0, #1
 8000aec:	b280      	uxth	r0, r0
 8000aee:	f002 fd1f 	bl	8003530 <ucGBMemoryRead>
 8000af2:	7863      	ldrb	r3, [r4, #1]
 8000af4:	4018      	ands	r0, r3
 8000af6:	2800      	cmp	r0, #0
 8000af8:	7060      	strb	r0, [r4, #1]
 8000afa:	bf0c      	ite	eq
 8000afc:	23a0      	moveq	r3, #160	; 0xa0
 8000afe:	2320      	movne	r3, #32
 8000b00:	7023      	strb	r3, [r4, #0]
 8000b02:	bd10      	pop	{r4, pc}
 8000b04:	24009254 	.word	0x24009254

08000b08 <vXOR_d8>:
void vXOR_d8(){       reg.A ^= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	4c08      	ldr	r4, [pc, #32]	; (8000b2c <vXOR_d8+0x24>)
 8000b0c:	8960      	ldrh	r0, [r4, #10]
 8000b0e:	3801      	subs	r0, #1
 8000b10:	b280      	uxth	r0, r0
 8000b12:	f002 fd0d 	bl	8003530 <ucGBMemoryRead>
 8000b16:	7863      	ldrb	r3, [r4, #1]
 8000b18:	ea83 0200 	eor.w	r2, r3, r0
 8000b1c:	4283      	cmp	r3, r0
 8000b1e:	bf0c      	ite	eq
 8000b20:	2080      	moveq	r0, #128	; 0x80
 8000b22:	2000      	movne	r0, #0
 8000b24:	7062      	strb	r2, [r4, #1]
 8000b26:	7020      	strb	r0, [r4, #0]
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	bf00      	nop
 8000b2c:	24009254 	.word	0x24009254

08000b30 <vLDH_A_a8>:
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
 8000b30:	b510      	push	{r4, lr}
 8000b32:	4c06      	ldr	r4, [pc, #24]	; (8000b4c <vLDH_A_a8+0x1c>)
 8000b34:	8960      	ldrh	r0, [r4, #10]
 8000b36:	3801      	subs	r0, #1
 8000b38:	b280      	uxth	r0, r0
 8000b3a:	f002 fcf9 	bl	8003530 <ucGBMemoryRead>
 8000b3e:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000b42:	b280      	uxth	r0, r0
 8000b44:	f002 fcf4 	bl	8003530 <ucGBMemoryRead>
 8000b48:	7060      	strb	r0, [r4, #1]
 8000b4a:	bd10      	pop	{r4, pc}
 8000b4c:	24009254 	.word	0x24009254

08000b50 <vLD_A_fC>:
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4c04      	ldr	r4, [pc, #16]	; (8000b64 <vLD_A_fC+0x14>)
 8000b54:	78a0      	ldrb	r0, [r4, #2]
 8000b56:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000b5a:	b280      	uxth	r0, r0
 8000b5c:	f002 fce8 	bl	8003530 <ucGBMemoryRead>
 8000b60:	7060      	strb	r0, [r4, #1]
 8000b62:	bd10      	pop	{r4, pc}
 8000b64:	24009254 	.word	0x24009254

08000b68 <vOR_d8>:
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	4c08      	ldr	r4, [pc, #32]	; (8000b8c <vOR_d8+0x24>)
 8000b6c:	8960      	ldrh	r0, [r4, #10]
 8000b6e:	3801      	subs	r0, #1
 8000b70:	b280      	uxth	r0, r0
 8000b72:	f002 fcdd 	bl	8003530 <ucGBMemoryRead>
 8000b76:	7863      	ldrb	r3, [r4, #1]
 8000b78:	4318      	orrs	r0, r3
 8000b7a:	b2c0      	uxtb	r0, r0
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	7060      	strb	r0, [r4, #1]
 8000b80:	bf0c      	ite	eq
 8000b82:	2380      	moveq	r3, #128	; 0x80
 8000b84:	2300      	movne	r3, #0
 8000b86:	7023      	strb	r3, [r4, #0]
 8000b88:	bd10      	pop	{r4, pc}
 8000b8a:	bf00      	nop
 8000b8c:	24009254 	.word	0x24009254

08000b90 <vLDs_BC_d16>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000b90:	b538      	push	{r3, r4, r5, lr}
 8000b92:	4c09      	ldr	r4, [pc, #36]	; (8000bb8 <vLDs_BC_d16+0x28>)
 8000b94:	8960      	ldrh	r0, [r4, #10]
 8000b96:	3802      	subs	r0, #2
 8000b98:	b280      	uxth	r0, r0
 8000b9a:	f002 fcc9 	bl	8003530 <ucGBMemoryRead>
 8000b9e:	8963      	ldrh	r3, [r4, #10]
 8000ba0:	4605      	mov	r5, r0
 8000ba2:	1e58      	subs	r0, r3, #1
 8000ba4:	b280      	uxth	r0, r0
 8000ba6:	f002 fcc3 	bl	8003530 <ucGBMemoryRead>
 8000baa:	4601      	mov	r1, r0
 8000bac:	4628      	mov	r0, r5
 8000bae:	f001 ffcf 	bl	8002b50 <concat_16bit_bigEndian>
 8000bb2:	8060      	strh	r0, [r4, #2]
 8000bb4:	bd38      	pop	{r3, r4, r5, pc}
 8000bb6:	bf00      	nop
 8000bb8:	24009254 	.word	0x24009254

08000bbc <vLDs_DE_d16>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	4c09      	ldr	r4, [pc, #36]	; (8000be4 <vLDs_DE_d16+0x28>)
 8000bc0:	8960      	ldrh	r0, [r4, #10]
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	b280      	uxth	r0, r0
 8000bc6:	f002 fcb3 	bl	8003530 <ucGBMemoryRead>
 8000bca:	8963      	ldrh	r3, [r4, #10]
 8000bcc:	4605      	mov	r5, r0
 8000bce:	1e58      	subs	r0, r3, #1
 8000bd0:	b280      	uxth	r0, r0
 8000bd2:	f002 fcad 	bl	8003530 <ucGBMemoryRead>
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	4628      	mov	r0, r5
 8000bda:	f001 ffb9 	bl	8002b50 <concat_16bit_bigEndian>
 8000bde:	80a0      	strh	r0, [r4, #4]
 8000be0:	bd38      	pop	{r3, r4, r5, pc}
 8000be2:	bf00      	nop
 8000be4:	24009254 	.word	0x24009254

08000be8 <vLDs_HL_d16>:
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000be8:	b538      	push	{r3, r4, r5, lr}
 8000bea:	4c09      	ldr	r4, [pc, #36]	; (8000c10 <vLDs_HL_d16+0x28>)
 8000bec:	8960      	ldrh	r0, [r4, #10]
 8000bee:	3802      	subs	r0, #2
 8000bf0:	b280      	uxth	r0, r0
 8000bf2:	f002 fc9d 	bl	8003530 <ucGBMemoryRead>
 8000bf6:	8963      	ldrh	r3, [r4, #10]
 8000bf8:	4605      	mov	r5, r0
 8000bfa:	1e58      	subs	r0, r3, #1
 8000bfc:	b280      	uxth	r0, r0
 8000bfe:	f002 fc97 	bl	8003530 <ucGBMemoryRead>
 8000c02:	4601      	mov	r1, r0
 8000c04:	4628      	mov	r0, r5
 8000c06:	f001 ffa3 	bl	8002b50 <concat_16bit_bigEndian>
 8000c0a:	80e0      	strh	r0, [r4, #6]
 8000c0c:	bd38      	pop	{r3, r4, r5, pc}
 8000c0e:	bf00      	nop
 8000c10:	24009254 	.word	0x24009254

08000c14 <vLDs_SP_d16>:
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c14:	b538      	push	{r3, r4, r5, lr}
 8000c16:	4c09      	ldr	r4, [pc, #36]	; (8000c3c <vLDs_SP_d16+0x28>)
 8000c18:	8960      	ldrh	r0, [r4, #10]
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	b280      	uxth	r0, r0
 8000c1e:	f002 fc87 	bl	8003530 <ucGBMemoryRead>
 8000c22:	8963      	ldrh	r3, [r4, #10]
 8000c24:	4605      	mov	r5, r0
 8000c26:	1e58      	subs	r0, r3, #1
 8000c28:	b280      	uxth	r0, r0
 8000c2a:	f002 fc81 	bl	8003530 <ucGBMemoryRead>
 8000c2e:	4601      	mov	r1, r0
 8000c30:	4628      	mov	r0, r5
 8000c32:	f001 ff8d 	bl	8002b50 <concat_16bit_bigEndian>
 8000c36:	8120      	strh	r0, [r4, #8]
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop
 8000c3c:	24009254 	.word	0x24009254

08000c40 <vJP_a16>:
void vJP_a16(){       reg.PC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4c09      	ldr	r4, [pc, #36]	; (8000c68 <vJP_a16+0x28>)
 8000c44:	8960      	ldrh	r0, [r4, #10]
 8000c46:	3802      	subs	r0, #2
 8000c48:	b280      	uxth	r0, r0
 8000c4a:	f002 fc71 	bl	8003530 <ucGBMemoryRead>
 8000c4e:	8963      	ldrh	r3, [r4, #10]
 8000c50:	4605      	mov	r5, r0
 8000c52:	1e58      	subs	r0, r3, #1
 8000c54:	b280      	uxth	r0, r0
 8000c56:	f002 fc6b 	bl	8003530 <ucGBMemoryRead>
 8000c5a:	4601      	mov	r1, r0
 8000c5c:	4628      	mov	r0, r5
 8000c5e:	f001 ff77 	bl	8002b50 <concat_16bit_bigEndian>
 8000c62:	8160      	strh	r0, [r4, #10]
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop
 8000c68:	24009254 	.word	0x24009254

08000c6c <vLD_A_a16>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	4c0a      	ldr	r4, [pc, #40]	; (8000c98 <vLD_A_a16+0x2c>)
 8000c70:	8960      	ldrh	r0, [r4, #10]
 8000c72:	3802      	subs	r0, #2
 8000c74:	b280      	uxth	r0, r0
 8000c76:	f002 fc5b 	bl	8003530 <ucGBMemoryRead>
 8000c7a:	8963      	ldrh	r3, [r4, #10]
 8000c7c:	4605      	mov	r5, r0
 8000c7e:	1e58      	subs	r0, r3, #1
 8000c80:	b280      	uxth	r0, r0
 8000c82:	f002 fc55 	bl	8003530 <ucGBMemoryRead>
 8000c86:	4601      	mov	r1, r0
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f001 ff61 	bl	8002b50 <concat_16bit_bigEndian>
 8000c8e:	f002 fc4f 	bl	8003530 <ucGBMemoryRead>
 8000c92:	7060      	strb	r0, [r4, #1]
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop
 8000c98:	24009254 	.word	0x24009254

08000c9c <vLD_BC_A>:
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <vLD_BC_A+0xc>)
 8000c9e:	7859      	ldrb	r1, [r3, #1]
 8000ca0:	8858      	ldrh	r0, [r3, #2]
 8000ca2:	f002 bbf7 	b.w	8003494 <vGBMemoryWrite>
 8000ca6:	bf00      	nop
 8000ca8:	24009254 	.word	0x24009254

08000cac <vLDs_a16_SP>:
void vLDs_a16_SP(){   vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
 8000cac:	b538      	push	{r3, r4, r5, lr}
 8000cae:	4c0a      	ldr	r4, [pc, #40]	; (8000cd8 <vLDs_a16_SP+0x2c>)
 8000cb0:	8960      	ldrh	r0, [r4, #10]
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	b280      	uxth	r0, r0
 8000cb6:	f002 fc3b 	bl	8003530 <ucGBMemoryRead>
 8000cba:	8963      	ldrh	r3, [r4, #10]
 8000cbc:	4605      	mov	r5, r0
 8000cbe:	1e58      	subs	r0, r3, #1
 8000cc0:	b280      	uxth	r0, r0
 8000cc2:	f002 fc35 	bl	8003530 <ucGBMemoryRead>
 8000cc6:	4601      	mov	r1, r0
 8000cc8:	4628      	mov	r0, r5
 8000cca:	f001 ff41 	bl	8002b50 <concat_16bit_bigEndian>
 8000cce:	7a21      	ldrb	r1, [r4, #8]
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f002 bbde 	b.w	8003494 <vGBMemoryWrite>
 8000cd8:	24009254 	.word	0x24009254

08000cdc <vLD_DE_A>:
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
 8000cdc:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <vLD_DE_A+0xc>)
 8000cde:	7859      	ldrb	r1, [r3, #1]
 8000ce0:	8898      	ldrh	r0, [r3, #4]
 8000ce2:	f002 bbd7 	b.w	8003494 <vGBMemoryWrite>
 8000ce6:	bf00      	nop
 8000ce8:	24009254 	.word	0x24009254

08000cec <vLD_HLI_A>:
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
 8000cec:	b510      	push	{r4, lr}
 8000cee:	4c04      	ldr	r4, [pc, #16]	; (8000d00 <vLD_HLI_A+0x14>)
 8000cf0:	7861      	ldrb	r1, [r4, #1]
 8000cf2:	88e0      	ldrh	r0, [r4, #6]
 8000cf4:	f002 fbce 	bl	8003494 <vGBMemoryWrite>
 8000cf8:	88e3      	ldrh	r3, [r4, #6]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	80e3      	strh	r3, [r4, #6]
 8000cfe:	bd10      	pop	{r4, pc}
 8000d00:	24009254 	.word	0x24009254

08000d04 <vLD_HLD_A>:
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
 8000d04:	b510      	push	{r4, lr}
 8000d06:	4c04      	ldr	r4, [pc, #16]	; (8000d18 <vLD_HLD_A+0x14>)
 8000d08:	7861      	ldrb	r1, [r4, #1]
 8000d0a:	88e0      	ldrh	r0, [r4, #6]
 8000d0c:	f002 fbc2 	bl	8003494 <vGBMemoryWrite>
 8000d10:	88e3      	ldrh	r3, [r4, #6]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	80e3      	strh	r3, [r4, #6]
 8000d16:	bd10      	pop	{r4, pc}
 8000d18:	24009254 	.word	0x24009254

08000d1c <vLD_HL_d8>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <vLD_HL_d8+0x1c>)
 8000d1e:	8958      	ldrh	r0, [r3, #10]
 8000d20:	3801      	subs	r0, #1
 8000d22:	b510      	push	{r4, lr}
 8000d24:	88dc      	ldrh	r4, [r3, #6]
 8000d26:	b280      	uxth	r0, r0
 8000d28:	f002 fc02 	bl	8003530 <ucGBMemoryRead>
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	4620      	mov	r0, r4
 8000d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d34:	f002 bbae 	b.w	8003494 <vGBMemoryWrite>
 8000d38:	24009254 	.word	0x24009254

08000d3c <vLD_HL_B>:
void vLD_HL_B(){      vGBMemoryWrite(reg.HL, reg.B);}
 8000d3c:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <vLD_HL_B+0xc>)
 8000d3e:	78d9      	ldrb	r1, [r3, #3]
 8000d40:	88d8      	ldrh	r0, [r3, #6]
 8000d42:	f002 bba7 	b.w	8003494 <vGBMemoryWrite>
 8000d46:	bf00      	nop
 8000d48:	24009254 	.word	0x24009254

08000d4c <vLD_HL_C>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <vLD_HL_C+0xc>)
 8000d4e:	7899      	ldrb	r1, [r3, #2]
 8000d50:	88d8      	ldrh	r0, [r3, #6]
 8000d52:	f002 bb9f 	b.w	8003494 <vGBMemoryWrite>
 8000d56:	bf00      	nop
 8000d58:	24009254 	.word	0x24009254

08000d5c <vLD_HL_D>:
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <vLD_HL_D+0xc>)
 8000d5e:	7959      	ldrb	r1, [r3, #5]
 8000d60:	88d8      	ldrh	r0, [r3, #6]
 8000d62:	f002 bb97 	b.w	8003494 <vGBMemoryWrite>
 8000d66:	bf00      	nop
 8000d68:	24009254 	.word	0x24009254

08000d6c <vLD_HL_E>:
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <vLD_HL_E+0xc>)
 8000d6e:	7919      	ldrb	r1, [r3, #4]
 8000d70:	88d8      	ldrh	r0, [r3, #6]
 8000d72:	f002 bb8f 	b.w	8003494 <vGBMemoryWrite>
 8000d76:	bf00      	nop
 8000d78:	24009254 	.word	0x24009254

08000d7c <vLD_HL_H>:
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
 8000d7c:	4b02      	ldr	r3, [pc, #8]	; (8000d88 <vLD_HL_H+0xc>)
 8000d7e:	79d9      	ldrb	r1, [r3, #7]
 8000d80:	88d8      	ldrh	r0, [r3, #6]
 8000d82:	f002 bb87 	b.w	8003494 <vGBMemoryWrite>
 8000d86:	bf00      	nop
 8000d88:	24009254 	.word	0x24009254

08000d8c <vLD_HL_L>:
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
 8000d8c:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <vLD_HL_L+0xc>)
 8000d8e:	7999      	ldrb	r1, [r3, #6]
 8000d90:	88d8      	ldrh	r0, [r3, #6]
 8000d92:	f002 bb7f 	b.w	8003494 <vGBMemoryWrite>
 8000d96:	bf00      	nop
 8000d98:	24009254 	.word	0x24009254

08000d9c <vLD_HL_A>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <vLD_HL_A+0xc>)
 8000d9e:	7859      	ldrb	r1, [r3, #1]
 8000da0:	88d8      	ldrh	r0, [r3, #6]
 8000da2:	f002 bb77 	b.w	8003494 <vGBMemoryWrite>
 8000da6:	bf00      	nop
 8000da8:	24009254 	.word	0x24009254

08000dac <vLDH_a8_A>:
void vLDH_a8_A(){     vGBMemoryWrite(0xFF00 + ucGBMemoryRead(reg.PC - 1), reg.A);}
 8000dac:	b510      	push	{r4, lr}
 8000dae:	4c07      	ldr	r4, [pc, #28]	; (8000dcc <vLDH_a8_A+0x20>)
 8000db0:	8960      	ldrh	r0, [r4, #10]
 8000db2:	3801      	subs	r0, #1
 8000db4:	b280      	uxth	r0, r0
 8000db6:	f002 fbbb 	bl	8003530 <ucGBMemoryRead>
 8000dba:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000dbe:	7861      	ldrb	r1, [r4, #1]
 8000dc0:	b280      	uxth	r0, r0
 8000dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dc6:	f002 bb65 	b.w	8003494 <vGBMemoryWrite>
 8000dca:	bf00      	nop
 8000dcc:	24009254 	.word	0x24009254

08000dd0 <vLD_fC_A>:
void vLD_fC_A(){      vGBMemoryWrite(0xFF00 + reg.C, reg.A);}
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <vLD_fC_A+0x10>)
 8000dd2:	7898      	ldrb	r0, [r3, #2]
 8000dd4:	7859      	ldrb	r1, [r3, #1]
 8000dd6:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000dda:	b280      	uxth	r0, r0
 8000ddc:	f002 bb5a 	b.w	8003494 <vGBMemoryWrite>
 8000de0:	24009254 	.word	0x24009254

08000de4 <vLD_a16_A>:
void vLD_a16_A(){     vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)), reg.A);}
 8000de4:	b538      	push	{r3, r4, r5, lr}
 8000de6:	4c0a      	ldr	r4, [pc, #40]	; (8000e10 <vLD_a16_A+0x2c>)
 8000de8:	8960      	ldrh	r0, [r4, #10]
 8000dea:	3802      	subs	r0, #2
 8000dec:	b280      	uxth	r0, r0
 8000dee:	f002 fb9f 	bl	8003530 <ucGBMemoryRead>
 8000df2:	8963      	ldrh	r3, [r4, #10]
 8000df4:	4605      	mov	r5, r0
 8000df6:	1e58      	subs	r0, r3, #1
 8000df8:	b280      	uxth	r0, r0
 8000dfa:	f002 fb99 	bl	8003530 <ucGBMemoryRead>
 8000dfe:	4601      	mov	r1, r0
 8000e00:	4628      	mov	r0, r5
 8000e02:	f001 fea5 	bl	8002b50 <concat_16bit_bigEndian>
 8000e06:	7861      	ldrb	r1, [r4, #1]
 8000e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e0c:	f002 bb42 	b.w	8003494 <vGBMemoryWrite>
 8000e10:	24009254 	.word	0x24009254

08000e14 <vINC_B>:
void vINC_B(){        v8bitRegisterINC(&reg.B, &reg.F);}
 8000e14:	4901      	ldr	r1, [pc, #4]	; (8000e1c <vINC_B+0x8>)
 8000e16:	1cc8      	adds	r0, r1, #3
 8000e18:	f001 beb2 	b.w	8002b80 <v8bitRegisterINC>
 8000e1c:	24009254 	.word	0x24009254

08000e20 <vINC_C>:
void vINC_C(){        v8bitRegisterINC(&reg.C, &reg.F);}
 8000e20:	4901      	ldr	r1, [pc, #4]	; (8000e28 <vINC_C+0x8>)
 8000e22:	1c88      	adds	r0, r1, #2
 8000e24:	f001 beac 	b.w	8002b80 <v8bitRegisterINC>
 8000e28:	24009254 	.word	0x24009254

08000e2c <vINC_D>:
void vINC_D(){        v8bitRegisterINC(&reg.D, &reg.F);}
 8000e2c:	4901      	ldr	r1, [pc, #4]	; (8000e34 <vINC_D+0x8>)
 8000e2e:	1d48      	adds	r0, r1, #5
 8000e30:	f001 bea6 	b.w	8002b80 <v8bitRegisterINC>
 8000e34:	24009254 	.word	0x24009254

08000e38 <vINC_E>:
void vINC_E(){        v8bitRegisterINC(&reg.E, &reg.F);}
 8000e38:	4901      	ldr	r1, [pc, #4]	; (8000e40 <vINC_E+0x8>)
 8000e3a:	1d08      	adds	r0, r1, #4
 8000e3c:	f001 bea0 	b.w	8002b80 <v8bitRegisterINC>
 8000e40:	24009254 	.word	0x24009254

08000e44 <vINC_H>:
void vINC_H(){        v8bitRegisterINC(&reg.H, &reg.F);}
 8000e44:	4901      	ldr	r1, [pc, #4]	; (8000e4c <vINC_H+0x8>)
 8000e46:	1dc8      	adds	r0, r1, #7
 8000e48:	f001 be9a 	b.w	8002b80 <v8bitRegisterINC>
 8000e4c:	24009254 	.word	0x24009254

08000e50 <vINC_L>:
void vINC_L(){        v8bitRegisterINC(&reg.L, &reg.F);}
 8000e50:	4901      	ldr	r1, [pc, #4]	; (8000e58 <vINC_L+0x8>)
 8000e52:	1d88      	adds	r0, r1, #6
 8000e54:	f001 be94 	b.w	8002b80 <v8bitRegisterINC>
 8000e58:	24009254 	.word	0x24009254

08000e5c <vINC_A>:
void vINC_A(){        v8bitRegisterINC(&reg.A, &reg.F);}
 8000e5c:	4901      	ldr	r1, [pc, #4]	; (8000e64 <vINC_A+0x8>)
 8000e5e:	1c48      	adds	r0, r1, #1
 8000e60:	f001 be8e 	b.w	8002b80 <v8bitRegisterINC>
 8000e64:	24009254 	.word	0x24009254

08000e68 <vDEC_B>:
void vDEC_B(){        v8bitRegisterDEC(&reg.B, &reg.F);}
 8000e68:	4901      	ldr	r1, [pc, #4]	; (8000e70 <vDEC_B+0x8>)
 8000e6a:	1cc8      	adds	r0, r1, #3
 8000e6c:	f001 bea6 	b.w	8002bbc <v8bitRegisterDEC>
 8000e70:	24009254 	.word	0x24009254

08000e74 <vDEC_C>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
 8000e74:	4901      	ldr	r1, [pc, #4]	; (8000e7c <vDEC_C+0x8>)
 8000e76:	1c88      	adds	r0, r1, #2
 8000e78:	f001 bea0 	b.w	8002bbc <v8bitRegisterDEC>
 8000e7c:	24009254 	.word	0x24009254

08000e80 <vDEC_D>:
void vDEC_D(){        v8bitRegisterDEC(&reg.D, &reg.F);}
 8000e80:	4901      	ldr	r1, [pc, #4]	; (8000e88 <vDEC_D+0x8>)
 8000e82:	1d48      	adds	r0, r1, #5
 8000e84:	f001 be9a 	b.w	8002bbc <v8bitRegisterDEC>
 8000e88:	24009254 	.word	0x24009254

08000e8c <vDEC_E>:
void vDEC_E(){        v8bitRegisterDEC(&reg.E, &reg.F);}
 8000e8c:	4901      	ldr	r1, [pc, #4]	; (8000e94 <vDEC_E+0x8>)
 8000e8e:	1d08      	adds	r0, r1, #4
 8000e90:	f001 be94 	b.w	8002bbc <v8bitRegisterDEC>
 8000e94:	24009254 	.word	0x24009254

08000e98 <vDEC_H>:
void vDEC_H(){        v8bitRegisterDEC(&reg.H, &reg.F);}
 8000e98:	4901      	ldr	r1, [pc, #4]	; (8000ea0 <vDEC_H+0x8>)
 8000e9a:	1dc8      	adds	r0, r1, #7
 8000e9c:	f001 be8e 	b.w	8002bbc <v8bitRegisterDEC>
 8000ea0:	24009254 	.word	0x24009254

08000ea4 <vDEC_L>:
void vDEC_L(){        v8bitRegisterDEC(&reg.L, &reg.F);}
 8000ea4:	4901      	ldr	r1, [pc, #4]	; (8000eac <vDEC_L+0x8>)
 8000ea6:	1d88      	adds	r0, r1, #6
 8000ea8:	f001 be88 	b.w	8002bbc <v8bitRegisterDEC>
 8000eac:	24009254 	.word	0x24009254

08000eb0 <vDEC_A>:
void vDEC_A(){        v8bitRegisterDEC(&reg.A, &reg.F);}
 8000eb0:	4901      	ldr	r1, [pc, #4]	; (8000eb8 <vDEC_A+0x8>)
 8000eb2:	1c48      	adds	r0, r1, #1
 8000eb4:	f001 be82 	b.w	8002bbc <v8bitRegisterDEC>
 8000eb8:	24009254 	.word	0x24009254

08000ebc <vRLCA>:
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
 8000ebc:	4901      	ldr	r1, [pc, #4]	; (8000ec4 <vRLCA+0x8>)
 8000ebe:	1c48      	adds	r0, r1, #1
 8000ec0:	f001 be9c 	b.w	8002bfc <vGBFunctionRLCA>
 8000ec4:	24009254 	.word	0x24009254

08000ec8 <vADDs_HL_BC>:
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
 8000ec8:	4a02      	ldr	r2, [pc, #8]	; (8000ed4 <vADDs_HL_BC+0xc>)
 8000eca:	8851      	ldrh	r1, [r2, #2]
 8000ecc:	1d90      	adds	r0, r2, #6
 8000ece:	f001 beb3 	b.w	8002c38 <vGBFunction16bitADD>
 8000ed2:	bf00      	nop
 8000ed4:	24009254 	.word	0x24009254

08000ed8 <vADDs_HL_DE>:
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
 8000ed8:	4a02      	ldr	r2, [pc, #8]	; (8000ee4 <vADDs_HL_DE+0xc>)
 8000eda:	8891      	ldrh	r1, [r2, #4]
 8000edc:	1d90      	adds	r0, r2, #6
 8000ede:	f001 beab 	b.w	8002c38 <vGBFunction16bitADD>
 8000ee2:	bf00      	nop
 8000ee4:	24009254 	.word	0x24009254

08000ee8 <vADDs_HL_HL>:
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <vADDs_HL_HL+0xc>)
 8000eea:	4602      	mov	r2, r0
 8000eec:	f830 1f06 	ldrh.w	r1, [r0, #6]!
 8000ef0:	f001 bea2 	b.w	8002c38 <vGBFunction16bitADD>
 8000ef4:	24009254 	.word	0x24009254

08000ef8 <vADDs_HL_SP>:
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
 8000ef8:	4a02      	ldr	r2, [pc, #8]	; (8000f04 <vADDs_HL_SP+0xc>)
 8000efa:	8911      	ldrh	r1, [r2, #8]
 8000efc:	1d90      	adds	r0, r2, #6
 8000efe:	f001 be9b 	b.w	8002c38 <vGBFunction16bitADD>
 8000f02:	bf00      	nop
 8000f04:	24009254 	.word	0x24009254

08000f08 <vRRCA>:
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}
 8000f08:	4901      	ldr	r1, [pc, #4]	; (8000f10 <vRRCA+0x8>)
 8000f0a:	1c48      	adds	r0, r1, #1
 8000f0c:	f001 be82 	b.w	8002c14 <vGBFunctionRRCA>
 8000f10:	24009254 	.word	0x24009254

08000f14 <vRLA>:
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
 8000f14:	4901      	ldr	r1, [pc, #4]	; (8000f1c <vRLA+0x8>)
 8000f16:	1c48      	adds	r0, r1, #1
 8000f18:	f001 beb6 	b.w	8002c88 <vGBFunctionRLA>
 8000f1c:	24009254 	.word	0x24009254

08000f20 <vRRA>:
void vRRA(){          vGBFunctionRRA(&reg.A, &reg.F);}
 8000f20:	4901      	ldr	r1, [pc, #4]	; (8000f28 <vRRA+0x8>)
 8000f22:	1c48      	adds	r0, r1, #1
 8000f24:	f001 bebe 	b.w	8002ca4 <vGBFunctionRRA>
 8000f28:	24009254 	.word	0x24009254

08000f2c <vJR_NZ_r8>:
void vJR_NZ_r8(){     customDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	4d08      	ldr	r5, [pc, #32]	; (8000f50 <vJR_NZ_r8+0x24>)
 8000f30:	462c      	mov	r4, r5
 8000f32:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000f36:	3801      	subs	r0, #1
 8000f38:	b280      	uxth	r0, r0
 8000f3a:	f002 faf9 	bl	8003530 <ucGBMemoryRead>
 8000f3e:	4629      	mov	r1, r5
 8000f40:	4602      	mov	r2, r0
 8000f42:	4620      	mov	r0, r4
 8000f44:	f001 febc 	bl	8002cc0 <vGBFunctionJR_NZ>
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <vJR_NZ_r8+0x28>)
 8000f4a:	7018      	strb	r0, [r3, #0]
 8000f4c:	bd38      	pop	{r3, r4, r5, pc}
 8000f4e:	bf00      	nop
 8000f50:	24009254 	.word	0x24009254
 8000f54:	2400908c 	.word	0x2400908c

08000f58 <vDAA>:
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
 8000f58:	4901      	ldr	r1, [pc, #4]	; (8000f60 <vDAA+0x8>)
 8000f5a:	1c48      	adds	r0, r1, #1
 8000f5c:	f001 bebc 	b.w	8002cd8 <vGBFunctionDAA>
 8000f60:	24009254 	.word	0x24009254

08000f64 <vJR_Z_r8>:
void vJR_Z_r8(){      customDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000f64:	b538      	push	{r3, r4, r5, lr}
 8000f66:	4d08      	ldr	r5, [pc, #32]	; (8000f88 <vJR_Z_r8+0x24>)
 8000f68:	462c      	mov	r4, r5
 8000f6a:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000f6e:	3801      	subs	r0, #1
 8000f70:	b280      	uxth	r0, r0
 8000f72:	f002 fadd 	bl	8003530 <ucGBMemoryRead>
 8000f76:	4629      	mov	r1, r5
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f001 fee0 	bl	8002d40 <vGBFunctionJR_Z>
 8000f80:	4b02      	ldr	r3, [pc, #8]	; (8000f8c <vJR_Z_r8+0x28>)
 8000f82:	7018      	strb	r0, [r3, #0]
 8000f84:	bd38      	pop	{r3, r4, r5, pc}
 8000f86:	bf00      	nop
 8000f88:	24009254 	.word	0x24009254
 8000f8c:	2400908c 	.word	0x2400908c

08000f90 <vCPL>:
void vCPL(){          reg.A = ~(reg.A); setbit(&reg.F, N_FLAG); setbit(&reg.F, H_FLAG);}
 8000f90:	b510      	push	{r4, lr}
 8000f92:	4c07      	ldr	r4, [pc, #28]	; (8000fb0 <vCPL+0x20>)
 8000f94:	2106      	movs	r1, #6
 8000f96:	7863      	ldrb	r3, [r4, #1]
 8000f98:	4620      	mov	r0, r4
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	7063      	strb	r3, [r4, #1]
 8000f9e:	f001 fddb 	bl	8002b58 <setbit>
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000faa:	f001 bdd5 	b.w	8002b58 <setbit>
 8000fae:	bf00      	nop
 8000fb0:	24009254 	.word	0x24009254

08000fb4 <vSET_0_B>:
void vRES_7_L(){      resetbit(&reg.L, 7);}
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
void vRES_7_A(){      resetbit(&reg.A, 7);}

/*********************0xCX*/
void vSET_0_B(){      setbit(&reg.B, 0);}
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4801      	ldr	r0, [pc, #4]	; (8000fbc <vSET_0_B+0x8>)
 8000fb8:	f001 bdce 	b.w	8002b58 <setbit>
 8000fbc:	24009257 	.word	0x24009257

08000fc0 <vSET_0_C>:
void vSET_0_C(){      setbit(&reg.C, 0);}
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4801      	ldr	r0, [pc, #4]	; (8000fc8 <vSET_0_C+0x8>)
 8000fc4:	f001 bdc8 	b.w	8002b58 <setbit>
 8000fc8:	24009256 	.word	0x24009256

08000fcc <vSET_0_D>:
void vSET_0_D(){      setbit(&reg.D, 0);}
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4801      	ldr	r0, [pc, #4]	; (8000fd4 <vSET_0_D+0x8>)
 8000fd0:	f001 bdc2 	b.w	8002b58 <setbit>
 8000fd4:	24009259 	.word	0x24009259

08000fd8 <vSET_0_E>:
void vSET_0_E(){      setbit(&reg.E, 0);}
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4801      	ldr	r0, [pc, #4]	; (8000fe0 <vSET_0_E+0x8>)
 8000fdc:	f001 bdbc 	b.w	8002b58 <setbit>
 8000fe0:	24009258 	.word	0x24009258

08000fe4 <vSET_0_H>:
void vSET_0_H(){      setbit(&reg.H, 0);}
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4801      	ldr	r0, [pc, #4]	; (8000fec <vSET_0_H+0x8>)
 8000fe8:	f001 bdb6 	b.w	8002b58 <setbit>
 8000fec:	2400925b 	.word	0x2400925b

08000ff0 <vSET_0_L>:
void vSET_0_L(){      setbit(&reg.L, 0);}
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4801      	ldr	r0, [pc, #4]	; (8000ff8 <vSET_0_L+0x8>)
 8000ff4:	f001 bdb0 	b.w	8002b58 <setbit>
 8000ff8:	2400925a 	.word	0x2400925a

08000ffc <vSET_0_A>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
void vSET_0_A(){      setbit(&reg.A, 0);}
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4801      	ldr	r0, [pc, #4]	; (8001004 <vSET_0_A+0x8>)
 8001000:	f001 bdaa 	b.w	8002b58 <setbit>
 8001004:	24009255 	.word	0x24009255

08001008 <vSET_1_B>:
void vSET_1_B(){      setbit(&reg.B, 1);}
 8001008:	2101      	movs	r1, #1
 800100a:	4801      	ldr	r0, [pc, #4]	; (8001010 <vSET_1_B+0x8>)
 800100c:	f001 bda4 	b.w	8002b58 <setbit>
 8001010:	24009257 	.word	0x24009257

08001014 <vSET_1_C>:
void vSET_1_C(){      setbit(&reg.C, 1);}
 8001014:	2101      	movs	r1, #1
 8001016:	4801      	ldr	r0, [pc, #4]	; (800101c <vSET_1_C+0x8>)
 8001018:	f001 bd9e 	b.w	8002b58 <setbit>
 800101c:	24009256 	.word	0x24009256

08001020 <vSET_1_D>:
void vSET_1_D(){      setbit(&reg.D, 1);}
 8001020:	2101      	movs	r1, #1
 8001022:	4801      	ldr	r0, [pc, #4]	; (8001028 <vSET_1_D+0x8>)
 8001024:	f001 bd98 	b.w	8002b58 <setbit>
 8001028:	24009259 	.word	0x24009259

0800102c <vSET_1_E>:
void vSET_1_E(){      setbit(&reg.E, 1);}
 800102c:	2101      	movs	r1, #1
 800102e:	4801      	ldr	r0, [pc, #4]	; (8001034 <vSET_1_E+0x8>)
 8001030:	f001 bd92 	b.w	8002b58 <setbit>
 8001034:	24009258 	.word	0x24009258

08001038 <vSET_1_H>:
void vSET_1_H(){      setbit(&reg.H, 1);}
 8001038:	2101      	movs	r1, #1
 800103a:	4801      	ldr	r0, [pc, #4]	; (8001040 <vSET_1_H+0x8>)
 800103c:	f001 bd8c 	b.w	8002b58 <setbit>
 8001040:	2400925b 	.word	0x2400925b

08001044 <vSET_1_L>:
void vSET_1_L(){      setbit(&reg.L, 1);}
 8001044:	2101      	movs	r1, #1
 8001046:	4801      	ldr	r0, [pc, #4]	; (800104c <vSET_1_L+0x8>)
 8001048:	f001 bd86 	b.w	8002b58 <setbit>
 800104c:	2400925a 	.word	0x2400925a

08001050 <vSET_1_A>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
void vSET_1_A(){      setbit(&reg.A, 1);}
 8001050:	2101      	movs	r1, #1
 8001052:	4801      	ldr	r0, [pc, #4]	; (8001058 <vSET_1_A+0x8>)
 8001054:	f001 bd80 	b.w	8002b58 <setbit>
 8001058:	24009255 	.word	0x24009255

0800105c <vSET_2_B>:

/*********************0xDX*/
void vSET_2_B(){      setbit(&reg.B, 2);}
 800105c:	2102      	movs	r1, #2
 800105e:	4801      	ldr	r0, [pc, #4]	; (8001064 <vSET_2_B+0x8>)
 8001060:	f001 bd7a 	b.w	8002b58 <setbit>
 8001064:	24009257 	.word	0x24009257

08001068 <vSET_2_C>:
void vSET_2_C(){      setbit(&reg.C, 2);}
 8001068:	2102      	movs	r1, #2
 800106a:	4801      	ldr	r0, [pc, #4]	; (8001070 <vSET_2_C+0x8>)
 800106c:	f001 bd74 	b.w	8002b58 <setbit>
 8001070:	24009256 	.word	0x24009256

08001074 <vSET_2_D>:
void vSET_2_D(){      setbit(&reg.D, 2);}
 8001074:	2102      	movs	r1, #2
 8001076:	4801      	ldr	r0, [pc, #4]	; (800107c <vSET_2_D+0x8>)
 8001078:	f001 bd6e 	b.w	8002b58 <setbit>
 800107c:	24009259 	.word	0x24009259

08001080 <vSET_2_E>:
void vSET_2_E(){      setbit(&reg.E, 2);}
 8001080:	2102      	movs	r1, #2
 8001082:	4801      	ldr	r0, [pc, #4]	; (8001088 <vSET_2_E+0x8>)
 8001084:	f001 bd68 	b.w	8002b58 <setbit>
 8001088:	24009258 	.word	0x24009258

0800108c <vSET_2_H>:
void vSET_2_H(){      setbit(&reg.H, 2);}
 800108c:	2102      	movs	r1, #2
 800108e:	4801      	ldr	r0, [pc, #4]	; (8001094 <vSET_2_H+0x8>)
 8001090:	f001 bd62 	b.w	8002b58 <setbit>
 8001094:	2400925b 	.word	0x2400925b

08001098 <vSET_2_L>:
void vSET_2_L(){      setbit(&reg.L, 2);}
 8001098:	2102      	movs	r1, #2
 800109a:	4801      	ldr	r0, [pc, #4]	; (80010a0 <vSET_2_L+0x8>)
 800109c:	f001 bd5c 	b.w	8002b58 <setbit>
 80010a0:	2400925a 	.word	0x2400925a

080010a4 <vSET_2_A>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
void vSET_2_A(){      setbit(&reg.A, 2);}
 80010a4:	2102      	movs	r1, #2
 80010a6:	4801      	ldr	r0, [pc, #4]	; (80010ac <vSET_2_A+0x8>)
 80010a8:	f001 bd56 	b.w	8002b58 <setbit>
 80010ac:	24009255 	.word	0x24009255

080010b0 <vSET_3_B>:
void vSET_3_B(){      setbit(&reg.B, 3);}
 80010b0:	2103      	movs	r1, #3
 80010b2:	4801      	ldr	r0, [pc, #4]	; (80010b8 <vSET_3_B+0x8>)
 80010b4:	f001 bd50 	b.w	8002b58 <setbit>
 80010b8:	24009257 	.word	0x24009257

080010bc <vSET_3_C>:
void vSET_3_C(){      setbit(&reg.C, 3);}
 80010bc:	2103      	movs	r1, #3
 80010be:	4801      	ldr	r0, [pc, #4]	; (80010c4 <vSET_3_C+0x8>)
 80010c0:	f001 bd4a 	b.w	8002b58 <setbit>
 80010c4:	24009256 	.word	0x24009256

080010c8 <vSET_3_D>:
void vSET_3_D(){      setbit(&reg.D, 3);}
 80010c8:	2103      	movs	r1, #3
 80010ca:	4801      	ldr	r0, [pc, #4]	; (80010d0 <vSET_3_D+0x8>)
 80010cc:	f001 bd44 	b.w	8002b58 <setbit>
 80010d0:	24009259 	.word	0x24009259

080010d4 <vSET_3_E>:
void vSET_3_E(){      setbit(&reg.E, 3);}
 80010d4:	2103      	movs	r1, #3
 80010d6:	4801      	ldr	r0, [pc, #4]	; (80010dc <vSET_3_E+0x8>)
 80010d8:	f001 bd3e 	b.w	8002b58 <setbit>
 80010dc:	24009258 	.word	0x24009258

080010e0 <vSET_3_H>:
void vSET_3_H(){      setbit(&reg.H, 3);}
 80010e0:	2103      	movs	r1, #3
 80010e2:	4801      	ldr	r0, [pc, #4]	; (80010e8 <vSET_3_H+0x8>)
 80010e4:	f001 bd38 	b.w	8002b58 <setbit>
 80010e8:	2400925b 	.word	0x2400925b

080010ec <vSET_3_L>:
void vSET_3_L(){      setbit(&reg.L, 3);}
 80010ec:	2103      	movs	r1, #3
 80010ee:	4801      	ldr	r0, [pc, #4]	; (80010f4 <vSET_3_L+0x8>)
 80010f0:	f001 bd32 	b.w	8002b58 <setbit>
 80010f4:	2400925a 	.word	0x2400925a

080010f8 <vSET_3_A>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
void vSET_3_A(){      setbit(&reg.A, 3);}
 80010f8:	2103      	movs	r1, #3
 80010fa:	4801      	ldr	r0, [pc, #4]	; (8001100 <vSET_3_A+0x8>)
 80010fc:	f001 bd2c 	b.w	8002b58 <setbit>
 8001100:	24009255 	.word	0x24009255

08001104 <vSET_4_B>:

/*********************0xEX*/
void vSET_4_B(){      setbit(&reg.B, 4);}
 8001104:	2104      	movs	r1, #4
 8001106:	4801      	ldr	r0, [pc, #4]	; (800110c <vSET_4_B+0x8>)
 8001108:	f001 bd26 	b.w	8002b58 <setbit>
 800110c:	24009257 	.word	0x24009257

08001110 <vSET_4_C>:
void vSET_4_C(){      setbit(&reg.C, 4);}
 8001110:	2104      	movs	r1, #4
 8001112:	4801      	ldr	r0, [pc, #4]	; (8001118 <vSET_4_C+0x8>)
 8001114:	f001 bd20 	b.w	8002b58 <setbit>
 8001118:	24009256 	.word	0x24009256

0800111c <vSET_4_D>:
void vSET_4_D(){      setbit(&reg.D, 4);}
 800111c:	2104      	movs	r1, #4
 800111e:	4801      	ldr	r0, [pc, #4]	; (8001124 <vSET_4_D+0x8>)
 8001120:	f001 bd1a 	b.w	8002b58 <setbit>
 8001124:	24009259 	.word	0x24009259

08001128 <vSET_4_E>:
void vSET_4_E(){      setbit(&reg.E, 4);}
 8001128:	2104      	movs	r1, #4
 800112a:	4801      	ldr	r0, [pc, #4]	; (8001130 <vSET_4_E+0x8>)
 800112c:	f001 bd14 	b.w	8002b58 <setbit>
 8001130:	24009258 	.word	0x24009258

08001134 <vSET_4_H>:
void vSET_4_H(){      setbit(&reg.H, 4);}
 8001134:	2104      	movs	r1, #4
 8001136:	4801      	ldr	r0, [pc, #4]	; (800113c <vSET_4_H+0x8>)
 8001138:	f001 bd0e 	b.w	8002b58 <setbit>
 800113c:	2400925b 	.word	0x2400925b

08001140 <vSET_4_L>:
void vSET_4_L(){      setbit(&reg.L, 4);}
 8001140:	2104      	movs	r1, #4
 8001142:	4801      	ldr	r0, [pc, #4]	; (8001148 <vSET_4_L+0x8>)
 8001144:	f001 bd08 	b.w	8002b58 <setbit>
 8001148:	2400925a 	.word	0x2400925a

0800114c <vSET_4_A>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
void vSET_4_A(){      setbit(&reg.A, 4);}
 800114c:	2104      	movs	r1, #4
 800114e:	4801      	ldr	r0, [pc, #4]	; (8001154 <vSET_4_A+0x8>)
 8001150:	f001 bd02 	b.w	8002b58 <setbit>
 8001154:	24009255 	.word	0x24009255

08001158 <vSET_5_B>:
void vSET_5_B(){      setbit(&reg.B, 5);}
 8001158:	2105      	movs	r1, #5
 800115a:	4801      	ldr	r0, [pc, #4]	; (8001160 <vSET_5_B+0x8>)
 800115c:	f001 bcfc 	b.w	8002b58 <setbit>
 8001160:	24009257 	.word	0x24009257

08001164 <vSET_5_C>:
void vSET_5_C(){      setbit(&reg.C, 5);}
 8001164:	2105      	movs	r1, #5
 8001166:	4801      	ldr	r0, [pc, #4]	; (800116c <vSET_5_C+0x8>)
 8001168:	f001 bcf6 	b.w	8002b58 <setbit>
 800116c:	24009256 	.word	0x24009256

08001170 <vSET_5_D>:
void vSET_5_D(){      setbit(&reg.D, 5);}
 8001170:	2105      	movs	r1, #5
 8001172:	4801      	ldr	r0, [pc, #4]	; (8001178 <vSET_5_D+0x8>)
 8001174:	f001 bcf0 	b.w	8002b58 <setbit>
 8001178:	24009259 	.word	0x24009259

0800117c <vSET_5_E>:
void vSET_5_E(){      setbit(&reg.E, 5);}
 800117c:	2105      	movs	r1, #5
 800117e:	4801      	ldr	r0, [pc, #4]	; (8001184 <vSET_5_E+0x8>)
 8001180:	f001 bcea 	b.w	8002b58 <setbit>
 8001184:	24009258 	.word	0x24009258

08001188 <vSET_5_H>:
void vSET_5_H(){      setbit(&reg.H, 5);}
 8001188:	2105      	movs	r1, #5
 800118a:	4801      	ldr	r0, [pc, #4]	; (8001190 <vSET_5_H+0x8>)
 800118c:	f001 bce4 	b.w	8002b58 <setbit>
 8001190:	2400925b 	.word	0x2400925b

08001194 <vSET_5_L>:
void vSET_5_L(){      setbit(&reg.L, 5);}
 8001194:	2105      	movs	r1, #5
 8001196:	4801      	ldr	r0, [pc, #4]	; (800119c <vSET_5_L+0x8>)
 8001198:	f001 bcde 	b.w	8002b58 <setbit>
 800119c:	2400925a 	.word	0x2400925a

080011a0 <vSET_5_A>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
void vSET_5_A(){      setbit(&reg.A, 5);}
 80011a0:	2105      	movs	r1, #5
 80011a2:	4801      	ldr	r0, [pc, #4]	; (80011a8 <vSET_5_A+0x8>)
 80011a4:	f001 bcd8 	b.w	8002b58 <setbit>
 80011a8:	24009255 	.word	0x24009255

080011ac <vSET_6_B>:

/*********************0xFX*/
void vSET_6_B(){      setbit(&reg.B, 6);}
 80011ac:	2106      	movs	r1, #6
 80011ae:	4801      	ldr	r0, [pc, #4]	; (80011b4 <vSET_6_B+0x8>)
 80011b0:	f001 bcd2 	b.w	8002b58 <setbit>
 80011b4:	24009257 	.word	0x24009257

080011b8 <vSET_6_C>:
void vSET_6_C(){      setbit(&reg.C, 6);}
 80011b8:	2106      	movs	r1, #6
 80011ba:	4801      	ldr	r0, [pc, #4]	; (80011c0 <vSET_6_C+0x8>)
 80011bc:	f001 bccc 	b.w	8002b58 <setbit>
 80011c0:	24009256 	.word	0x24009256

080011c4 <vSET_6_D>:
void vSET_6_D(){      setbit(&reg.D, 6);}
 80011c4:	2106      	movs	r1, #6
 80011c6:	4801      	ldr	r0, [pc, #4]	; (80011cc <vSET_6_D+0x8>)
 80011c8:	f001 bcc6 	b.w	8002b58 <setbit>
 80011cc:	24009259 	.word	0x24009259

080011d0 <vSET_6_E>:
void vSET_6_E(){      setbit(&reg.E, 6);}
 80011d0:	2106      	movs	r1, #6
 80011d2:	4801      	ldr	r0, [pc, #4]	; (80011d8 <vSET_6_E+0x8>)
 80011d4:	f001 bcc0 	b.w	8002b58 <setbit>
 80011d8:	24009258 	.word	0x24009258

080011dc <vSET_6_H>:
void vSET_6_H(){      setbit(&reg.H, 6);}
 80011dc:	2106      	movs	r1, #6
 80011de:	4801      	ldr	r0, [pc, #4]	; (80011e4 <vSET_6_H+0x8>)
 80011e0:	f001 bcba 	b.w	8002b58 <setbit>
 80011e4:	2400925b 	.word	0x2400925b

080011e8 <vSET_6_L>:
void vSET_6_L(){      setbit(&reg.L, 6);}
 80011e8:	2106      	movs	r1, #6
 80011ea:	4801      	ldr	r0, [pc, #4]	; (80011f0 <vSET_6_L+0x8>)
 80011ec:	f001 bcb4 	b.w	8002b58 <setbit>
 80011f0:	2400925a 	.word	0x2400925a

080011f4 <vSET_6_A>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
void vSET_6_A(){      setbit(&reg.A, 6);}
 80011f4:	2106      	movs	r1, #6
 80011f6:	4801      	ldr	r0, [pc, #4]	; (80011fc <vSET_6_A+0x8>)
 80011f8:	f001 bcae 	b.w	8002b58 <setbit>
 80011fc:	24009255 	.word	0x24009255

08001200 <vSET_7_B>:
void vSET_7_B(){      setbit(&reg.B, 7);}
 8001200:	2107      	movs	r1, #7
 8001202:	4801      	ldr	r0, [pc, #4]	; (8001208 <vSET_7_B+0x8>)
 8001204:	f001 bca8 	b.w	8002b58 <setbit>
 8001208:	24009257 	.word	0x24009257

0800120c <vSET_7_C>:
void vSET_7_C(){      setbit(&reg.C, 7);}
 800120c:	2107      	movs	r1, #7
 800120e:	4801      	ldr	r0, [pc, #4]	; (8001214 <vSET_7_C+0x8>)
 8001210:	f001 bca2 	b.w	8002b58 <setbit>
 8001214:	24009256 	.word	0x24009256

08001218 <vSET_7_D>:
void vSET_7_D(){      setbit(&reg.D, 7);}
 8001218:	2107      	movs	r1, #7
 800121a:	4801      	ldr	r0, [pc, #4]	; (8001220 <vSET_7_D+0x8>)
 800121c:	f001 bc9c 	b.w	8002b58 <setbit>
 8001220:	24009259 	.word	0x24009259

08001224 <vSET_7_E>:
void vSET_7_E(){      setbit(&reg.E, 7);}
 8001224:	2107      	movs	r1, #7
 8001226:	4801      	ldr	r0, [pc, #4]	; (800122c <vSET_7_E+0x8>)
 8001228:	f001 bc96 	b.w	8002b58 <setbit>
 800122c:	24009258 	.word	0x24009258

08001230 <vSET_7_H>:
void vSET_7_H(){      setbit(&reg.H, 7);}
 8001230:	2107      	movs	r1, #7
 8001232:	4801      	ldr	r0, [pc, #4]	; (8001238 <vSET_7_H+0x8>)
 8001234:	f001 bc90 	b.w	8002b58 <setbit>
 8001238:	2400925b 	.word	0x2400925b

0800123c <vSET_7_L>:
void vSET_7_L(){      setbit(&reg.L, 7);}
 800123c:	2107      	movs	r1, #7
 800123e:	4801      	ldr	r0, [pc, #4]	; (8001244 <vSET_7_L+0x8>)
 8001240:	f001 bc8a 	b.w	8002b58 <setbit>
 8001244:	2400925a 	.word	0x2400925a

08001248 <vSET_7_A>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
void vSET_7_A(){      setbit(&reg.A, 7);}
 8001248:	2107      	movs	r1, #7
 800124a:	4801      	ldr	r0, [pc, #4]	; (8001250 <vSET_7_A+0x8>)
 800124c:	f001 bc84 	b.w	8002b58 <setbit>
 8001250:	24009255 	.word	0x24009255

08001254 <vJR_NC_r8>:
void vJR_NC_r8(){     customDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001254:	b538      	push	{r3, r4, r5, lr}
 8001256:	4d08      	ldr	r5, [pc, #32]	; (8001278 <vJR_NC_r8+0x24>)
 8001258:	462c      	mov	r4, r5
 800125a:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 800125e:	3801      	subs	r0, #1
 8001260:	b280      	uxth	r0, r0
 8001262:	f002 f965 	bl	8003530 <ucGBMemoryRead>
 8001266:	4629      	mov	r1, r5
 8001268:	4602      	mov	r2, r0
 800126a:	4620      	mov	r0, r4
 800126c:	f001 fd74 	bl	8002d58 <vGBFunctionJR_NC>
 8001270:	4b02      	ldr	r3, [pc, #8]	; (800127c <vJR_NC_r8+0x28>)
 8001272:	7018      	strb	r0, [r3, #0]
 8001274:	bd38      	pop	{r3, r4, r5, pc}
 8001276:	bf00      	nop
 8001278:	24009254 	.word	0x24009254
 800127c:	2400908c 	.word	0x2400908c

08001280 <vINC_HL>:
void vINC_HL(){       vMemoryLocationINC(reg.HL, &reg.F);}
 8001280:	4901      	ldr	r1, [pc, #4]	; (8001288 <vINC_HL+0x8>)
 8001282:	88c8      	ldrh	r0, [r1, #6]
 8001284:	f001 bd74 	b.w	8002d70 <vMemoryLocationINC>
 8001288:	24009254 	.word	0x24009254

0800128c <vDEC_HL>:
void vDEC_HL(){       vMemoryLocationDEC(reg.HL, &reg.F);}
 800128c:	4901      	ldr	r1, [pc, #4]	; (8001294 <vDEC_HL+0x8>)
 800128e:	88c8      	ldrh	r0, [r1, #6]
 8001290:	f001 bd98 	b.w	8002dc4 <vMemoryLocationDEC>
 8001294:	24009254 	.word	0x24009254

08001298 <vSCF>:
void vSCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); setbit(&reg.F, C_FLAG);}
 8001298:	b508      	push	{r3, lr}
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <vSCF+0x20>)
 800129c:	2106      	movs	r1, #6
 800129e:	f001 fc63 	bl	8002b68 <resetbit>
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <vSCF+0x20>)
 80012a4:	2105      	movs	r1, #5
 80012a6:	f001 fc5f 	bl	8002b68 <resetbit>
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <vSCF+0x20>)
 80012ac:	2104      	movs	r1, #4
 80012ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80012b2:	f001 bc51 	b.w	8002b58 <setbit>
 80012b6:	bf00      	nop
 80012b8:	24009254 	.word	0x24009254

080012bc <vRES_0_B>:
void vRES_0_B(){      resetbit(&reg.B, 0);}
 80012bc:	2100      	movs	r1, #0
 80012be:	4801      	ldr	r0, [pc, #4]	; (80012c4 <vRES_0_B+0x8>)
 80012c0:	f001 bc52 	b.w	8002b68 <resetbit>
 80012c4:	24009257 	.word	0x24009257

080012c8 <vRES_0_C>:
void vRES_0_C(){      resetbit(&reg.C, 0);}
 80012c8:	2100      	movs	r1, #0
 80012ca:	4801      	ldr	r0, [pc, #4]	; (80012d0 <vRES_0_C+0x8>)
 80012cc:	f001 bc4c 	b.w	8002b68 <resetbit>
 80012d0:	24009256 	.word	0x24009256

080012d4 <vRES_0_D>:
void vRES_0_D(){      resetbit(&reg.D, 0);}
 80012d4:	2100      	movs	r1, #0
 80012d6:	4801      	ldr	r0, [pc, #4]	; (80012dc <vRES_0_D+0x8>)
 80012d8:	f001 bc46 	b.w	8002b68 <resetbit>
 80012dc:	24009259 	.word	0x24009259

080012e0 <vRES_0_E>:
void vRES_0_E(){      resetbit(&reg.E, 0);}
 80012e0:	2100      	movs	r1, #0
 80012e2:	4801      	ldr	r0, [pc, #4]	; (80012e8 <vRES_0_E+0x8>)
 80012e4:	f001 bc40 	b.w	8002b68 <resetbit>
 80012e8:	24009258 	.word	0x24009258

080012ec <vRES_0_H>:
void vRES_0_H(){      resetbit(&reg.H, 0);}
 80012ec:	2100      	movs	r1, #0
 80012ee:	4801      	ldr	r0, [pc, #4]	; (80012f4 <vRES_0_H+0x8>)
 80012f0:	f001 bc3a 	b.w	8002b68 <resetbit>
 80012f4:	2400925b 	.word	0x2400925b

080012f8 <vRES_0_L>:
void vRES_0_L(){      resetbit(&reg.L, 0);}
 80012f8:	2100      	movs	r1, #0
 80012fa:	4801      	ldr	r0, [pc, #4]	; (8001300 <vRES_0_L+0x8>)
 80012fc:	f001 bc34 	b.w	8002b68 <resetbit>
 8001300:	2400925a 	.word	0x2400925a

08001304 <vRES_0_A>:
void vRES_0_A(){      resetbit(&reg.A, 0);}
 8001304:	2100      	movs	r1, #0
 8001306:	4801      	ldr	r0, [pc, #4]	; (800130c <vRES_0_A+0x8>)
 8001308:	f001 bc2e 	b.w	8002b68 <resetbit>
 800130c:	24009255 	.word	0x24009255

08001310 <vRES_1_B>:
void vRES_1_B(){      resetbit(&reg.B, 1);}
 8001310:	2101      	movs	r1, #1
 8001312:	4801      	ldr	r0, [pc, #4]	; (8001318 <vRES_1_B+0x8>)
 8001314:	f001 bc28 	b.w	8002b68 <resetbit>
 8001318:	24009257 	.word	0x24009257

0800131c <vRES_1_C>:
void vRES_1_C(){      resetbit(&reg.C, 1);}
 800131c:	2101      	movs	r1, #1
 800131e:	4801      	ldr	r0, [pc, #4]	; (8001324 <vRES_1_C+0x8>)
 8001320:	f001 bc22 	b.w	8002b68 <resetbit>
 8001324:	24009256 	.word	0x24009256

08001328 <vRES_1_D>:
void vRES_1_D(){      resetbit(&reg.D, 1);}
 8001328:	2101      	movs	r1, #1
 800132a:	4801      	ldr	r0, [pc, #4]	; (8001330 <vRES_1_D+0x8>)
 800132c:	f001 bc1c 	b.w	8002b68 <resetbit>
 8001330:	24009259 	.word	0x24009259

08001334 <vRES_1_E>:
void vRES_1_E(){      resetbit(&reg.E, 1);}
 8001334:	2101      	movs	r1, #1
 8001336:	4801      	ldr	r0, [pc, #4]	; (800133c <vRES_1_E+0x8>)
 8001338:	f001 bc16 	b.w	8002b68 <resetbit>
 800133c:	24009258 	.word	0x24009258

08001340 <vRES_1_H>:
void vRES_1_H(){      resetbit(&reg.H, 1);}
 8001340:	2101      	movs	r1, #1
 8001342:	4801      	ldr	r0, [pc, #4]	; (8001348 <vRES_1_H+0x8>)
 8001344:	f001 bc10 	b.w	8002b68 <resetbit>
 8001348:	2400925b 	.word	0x2400925b

0800134c <vRES_1_L>:
void vRES_1_L(){      resetbit(&reg.L, 1);}
 800134c:	2101      	movs	r1, #1
 800134e:	4801      	ldr	r0, [pc, #4]	; (8001354 <vRES_1_L+0x8>)
 8001350:	f001 bc0a 	b.w	8002b68 <resetbit>
 8001354:	2400925a 	.word	0x2400925a

08001358 <vRES_1_A>:
void vRES_1_A(){      resetbit(&reg.A, 1);}
 8001358:	2101      	movs	r1, #1
 800135a:	4801      	ldr	r0, [pc, #4]	; (8001360 <vRES_1_A+0x8>)
 800135c:	f001 bc04 	b.w	8002b68 <resetbit>
 8001360:	24009255 	.word	0x24009255

08001364 <vRES_2_B>:
void vRES_2_B(){      resetbit(&reg.B, 2);}
 8001364:	2102      	movs	r1, #2
 8001366:	4801      	ldr	r0, [pc, #4]	; (800136c <vRES_2_B+0x8>)
 8001368:	f001 bbfe 	b.w	8002b68 <resetbit>
 800136c:	24009257 	.word	0x24009257

08001370 <vRES_2_C>:
void vRES_2_C(){      resetbit(&reg.C, 2);}
 8001370:	2102      	movs	r1, #2
 8001372:	4801      	ldr	r0, [pc, #4]	; (8001378 <vRES_2_C+0x8>)
 8001374:	f001 bbf8 	b.w	8002b68 <resetbit>
 8001378:	24009256 	.word	0x24009256

0800137c <vRES_2_D>:
void vRES_2_D(){      resetbit(&reg.D, 2);}
 800137c:	2102      	movs	r1, #2
 800137e:	4801      	ldr	r0, [pc, #4]	; (8001384 <vRES_2_D+0x8>)
 8001380:	f001 bbf2 	b.w	8002b68 <resetbit>
 8001384:	24009259 	.word	0x24009259

08001388 <vRES_2_E>:
void vRES_2_E(){      resetbit(&reg.E, 2);}
 8001388:	2102      	movs	r1, #2
 800138a:	4801      	ldr	r0, [pc, #4]	; (8001390 <vRES_2_E+0x8>)
 800138c:	f001 bbec 	b.w	8002b68 <resetbit>
 8001390:	24009258 	.word	0x24009258

08001394 <vRES_2_H>:
void vRES_2_H(){      resetbit(&reg.H, 2);}
 8001394:	2102      	movs	r1, #2
 8001396:	4801      	ldr	r0, [pc, #4]	; (800139c <vRES_2_H+0x8>)
 8001398:	f001 bbe6 	b.w	8002b68 <resetbit>
 800139c:	2400925b 	.word	0x2400925b

080013a0 <vRES_2_L>:
void vRES_2_L(){      resetbit(&reg.L, 2);}
 80013a0:	2102      	movs	r1, #2
 80013a2:	4801      	ldr	r0, [pc, #4]	; (80013a8 <vRES_2_L+0x8>)
 80013a4:	f001 bbe0 	b.w	8002b68 <resetbit>
 80013a8:	2400925a 	.word	0x2400925a

080013ac <vRES_2_A>:
void vRES_2_A(){      resetbit(&reg.A, 2);}
 80013ac:	2102      	movs	r1, #2
 80013ae:	4801      	ldr	r0, [pc, #4]	; (80013b4 <vRES_2_A+0x8>)
 80013b0:	f001 bbda 	b.w	8002b68 <resetbit>
 80013b4:	24009255 	.word	0x24009255

080013b8 <vRES_3_B>:
void vRES_3_B(){      resetbit(&reg.B, 3);}
 80013b8:	2103      	movs	r1, #3
 80013ba:	4801      	ldr	r0, [pc, #4]	; (80013c0 <vRES_3_B+0x8>)
 80013bc:	f001 bbd4 	b.w	8002b68 <resetbit>
 80013c0:	24009257 	.word	0x24009257

080013c4 <vRES_3_C>:
void vRES_3_C(){      resetbit(&reg.C, 3);}
 80013c4:	2103      	movs	r1, #3
 80013c6:	4801      	ldr	r0, [pc, #4]	; (80013cc <vRES_3_C+0x8>)
 80013c8:	f001 bbce 	b.w	8002b68 <resetbit>
 80013cc:	24009256 	.word	0x24009256

080013d0 <vRES_3_D>:
void vRES_3_D(){      resetbit(&reg.D, 3);}
 80013d0:	2103      	movs	r1, #3
 80013d2:	4801      	ldr	r0, [pc, #4]	; (80013d8 <vRES_3_D+0x8>)
 80013d4:	f001 bbc8 	b.w	8002b68 <resetbit>
 80013d8:	24009259 	.word	0x24009259

080013dc <vRES_3_E>:
void vRES_3_E(){      resetbit(&reg.E, 3);}
 80013dc:	2103      	movs	r1, #3
 80013de:	4801      	ldr	r0, [pc, #4]	; (80013e4 <vRES_3_E+0x8>)
 80013e0:	f001 bbc2 	b.w	8002b68 <resetbit>
 80013e4:	24009258 	.word	0x24009258

080013e8 <vRES_3_H>:
void vRES_3_H(){      resetbit(&reg.H, 3);}
 80013e8:	2103      	movs	r1, #3
 80013ea:	4801      	ldr	r0, [pc, #4]	; (80013f0 <vRES_3_H+0x8>)
 80013ec:	f001 bbbc 	b.w	8002b68 <resetbit>
 80013f0:	2400925b 	.word	0x2400925b

080013f4 <vRES_3_L>:
void vRES_3_L(){      resetbit(&reg.L, 3);}
 80013f4:	2103      	movs	r1, #3
 80013f6:	4801      	ldr	r0, [pc, #4]	; (80013fc <vRES_3_L+0x8>)
 80013f8:	f001 bbb6 	b.w	8002b68 <resetbit>
 80013fc:	2400925a 	.word	0x2400925a

08001400 <vRES_3_A>:
void vRES_3_A(){      resetbit(&reg.A, 3);}
 8001400:	2103      	movs	r1, #3
 8001402:	4801      	ldr	r0, [pc, #4]	; (8001408 <vRES_3_A+0x8>)
 8001404:	f001 bbb0 	b.w	8002b68 <resetbit>
 8001408:	24009255 	.word	0x24009255

0800140c <vRES_4_B>:
void vRES_4_B(){      resetbit(&reg.B, 4);}
 800140c:	2104      	movs	r1, #4
 800140e:	4801      	ldr	r0, [pc, #4]	; (8001414 <vRES_4_B+0x8>)
 8001410:	f001 bbaa 	b.w	8002b68 <resetbit>
 8001414:	24009257 	.word	0x24009257

08001418 <vRES_4_C>:
void vRES_4_C(){      resetbit(&reg.C, 4);}
 8001418:	2104      	movs	r1, #4
 800141a:	4801      	ldr	r0, [pc, #4]	; (8001420 <vRES_4_C+0x8>)
 800141c:	f001 bba4 	b.w	8002b68 <resetbit>
 8001420:	24009256 	.word	0x24009256

08001424 <vRES_4_D>:
void vRES_4_D(){      resetbit(&reg.D, 4);}
 8001424:	2104      	movs	r1, #4
 8001426:	4801      	ldr	r0, [pc, #4]	; (800142c <vRES_4_D+0x8>)
 8001428:	f001 bb9e 	b.w	8002b68 <resetbit>
 800142c:	24009259 	.word	0x24009259

08001430 <vRES_4_E>:
void vRES_4_E(){      resetbit(&reg.E, 4);}
 8001430:	2104      	movs	r1, #4
 8001432:	4801      	ldr	r0, [pc, #4]	; (8001438 <vRES_4_E+0x8>)
 8001434:	f001 bb98 	b.w	8002b68 <resetbit>
 8001438:	24009258 	.word	0x24009258

0800143c <vRES_4_H>:
void vRES_4_H(){      resetbit(&reg.H, 4);}
 800143c:	2104      	movs	r1, #4
 800143e:	4801      	ldr	r0, [pc, #4]	; (8001444 <vRES_4_H+0x8>)
 8001440:	f001 bb92 	b.w	8002b68 <resetbit>
 8001444:	2400925b 	.word	0x2400925b

08001448 <vRES_4_L>:
void vRES_4_L(){      resetbit(&reg.L, 4);}
 8001448:	2104      	movs	r1, #4
 800144a:	4801      	ldr	r0, [pc, #4]	; (8001450 <vRES_4_L+0x8>)
 800144c:	f001 bb8c 	b.w	8002b68 <resetbit>
 8001450:	2400925a 	.word	0x2400925a

08001454 <vRES_4_A>:
void vRES_4_A(){      resetbit(&reg.A, 4);}
 8001454:	2104      	movs	r1, #4
 8001456:	4801      	ldr	r0, [pc, #4]	; (800145c <vRES_4_A+0x8>)
 8001458:	f001 bb86 	b.w	8002b68 <resetbit>
 800145c:	24009255 	.word	0x24009255

08001460 <vRES_5_B>:
void vRES_5_B(){      resetbit(&reg.B, 5);}
 8001460:	2105      	movs	r1, #5
 8001462:	4801      	ldr	r0, [pc, #4]	; (8001468 <vRES_5_B+0x8>)
 8001464:	f001 bb80 	b.w	8002b68 <resetbit>
 8001468:	24009257 	.word	0x24009257

0800146c <vRES_5_C>:
void vRES_5_C(){      resetbit(&reg.C, 5);}
 800146c:	2105      	movs	r1, #5
 800146e:	4801      	ldr	r0, [pc, #4]	; (8001474 <vRES_5_C+0x8>)
 8001470:	f001 bb7a 	b.w	8002b68 <resetbit>
 8001474:	24009256 	.word	0x24009256

08001478 <vRES_5_D>:
void vRES_5_D(){      resetbit(&reg.D, 5);}
 8001478:	2105      	movs	r1, #5
 800147a:	4801      	ldr	r0, [pc, #4]	; (8001480 <vRES_5_D+0x8>)
 800147c:	f001 bb74 	b.w	8002b68 <resetbit>
 8001480:	24009259 	.word	0x24009259

08001484 <vRES_5_E>:
void vRES_5_E(){      resetbit(&reg.E, 5);}
 8001484:	2105      	movs	r1, #5
 8001486:	4801      	ldr	r0, [pc, #4]	; (800148c <vRES_5_E+0x8>)
 8001488:	f001 bb6e 	b.w	8002b68 <resetbit>
 800148c:	24009258 	.word	0x24009258

08001490 <vRES_5_H>:
void vRES_5_H(){      resetbit(&reg.H, 5);}
 8001490:	2105      	movs	r1, #5
 8001492:	4801      	ldr	r0, [pc, #4]	; (8001498 <vRES_5_H+0x8>)
 8001494:	f001 bb68 	b.w	8002b68 <resetbit>
 8001498:	2400925b 	.word	0x2400925b

0800149c <vRES_5_L>:
void vRES_5_L(){      resetbit(&reg.L, 5);}
 800149c:	2105      	movs	r1, #5
 800149e:	4801      	ldr	r0, [pc, #4]	; (80014a4 <vRES_5_L+0x8>)
 80014a0:	f001 bb62 	b.w	8002b68 <resetbit>
 80014a4:	2400925a 	.word	0x2400925a

080014a8 <vRES_5_A>:
void vRES_5_A(){      resetbit(&reg.A, 5);}
 80014a8:	2105      	movs	r1, #5
 80014aa:	4801      	ldr	r0, [pc, #4]	; (80014b0 <vRES_5_A+0x8>)
 80014ac:	f001 bb5c 	b.w	8002b68 <resetbit>
 80014b0:	24009255 	.word	0x24009255

080014b4 <vRES_6_B>:
void vRES_6_B(){      resetbit(&reg.B, 6);}
 80014b4:	2106      	movs	r1, #6
 80014b6:	4801      	ldr	r0, [pc, #4]	; (80014bc <vRES_6_B+0x8>)
 80014b8:	f001 bb56 	b.w	8002b68 <resetbit>
 80014bc:	24009257 	.word	0x24009257

080014c0 <vRES_6_C>:
void vRES_6_C(){      resetbit(&reg.C, 6);}
 80014c0:	2106      	movs	r1, #6
 80014c2:	4801      	ldr	r0, [pc, #4]	; (80014c8 <vRES_6_C+0x8>)
 80014c4:	f001 bb50 	b.w	8002b68 <resetbit>
 80014c8:	24009256 	.word	0x24009256

080014cc <vRES_6_D>:
void vRES_6_D(){      resetbit(&reg.D, 6);}
 80014cc:	2106      	movs	r1, #6
 80014ce:	4801      	ldr	r0, [pc, #4]	; (80014d4 <vRES_6_D+0x8>)
 80014d0:	f001 bb4a 	b.w	8002b68 <resetbit>
 80014d4:	24009259 	.word	0x24009259

080014d8 <vRES_6_E>:
void vRES_6_E(){      resetbit(&reg.E, 6);}
 80014d8:	2106      	movs	r1, #6
 80014da:	4801      	ldr	r0, [pc, #4]	; (80014e0 <vRES_6_E+0x8>)
 80014dc:	f001 bb44 	b.w	8002b68 <resetbit>
 80014e0:	24009258 	.word	0x24009258

080014e4 <vRES_6_H>:
void vRES_6_H(){      resetbit(&reg.H, 6);}
 80014e4:	2106      	movs	r1, #6
 80014e6:	4801      	ldr	r0, [pc, #4]	; (80014ec <vRES_6_H+0x8>)
 80014e8:	f001 bb3e 	b.w	8002b68 <resetbit>
 80014ec:	2400925b 	.word	0x2400925b

080014f0 <vRES_6_L>:
void vRES_6_L(){      resetbit(&reg.L, 6);}
 80014f0:	2106      	movs	r1, #6
 80014f2:	4801      	ldr	r0, [pc, #4]	; (80014f8 <vRES_6_L+0x8>)
 80014f4:	f001 bb38 	b.w	8002b68 <resetbit>
 80014f8:	2400925a 	.word	0x2400925a

080014fc <vRES_6_A>:
void vRES_6_A(){      resetbit(&reg.A, 6);}
 80014fc:	2106      	movs	r1, #6
 80014fe:	4801      	ldr	r0, [pc, #4]	; (8001504 <vRES_6_A+0x8>)
 8001500:	f001 bb32 	b.w	8002b68 <resetbit>
 8001504:	24009255 	.word	0x24009255

08001508 <vRES_7_B>:
void vRES_7_B(){      resetbit(&reg.B, 7);}
 8001508:	2107      	movs	r1, #7
 800150a:	4801      	ldr	r0, [pc, #4]	; (8001510 <vRES_7_B+0x8>)
 800150c:	f001 bb2c 	b.w	8002b68 <resetbit>
 8001510:	24009257 	.word	0x24009257

08001514 <vRES_7_C>:
void vRES_7_C(){      resetbit(&reg.C, 7);}
 8001514:	2107      	movs	r1, #7
 8001516:	4801      	ldr	r0, [pc, #4]	; (800151c <vRES_7_C+0x8>)
 8001518:	f001 bb26 	b.w	8002b68 <resetbit>
 800151c:	24009256 	.word	0x24009256

08001520 <vRES_7_D>:
void vRES_7_D(){      resetbit(&reg.D, 7);}
 8001520:	2107      	movs	r1, #7
 8001522:	4801      	ldr	r0, [pc, #4]	; (8001528 <vRES_7_D+0x8>)
 8001524:	f001 bb20 	b.w	8002b68 <resetbit>
 8001528:	24009259 	.word	0x24009259

0800152c <vRES_7_E>:
void vRES_7_E(){      resetbit(&reg.E, 7);}
 800152c:	2107      	movs	r1, #7
 800152e:	4801      	ldr	r0, [pc, #4]	; (8001534 <vRES_7_E+0x8>)
 8001530:	f001 bb1a 	b.w	8002b68 <resetbit>
 8001534:	24009258 	.word	0x24009258

08001538 <vRES_7_H>:
void vRES_7_H(){      resetbit(&reg.H, 7);}
 8001538:	2107      	movs	r1, #7
 800153a:	4801      	ldr	r0, [pc, #4]	; (8001540 <vRES_7_H+0x8>)
 800153c:	f001 bb14 	b.w	8002b68 <resetbit>
 8001540:	2400925b 	.word	0x2400925b

08001544 <vRES_7_L>:
void vRES_7_L(){      resetbit(&reg.L, 7);}
 8001544:	2107      	movs	r1, #7
 8001546:	4801      	ldr	r0, [pc, #4]	; (800154c <vRES_7_L+0x8>)
 8001548:	f001 bb0e 	b.w	8002b68 <resetbit>
 800154c:	2400925a 	.word	0x2400925a

08001550 <vRES_7_A>:
void vRES_7_A(){      resetbit(&reg.A, 7);}
 8001550:	2107      	movs	r1, #7
 8001552:	4801      	ldr	r0, [pc, #4]	; (8001558 <vRES_7_A+0x8>)
 8001554:	f001 bb08 	b.w	8002b68 <resetbit>
 8001558:	24009255 	.word	0x24009255

0800155c <vJR_C_r8>:
void vJR_C_r8(){      customDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4d08      	ldr	r5, [pc, #32]	; (8001580 <vJR_C_r8+0x24>)
 8001560:	462c      	mov	r4, r5
 8001562:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8001566:	3801      	subs	r0, #1
 8001568:	b280      	uxth	r0, r0
 800156a:	f001 ffe1 	bl	8003530 <ucGBMemoryRead>
 800156e:	4629      	mov	r1, r5
 8001570:	4602      	mov	r2, r0
 8001572:	4620      	mov	r0, r4
 8001574:	f001 fc4e 	bl	8002e14 <vGBFunctionJR_C>
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <vJR_C_r8+0x28>)
 800157a:	7018      	strb	r0, [r3, #0]
 800157c:	bd38      	pop	{r3, r4, r5, pc}
 800157e:	bf00      	nop
 8001580:	24009254 	.word	0x24009254
 8001584:	2400908c 	.word	0x2400908c

08001588 <vADD_A_B>:
void vADD_A_B(){      vGBFunctionADD(&reg.A, &reg.F, reg.B);}
 8001588:	4902      	ldr	r1, [pc, #8]	; (8001594 <vADD_A_B+0xc>)
 800158a:	78ca      	ldrb	r2, [r1, #3]
 800158c:	1c48      	adds	r0, r1, #1
 800158e:	f001 bc4d 	b.w	8002e2c <vGBFunctionADD>
 8001592:	bf00      	nop
 8001594:	24009254 	.word	0x24009254

08001598 <vADD_A_C>:
void vADD_A_C(){      vGBFunctionADD(&reg.A, &reg.F, reg.C);}
 8001598:	4902      	ldr	r1, [pc, #8]	; (80015a4 <vADD_A_C+0xc>)
 800159a:	788a      	ldrb	r2, [r1, #2]
 800159c:	1c48      	adds	r0, r1, #1
 800159e:	f001 bc45 	b.w	8002e2c <vGBFunctionADD>
 80015a2:	bf00      	nop
 80015a4:	24009254 	.word	0x24009254

080015a8 <vADD_A_D>:
void vADD_A_D(){      vGBFunctionADD(&reg.A, &reg.F, reg.D);}
 80015a8:	4902      	ldr	r1, [pc, #8]	; (80015b4 <vADD_A_D+0xc>)
 80015aa:	794a      	ldrb	r2, [r1, #5]
 80015ac:	1c48      	adds	r0, r1, #1
 80015ae:	f001 bc3d 	b.w	8002e2c <vGBFunctionADD>
 80015b2:	bf00      	nop
 80015b4:	24009254 	.word	0x24009254

080015b8 <vADD_A_E>:
void vADD_A_E(){      vGBFunctionADD(&reg.A, &reg.F, reg.E);}
 80015b8:	4902      	ldr	r1, [pc, #8]	; (80015c4 <vADD_A_E+0xc>)
 80015ba:	790a      	ldrb	r2, [r1, #4]
 80015bc:	1c48      	adds	r0, r1, #1
 80015be:	f001 bc35 	b.w	8002e2c <vGBFunctionADD>
 80015c2:	bf00      	nop
 80015c4:	24009254 	.word	0x24009254

080015c8 <vADD_A_H>:
void vADD_A_H(){      vGBFunctionADD(&reg.A, &reg.F, reg.H);}
 80015c8:	4902      	ldr	r1, [pc, #8]	; (80015d4 <vADD_A_H+0xc>)
 80015ca:	79ca      	ldrb	r2, [r1, #7]
 80015cc:	1c48      	adds	r0, r1, #1
 80015ce:	f001 bc2d 	b.w	8002e2c <vGBFunctionADD>
 80015d2:	bf00      	nop
 80015d4:	24009254 	.word	0x24009254

080015d8 <vADD_A_L>:
void vADD_A_L(){      vGBFunctionADD(&reg.A, &reg.F, reg.L);}
 80015d8:	4902      	ldr	r1, [pc, #8]	; (80015e4 <vADD_A_L+0xc>)
 80015da:	798a      	ldrb	r2, [r1, #6]
 80015dc:	1c48      	adds	r0, r1, #1
 80015de:	f001 bc25 	b.w	8002e2c <vGBFunctionADD>
 80015e2:	bf00      	nop
 80015e4:	24009254 	.word	0x24009254

080015e8 <vADD_A_HL>:
void vADD_A_HL(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80015e8:	b510      	push	{r4, lr}
 80015ea:	4c05      	ldr	r4, [pc, #20]	; (8001600 <vADD_A_HL+0x18>)
 80015ec:	88e0      	ldrh	r0, [r4, #6]
 80015ee:	f001 ff9f 	bl	8003530 <ucGBMemoryRead>
 80015f2:	4621      	mov	r1, r4
 80015f4:	4602      	mov	r2, r0
 80015f6:	1c60      	adds	r0, r4, #1
 80015f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015fc:	f001 bc16 	b.w	8002e2c <vGBFunctionADD>
 8001600:	24009254 	.word	0x24009254

08001604 <vADD_A_A>:
void vADD_A_A(){      vGBFunctionADD(&reg.A, &reg.F, reg.A);}
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <vADD_A_A+0xc>)
 8001606:	4601      	mov	r1, r0
 8001608:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800160c:	f001 bc0e 	b.w	8002e2c <vGBFunctionADD>
 8001610:	24009254 	.word	0x24009254

08001614 <vADD_A_d8>:
void vADD_A_d8(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001614:	b510      	push	{r4, lr}
 8001616:	4c06      	ldr	r4, [pc, #24]	; (8001630 <vADD_A_d8+0x1c>)
 8001618:	8960      	ldrh	r0, [r4, #10]
 800161a:	3801      	subs	r0, #1
 800161c:	b280      	uxth	r0, r0
 800161e:	f001 ff87 	bl	8003530 <ucGBMemoryRead>
 8001622:	4621      	mov	r1, r4
 8001624:	4602      	mov	r2, r0
 8001626:	1c60      	adds	r0, r4, #1
 8001628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800162c:	f001 bbfe 	b.w	8002e2c <vGBFunctionADD>
 8001630:	24009254 	.word	0x24009254

08001634 <vADC_A_d8>:
 8001634:	f7ff bfee 	b.w	8001614 <vADD_A_d8>

08001638 <vADC_A_B>:
void vADC_A_B(){      vGBFunctionADC(&reg.A, &reg.F, reg.B);}
 8001638:	4902      	ldr	r1, [pc, #8]	; (8001644 <vADC_A_B+0xc>)
 800163a:	78ca      	ldrb	r2, [r1, #3]
 800163c:	1c48      	adds	r0, r1, #1
 800163e:	f001 bc19 	b.w	8002e74 <vGBFunctionADC>
 8001642:	bf00      	nop
 8001644:	24009254 	.word	0x24009254

08001648 <vADC_A_C>:
void vADC_A_C(){      vGBFunctionADC(&reg.A, &reg.F, reg.C);}
 8001648:	4902      	ldr	r1, [pc, #8]	; (8001654 <vADC_A_C+0xc>)
 800164a:	788a      	ldrb	r2, [r1, #2]
 800164c:	1c48      	adds	r0, r1, #1
 800164e:	f001 bc11 	b.w	8002e74 <vGBFunctionADC>
 8001652:	bf00      	nop
 8001654:	24009254 	.word	0x24009254

08001658 <vADC_A_D>:
void vADC_A_D(){      vGBFunctionADC(&reg.A, &reg.F, reg.D);}
 8001658:	4902      	ldr	r1, [pc, #8]	; (8001664 <vADC_A_D+0xc>)
 800165a:	794a      	ldrb	r2, [r1, #5]
 800165c:	1c48      	adds	r0, r1, #1
 800165e:	f001 bc09 	b.w	8002e74 <vGBFunctionADC>
 8001662:	bf00      	nop
 8001664:	24009254 	.word	0x24009254

08001668 <vADC_A_E>:
void vADC_A_E(){      vGBFunctionADC(&reg.A, &reg.F, reg.E);}
 8001668:	4902      	ldr	r1, [pc, #8]	; (8001674 <vADC_A_E+0xc>)
 800166a:	790a      	ldrb	r2, [r1, #4]
 800166c:	1c48      	adds	r0, r1, #1
 800166e:	f001 bc01 	b.w	8002e74 <vGBFunctionADC>
 8001672:	bf00      	nop
 8001674:	24009254 	.word	0x24009254

08001678 <vADC_A_H>:
void vADC_A_H(){      vGBFunctionADC(&reg.A, &reg.F, reg.H);}
 8001678:	4902      	ldr	r1, [pc, #8]	; (8001684 <vADC_A_H+0xc>)
 800167a:	79ca      	ldrb	r2, [r1, #7]
 800167c:	1c48      	adds	r0, r1, #1
 800167e:	f001 bbf9 	b.w	8002e74 <vGBFunctionADC>
 8001682:	bf00      	nop
 8001684:	24009254 	.word	0x24009254

08001688 <vADC_A_L>:
void vADC_A_L(){      vGBFunctionADC(&reg.A, &reg.F, reg.L);}
 8001688:	4902      	ldr	r1, [pc, #8]	; (8001694 <vADC_A_L+0xc>)
 800168a:	798a      	ldrb	r2, [r1, #6]
 800168c:	1c48      	adds	r0, r1, #1
 800168e:	f001 bbf1 	b.w	8002e74 <vGBFunctionADC>
 8001692:	bf00      	nop
 8001694:	24009254 	.word	0x24009254

08001698 <vADC_A_HL>:
void vADC_A_HL(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001698:	b510      	push	{r4, lr}
 800169a:	4c05      	ldr	r4, [pc, #20]	; (80016b0 <vADC_A_HL+0x18>)
 800169c:	88e0      	ldrh	r0, [r4, #6]
 800169e:	f001 ff47 	bl	8003530 <ucGBMemoryRead>
 80016a2:	4621      	mov	r1, r4
 80016a4:	4602      	mov	r2, r0
 80016a6:	1c60      	adds	r0, r4, #1
 80016a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016ac:	f001 bbe2 	b.w	8002e74 <vGBFunctionADC>
 80016b0:	24009254 	.word	0x24009254

080016b4 <vADC_A_A>:
void vADC_A_A(){      vGBFunctionADC(&reg.A, &reg.F, reg.A);}
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <vADC_A_A+0xc>)
 80016b6:	4601      	mov	r1, r0
 80016b8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80016bc:	f001 bbda 	b.w	8002e74 <vGBFunctionADC>
 80016c0:	24009254 	.word	0x24009254

080016c4 <vSUB_B>:
void vSUB_B(){        vGBFunctionSUB(&reg.A, &reg.F, reg.B);}
 80016c4:	4902      	ldr	r1, [pc, #8]	; (80016d0 <vSUB_B+0xc>)
 80016c6:	78ca      	ldrb	r2, [r1, #3]
 80016c8:	1c48      	adds	r0, r1, #1
 80016ca:	f001 bbf9 	b.w	8002ec0 <vGBFunctionSUB>
 80016ce:	bf00      	nop
 80016d0:	24009254 	.word	0x24009254

080016d4 <vSUB_C>:
void vSUB_C(){        vGBFunctionSUB(&reg.A, &reg.F, reg.C);}
 80016d4:	4902      	ldr	r1, [pc, #8]	; (80016e0 <vSUB_C+0xc>)
 80016d6:	788a      	ldrb	r2, [r1, #2]
 80016d8:	1c48      	adds	r0, r1, #1
 80016da:	f001 bbf1 	b.w	8002ec0 <vGBFunctionSUB>
 80016de:	bf00      	nop
 80016e0:	24009254 	.word	0x24009254

080016e4 <vSUB_D>:
void vSUB_D(){        vGBFunctionSUB(&reg.A, &reg.F, reg.D);}
 80016e4:	4902      	ldr	r1, [pc, #8]	; (80016f0 <vSUB_D+0xc>)
 80016e6:	794a      	ldrb	r2, [r1, #5]
 80016e8:	1c48      	adds	r0, r1, #1
 80016ea:	f001 bbe9 	b.w	8002ec0 <vGBFunctionSUB>
 80016ee:	bf00      	nop
 80016f0:	24009254 	.word	0x24009254

080016f4 <vSUB_E>:
void vSUB_E(){        vGBFunctionSUB(&reg.A, &reg.F, reg.E);}
 80016f4:	4902      	ldr	r1, [pc, #8]	; (8001700 <vSUB_E+0xc>)
 80016f6:	790a      	ldrb	r2, [r1, #4]
 80016f8:	1c48      	adds	r0, r1, #1
 80016fa:	f001 bbe1 	b.w	8002ec0 <vGBFunctionSUB>
 80016fe:	bf00      	nop
 8001700:	24009254 	.word	0x24009254

08001704 <vSUB_H>:
void vSUB_H(){        vGBFunctionSUB(&reg.A, &reg.F, reg.H);}
 8001704:	4902      	ldr	r1, [pc, #8]	; (8001710 <vSUB_H+0xc>)
 8001706:	79ca      	ldrb	r2, [r1, #7]
 8001708:	1c48      	adds	r0, r1, #1
 800170a:	f001 bbd9 	b.w	8002ec0 <vGBFunctionSUB>
 800170e:	bf00      	nop
 8001710:	24009254 	.word	0x24009254

08001714 <vSUB_L>:
void vSUB_L(){        vGBFunctionSUB(&reg.A, &reg.F, reg.L);}
 8001714:	4902      	ldr	r1, [pc, #8]	; (8001720 <vSUB_L+0xc>)
 8001716:	798a      	ldrb	r2, [r1, #6]
 8001718:	1c48      	adds	r0, r1, #1
 800171a:	f001 bbd1 	b.w	8002ec0 <vGBFunctionSUB>
 800171e:	bf00      	nop
 8001720:	24009254 	.word	0x24009254

08001724 <vSUB_HL>:
void vSUB_HL(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001724:	b510      	push	{r4, lr}
 8001726:	4c05      	ldr	r4, [pc, #20]	; (800173c <vSUB_HL+0x18>)
 8001728:	88e0      	ldrh	r0, [r4, #6]
 800172a:	f001 ff01 	bl	8003530 <ucGBMemoryRead>
 800172e:	4621      	mov	r1, r4
 8001730:	4602      	mov	r2, r0
 8001732:	1c60      	adds	r0, r4, #1
 8001734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001738:	f001 bbc2 	b.w	8002ec0 <vGBFunctionSUB>
 800173c:	24009254 	.word	0x24009254

08001740 <vSUB_A>:
void vSUB_A(){        vGBFunctionSUB(&reg.A, &reg.F, reg.A);}
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <vSUB_A+0xc>)
 8001742:	4601      	mov	r1, r0
 8001744:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001748:	f001 bbba 	b.w	8002ec0 <vGBFunctionSUB>
 800174c:	24009254 	.word	0x24009254

08001750 <vSUB_d8>:
void vSUB_d8(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001750:	b510      	push	{r4, lr}
 8001752:	4c06      	ldr	r4, [pc, #24]	; (800176c <vSUB_d8+0x1c>)
 8001754:	8960      	ldrh	r0, [r4, #10]
 8001756:	3801      	subs	r0, #1
 8001758:	b280      	uxth	r0, r0
 800175a:	f001 fee9 	bl	8003530 <ucGBMemoryRead>
 800175e:	4621      	mov	r1, r4
 8001760:	4602      	mov	r2, r0
 8001762:	1c60      	adds	r0, r4, #1
 8001764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001768:	f001 bbaa 	b.w	8002ec0 <vGBFunctionSUB>
 800176c:	24009254 	.word	0x24009254

08001770 <vSBC_A_B>:
void vSBC_A_B(){      vGBFunctionSBC(&reg.A, &reg.F, reg.B);}
 8001770:	4902      	ldr	r1, [pc, #8]	; (800177c <vSBC_A_B+0xc>)
 8001772:	78ca      	ldrb	r2, [r1, #3]
 8001774:	1c48      	adds	r0, r1, #1
 8001776:	f001 bbd9 	b.w	8002f2c <vGBFunctionSBC>
 800177a:	bf00      	nop
 800177c:	24009254 	.word	0x24009254

08001780 <vSBC_A_C>:
void vSBC_A_C(){      vGBFunctionSBC(&reg.A, &reg.F, reg.C);}
 8001780:	4902      	ldr	r1, [pc, #8]	; (800178c <vSBC_A_C+0xc>)
 8001782:	788a      	ldrb	r2, [r1, #2]
 8001784:	1c48      	adds	r0, r1, #1
 8001786:	f001 bbd1 	b.w	8002f2c <vGBFunctionSBC>
 800178a:	bf00      	nop
 800178c:	24009254 	.word	0x24009254

08001790 <vSBC_A_D>:
void vSBC_A_D(){      vGBFunctionSBC(&reg.A, &reg.F, reg.D);}
 8001790:	4902      	ldr	r1, [pc, #8]	; (800179c <vSBC_A_D+0xc>)
 8001792:	794a      	ldrb	r2, [r1, #5]
 8001794:	1c48      	adds	r0, r1, #1
 8001796:	f001 bbc9 	b.w	8002f2c <vGBFunctionSBC>
 800179a:	bf00      	nop
 800179c:	24009254 	.word	0x24009254

080017a0 <vSBC_A_E>:
void vSBC_A_E(){      vGBFunctionSBC(&reg.A, &reg.F, reg.E);}
 80017a0:	4902      	ldr	r1, [pc, #8]	; (80017ac <vSBC_A_E+0xc>)
 80017a2:	790a      	ldrb	r2, [r1, #4]
 80017a4:	1c48      	adds	r0, r1, #1
 80017a6:	f001 bbc1 	b.w	8002f2c <vGBFunctionSBC>
 80017aa:	bf00      	nop
 80017ac:	24009254 	.word	0x24009254

080017b0 <vSBC_A_H>:
void vSBC_A_H(){      vGBFunctionSBC(&reg.A, &reg.F, reg.H);}
 80017b0:	4902      	ldr	r1, [pc, #8]	; (80017bc <vSBC_A_H+0xc>)
 80017b2:	79ca      	ldrb	r2, [r1, #7]
 80017b4:	1c48      	adds	r0, r1, #1
 80017b6:	f001 bbb9 	b.w	8002f2c <vGBFunctionSBC>
 80017ba:	bf00      	nop
 80017bc:	24009254 	.word	0x24009254

080017c0 <vSBC_A_L>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
 80017c0:	4902      	ldr	r1, [pc, #8]	; (80017cc <vSBC_A_L+0xc>)
 80017c2:	798a      	ldrb	r2, [r1, #6]
 80017c4:	1c48      	adds	r0, r1, #1
 80017c6:	f001 bbb1 	b.w	8002f2c <vGBFunctionSBC>
 80017ca:	bf00      	nop
 80017cc:	24009254 	.word	0x24009254

080017d0 <vSBC_A_HL>:
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80017d0:	b510      	push	{r4, lr}
 80017d2:	4c05      	ldr	r4, [pc, #20]	; (80017e8 <vSBC_A_HL+0x18>)
 80017d4:	88e0      	ldrh	r0, [r4, #6]
 80017d6:	f001 feab 	bl	8003530 <ucGBMemoryRead>
 80017da:	4621      	mov	r1, r4
 80017dc:	4602      	mov	r2, r0
 80017de:	1c60      	adds	r0, r4, #1
 80017e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017e4:	f001 bba2 	b.w	8002f2c <vGBFunctionSBC>
 80017e8:	24009254 	.word	0x24009254

080017ec <vSBC_A_A>:
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <vSBC_A_A+0xc>)
 80017ee:	4601      	mov	r1, r0
 80017f0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80017f4:	f001 bb9a 	b.w	8002f2c <vGBFunctionSBC>
 80017f8:	24009254 	.word	0x24009254

080017fc <vSBC_A_d8>:
void vSBC_A_d8(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80017fc:	b510      	push	{r4, lr}
 80017fe:	4c06      	ldr	r4, [pc, #24]	; (8001818 <vSBC_A_d8+0x1c>)
 8001800:	8960      	ldrh	r0, [r4, #10]
 8001802:	3801      	subs	r0, #1
 8001804:	b280      	uxth	r0, r0
 8001806:	f001 fe93 	bl	8003530 <ucGBMemoryRead>
 800180a:	4621      	mov	r1, r4
 800180c:	4602      	mov	r2, r0
 800180e:	1c60      	adds	r0, r4, #1
 8001810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001814:	f001 bb8a 	b.w	8002f2c <vGBFunctionSBC>
 8001818:	24009254 	.word	0x24009254

0800181c <vCP_B>:
void vCP_B(){         vGBFunctionCP(reg.A, &reg.F, reg.B);}
 800181c:	4902      	ldr	r1, [pc, #8]	; (8001828 <vCP_B+0xc>)
 800181e:	78ca      	ldrb	r2, [r1, #3]
 8001820:	7848      	ldrb	r0, [r1, #1]
 8001822:	f001 bbb7 	b.w	8002f94 <vGBFunctionCP>
 8001826:	bf00      	nop
 8001828:	24009254 	.word	0x24009254

0800182c <vCP_C>:
void vCP_C(){         vGBFunctionCP(reg.A, &reg.F, reg.C);}
 800182c:	4902      	ldr	r1, [pc, #8]	; (8001838 <vCP_C+0xc>)
 800182e:	788a      	ldrb	r2, [r1, #2]
 8001830:	7848      	ldrb	r0, [r1, #1]
 8001832:	f001 bbaf 	b.w	8002f94 <vGBFunctionCP>
 8001836:	bf00      	nop
 8001838:	24009254 	.word	0x24009254

0800183c <vCP_D>:
void vCP_D(){         vGBFunctionCP(reg.A, &reg.F, reg.D);}
 800183c:	4902      	ldr	r1, [pc, #8]	; (8001848 <vCP_D+0xc>)
 800183e:	794a      	ldrb	r2, [r1, #5]
 8001840:	7848      	ldrb	r0, [r1, #1]
 8001842:	f001 bba7 	b.w	8002f94 <vGBFunctionCP>
 8001846:	bf00      	nop
 8001848:	24009254 	.word	0x24009254

0800184c <vCP_E>:
void vCP_E(){         vGBFunctionCP(reg.A, &reg.F, reg.E);}
 800184c:	4902      	ldr	r1, [pc, #8]	; (8001858 <vCP_E+0xc>)
 800184e:	790a      	ldrb	r2, [r1, #4]
 8001850:	7848      	ldrb	r0, [r1, #1]
 8001852:	f001 bb9f 	b.w	8002f94 <vGBFunctionCP>
 8001856:	bf00      	nop
 8001858:	24009254 	.word	0x24009254

0800185c <vCP_H>:
void vCP_H(){         vGBFunctionCP(reg.A, &reg.F, reg.H);}
 800185c:	4902      	ldr	r1, [pc, #8]	; (8001868 <vCP_H+0xc>)
 800185e:	79ca      	ldrb	r2, [r1, #7]
 8001860:	7848      	ldrb	r0, [r1, #1]
 8001862:	f001 bb97 	b.w	8002f94 <vGBFunctionCP>
 8001866:	bf00      	nop
 8001868:	24009254 	.word	0x24009254

0800186c <vCP_L>:
void vCP_L(){         vGBFunctionCP(reg.A, &reg.F, reg.L);}
 800186c:	4902      	ldr	r1, [pc, #8]	; (8001878 <vCP_L+0xc>)
 800186e:	798a      	ldrb	r2, [r1, #6]
 8001870:	7848      	ldrb	r0, [r1, #1]
 8001872:	f001 bb8f 	b.w	8002f94 <vGBFunctionCP>
 8001876:	bf00      	nop
 8001878:	24009254 	.word	0x24009254

0800187c <vCP_HL>:
void vCP_HL(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 800187c:	b538      	push	{r3, r4, r5, lr}
 800187e:	4c06      	ldr	r4, [pc, #24]	; (8001898 <vCP_HL+0x1c>)
 8001880:	7865      	ldrb	r5, [r4, #1]
 8001882:	88e0      	ldrh	r0, [r4, #6]
 8001884:	f001 fe54 	bl	8003530 <ucGBMemoryRead>
 8001888:	4621      	mov	r1, r4
 800188a:	4602      	mov	r2, r0
 800188c:	4628      	mov	r0, r5
 800188e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001892:	f001 bb7f 	b.w	8002f94 <vGBFunctionCP>
 8001896:	bf00      	nop
 8001898:	24009254 	.word	0x24009254

0800189c <vCP_A>:
void vCP_A(){         vGBFunctionCP(reg.A, &reg.F, reg.A);}
 800189c:	4902      	ldr	r1, [pc, #8]	; (80018a8 <vCP_A+0xc>)
 800189e:	784a      	ldrb	r2, [r1, #1]
 80018a0:	4610      	mov	r0, r2
 80018a2:	f001 bb77 	b.w	8002f94 <vGBFunctionCP>
 80018a6:	bf00      	nop
 80018a8:	24009254 	.word	0x24009254

080018ac <vCP_d8>:
void vCP_d8(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80018ac:	b538      	push	{r3, r4, r5, lr}
 80018ae:	4c07      	ldr	r4, [pc, #28]	; (80018cc <vCP_d8+0x20>)
 80018b0:	8960      	ldrh	r0, [r4, #10]
 80018b2:	7865      	ldrb	r5, [r4, #1]
 80018b4:	3801      	subs	r0, #1
 80018b6:	b280      	uxth	r0, r0
 80018b8:	f001 fe3a 	bl	8003530 <ucGBMemoryRead>
 80018bc:	4621      	mov	r1, r4
 80018be:	4602      	mov	r2, r0
 80018c0:	4628      	mov	r0, r5
 80018c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018c6:	f001 bb65 	b.w	8002f94 <vGBFunctionCP>
 80018ca:	bf00      	nop
 80018cc:	24009254 	.word	0x24009254

080018d0 <vRET>:
void vRET(){          vGBFunctionRET(&reg.SP, &reg.PC);}
 80018d0:	4901      	ldr	r1, [pc, #4]	; (80018d8 <vRET+0x8>)
 80018d2:	1e88      	subs	r0, r1, #2
 80018d4:	f001 bb7c 	b.w	8002fd0 <vGBFunctionRET>
 80018d8:	2400925e 	.word	0x2400925e

080018dc <vRETI>:
void vRETI(){         ucInterruptMasterEnable = 1; vGBFunctionRET(&reg.SP, &reg.PC);}
 80018dc:	4903      	ldr	r1, [pc, #12]	; (80018ec <vRETI+0x10>)
 80018de:	2201      	movs	r2, #1
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <vRETI+0x14>)
 80018e2:	1e88      	subs	r0, r1, #2
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	f001 bb73 	b.w	8002fd0 <vGBFunctionRET>
 80018ea:	bf00      	nop
 80018ec:	2400925e 	.word	0x2400925e
 80018f0:	24009098 	.word	0x24009098

080018f4 <vPOP_BC>:
void vPOP_BC(){       vGBFunctionPOP(&reg.SP, &reg.BC);}
 80018f4:	4901      	ldr	r1, [pc, #4]	; (80018fc <vPOP_BC+0x8>)
 80018f6:	1d88      	adds	r0, r1, #6
 80018f8:	f001 bb7e 	b.w	8002ff8 <vGBFunctionPOP>
 80018fc:	24009256 	.word	0x24009256

08001900 <vPOP_DE>:
void vPOP_DE(){       vGBFunctionPOP(&reg.SP, &reg.DE);}
 8001900:	4901      	ldr	r1, [pc, #4]	; (8001908 <vPOP_DE+0x8>)
 8001902:	1d08      	adds	r0, r1, #4
 8001904:	f001 bb78 	b.w	8002ff8 <vGBFunctionPOP>
 8001908:	24009258 	.word	0x24009258

0800190c <vPOP_HL>:
void vPOP_HL(){       vGBFunctionPOP(&reg.SP, &reg.HL);}
 800190c:	4901      	ldr	r1, [pc, #4]	; (8001914 <vPOP_HL+0x8>)
 800190e:	1c88      	adds	r0, r1, #2
 8001910:	f001 bb72 	b.w	8002ff8 <vGBFunctionPOP>
 8001914:	2400925a 	.word	0x2400925a

08001918 <vPOP_AF>:
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
 8001918:	b510      	push	{r4, lr}
 800191a:	4c05      	ldr	r4, [pc, #20]	; (8001930 <vPOP_AF+0x18>)
 800191c:	4621      	mov	r1, r4
 800191e:	f104 0008 	add.w	r0, r4, #8
 8001922:	f001 fb69 	bl	8002ff8 <vGBFunctionPOP>
 8001926:	8823      	ldrh	r3, [r4, #0]
 8001928:	f023 030f 	bic.w	r3, r3, #15
 800192c:	8023      	strh	r3, [r4, #0]
 800192e:	bd10      	pop	{r4, pc}
 8001930:	24009254 	.word	0x24009254

08001934 <vJP_NZ_a16>:
void vJP_NZ_a16(){    customDuration = vGBFunctionJP_NZ_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001934:	b570      	push	{r4, r5, r6, lr}
 8001936:	4d0d      	ldr	r5, [pc, #52]	; (800196c <vJP_NZ_a16+0x38>)
 8001938:	8968      	ldrh	r0, [r5, #10]
 800193a:	462c      	mov	r4, r5
 800193c:	3802      	subs	r0, #2
 800193e:	b280      	uxth	r0, r0
 8001940:	f001 fdf6 	bl	8003530 <ucGBMemoryRead>
 8001944:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001948:	4606      	mov	r6, r0
 800194a:	1e58      	subs	r0, r3, #1
 800194c:	b280      	uxth	r0, r0
 800194e:	f001 fdef 	bl	8003530 <ucGBMemoryRead>
 8001952:	4601      	mov	r1, r0
 8001954:	4630      	mov	r0, r6
 8001956:	f001 f8fb 	bl	8002b50 <concat_16bit_bigEndian>
 800195a:	4629      	mov	r1, r5
 800195c:	4602      	mov	r2, r0
 800195e:	4620      	mov	r0, r4
 8001960:	f001 fb4c 	bl	8002ffc <vGBFunctionJP_NZ_a16>
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <vJP_NZ_a16+0x3c>)
 8001966:	7018      	strb	r0, [r3, #0]
 8001968:	bd70      	pop	{r4, r5, r6, pc}
 800196a:	bf00      	nop
 800196c:	24009254 	.word	0x24009254
 8001970:	2400908c 	.word	0x2400908c

08001974 <vCALL_NZ_a16>:
void vCALL_NZ_a16(){  customDuration = vGBFunctionCALL_NZ_a16(&reg.PC, &reg.F, &reg.SP);}
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <vCALL_NZ_a16+0x14>)
 8001976:	b508      	push	{r3, lr}
 8001978:	f1a2 0108 	sub.w	r1, r2, #8
 800197c:	1c90      	adds	r0, r2, #2
 800197e:	f001 fb59 	bl	8003034 <vGBFunctionCALL_NZ_a16>
 8001982:	4b02      	ldr	r3, [pc, #8]	; (800198c <vCALL_NZ_a16+0x18>)
 8001984:	7018      	strb	r0, [r3, #0]
 8001986:	bd08      	pop	{r3, pc}
 8001988:	2400925c 	.word	0x2400925c
 800198c:	2400908c 	.word	0x2400908c

08001990 <vPUSH_BC>:
void vPUSH_BC(){      vGBFunctionPUSH(&reg.SP, &reg.BC);}
 8001990:	4901      	ldr	r1, [pc, #4]	; (8001998 <vPUSH_BC+0x8>)
 8001992:	1d88      	adds	r0, r1, #6
 8001994:	f001 bb3a 	b.w	800300c <vGBFunctionPUSH>
 8001998:	24009256 	.word	0x24009256

0800199c <vRST_00H>:
void vRST_00H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0000;}
 800199c:	b510      	push	{r4, lr}
 800199e:	4c04      	ldr	r4, [pc, #16]	; (80019b0 <vRST_00H+0x14>)
 80019a0:	4621      	mov	r1, r4
 80019a2:	1ea0      	subs	r0, r4, #2
 80019a4:	f001 fb32 	bl	800300c <vGBFunctionPUSH>
 80019a8:	3c0a      	subs	r4, #10
 80019aa:	2300      	movs	r3, #0
 80019ac:	8163      	strh	r3, [r4, #10]
 80019ae:	bd10      	pop	{r4, pc}
 80019b0:	2400925e 	.word	0x2400925e

080019b4 <vCALL_a16>:
void vCALL_a16(){     vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 80019b4:	490b      	ldr	r1, [pc, #44]	; (80019e4 <vCALL_a16+0x30>)
 80019b6:	b538      	push	{r3, r4, r5, lr}
 80019b8:	460c      	mov	r4, r1
 80019ba:	1e88      	subs	r0, r1, #2
 80019bc:	f001 fb26 	bl	800300c <vGBFunctionPUSH>
 80019c0:	f834 090a 	ldrh.w	r0, [r4], #-10
 80019c4:	3802      	subs	r0, #2
 80019c6:	b280      	uxth	r0, r0
 80019c8:	f001 fdb2 	bl	8003530 <ucGBMemoryRead>
 80019cc:	8963      	ldrh	r3, [r4, #10]
 80019ce:	4605      	mov	r5, r0
 80019d0:	1e58      	subs	r0, r3, #1
 80019d2:	b280      	uxth	r0, r0
 80019d4:	f001 fdac 	bl	8003530 <ucGBMemoryRead>
 80019d8:	4601      	mov	r1, r0
 80019da:	4628      	mov	r0, r5
 80019dc:	f001 f8b8 	bl	8002b50 <concat_16bit_bigEndian>
 80019e0:	8160      	strh	r0, [r4, #10]
 80019e2:	bd38      	pop	{r3, r4, r5, pc}
 80019e4:	2400925e 	.word	0x2400925e

080019e8 <vRST_08H>:
void vRST_08H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0008;}
 80019e8:	b510      	push	{r4, lr}
 80019ea:	4c04      	ldr	r4, [pc, #16]	; (80019fc <vRST_08H+0x14>)
 80019ec:	4621      	mov	r1, r4
 80019ee:	1ea0      	subs	r0, r4, #2
 80019f0:	f001 fb0c 	bl	800300c <vGBFunctionPUSH>
 80019f4:	2308      	movs	r3, #8
 80019f6:	8023      	strh	r3, [r4, #0]
 80019f8:	bd10      	pop	{r4, pc}
 80019fa:	bf00      	nop
 80019fc:	2400925e 	.word	0x2400925e

08001a00 <vPUSH_DE>:
void vPUSH_DE(){      vGBFunctionPUSH(&reg.SP, &reg.DE);}
 8001a00:	4901      	ldr	r1, [pc, #4]	; (8001a08 <vPUSH_DE+0x8>)
 8001a02:	1d08      	adds	r0, r1, #4
 8001a04:	f001 bb02 	b.w	800300c <vGBFunctionPUSH>
 8001a08:	24009258 	.word	0x24009258

08001a0c <vRST_10H>:
void vRST_10H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0010;}
 8001a0c:	b510      	push	{r4, lr}
 8001a0e:	4c04      	ldr	r4, [pc, #16]	; (8001a20 <vRST_10H+0x14>)
 8001a10:	4621      	mov	r1, r4
 8001a12:	1ea0      	subs	r0, r4, #2
 8001a14:	f001 fafa 	bl	800300c <vGBFunctionPUSH>
 8001a18:	2310      	movs	r3, #16
 8001a1a:	8023      	strh	r3, [r4, #0]
 8001a1c:	bd10      	pop	{r4, pc}
 8001a1e:	bf00      	nop
 8001a20:	2400925e 	.word	0x2400925e

08001a24 <vRST_18H>:
void vRST_18H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0018;}
 8001a24:	b510      	push	{r4, lr}
 8001a26:	4c04      	ldr	r4, [pc, #16]	; (8001a38 <vRST_18H+0x14>)
 8001a28:	4621      	mov	r1, r4
 8001a2a:	1ea0      	subs	r0, r4, #2
 8001a2c:	f001 faee 	bl	800300c <vGBFunctionPUSH>
 8001a30:	2318      	movs	r3, #24
 8001a32:	8023      	strh	r3, [r4, #0]
 8001a34:	bd10      	pop	{r4, pc}
 8001a36:	bf00      	nop
 8001a38:	2400925e 	.word	0x2400925e

08001a3c <vPUSH_HL>:
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
 8001a3c:	4901      	ldr	r1, [pc, #4]	; (8001a44 <vPUSH_HL+0x8>)
 8001a3e:	1c88      	adds	r0, r1, #2
 8001a40:	f001 bae4 	b.w	800300c <vGBFunctionPUSH>
 8001a44:	2400925a 	.word	0x2400925a

08001a48 <vRST20H>:
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	4c04      	ldr	r4, [pc, #16]	; (8001a5c <vRST20H+0x14>)
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	1ea0      	subs	r0, r4, #2
 8001a50:	f001 fadc 	bl	800300c <vGBFunctionPUSH>
 8001a54:	2320      	movs	r3, #32
 8001a56:	8023      	strh	r3, [r4, #0]
 8001a58:	bd10      	pop	{r4, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2400925e 	.word	0x2400925e

08001a60 <vRST_28H>:
void vRST_28H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0028;}
 8001a60:	b510      	push	{r4, lr}
 8001a62:	4c04      	ldr	r4, [pc, #16]	; (8001a74 <vRST_28H+0x14>)
 8001a64:	4621      	mov	r1, r4
 8001a66:	1ea0      	subs	r0, r4, #2
 8001a68:	f001 fad0 	bl	800300c <vGBFunctionPUSH>
 8001a6c:	2328      	movs	r3, #40	; 0x28
 8001a6e:	8023      	strh	r3, [r4, #0]
 8001a70:	bd10      	pop	{r4, pc}
 8001a72:	bf00      	nop
 8001a74:	2400925e 	.word	0x2400925e

08001a78 <vPUSH_AF>:
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
 8001a78:	4902      	ldr	r1, [pc, #8]	; (8001a84 <vPUSH_AF+0xc>)
 8001a7a:	f101 0008 	add.w	r0, r1, #8
 8001a7e:	f001 bac5 	b.w	800300c <vGBFunctionPUSH>
 8001a82:	bf00      	nop
 8001a84:	24009254 	.word	0x24009254

08001a88 <vRST_30H>:
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
 8001a88:	b510      	push	{r4, lr}
 8001a8a:	4c04      	ldr	r4, [pc, #16]	; (8001a9c <vRST_30H+0x14>)
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	1ea0      	subs	r0, r4, #2
 8001a90:	f001 fabc 	bl	800300c <vGBFunctionPUSH>
 8001a94:	2330      	movs	r3, #48	; 0x30
 8001a96:	8023      	strh	r3, [r4, #0]
 8001a98:	bd10      	pop	{r4, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2400925e 	.word	0x2400925e

08001aa0 <vRST_38H>:
void vRST_38H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0038;}
 8001aa0:	b510      	push	{r4, lr}
 8001aa2:	4c04      	ldr	r4, [pc, #16]	; (8001ab4 <vRST_38H+0x14>)
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	1ea0      	subs	r0, r4, #2
 8001aa8:	f001 fab0 	bl	800300c <vGBFunctionPUSH>
 8001aac:	2338      	movs	r3, #56	; 0x38
 8001aae:	8023      	strh	r3, [r4, #0]
 8001ab0:	bd10      	pop	{r4, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2400925e 	.word	0x2400925e

08001ab8 <vJP_Z_a16>:
void vJP_Z_a16(){     customDuration = vGBFunctionJP_Z_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	4d0d      	ldr	r5, [pc, #52]	; (8001af0 <vJP_Z_a16+0x38>)
 8001abc:	8968      	ldrh	r0, [r5, #10]
 8001abe:	462c      	mov	r4, r5
 8001ac0:	3802      	subs	r0, #2
 8001ac2:	b280      	uxth	r0, r0
 8001ac4:	f001 fd34 	bl	8003530 <ucGBMemoryRead>
 8001ac8:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001acc:	4606      	mov	r6, r0
 8001ace:	1e58      	subs	r0, r3, #1
 8001ad0:	b280      	uxth	r0, r0
 8001ad2:	f001 fd2d 	bl	8003530 <ucGBMemoryRead>
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	4630      	mov	r0, r6
 8001ada:	f001 f839 	bl	8002b50 <concat_16bit_bigEndian>
 8001ade:	4629      	mov	r1, r5
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f001 fac2 	bl	800306c <vGBFunctionJP_Z_a16>
 8001ae8:	4b02      	ldr	r3, [pc, #8]	; (8001af4 <vJP_Z_a16+0x3c>)
 8001aea:	7018      	strb	r0, [r3, #0]
 8001aec:	bd70      	pop	{r4, r5, r6, pc}
 8001aee:	bf00      	nop
 8001af0:	24009254 	.word	0x24009254
 8001af4:	2400908c 	.word	0x2400908c

08001af8 <vCALL_Z_a16>:
void vCALL_Z_a16(){   customDuration = vGBFunctionCALL_Z_a16(&reg.PC, &reg.F, &reg.SP);}
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <vCALL_Z_a16+0x14>)
 8001afa:	b508      	push	{r3, lr}
 8001afc:	f1a2 0108 	sub.w	r1, r2, #8
 8001b00:	1c90      	adds	r0, r2, #2
 8001b02:	f001 fabb 	bl	800307c <vGBFunctionCALL_Z_a16>
 8001b06:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <vCALL_Z_a16+0x18>)
 8001b08:	7018      	strb	r0, [r3, #0]
 8001b0a:	bd08      	pop	{r3, pc}
 8001b0c:	2400925c 	.word	0x2400925c
 8001b10:	2400908c 	.word	0x2400908c

08001b14 <vJP_NC_a16>:
void vJP_NC_a16(){    customDuration = vGBFunctionJP_NC_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b14:	b570      	push	{r4, r5, r6, lr}
 8001b16:	4d0d      	ldr	r5, [pc, #52]	; (8001b4c <vJP_NC_a16+0x38>)
 8001b18:	8968      	ldrh	r0, [r5, #10]
 8001b1a:	462c      	mov	r4, r5
 8001b1c:	3802      	subs	r0, #2
 8001b1e:	b280      	uxth	r0, r0
 8001b20:	f001 fd06 	bl	8003530 <ucGBMemoryRead>
 8001b24:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001b28:	4606      	mov	r6, r0
 8001b2a:	1e58      	subs	r0, r3, #1
 8001b2c:	b280      	uxth	r0, r0
 8001b2e:	f001 fcff 	bl	8003530 <ucGBMemoryRead>
 8001b32:	4601      	mov	r1, r0
 8001b34:	4630      	mov	r0, r6
 8001b36:	f001 f80b 	bl	8002b50 <concat_16bit_bigEndian>
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f001 fab8 	bl	80030b4 <vGBFunctionJP_NC_a16>
 8001b44:	4b02      	ldr	r3, [pc, #8]	; (8001b50 <vJP_NC_a16+0x3c>)
 8001b46:	7018      	strb	r0, [r3, #0]
 8001b48:	bd70      	pop	{r4, r5, r6, pc}
 8001b4a:	bf00      	nop
 8001b4c:	24009254 	.word	0x24009254
 8001b50:	2400908c 	.word	0x2400908c

08001b54 <vCALL_NC_a16>:
void vCALL_NC_a16(){  customDuration = vGBFunctionCALL_NC_a16(&reg.PC, &reg.F, &reg.SP);}
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <vCALL_NC_a16+0x14>)
 8001b56:	b508      	push	{r3, lr}
 8001b58:	f1a2 0108 	sub.w	r1, r2, #8
 8001b5c:	1c90      	adds	r0, r2, #2
 8001b5e:	f001 fab1 	bl	80030c4 <vGBFunctionCALL_NC_a16>
 8001b62:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <vCALL_NC_a16+0x18>)
 8001b64:	7018      	strb	r0, [r3, #0]
 8001b66:	bd08      	pop	{r3, pc}
 8001b68:	2400925c 	.word	0x2400925c
 8001b6c:	2400908c 	.word	0x2400908c

08001b70 <vJP_C_a16>:
void vJP_C_a16(){     customDuration = vGBFunctionJP_C_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b70:	b570      	push	{r4, r5, r6, lr}
 8001b72:	4d0d      	ldr	r5, [pc, #52]	; (8001ba8 <vJP_C_a16+0x38>)
 8001b74:	8968      	ldrh	r0, [r5, #10]
 8001b76:	462c      	mov	r4, r5
 8001b78:	3802      	subs	r0, #2
 8001b7a:	b280      	uxth	r0, r0
 8001b7c:	f001 fcd8 	bl	8003530 <ucGBMemoryRead>
 8001b80:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001b84:	4606      	mov	r6, r0
 8001b86:	1e58      	subs	r0, r3, #1
 8001b88:	b280      	uxth	r0, r0
 8001b8a:	f001 fcd1 	bl	8003530 <ucGBMemoryRead>
 8001b8e:	4601      	mov	r1, r0
 8001b90:	4630      	mov	r0, r6
 8001b92:	f000 ffdd 	bl	8002b50 <concat_16bit_bigEndian>
 8001b96:	4629      	mov	r1, r5
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f001 faae 	bl	80030fc <vGBFunctionJP_C_a16>
 8001ba0:	4b02      	ldr	r3, [pc, #8]	; (8001bac <vJP_C_a16+0x3c>)
 8001ba2:	7018      	strb	r0, [r3, #0]
 8001ba4:	bd70      	pop	{r4, r5, r6, pc}
 8001ba6:	bf00      	nop
 8001ba8:	24009254 	.word	0x24009254
 8001bac:	2400908c 	.word	0x2400908c

08001bb0 <vCALL_C_a16>:
void vCALL_C_a16(){   customDuration = vGBFunctionCALL_C_a16(&reg.PC, &reg.F, &reg.SP);}
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <vCALL_C_a16+0x14>)
 8001bb2:	b508      	push	{r3, lr}
 8001bb4:	f1a2 0108 	sub.w	r1, r2, #8
 8001bb8:	1c90      	adds	r0, r2, #2
 8001bba:	f001 faa7 	bl	800310c <vGBFunctionCALL_C_a16>
 8001bbe:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <vCALL_C_a16+0x18>)
 8001bc0:	7018      	strb	r0, [r3, #0]
 8001bc2:	bd08      	pop	{r3, pc}
 8001bc4:	2400925c 	.word	0x2400925c
 8001bc8:	2400908c 	.word	0x2400908c

08001bcc <vADDs_SP_r8>:
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001bcc:	b510      	push	{r4, lr}
 8001bce:	4c07      	ldr	r4, [pc, #28]	; (8001bec <vADDs_SP_r8+0x20>)
 8001bd0:	8960      	ldrh	r0, [r4, #10]
 8001bd2:	3801      	subs	r0, #1
 8001bd4:	b280      	uxth	r0, r0
 8001bd6:	f001 fcab 	bl	8003530 <ucGBMemoryRead>
 8001bda:	4621      	mov	r1, r4
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f104 0008 	add.w	r0, r4, #8
 8001be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001be6:	f001 baad 	b.w	8003144 <vGBFunctionADD_SP_r8>
 8001bea:	bf00      	nop
 8001bec:	24009254 	.word	0x24009254

08001bf0 <vLDs_HL_SP_r8>:
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001bf0:	b510      	push	{r4, lr}
 8001bf2:	4c07      	ldr	r4, [pc, #28]	; (8001c10 <vLDs_HL_SP_r8+0x20>)
 8001bf4:	8960      	ldrh	r0, [r4, #10]
 8001bf6:	3801      	subs	r0, #1
 8001bf8:	b280      	uxth	r0, r0
 8001bfa:	f001 fc99 	bl	8003530 <ucGBMemoryRead>
 8001bfe:	4622      	mov	r2, r4
 8001c00:	4603      	mov	r3, r0
 8001c02:	f104 0108 	add.w	r1, r4, #8
 8001c06:	1da0      	adds	r0, r4, #6
 8001c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c0c:	f001 bac2 	b.w	8003194 <vGBFunctionLD_HL_SP_r8>
 8001c10:	24009254 	.word	0x24009254

08001c14 <vRLC_B>:
void vRLC_B(){        reg.B = ucGBFunctionRLC(reg.B, &reg.F);}
 8001c14:	b510      	push	{r4, lr}
 8001c16:	4c03      	ldr	r4, [pc, #12]	; (8001c24 <vRLC_B+0x10>)
 8001c18:	4621      	mov	r1, r4
 8001c1a:	78e0      	ldrb	r0, [r4, #3]
 8001c1c:	f001 fae2 	bl	80031e4 <ucGBFunctionRLC>
 8001c20:	70e0      	strb	r0, [r4, #3]
 8001c22:	bd10      	pop	{r4, pc}
 8001c24:	24009254 	.word	0x24009254

08001c28 <vRLC_C>:
void vRLC_C(){        reg.C = ucGBFunctionRLC(reg.C, &reg.F);}
 8001c28:	b510      	push	{r4, lr}
 8001c2a:	4c03      	ldr	r4, [pc, #12]	; (8001c38 <vRLC_C+0x10>)
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	78a0      	ldrb	r0, [r4, #2]
 8001c30:	f001 fad8 	bl	80031e4 <ucGBFunctionRLC>
 8001c34:	70a0      	strb	r0, [r4, #2]
 8001c36:	bd10      	pop	{r4, pc}
 8001c38:	24009254 	.word	0x24009254

08001c3c <vRLC_D>:
void vRLC_D(){        reg.D = ucGBFunctionRLC(reg.D, &reg.F);}
 8001c3c:	b510      	push	{r4, lr}
 8001c3e:	4c03      	ldr	r4, [pc, #12]	; (8001c4c <vRLC_D+0x10>)
 8001c40:	4621      	mov	r1, r4
 8001c42:	7960      	ldrb	r0, [r4, #5]
 8001c44:	f001 face 	bl	80031e4 <ucGBFunctionRLC>
 8001c48:	7160      	strb	r0, [r4, #5]
 8001c4a:	bd10      	pop	{r4, pc}
 8001c4c:	24009254 	.word	0x24009254

08001c50 <vRLC_E>:
void vRLC_E(){        reg.E = ucGBFunctionRLC(reg.E, &reg.F);}
 8001c50:	b510      	push	{r4, lr}
 8001c52:	4c03      	ldr	r4, [pc, #12]	; (8001c60 <vRLC_E+0x10>)
 8001c54:	4621      	mov	r1, r4
 8001c56:	7920      	ldrb	r0, [r4, #4]
 8001c58:	f001 fac4 	bl	80031e4 <ucGBFunctionRLC>
 8001c5c:	7120      	strb	r0, [r4, #4]
 8001c5e:	bd10      	pop	{r4, pc}
 8001c60:	24009254 	.word	0x24009254

08001c64 <vRLC_H>:
void vRLC_H(){        reg.H = ucGBFunctionRLC(reg.H, &reg.F);}
 8001c64:	b510      	push	{r4, lr}
 8001c66:	4c03      	ldr	r4, [pc, #12]	; (8001c74 <vRLC_H+0x10>)
 8001c68:	4621      	mov	r1, r4
 8001c6a:	79e0      	ldrb	r0, [r4, #7]
 8001c6c:	f001 faba 	bl	80031e4 <ucGBFunctionRLC>
 8001c70:	71e0      	strb	r0, [r4, #7]
 8001c72:	bd10      	pop	{r4, pc}
 8001c74:	24009254 	.word	0x24009254

08001c78 <vRLC_L>:
void vRLC_L(){        reg.L = ucGBFunctionRLC(reg.L, &reg.F);}
 8001c78:	b510      	push	{r4, lr}
 8001c7a:	4c03      	ldr	r4, [pc, #12]	; (8001c88 <vRLC_L+0x10>)
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	79a0      	ldrb	r0, [r4, #6]
 8001c80:	f001 fab0 	bl	80031e4 <ucGBFunctionRLC>
 8001c84:	71a0      	strb	r0, [r4, #6]
 8001c86:	bd10      	pop	{r4, pc}
 8001c88:	24009254 	.word	0x24009254

08001c8c <vRLC_HL>:
void vRLC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRLC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001c8c:	b538      	push	{r3, r4, r5, lr}
 8001c8e:	4d07      	ldr	r5, [pc, #28]	; (8001cac <vRLC_HL+0x20>)
 8001c90:	88ec      	ldrh	r4, [r5, #6]
 8001c92:	4620      	mov	r0, r4
 8001c94:	f001 fc4c 	bl	8003530 <ucGBMemoryRead>
 8001c98:	4629      	mov	r1, r5
 8001c9a:	f001 faa3 	bl	80031e4 <ucGBFunctionRLC>
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ca6:	f001 bbf5 	b.w	8003494 <vGBMemoryWrite>
 8001caa:	bf00      	nop
 8001cac:	24009254 	.word	0x24009254

08001cb0 <vRLC_A>:
void vRLC_A(){        reg.A = ucGBFunctionRLC(reg.A, &reg.F);}
 8001cb0:	b510      	push	{r4, lr}
 8001cb2:	4c03      	ldr	r4, [pc, #12]	; (8001cc0 <vRLC_A+0x10>)
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	7860      	ldrb	r0, [r4, #1]
 8001cb8:	f001 fa94 	bl	80031e4 <ucGBFunctionRLC>
 8001cbc:	7060      	strb	r0, [r4, #1]
 8001cbe:	bd10      	pop	{r4, pc}
 8001cc0:	24009254 	.word	0x24009254

08001cc4 <vRRC_B>:
void vRRC_B(){        reg.B = ucGBFunctionRRC(reg.B, &reg.F);}
 8001cc4:	b510      	push	{r4, lr}
 8001cc6:	4c03      	ldr	r4, [pc, #12]	; (8001cd4 <vRRC_B+0x10>)
 8001cc8:	4621      	mov	r1, r4
 8001cca:	78e0      	ldrb	r0, [r4, #3]
 8001ccc:	f001 faa6 	bl	800321c <ucGBFunctionRRC>
 8001cd0:	70e0      	strb	r0, [r4, #3]
 8001cd2:	bd10      	pop	{r4, pc}
 8001cd4:	24009254 	.word	0x24009254

08001cd8 <vRRC_C>:
void vRRC_C(){        reg.C = ucGBFunctionRRC(reg.C, &reg.F);}
 8001cd8:	b510      	push	{r4, lr}
 8001cda:	4c03      	ldr	r4, [pc, #12]	; (8001ce8 <vRRC_C+0x10>)
 8001cdc:	4621      	mov	r1, r4
 8001cde:	78a0      	ldrb	r0, [r4, #2]
 8001ce0:	f001 fa9c 	bl	800321c <ucGBFunctionRRC>
 8001ce4:	70a0      	strb	r0, [r4, #2]
 8001ce6:	bd10      	pop	{r4, pc}
 8001ce8:	24009254 	.word	0x24009254

08001cec <vRRC_D>:
void vRRC_D(){        reg.D = ucGBFunctionRRC(reg.D, &reg.F);}
 8001cec:	b510      	push	{r4, lr}
 8001cee:	4c03      	ldr	r4, [pc, #12]	; (8001cfc <vRRC_D+0x10>)
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	7960      	ldrb	r0, [r4, #5]
 8001cf4:	f001 fa92 	bl	800321c <ucGBFunctionRRC>
 8001cf8:	7160      	strb	r0, [r4, #5]
 8001cfa:	bd10      	pop	{r4, pc}
 8001cfc:	24009254 	.word	0x24009254

08001d00 <vRRC_E>:
void vRRC_E(){        reg.E = ucGBFunctionRRC(reg.E, &reg.F);}
 8001d00:	b510      	push	{r4, lr}
 8001d02:	4c03      	ldr	r4, [pc, #12]	; (8001d10 <vRRC_E+0x10>)
 8001d04:	4621      	mov	r1, r4
 8001d06:	7920      	ldrb	r0, [r4, #4]
 8001d08:	f001 fa88 	bl	800321c <ucGBFunctionRRC>
 8001d0c:	7120      	strb	r0, [r4, #4]
 8001d0e:	bd10      	pop	{r4, pc}
 8001d10:	24009254 	.word	0x24009254

08001d14 <vRRC_H>:
void vRRC_H(){        reg.H = ucGBFunctionRRC(reg.H, &reg.F);}
 8001d14:	b510      	push	{r4, lr}
 8001d16:	4c03      	ldr	r4, [pc, #12]	; (8001d24 <vRRC_H+0x10>)
 8001d18:	4621      	mov	r1, r4
 8001d1a:	79e0      	ldrb	r0, [r4, #7]
 8001d1c:	f001 fa7e 	bl	800321c <ucGBFunctionRRC>
 8001d20:	71e0      	strb	r0, [r4, #7]
 8001d22:	bd10      	pop	{r4, pc}
 8001d24:	24009254 	.word	0x24009254

08001d28 <vRRC_L>:
void vRRC_L(){        reg.L = ucGBFunctionRRC(reg.L, &reg.F);}
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	4c03      	ldr	r4, [pc, #12]	; (8001d38 <vRRC_L+0x10>)
 8001d2c:	4621      	mov	r1, r4
 8001d2e:	79a0      	ldrb	r0, [r4, #6]
 8001d30:	f001 fa74 	bl	800321c <ucGBFunctionRRC>
 8001d34:	71a0      	strb	r0, [r4, #6]
 8001d36:	bd10      	pop	{r4, pc}
 8001d38:	24009254 	.word	0x24009254

08001d3c <vRRC_HL>:
void vRRC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRRC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001d3c:	b538      	push	{r3, r4, r5, lr}
 8001d3e:	4d07      	ldr	r5, [pc, #28]	; (8001d5c <vRRC_HL+0x20>)
 8001d40:	88ec      	ldrh	r4, [r5, #6]
 8001d42:	4620      	mov	r0, r4
 8001d44:	f001 fbf4 	bl	8003530 <ucGBMemoryRead>
 8001d48:	4629      	mov	r1, r5
 8001d4a:	f001 fa67 	bl	800321c <ucGBFunctionRRC>
 8001d4e:	4601      	mov	r1, r0
 8001d50:	4620      	mov	r0, r4
 8001d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d56:	f001 bb9d 	b.w	8003494 <vGBMemoryWrite>
 8001d5a:	bf00      	nop
 8001d5c:	24009254 	.word	0x24009254

08001d60 <vRRC_A>:
void vRRC_A(){        reg.A = ucGBFunctionRRC(reg.A, &reg.F);}
 8001d60:	b510      	push	{r4, lr}
 8001d62:	4c03      	ldr	r4, [pc, #12]	; (8001d70 <vRRC_A+0x10>)
 8001d64:	4621      	mov	r1, r4
 8001d66:	7860      	ldrb	r0, [r4, #1]
 8001d68:	f001 fa58 	bl	800321c <ucGBFunctionRRC>
 8001d6c:	7060      	strb	r0, [r4, #1]
 8001d6e:	bd10      	pop	{r4, pc}
 8001d70:	24009254 	.word	0x24009254

08001d74 <vRL_B>:
void vRL_B(){         reg.B = ucGBFunctionRL(reg.B, &reg.F);}
 8001d74:	b510      	push	{r4, lr}
 8001d76:	4c03      	ldr	r4, [pc, #12]	; (8001d84 <vRL_B+0x10>)
 8001d78:	4621      	mov	r1, r4
 8001d7a:	78e0      	ldrb	r0, [r4, #3]
 8001d7c:	f001 fa6a 	bl	8003254 <ucGBFunctionRL>
 8001d80:	70e0      	strb	r0, [r4, #3]
 8001d82:	bd10      	pop	{r4, pc}
 8001d84:	24009254 	.word	0x24009254

08001d88 <vRL_C>:
void vRL_C(){         reg.C = ucGBFunctionRL(reg.C, &reg.F);}
 8001d88:	b510      	push	{r4, lr}
 8001d8a:	4c03      	ldr	r4, [pc, #12]	; (8001d98 <vRL_C+0x10>)
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	78a0      	ldrb	r0, [r4, #2]
 8001d90:	f001 fa60 	bl	8003254 <ucGBFunctionRL>
 8001d94:	70a0      	strb	r0, [r4, #2]
 8001d96:	bd10      	pop	{r4, pc}
 8001d98:	24009254 	.word	0x24009254

08001d9c <vRL_D>:
void vRL_D(){         reg.D = ucGBFunctionRL(reg.D, &reg.F);}
 8001d9c:	b510      	push	{r4, lr}
 8001d9e:	4c03      	ldr	r4, [pc, #12]	; (8001dac <vRL_D+0x10>)
 8001da0:	4621      	mov	r1, r4
 8001da2:	7960      	ldrb	r0, [r4, #5]
 8001da4:	f001 fa56 	bl	8003254 <ucGBFunctionRL>
 8001da8:	7160      	strb	r0, [r4, #5]
 8001daa:	bd10      	pop	{r4, pc}
 8001dac:	24009254 	.word	0x24009254

08001db0 <vRL_E>:
void vRL_E(){         reg.E = ucGBFunctionRL(reg.E, &reg.F);}
 8001db0:	b510      	push	{r4, lr}
 8001db2:	4c03      	ldr	r4, [pc, #12]	; (8001dc0 <vRL_E+0x10>)
 8001db4:	4621      	mov	r1, r4
 8001db6:	7920      	ldrb	r0, [r4, #4]
 8001db8:	f001 fa4c 	bl	8003254 <ucGBFunctionRL>
 8001dbc:	7120      	strb	r0, [r4, #4]
 8001dbe:	bd10      	pop	{r4, pc}
 8001dc0:	24009254 	.word	0x24009254

08001dc4 <vRL_H>:
void vRL_H(){         reg.H = ucGBFunctionRL(reg.H, &reg.F);}
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	4c03      	ldr	r4, [pc, #12]	; (8001dd4 <vRL_H+0x10>)
 8001dc8:	4621      	mov	r1, r4
 8001dca:	79e0      	ldrb	r0, [r4, #7]
 8001dcc:	f001 fa42 	bl	8003254 <ucGBFunctionRL>
 8001dd0:	71e0      	strb	r0, [r4, #7]
 8001dd2:	bd10      	pop	{r4, pc}
 8001dd4:	24009254 	.word	0x24009254

08001dd8 <vRL_L>:
void vRL_L(){         reg.L = ucGBFunctionRL(reg.L, &reg.F);}
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	4c03      	ldr	r4, [pc, #12]	; (8001de8 <vRL_L+0x10>)
 8001ddc:	4621      	mov	r1, r4
 8001dde:	79a0      	ldrb	r0, [r4, #6]
 8001de0:	f001 fa38 	bl	8003254 <ucGBFunctionRL>
 8001de4:	71a0      	strb	r0, [r4, #6]
 8001de6:	bd10      	pop	{r4, pc}
 8001de8:	24009254 	.word	0x24009254

08001dec <vRL_HL>:
void vRL_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8001dec:	b538      	push	{r3, r4, r5, lr}
 8001dee:	4d07      	ldr	r5, [pc, #28]	; (8001e0c <vRL_HL+0x20>)
 8001df0:	88ec      	ldrh	r4, [r5, #6]
 8001df2:	4620      	mov	r0, r4
 8001df4:	f001 fb9c 	bl	8003530 <ucGBMemoryRead>
 8001df8:	4629      	mov	r1, r5
 8001dfa:	f001 fa2b 	bl	8003254 <ucGBFunctionRL>
 8001dfe:	4601      	mov	r1, r0
 8001e00:	4620      	mov	r0, r4
 8001e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e06:	f001 bb45 	b.w	8003494 <vGBMemoryWrite>
 8001e0a:	bf00      	nop
 8001e0c:	24009254 	.word	0x24009254

08001e10 <vRL_A>:
void vRL_A(){         reg.A = ucGBFunctionRL(reg.A, &reg.F);}
 8001e10:	b510      	push	{r4, lr}
 8001e12:	4c03      	ldr	r4, [pc, #12]	; (8001e20 <vRL_A+0x10>)
 8001e14:	4621      	mov	r1, r4
 8001e16:	7860      	ldrb	r0, [r4, #1]
 8001e18:	f001 fa1c 	bl	8003254 <ucGBFunctionRL>
 8001e1c:	7060      	strb	r0, [r4, #1]
 8001e1e:	bd10      	pop	{r4, pc}
 8001e20:	24009254 	.word	0x24009254

08001e24 <vRR_B>:
void vRR_B(){         reg.B = ucGBFunctionRR(reg.B, &reg.F);}
 8001e24:	b510      	push	{r4, lr}
 8001e26:	4c03      	ldr	r4, [pc, #12]	; (8001e34 <vRR_B+0x10>)
 8001e28:	4621      	mov	r1, r4
 8001e2a:	78e0      	ldrb	r0, [r4, #3]
 8001e2c:	f001 fa2c 	bl	8003288 <ucGBFunctionRR>
 8001e30:	70e0      	strb	r0, [r4, #3]
 8001e32:	bd10      	pop	{r4, pc}
 8001e34:	24009254 	.word	0x24009254

08001e38 <vRR_C>:
void vRR_C(){         reg.C = ucGBFunctionRR(reg.C, &reg.F);}
 8001e38:	b510      	push	{r4, lr}
 8001e3a:	4c03      	ldr	r4, [pc, #12]	; (8001e48 <vRR_C+0x10>)
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	78a0      	ldrb	r0, [r4, #2]
 8001e40:	f001 fa22 	bl	8003288 <ucGBFunctionRR>
 8001e44:	70a0      	strb	r0, [r4, #2]
 8001e46:	bd10      	pop	{r4, pc}
 8001e48:	24009254 	.word	0x24009254

08001e4c <vRR_D>:
void vRR_D(){         reg.D = ucGBFunctionRR(reg.D, &reg.F);}
 8001e4c:	b510      	push	{r4, lr}
 8001e4e:	4c03      	ldr	r4, [pc, #12]	; (8001e5c <vRR_D+0x10>)
 8001e50:	4621      	mov	r1, r4
 8001e52:	7960      	ldrb	r0, [r4, #5]
 8001e54:	f001 fa18 	bl	8003288 <ucGBFunctionRR>
 8001e58:	7160      	strb	r0, [r4, #5]
 8001e5a:	bd10      	pop	{r4, pc}
 8001e5c:	24009254 	.word	0x24009254

08001e60 <vRR_E>:
void vRR_E(){         reg.E = ucGBFunctionRR(reg.E, &reg.F);}
 8001e60:	b510      	push	{r4, lr}
 8001e62:	4c03      	ldr	r4, [pc, #12]	; (8001e70 <vRR_E+0x10>)
 8001e64:	4621      	mov	r1, r4
 8001e66:	7920      	ldrb	r0, [r4, #4]
 8001e68:	f001 fa0e 	bl	8003288 <ucGBFunctionRR>
 8001e6c:	7120      	strb	r0, [r4, #4]
 8001e6e:	bd10      	pop	{r4, pc}
 8001e70:	24009254 	.word	0x24009254

08001e74 <vRR_H>:
void vRR_H(){         reg.H = ucGBFunctionRR(reg.H, &reg.F);}
 8001e74:	b510      	push	{r4, lr}
 8001e76:	4c03      	ldr	r4, [pc, #12]	; (8001e84 <vRR_H+0x10>)
 8001e78:	4621      	mov	r1, r4
 8001e7a:	79e0      	ldrb	r0, [r4, #7]
 8001e7c:	f001 fa04 	bl	8003288 <ucGBFunctionRR>
 8001e80:	71e0      	strb	r0, [r4, #7]
 8001e82:	bd10      	pop	{r4, pc}
 8001e84:	24009254 	.word	0x24009254

08001e88 <vRR_L>:
void vRR_L(){         reg.L = ucGBFunctionRR(reg.L, &reg.F);}
 8001e88:	b510      	push	{r4, lr}
 8001e8a:	4c03      	ldr	r4, [pc, #12]	; (8001e98 <vRR_L+0x10>)
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	79a0      	ldrb	r0, [r4, #6]
 8001e90:	f001 f9fa 	bl	8003288 <ucGBFunctionRR>
 8001e94:	71a0      	strb	r0, [r4, #6]
 8001e96:	bd10      	pop	{r4, pc}
 8001e98:	24009254 	.word	0x24009254

08001e9c <vRR_HL>:
void vRR_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRR(ucGBMemoryRead(reg.HL), &reg.F));}
 8001e9c:	b538      	push	{r3, r4, r5, lr}
 8001e9e:	4d07      	ldr	r5, [pc, #28]	; (8001ebc <vRR_HL+0x20>)
 8001ea0:	88ec      	ldrh	r4, [r5, #6]
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f001 fb44 	bl	8003530 <ucGBMemoryRead>
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	f001 f9ed 	bl	8003288 <ucGBFunctionRR>
 8001eae:	4601      	mov	r1, r0
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001eb6:	f001 baed 	b.w	8003494 <vGBMemoryWrite>
 8001eba:	bf00      	nop
 8001ebc:	24009254 	.word	0x24009254

08001ec0 <vRR_A>:
void vRR_A(){         reg.A = ucGBFunctionRR(reg.A, &reg.F);}
 8001ec0:	b510      	push	{r4, lr}
 8001ec2:	4c03      	ldr	r4, [pc, #12]	; (8001ed0 <vRR_A+0x10>)
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	7860      	ldrb	r0, [r4, #1]
 8001ec8:	f001 f9de 	bl	8003288 <ucGBFunctionRR>
 8001ecc:	7060      	strb	r0, [r4, #1]
 8001ece:	bd10      	pop	{r4, pc}
 8001ed0:	24009254 	.word	0x24009254

08001ed4 <vSLA_B>:
void vSLA_B(){        reg.B = ucGBFunctionSLA(reg.B, &reg.F);}
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	4c03      	ldr	r4, [pc, #12]	; (8001ee4 <vSLA_B+0x10>)
 8001ed8:	4621      	mov	r1, r4
 8001eda:	78e0      	ldrb	r0, [r4, #3]
 8001edc:	f001 f9f0 	bl	80032c0 <ucGBFunctionSLA>
 8001ee0:	70e0      	strb	r0, [r4, #3]
 8001ee2:	bd10      	pop	{r4, pc}
 8001ee4:	24009254 	.word	0x24009254

08001ee8 <vSLA_C>:
void vSLA_C(){        reg.C = ucGBFunctionSLA(reg.C, &reg.F);}
 8001ee8:	b510      	push	{r4, lr}
 8001eea:	4c03      	ldr	r4, [pc, #12]	; (8001ef8 <vSLA_C+0x10>)
 8001eec:	4621      	mov	r1, r4
 8001eee:	78a0      	ldrb	r0, [r4, #2]
 8001ef0:	f001 f9e6 	bl	80032c0 <ucGBFunctionSLA>
 8001ef4:	70a0      	strb	r0, [r4, #2]
 8001ef6:	bd10      	pop	{r4, pc}
 8001ef8:	24009254 	.word	0x24009254

08001efc <vSLA_D>:
void vSLA_D(){        reg.D = ucGBFunctionSLA(reg.D, &reg.F);}
 8001efc:	b510      	push	{r4, lr}
 8001efe:	4c03      	ldr	r4, [pc, #12]	; (8001f0c <vSLA_D+0x10>)
 8001f00:	4621      	mov	r1, r4
 8001f02:	7960      	ldrb	r0, [r4, #5]
 8001f04:	f001 f9dc 	bl	80032c0 <ucGBFunctionSLA>
 8001f08:	7160      	strb	r0, [r4, #5]
 8001f0a:	bd10      	pop	{r4, pc}
 8001f0c:	24009254 	.word	0x24009254

08001f10 <vSLA_E>:
void vSLA_E(){        reg.E = ucGBFunctionSLA(reg.E, &reg.F);}
 8001f10:	b510      	push	{r4, lr}
 8001f12:	4c03      	ldr	r4, [pc, #12]	; (8001f20 <vSLA_E+0x10>)
 8001f14:	4621      	mov	r1, r4
 8001f16:	7920      	ldrb	r0, [r4, #4]
 8001f18:	f001 f9d2 	bl	80032c0 <ucGBFunctionSLA>
 8001f1c:	7120      	strb	r0, [r4, #4]
 8001f1e:	bd10      	pop	{r4, pc}
 8001f20:	24009254 	.word	0x24009254

08001f24 <vSLA_H>:
void vSLA_H(){        reg.H = ucGBFunctionSLA(reg.H, &reg.F);}
 8001f24:	b510      	push	{r4, lr}
 8001f26:	4c03      	ldr	r4, [pc, #12]	; (8001f34 <vSLA_H+0x10>)
 8001f28:	4621      	mov	r1, r4
 8001f2a:	79e0      	ldrb	r0, [r4, #7]
 8001f2c:	f001 f9c8 	bl	80032c0 <ucGBFunctionSLA>
 8001f30:	71e0      	strb	r0, [r4, #7]
 8001f32:	bd10      	pop	{r4, pc}
 8001f34:	24009254 	.word	0x24009254

08001f38 <vSLA_L>:
void vSLA_L(){        reg.L = ucGBFunctionSLA(reg.L, &reg.F);}
 8001f38:	b510      	push	{r4, lr}
 8001f3a:	4c03      	ldr	r4, [pc, #12]	; (8001f48 <vSLA_L+0x10>)
 8001f3c:	4621      	mov	r1, r4
 8001f3e:	79a0      	ldrb	r0, [r4, #6]
 8001f40:	f001 f9be 	bl	80032c0 <ucGBFunctionSLA>
 8001f44:	71a0      	strb	r0, [r4, #6]
 8001f46:	bd10      	pop	{r4, pc}
 8001f48:	24009254 	.word	0x24009254

08001f4c <vSLA_HL>:
void vSLA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSLA(ucGBMemoryRead(reg.HL), &reg.F));}
 8001f4c:	b538      	push	{r3, r4, r5, lr}
 8001f4e:	4d07      	ldr	r5, [pc, #28]	; (8001f6c <vSLA_HL+0x20>)
 8001f50:	88ec      	ldrh	r4, [r5, #6]
 8001f52:	4620      	mov	r0, r4
 8001f54:	f001 faec 	bl	8003530 <ucGBMemoryRead>
 8001f58:	4629      	mov	r1, r5
 8001f5a:	f001 f9b1 	bl	80032c0 <ucGBFunctionSLA>
 8001f5e:	4601      	mov	r1, r0
 8001f60:	4620      	mov	r0, r4
 8001f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f66:	f001 ba95 	b.w	8003494 <vGBMemoryWrite>
 8001f6a:	bf00      	nop
 8001f6c:	24009254 	.word	0x24009254

08001f70 <vSLA_A>:
void vSLA_A(){        reg.A = ucGBFunctionSLA(reg.A, &reg.F);}
 8001f70:	b510      	push	{r4, lr}
 8001f72:	4c03      	ldr	r4, [pc, #12]	; (8001f80 <vSLA_A+0x10>)
 8001f74:	4621      	mov	r1, r4
 8001f76:	7860      	ldrb	r0, [r4, #1]
 8001f78:	f001 f9a2 	bl	80032c0 <ucGBFunctionSLA>
 8001f7c:	7060      	strb	r0, [r4, #1]
 8001f7e:	bd10      	pop	{r4, pc}
 8001f80:	24009254 	.word	0x24009254

08001f84 <vSRA_B>:
void vSRA_B(){        reg.B = ucGBFunctionSRA(reg.B, &reg.F);}
 8001f84:	b510      	push	{r4, lr}
 8001f86:	4c03      	ldr	r4, [pc, #12]	; (8001f94 <vSRA_B+0x10>)
 8001f88:	4621      	mov	r1, r4
 8001f8a:	78e0      	ldrb	r0, [r4, #3]
 8001f8c:	f001 f9b0 	bl	80032f0 <ucGBFunctionSRA>
 8001f90:	70e0      	strb	r0, [r4, #3]
 8001f92:	bd10      	pop	{r4, pc}
 8001f94:	24009254 	.word	0x24009254

08001f98 <vSRA_C>:
void vSRA_C(){        reg.C = ucGBFunctionSRA(reg.C, &reg.F);}
 8001f98:	b510      	push	{r4, lr}
 8001f9a:	4c03      	ldr	r4, [pc, #12]	; (8001fa8 <vSRA_C+0x10>)
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	78a0      	ldrb	r0, [r4, #2]
 8001fa0:	f001 f9a6 	bl	80032f0 <ucGBFunctionSRA>
 8001fa4:	70a0      	strb	r0, [r4, #2]
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	24009254 	.word	0x24009254

08001fac <vSRA_D>:
void vSRA_D(){        reg.D = ucGBFunctionSRA(reg.D, &reg.F);}
 8001fac:	b510      	push	{r4, lr}
 8001fae:	4c03      	ldr	r4, [pc, #12]	; (8001fbc <vSRA_D+0x10>)
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	7960      	ldrb	r0, [r4, #5]
 8001fb4:	f001 f99c 	bl	80032f0 <ucGBFunctionSRA>
 8001fb8:	7160      	strb	r0, [r4, #5]
 8001fba:	bd10      	pop	{r4, pc}
 8001fbc:	24009254 	.word	0x24009254

08001fc0 <vSRA_E>:
void vSRA_E(){        reg.E = ucGBFunctionSRA(reg.E, &reg.F);}
 8001fc0:	b510      	push	{r4, lr}
 8001fc2:	4c03      	ldr	r4, [pc, #12]	; (8001fd0 <vSRA_E+0x10>)
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	7920      	ldrb	r0, [r4, #4]
 8001fc8:	f001 f992 	bl	80032f0 <ucGBFunctionSRA>
 8001fcc:	7120      	strb	r0, [r4, #4]
 8001fce:	bd10      	pop	{r4, pc}
 8001fd0:	24009254 	.word	0x24009254

08001fd4 <vSRA_H>:
void vSRA_H(){        reg.H = ucGBFunctionSRA(reg.H, &reg.F);}
 8001fd4:	b510      	push	{r4, lr}
 8001fd6:	4c03      	ldr	r4, [pc, #12]	; (8001fe4 <vSRA_H+0x10>)
 8001fd8:	4621      	mov	r1, r4
 8001fda:	79e0      	ldrb	r0, [r4, #7]
 8001fdc:	f001 f988 	bl	80032f0 <ucGBFunctionSRA>
 8001fe0:	71e0      	strb	r0, [r4, #7]
 8001fe2:	bd10      	pop	{r4, pc}
 8001fe4:	24009254 	.word	0x24009254

08001fe8 <vSRA_L>:
void vSRA_L(){        reg.L = ucGBFunctionSRA(reg.L, &reg.F);}
 8001fe8:	b510      	push	{r4, lr}
 8001fea:	4c03      	ldr	r4, [pc, #12]	; (8001ff8 <vSRA_L+0x10>)
 8001fec:	4621      	mov	r1, r4
 8001fee:	79a0      	ldrb	r0, [r4, #6]
 8001ff0:	f001 f97e 	bl	80032f0 <ucGBFunctionSRA>
 8001ff4:	71a0      	strb	r0, [r4, #6]
 8001ff6:	bd10      	pop	{r4, pc}
 8001ff8:	24009254 	.word	0x24009254

08001ffc <vSRA_HL>:
void vSRA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRA(ucGBMemoryRead(reg.HL), &reg.F));}
 8001ffc:	b538      	push	{r3, r4, r5, lr}
 8001ffe:	4d07      	ldr	r5, [pc, #28]	; (800201c <vSRA_HL+0x20>)
 8002000:	88ec      	ldrh	r4, [r5, #6]
 8002002:	4620      	mov	r0, r4
 8002004:	f001 fa94 	bl	8003530 <ucGBMemoryRead>
 8002008:	4629      	mov	r1, r5
 800200a:	f001 f971 	bl	80032f0 <ucGBFunctionSRA>
 800200e:	4601      	mov	r1, r0
 8002010:	4620      	mov	r0, r4
 8002012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002016:	f001 ba3d 	b.w	8003494 <vGBMemoryWrite>
 800201a:	bf00      	nop
 800201c:	24009254 	.word	0x24009254

08002020 <vSRA_A>:
void vSRA_A(){        reg.A = ucGBFunctionSRA(reg.A, &reg.F);}
 8002020:	b510      	push	{r4, lr}
 8002022:	4c03      	ldr	r4, [pc, #12]	; (8002030 <vSRA_A+0x10>)
 8002024:	4621      	mov	r1, r4
 8002026:	7860      	ldrb	r0, [r4, #1]
 8002028:	f001 f962 	bl	80032f0 <ucGBFunctionSRA>
 800202c:	7060      	strb	r0, [r4, #1]
 800202e:	bd10      	pop	{r4, pc}
 8002030:	24009254 	.word	0x24009254

08002034 <vSWAP_B>:
void vSWAP_B(){       reg.B = ucGBFunctionSWAP(reg.B, &reg.F);}
 8002034:	b510      	push	{r4, lr}
 8002036:	4c03      	ldr	r4, [pc, #12]	; (8002044 <vSWAP_B+0x10>)
 8002038:	4621      	mov	r1, r4
 800203a:	78e0      	ldrb	r0, [r4, #3]
 800203c:	f001 f972 	bl	8003324 <ucGBFunctionSWAP>
 8002040:	70e0      	strb	r0, [r4, #3]
 8002042:	bd10      	pop	{r4, pc}
 8002044:	24009254 	.word	0x24009254

08002048 <vSWAP_C>:
void vSWAP_C(){       reg.C = ucGBFunctionSWAP(reg.C, &reg.F);}
 8002048:	b510      	push	{r4, lr}
 800204a:	4c03      	ldr	r4, [pc, #12]	; (8002058 <vSWAP_C+0x10>)
 800204c:	4621      	mov	r1, r4
 800204e:	78a0      	ldrb	r0, [r4, #2]
 8002050:	f001 f968 	bl	8003324 <ucGBFunctionSWAP>
 8002054:	70a0      	strb	r0, [r4, #2]
 8002056:	bd10      	pop	{r4, pc}
 8002058:	24009254 	.word	0x24009254

0800205c <vSWAP_D>:
void vSWAP_D(){       reg.D = ucGBFunctionSWAP(reg.D, &reg.F);}
 800205c:	b510      	push	{r4, lr}
 800205e:	4c03      	ldr	r4, [pc, #12]	; (800206c <vSWAP_D+0x10>)
 8002060:	4621      	mov	r1, r4
 8002062:	7960      	ldrb	r0, [r4, #5]
 8002064:	f001 f95e 	bl	8003324 <ucGBFunctionSWAP>
 8002068:	7160      	strb	r0, [r4, #5]
 800206a:	bd10      	pop	{r4, pc}
 800206c:	24009254 	.word	0x24009254

08002070 <vSWAP_E>:
void vSWAP_E(){       reg.E = ucGBFunctionSWAP(reg.E, &reg.F);}
 8002070:	b510      	push	{r4, lr}
 8002072:	4c03      	ldr	r4, [pc, #12]	; (8002080 <vSWAP_E+0x10>)
 8002074:	4621      	mov	r1, r4
 8002076:	7920      	ldrb	r0, [r4, #4]
 8002078:	f001 f954 	bl	8003324 <ucGBFunctionSWAP>
 800207c:	7120      	strb	r0, [r4, #4]
 800207e:	bd10      	pop	{r4, pc}
 8002080:	24009254 	.word	0x24009254

08002084 <vSWAP_H>:
void vSWAP_H(){       reg.H = ucGBFunctionSWAP(reg.H, &reg.F);}
 8002084:	b510      	push	{r4, lr}
 8002086:	4c03      	ldr	r4, [pc, #12]	; (8002094 <vSWAP_H+0x10>)
 8002088:	4621      	mov	r1, r4
 800208a:	79e0      	ldrb	r0, [r4, #7]
 800208c:	f001 f94a 	bl	8003324 <ucGBFunctionSWAP>
 8002090:	71e0      	strb	r0, [r4, #7]
 8002092:	bd10      	pop	{r4, pc}
 8002094:	24009254 	.word	0x24009254

08002098 <vSWAP_L>:
void vSWAP_L(){       reg.L = ucGBFunctionSWAP(reg.L, &reg.F);}
 8002098:	b510      	push	{r4, lr}
 800209a:	4c03      	ldr	r4, [pc, #12]	; (80020a8 <vSWAP_L+0x10>)
 800209c:	4621      	mov	r1, r4
 800209e:	79a0      	ldrb	r0, [r4, #6]
 80020a0:	f001 f940 	bl	8003324 <ucGBFunctionSWAP>
 80020a4:	71a0      	strb	r0, [r4, #6]
 80020a6:	bd10      	pop	{r4, pc}
 80020a8:	24009254 	.word	0x24009254

080020ac <vSWAP_HL>:
void vSWAP_HL(){      vGBMemoryWrite(reg.HL, ucGBFunctionSWAP(ucGBMemoryRead(reg.HL), &reg.F));}
 80020ac:	b538      	push	{r3, r4, r5, lr}
 80020ae:	4d07      	ldr	r5, [pc, #28]	; (80020cc <vSWAP_HL+0x20>)
 80020b0:	88ec      	ldrh	r4, [r5, #6]
 80020b2:	4620      	mov	r0, r4
 80020b4:	f001 fa3c 	bl	8003530 <ucGBMemoryRead>
 80020b8:	4629      	mov	r1, r5
 80020ba:	f001 f933 	bl	8003324 <ucGBFunctionSWAP>
 80020be:	4601      	mov	r1, r0
 80020c0:	4620      	mov	r0, r4
 80020c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020c6:	f001 b9e5 	b.w	8003494 <vGBMemoryWrite>
 80020ca:	bf00      	nop
 80020cc:	24009254 	.word	0x24009254

080020d0 <vSWAP_A>:
void vSWAP_A(){       reg.A = ucGBFunctionSWAP(reg.A, &reg.F);}
 80020d0:	b510      	push	{r4, lr}
 80020d2:	4c03      	ldr	r4, [pc, #12]	; (80020e0 <vSWAP_A+0x10>)
 80020d4:	4621      	mov	r1, r4
 80020d6:	7860      	ldrb	r0, [r4, #1]
 80020d8:	f001 f924 	bl	8003324 <ucGBFunctionSWAP>
 80020dc:	7060      	strb	r0, [r4, #1]
 80020de:	bd10      	pop	{r4, pc}
 80020e0:	24009254 	.word	0x24009254

080020e4 <vSRL_B>:
void vSRL_B(){        reg.B = ucGBFunctionSRL(reg.B, &reg.F);}
 80020e4:	b510      	push	{r4, lr}
 80020e6:	4c03      	ldr	r4, [pc, #12]	; (80020f4 <vSRL_B+0x10>)
 80020e8:	4621      	mov	r1, r4
 80020ea:	78e0      	ldrb	r0, [r4, #3]
 80020ec:	f001 f930 	bl	8003350 <ucGBFunctionSRL>
 80020f0:	70e0      	strb	r0, [r4, #3]
 80020f2:	bd10      	pop	{r4, pc}
 80020f4:	24009254 	.word	0x24009254

080020f8 <vSRL_C>:
void vSRL_C(){        reg.C = ucGBFunctionSRL(reg.C, &reg.F);}
 80020f8:	b510      	push	{r4, lr}
 80020fa:	4c03      	ldr	r4, [pc, #12]	; (8002108 <vSRL_C+0x10>)
 80020fc:	4621      	mov	r1, r4
 80020fe:	78a0      	ldrb	r0, [r4, #2]
 8002100:	f001 f926 	bl	8003350 <ucGBFunctionSRL>
 8002104:	70a0      	strb	r0, [r4, #2]
 8002106:	bd10      	pop	{r4, pc}
 8002108:	24009254 	.word	0x24009254

0800210c <vSRL_D>:
void vSRL_D(){        reg.D = ucGBFunctionSRL(reg.D, &reg.F);}
 800210c:	b510      	push	{r4, lr}
 800210e:	4c03      	ldr	r4, [pc, #12]	; (800211c <vSRL_D+0x10>)
 8002110:	4621      	mov	r1, r4
 8002112:	7960      	ldrb	r0, [r4, #5]
 8002114:	f001 f91c 	bl	8003350 <ucGBFunctionSRL>
 8002118:	7160      	strb	r0, [r4, #5]
 800211a:	bd10      	pop	{r4, pc}
 800211c:	24009254 	.word	0x24009254

08002120 <vSRL_E>:
void vSRL_E(){        reg.E = ucGBFunctionSRL(reg.E, &reg.F);}
 8002120:	b510      	push	{r4, lr}
 8002122:	4c03      	ldr	r4, [pc, #12]	; (8002130 <vSRL_E+0x10>)
 8002124:	4621      	mov	r1, r4
 8002126:	7920      	ldrb	r0, [r4, #4]
 8002128:	f001 f912 	bl	8003350 <ucGBFunctionSRL>
 800212c:	7120      	strb	r0, [r4, #4]
 800212e:	bd10      	pop	{r4, pc}
 8002130:	24009254 	.word	0x24009254

08002134 <vSRL_H>:
void vSRL_H(){        reg.H = ucGBFunctionSRL(reg.H, &reg.F);}
 8002134:	b510      	push	{r4, lr}
 8002136:	4c03      	ldr	r4, [pc, #12]	; (8002144 <vSRL_H+0x10>)
 8002138:	4621      	mov	r1, r4
 800213a:	79e0      	ldrb	r0, [r4, #7]
 800213c:	f001 f908 	bl	8003350 <ucGBFunctionSRL>
 8002140:	71e0      	strb	r0, [r4, #7]
 8002142:	bd10      	pop	{r4, pc}
 8002144:	24009254 	.word	0x24009254

08002148 <vSRL_L>:
void vSRL_L(){        reg.L = ucGBFunctionSRL(reg.L, &reg.F);}
 8002148:	b510      	push	{r4, lr}
 800214a:	4c03      	ldr	r4, [pc, #12]	; (8002158 <vSRL_L+0x10>)
 800214c:	4621      	mov	r1, r4
 800214e:	79a0      	ldrb	r0, [r4, #6]
 8002150:	f001 f8fe 	bl	8003350 <ucGBFunctionSRL>
 8002154:	71a0      	strb	r0, [r4, #6]
 8002156:	bd10      	pop	{r4, pc}
 8002158:	24009254 	.word	0x24009254

0800215c <vSRL_HL>:
void vSRL_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRL(ucGBMemoryRead(reg.HL), &reg.F));}
 800215c:	b538      	push	{r3, r4, r5, lr}
 800215e:	4d07      	ldr	r5, [pc, #28]	; (800217c <vSRL_HL+0x20>)
 8002160:	88ec      	ldrh	r4, [r5, #6]
 8002162:	4620      	mov	r0, r4
 8002164:	f001 f9e4 	bl	8003530 <ucGBMemoryRead>
 8002168:	4629      	mov	r1, r5
 800216a:	f001 f8f1 	bl	8003350 <ucGBFunctionSRL>
 800216e:	4601      	mov	r1, r0
 8002170:	4620      	mov	r0, r4
 8002172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002176:	f001 b98d 	b.w	8003494 <vGBMemoryWrite>
 800217a:	bf00      	nop
 800217c:	24009254 	.word	0x24009254

08002180 <vSRL_A>:
void vSRL_A(){        reg.A = ucGBFunctionSRL(reg.A, &reg.F);}
 8002180:	b510      	push	{r4, lr}
 8002182:	4c03      	ldr	r4, [pc, #12]	; (8002190 <vSRL_A+0x10>)
 8002184:	4621      	mov	r1, r4
 8002186:	7860      	ldrb	r0, [r4, #1]
 8002188:	f001 f8e2 	bl	8003350 <ucGBFunctionSRL>
 800218c:	7060      	strb	r0, [r4, #1]
 800218e:	bd10      	pop	{r4, pc}
 8002190:	24009254 	.word	0x24009254

08002194 <vBIT_0_B>:
void vBIT_0_B(){      vGBFunctionBIT(reg.B, 0, &reg.F);}
 8002194:	4a02      	ldr	r2, [pc, #8]	; (80021a0 <vBIT_0_B+0xc>)
 8002196:	2100      	movs	r1, #0
 8002198:	78d0      	ldrb	r0, [r2, #3]
 800219a:	f001 b8ed 	b.w	8003378 <vGBFunctionBIT>
 800219e:	bf00      	nop
 80021a0:	24009254 	.word	0x24009254

080021a4 <vBIT_0_C>:
void vBIT_0_C(){      vGBFunctionBIT(reg.C, 0, &reg.F);}
 80021a4:	4a02      	ldr	r2, [pc, #8]	; (80021b0 <vBIT_0_C+0xc>)
 80021a6:	2100      	movs	r1, #0
 80021a8:	7890      	ldrb	r0, [r2, #2]
 80021aa:	f001 b8e5 	b.w	8003378 <vGBFunctionBIT>
 80021ae:	bf00      	nop
 80021b0:	24009254 	.word	0x24009254

080021b4 <vBIT_0_D>:
void vBIT_0_D(){      vGBFunctionBIT(reg.D, 0, &reg.F);}
 80021b4:	4a02      	ldr	r2, [pc, #8]	; (80021c0 <vBIT_0_D+0xc>)
 80021b6:	2100      	movs	r1, #0
 80021b8:	7950      	ldrb	r0, [r2, #5]
 80021ba:	f001 b8dd 	b.w	8003378 <vGBFunctionBIT>
 80021be:	bf00      	nop
 80021c0:	24009254 	.word	0x24009254

080021c4 <vBIT_0_E>:
void vBIT_0_E(){      vGBFunctionBIT(reg.E, 0, &reg.F);}
 80021c4:	4a02      	ldr	r2, [pc, #8]	; (80021d0 <vBIT_0_E+0xc>)
 80021c6:	2100      	movs	r1, #0
 80021c8:	7910      	ldrb	r0, [r2, #4]
 80021ca:	f001 b8d5 	b.w	8003378 <vGBFunctionBIT>
 80021ce:	bf00      	nop
 80021d0:	24009254 	.word	0x24009254

080021d4 <vBIT_0_H>:
void vBIT_0_H(){      vGBFunctionBIT(reg.H, 0, &reg.F);}
 80021d4:	4a02      	ldr	r2, [pc, #8]	; (80021e0 <vBIT_0_H+0xc>)
 80021d6:	2100      	movs	r1, #0
 80021d8:	79d0      	ldrb	r0, [r2, #7]
 80021da:	f001 b8cd 	b.w	8003378 <vGBFunctionBIT>
 80021de:	bf00      	nop
 80021e0:	24009254 	.word	0x24009254

080021e4 <vBIT_0_L>:
void vBIT_0_L(){      vGBFunctionBIT(reg.L, 0, &reg.F);}
 80021e4:	4a02      	ldr	r2, [pc, #8]	; (80021f0 <vBIT_0_L+0xc>)
 80021e6:	2100      	movs	r1, #0
 80021e8:	7990      	ldrb	r0, [r2, #6]
 80021ea:	f001 b8c5 	b.w	8003378 <vGBFunctionBIT>
 80021ee:	bf00      	nop
 80021f0:	24009254 	.word	0x24009254

080021f4 <vBIT_0_HL>:
void vBIT_0_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 0, &reg.F);}
 80021f4:	b510      	push	{r4, lr}
 80021f6:	4c05      	ldr	r4, [pc, #20]	; (800220c <vBIT_0_HL+0x18>)
 80021f8:	88e0      	ldrh	r0, [r4, #6]
 80021fa:	f001 f999 	bl	8003530 <ucGBMemoryRead>
 80021fe:	4622      	mov	r2, r4
 8002200:	2100      	movs	r1, #0
 8002202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002206:	f001 b8b7 	b.w	8003378 <vGBFunctionBIT>
 800220a:	bf00      	nop
 800220c:	24009254 	.word	0x24009254

08002210 <vBIT_0_A>:
void vBIT_0_A(){      vGBFunctionBIT(reg.A, 1, &reg.F);}
 8002210:	4a02      	ldr	r2, [pc, #8]	; (800221c <vBIT_0_A+0xc>)
 8002212:	2101      	movs	r1, #1
 8002214:	7850      	ldrb	r0, [r2, #1]
 8002216:	f001 b8af 	b.w	8003378 <vGBFunctionBIT>
 800221a:	bf00      	nop
 800221c:	24009254 	.word	0x24009254

08002220 <vBIT_1_A>:
 8002220:	f7ff bff6 	b.w	8002210 <vBIT_0_A>

08002224 <vBIT_1_B>:
void vBIT_1_B(){      vGBFunctionBIT(reg.B, 1, &reg.F);}
 8002224:	4a02      	ldr	r2, [pc, #8]	; (8002230 <vBIT_1_B+0xc>)
 8002226:	2101      	movs	r1, #1
 8002228:	78d0      	ldrb	r0, [r2, #3]
 800222a:	f001 b8a5 	b.w	8003378 <vGBFunctionBIT>
 800222e:	bf00      	nop
 8002230:	24009254 	.word	0x24009254

08002234 <vBIT_1_C>:
void vBIT_1_C(){      vGBFunctionBIT(reg.C, 1, &reg.F);}
 8002234:	4a02      	ldr	r2, [pc, #8]	; (8002240 <vBIT_1_C+0xc>)
 8002236:	2101      	movs	r1, #1
 8002238:	7890      	ldrb	r0, [r2, #2]
 800223a:	f001 b89d 	b.w	8003378 <vGBFunctionBIT>
 800223e:	bf00      	nop
 8002240:	24009254 	.word	0x24009254

08002244 <vBIT_1_D>:
void vBIT_1_D(){      vGBFunctionBIT(reg.D, 1, &reg.F);}
 8002244:	4a02      	ldr	r2, [pc, #8]	; (8002250 <vBIT_1_D+0xc>)
 8002246:	2101      	movs	r1, #1
 8002248:	7950      	ldrb	r0, [r2, #5]
 800224a:	f001 b895 	b.w	8003378 <vGBFunctionBIT>
 800224e:	bf00      	nop
 8002250:	24009254 	.word	0x24009254

08002254 <vBIT_1_E>:
void vBIT_1_E(){      vGBFunctionBIT(reg.E, 1, &reg.F);}
 8002254:	4a02      	ldr	r2, [pc, #8]	; (8002260 <vBIT_1_E+0xc>)
 8002256:	2101      	movs	r1, #1
 8002258:	7910      	ldrb	r0, [r2, #4]
 800225a:	f001 b88d 	b.w	8003378 <vGBFunctionBIT>
 800225e:	bf00      	nop
 8002260:	24009254 	.word	0x24009254

08002264 <vBIT_1_H>:
void vBIT_1_H(){      vGBFunctionBIT(reg.H, 1, &reg.F);}
 8002264:	4a02      	ldr	r2, [pc, #8]	; (8002270 <vBIT_1_H+0xc>)
 8002266:	2101      	movs	r1, #1
 8002268:	79d0      	ldrb	r0, [r2, #7]
 800226a:	f001 b885 	b.w	8003378 <vGBFunctionBIT>
 800226e:	bf00      	nop
 8002270:	24009254 	.word	0x24009254

08002274 <vBIT_1_L>:
void vBIT_1_L(){      vGBFunctionBIT(reg.L, 1, &reg.F);}
 8002274:	4a02      	ldr	r2, [pc, #8]	; (8002280 <vBIT_1_L+0xc>)
 8002276:	2101      	movs	r1, #1
 8002278:	7990      	ldrb	r0, [r2, #6]
 800227a:	f001 b87d 	b.w	8003378 <vGBFunctionBIT>
 800227e:	bf00      	nop
 8002280:	24009254 	.word	0x24009254

08002284 <vBIT_1_HL>:
void vBIT_1_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 1, &reg.F);}
 8002284:	b510      	push	{r4, lr}
 8002286:	4c05      	ldr	r4, [pc, #20]	; (800229c <vBIT_1_HL+0x18>)
 8002288:	88e0      	ldrh	r0, [r4, #6]
 800228a:	f001 f951 	bl	8003530 <ucGBMemoryRead>
 800228e:	4622      	mov	r2, r4
 8002290:	2101      	movs	r1, #1
 8002292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002296:	f001 b86f 	b.w	8003378 <vGBFunctionBIT>
 800229a:	bf00      	nop
 800229c:	24009254 	.word	0x24009254

080022a0 <vBIT_2_B>:
void vBIT_2_B(){      vGBFunctionBIT(reg.B, 2, &reg.F);}
 80022a0:	4a02      	ldr	r2, [pc, #8]	; (80022ac <vBIT_2_B+0xc>)
 80022a2:	2102      	movs	r1, #2
 80022a4:	78d0      	ldrb	r0, [r2, #3]
 80022a6:	f001 b867 	b.w	8003378 <vGBFunctionBIT>
 80022aa:	bf00      	nop
 80022ac:	24009254 	.word	0x24009254

080022b0 <vBIT_2_C>:
void vBIT_2_C(){      vGBFunctionBIT(reg.C, 2, &reg.F);}
 80022b0:	4a02      	ldr	r2, [pc, #8]	; (80022bc <vBIT_2_C+0xc>)
 80022b2:	2102      	movs	r1, #2
 80022b4:	7890      	ldrb	r0, [r2, #2]
 80022b6:	f001 b85f 	b.w	8003378 <vGBFunctionBIT>
 80022ba:	bf00      	nop
 80022bc:	24009254 	.word	0x24009254

080022c0 <vBIT_2_D>:
void vBIT_2_D(){      vGBFunctionBIT(reg.D, 2, &reg.F);}
 80022c0:	4a02      	ldr	r2, [pc, #8]	; (80022cc <vBIT_2_D+0xc>)
 80022c2:	2102      	movs	r1, #2
 80022c4:	7950      	ldrb	r0, [r2, #5]
 80022c6:	f001 b857 	b.w	8003378 <vGBFunctionBIT>
 80022ca:	bf00      	nop
 80022cc:	24009254 	.word	0x24009254

080022d0 <vBIT_2_E>:
void vBIT_2_E(){      vGBFunctionBIT(reg.E, 2, &reg.F);}
 80022d0:	4a02      	ldr	r2, [pc, #8]	; (80022dc <vBIT_2_E+0xc>)
 80022d2:	2102      	movs	r1, #2
 80022d4:	7910      	ldrb	r0, [r2, #4]
 80022d6:	f001 b84f 	b.w	8003378 <vGBFunctionBIT>
 80022da:	bf00      	nop
 80022dc:	24009254 	.word	0x24009254

080022e0 <vBIT_2_H>:
void vBIT_2_H(){      vGBFunctionBIT(reg.H, 2, &reg.F);}
 80022e0:	4a02      	ldr	r2, [pc, #8]	; (80022ec <vBIT_2_H+0xc>)
 80022e2:	2102      	movs	r1, #2
 80022e4:	79d0      	ldrb	r0, [r2, #7]
 80022e6:	f001 b847 	b.w	8003378 <vGBFunctionBIT>
 80022ea:	bf00      	nop
 80022ec:	24009254 	.word	0x24009254

080022f0 <vBIT_2_L>:
void vBIT_2_L(){      vGBFunctionBIT(reg.L, 2, &reg.F);}
 80022f0:	4a02      	ldr	r2, [pc, #8]	; (80022fc <vBIT_2_L+0xc>)
 80022f2:	2102      	movs	r1, #2
 80022f4:	7990      	ldrb	r0, [r2, #6]
 80022f6:	f001 b83f 	b.w	8003378 <vGBFunctionBIT>
 80022fa:	bf00      	nop
 80022fc:	24009254 	.word	0x24009254

08002300 <vBIT_2_HL>:
void vBIT_2_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 2, &reg.F);}
 8002300:	b510      	push	{r4, lr}
 8002302:	4c05      	ldr	r4, [pc, #20]	; (8002318 <vBIT_2_HL+0x18>)
 8002304:	88e0      	ldrh	r0, [r4, #6]
 8002306:	f001 f913 	bl	8003530 <ucGBMemoryRead>
 800230a:	4622      	mov	r2, r4
 800230c:	2102      	movs	r1, #2
 800230e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002312:	f001 b831 	b.w	8003378 <vGBFunctionBIT>
 8002316:	bf00      	nop
 8002318:	24009254 	.word	0x24009254

0800231c <vBIT_2_A>:
void vBIT_2_A(){      vGBFunctionBIT(reg.A, 2, &reg.F);}
 800231c:	4a02      	ldr	r2, [pc, #8]	; (8002328 <vBIT_2_A+0xc>)
 800231e:	2102      	movs	r1, #2
 8002320:	7850      	ldrb	r0, [r2, #1]
 8002322:	f001 b829 	b.w	8003378 <vGBFunctionBIT>
 8002326:	bf00      	nop
 8002328:	24009254 	.word	0x24009254

0800232c <vBIT_3_B>:
void vBIT_3_B(){      vGBFunctionBIT(reg.B, 3, &reg.F);}
 800232c:	4a02      	ldr	r2, [pc, #8]	; (8002338 <vBIT_3_B+0xc>)
 800232e:	2103      	movs	r1, #3
 8002330:	78d0      	ldrb	r0, [r2, #3]
 8002332:	f001 b821 	b.w	8003378 <vGBFunctionBIT>
 8002336:	bf00      	nop
 8002338:	24009254 	.word	0x24009254

0800233c <vBIT_3_C>:
void vBIT_3_C(){      vGBFunctionBIT(reg.C, 3, &reg.F);}
 800233c:	4a02      	ldr	r2, [pc, #8]	; (8002348 <vBIT_3_C+0xc>)
 800233e:	2103      	movs	r1, #3
 8002340:	7890      	ldrb	r0, [r2, #2]
 8002342:	f001 b819 	b.w	8003378 <vGBFunctionBIT>
 8002346:	bf00      	nop
 8002348:	24009254 	.word	0x24009254

0800234c <vBIT_3_D>:
void vBIT_3_D(){      vGBFunctionBIT(reg.D, 3, &reg.F);}
 800234c:	4a02      	ldr	r2, [pc, #8]	; (8002358 <vBIT_3_D+0xc>)
 800234e:	2103      	movs	r1, #3
 8002350:	7950      	ldrb	r0, [r2, #5]
 8002352:	f001 b811 	b.w	8003378 <vGBFunctionBIT>
 8002356:	bf00      	nop
 8002358:	24009254 	.word	0x24009254

0800235c <vBIT_3_E>:
void vBIT_3_E(){      vGBFunctionBIT(reg.E, 3, &reg.F);}
 800235c:	4a02      	ldr	r2, [pc, #8]	; (8002368 <vBIT_3_E+0xc>)
 800235e:	2103      	movs	r1, #3
 8002360:	7910      	ldrb	r0, [r2, #4]
 8002362:	f001 b809 	b.w	8003378 <vGBFunctionBIT>
 8002366:	bf00      	nop
 8002368:	24009254 	.word	0x24009254

0800236c <vBIT_3_H>:
void vBIT_3_H(){      vGBFunctionBIT(reg.H, 3, &reg.F);}
 800236c:	4a02      	ldr	r2, [pc, #8]	; (8002378 <vBIT_3_H+0xc>)
 800236e:	2103      	movs	r1, #3
 8002370:	79d0      	ldrb	r0, [r2, #7]
 8002372:	f001 b801 	b.w	8003378 <vGBFunctionBIT>
 8002376:	bf00      	nop
 8002378:	24009254 	.word	0x24009254

0800237c <vBIT_3_L>:
void vBIT_3_L(){      vGBFunctionBIT(reg.L, 3, &reg.F);}
 800237c:	4a02      	ldr	r2, [pc, #8]	; (8002388 <vBIT_3_L+0xc>)
 800237e:	2103      	movs	r1, #3
 8002380:	7990      	ldrb	r0, [r2, #6]
 8002382:	f000 bff9 	b.w	8003378 <vGBFunctionBIT>
 8002386:	bf00      	nop
 8002388:	24009254 	.word	0x24009254

0800238c <vBIT_3_HL>:
void vBIT_3_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 3, &reg.F);}
 800238c:	b510      	push	{r4, lr}
 800238e:	4c05      	ldr	r4, [pc, #20]	; (80023a4 <vBIT_3_HL+0x18>)
 8002390:	88e0      	ldrh	r0, [r4, #6]
 8002392:	f001 f8cd 	bl	8003530 <ucGBMemoryRead>
 8002396:	4622      	mov	r2, r4
 8002398:	2103      	movs	r1, #3
 800239a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800239e:	f000 bfeb 	b.w	8003378 <vGBFunctionBIT>
 80023a2:	bf00      	nop
 80023a4:	24009254 	.word	0x24009254

080023a8 <vBIT_3_A>:
void vBIT_3_A(){      vGBFunctionBIT(reg.A, 3, &reg.F);}
 80023a8:	4a02      	ldr	r2, [pc, #8]	; (80023b4 <vBIT_3_A+0xc>)
 80023aa:	2103      	movs	r1, #3
 80023ac:	7850      	ldrb	r0, [r2, #1]
 80023ae:	f000 bfe3 	b.w	8003378 <vGBFunctionBIT>
 80023b2:	bf00      	nop
 80023b4:	24009254 	.word	0x24009254

080023b8 <vBIT_4_B>:
void vBIT_4_B(){      vGBFunctionBIT(reg.B, 4, &reg.F);}
 80023b8:	4a02      	ldr	r2, [pc, #8]	; (80023c4 <vBIT_4_B+0xc>)
 80023ba:	2104      	movs	r1, #4
 80023bc:	78d0      	ldrb	r0, [r2, #3]
 80023be:	f000 bfdb 	b.w	8003378 <vGBFunctionBIT>
 80023c2:	bf00      	nop
 80023c4:	24009254 	.word	0x24009254

080023c8 <vBIT_4_C>:
void vBIT_4_C(){      vGBFunctionBIT(reg.C, 4, &reg.F);}
 80023c8:	4a02      	ldr	r2, [pc, #8]	; (80023d4 <vBIT_4_C+0xc>)
 80023ca:	2104      	movs	r1, #4
 80023cc:	7890      	ldrb	r0, [r2, #2]
 80023ce:	f000 bfd3 	b.w	8003378 <vGBFunctionBIT>
 80023d2:	bf00      	nop
 80023d4:	24009254 	.word	0x24009254

080023d8 <vBIT_4_D>:
void vBIT_4_D(){      vGBFunctionBIT(reg.D, 4, &reg.F);}
 80023d8:	4a02      	ldr	r2, [pc, #8]	; (80023e4 <vBIT_4_D+0xc>)
 80023da:	2104      	movs	r1, #4
 80023dc:	7950      	ldrb	r0, [r2, #5]
 80023de:	f000 bfcb 	b.w	8003378 <vGBFunctionBIT>
 80023e2:	bf00      	nop
 80023e4:	24009254 	.word	0x24009254

080023e8 <vBIT_4_E>:
void vBIT_4_E(){      vGBFunctionBIT(reg.E, 4, &reg.F);}
 80023e8:	4a02      	ldr	r2, [pc, #8]	; (80023f4 <vBIT_4_E+0xc>)
 80023ea:	2104      	movs	r1, #4
 80023ec:	7910      	ldrb	r0, [r2, #4]
 80023ee:	f000 bfc3 	b.w	8003378 <vGBFunctionBIT>
 80023f2:	bf00      	nop
 80023f4:	24009254 	.word	0x24009254

080023f8 <vBIT_4_H>:
void vBIT_4_H(){      vGBFunctionBIT(reg.H, 4, &reg.F);}
 80023f8:	4a02      	ldr	r2, [pc, #8]	; (8002404 <vBIT_4_H+0xc>)
 80023fa:	2104      	movs	r1, #4
 80023fc:	79d0      	ldrb	r0, [r2, #7]
 80023fe:	f000 bfbb 	b.w	8003378 <vGBFunctionBIT>
 8002402:	bf00      	nop
 8002404:	24009254 	.word	0x24009254

08002408 <vBIT_4_L>:
void vBIT_4_L(){      vGBFunctionBIT(reg.L, 4, &reg.F);}
 8002408:	4a02      	ldr	r2, [pc, #8]	; (8002414 <vBIT_4_L+0xc>)
 800240a:	2104      	movs	r1, #4
 800240c:	7990      	ldrb	r0, [r2, #6]
 800240e:	f000 bfb3 	b.w	8003378 <vGBFunctionBIT>
 8002412:	bf00      	nop
 8002414:	24009254 	.word	0x24009254

08002418 <vBIT_4_HL>:
void vBIT_4_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 4, &reg.F);}
 8002418:	b510      	push	{r4, lr}
 800241a:	4c05      	ldr	r4, [pc, #20]	; (8002430 <vBIT_4_HL+0x18>)
 800241c:	88e0      	ldrh	r0, [r4, #6]
 800241e:	f001 f887 	bl	8003530 <ucGBMemoryRead>
 8002422:	4622      	mov	r2, r4
 8002424:	2104      	movs	r1, #4
 8002426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800242a:	f000 bfa5 	b.w	8003378 <vGBFunctionBIT>
 800242e:	bf00      	nop
 8002430:	24009254 	.word	0x24009254

08002434 <vBIT_4_A>:
void vBIT_4_A(){      vGBFunctionBIT(reg.A, 4, &reg.F);}
 8002434:	4a02      	ldr	r2, [pc, #8]	; (8002440 <vBIT_4_A+0xc>)
 8002436:	2104      	movs	r1, #4
 8002438:	7850      	ldrb	r0, [r2, #1]
 800243a:	f000 bf9d 	b.w	8003378 <vGBFunctionBIT>
 800243e:	bf00      	nop
 8002440:	24009254 	.word	0x24009254

08002444 <vBIT_5_B>:
void vBIT_5_B(){      vGBFunctionBIT(reg.B, 5, &reg.F);}
 8002444:	4a02      	ldr	r2, [pc, #8]	; (8002450 <vBIT_5_B+0xc>)
 8002446:	2105      	movs	r1, #5
 8002448:	78d0      	ldrb	r0, [r2, #3]
 800244a:	f000 bf95 	b.w	8003378 <vGBFunctionBIT>
 800244e:	bf00      	nop
 8002450:	24009254 	.word	0x24009254

08002454 <vBIT_5_C>:
void vBIT_5_C(){      vGBFunctionBIT(reg.C, 5, &reg.F);}
 8002454:	4a02      	ldr	r2, [pc, #8]	; (8002460 <vBIT_5_C+0xc>)
 8002456:	2105      	movs	r1, #5
 8002458:	7890      	ldrb	r0, [r2, #2]
 800245a:	f000 bf8d 	b.w	8003378 <vGBFunctionBIT>
 800245e:	bf00      	nop
 8002460:	24009254 	.word	0x24009254

08002464 <vBIT_5_D>:
void vBIT_5_D(){      vGBFunctionBIT(reg.D, 5, &reg.F);}
 8002464:	4a02      	ldr	r2, [pc, #8]	; (8002470 <vBIT_5_D+0xc>)
 8002466:	2105      	movs	r1, #5
 8002468:	7950      	ldrb	r0, [r2, #5]
 800246a:	f000 bf85 	b.w	8003378 <vGBFunctionBIT>
 800246e:	bf00      	nop
 8002470:	24009254 	.word	0x24009254

08002474 <vBIT_5_E>:
void vBIT_5_E(){      vGBFunctionBIT(reg.E, 5, &reg.F);}
 8002474:	4a02      	ldr	r2, [pc, #8]	; (8002480 <vBIT_5_E+0xc>)
 8002476:	2105      	movs	r1, #5
 8002478:	7910      	ldrb	r0, [r2, #4]
 800247a:	f000 bf7d 	b.w	8003378 <vGBFunctionBIT>
 800247e:	bf00      	nop
 8002480:	24009254 	.word	0x24009254

08002484 <vBIT_5_H>:
void vBIT_5_H(){      vGBFunctionBIT(reg.H, 5, &reg.F);}
 8002484:	4a02      	ldr	r2, [pc, #8]	; (8002490 <vBIT_5_H+0xc>)
 8002486:	2105      	movs	r1, #5
 8002488:	79d0      	ldrb	r0, [r2, #7]
 800248a:	f000 bf75 	b.w	8003378 <vGBFunctionBIT>
 800248e:	bf00      	nop
 8002490:	24009254 	.word	0x24009254

08002494 <vBIT_5_L>:
void vBIT_5_L(){      vGBFunctionBIT(reg.L, 5, &reg.F);}
 8002494:	4a02      	ldr	r2, [pc, #8]	; (80024a0 <vBIT_5_L+0xc>)
 8002496:	2105      	movs	r1, #5
 8002498:	7990      	ldrb	r0, [r2, #6]
 800249a:	f000 bf6d 	b.w	8003378 <vGBFunctionBIT>
 800249e:	bf00      	nop
 80024a0:	24009254 	.word	0x24009254

080024a4 <vBIT_5_HL>:
void vBIT_5_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 5, &reg.F);}
 80024a4:	b510      	push	{r4, lr}
 80024a6:	4c05      	ldr	r4, [pc, #20]	; (80024bc <vBIT_5_HL+0x18>)
 80024a8:	88e0      	ldrh	r0, [r4, #6]
 80024aa:	f001 f841 	bl	8003530 <ucGBMemoryRead>
 80024ae:	4622      	mov	r2, r4
 80024b0:	2105      	movs	r1, #5
 80024b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024b6:	f000 bf5f 	b.w	8003378 <vGBFunctionBIT>
 80024ba:	bf00      	nop
 80024bc:	24009254 	.word	0x24009254

080024c0 <vBIT_5_A>:
void vBIT_5_A(){      vGBFunctionBIT(reg.A, 5, &reg.F);}
 80024c0:	4a02      	ldr	r2, [pc, #8]	; (80024cc <vBIT_5_A+0xc>)
 80024c2:	2105      	movs	r1, #5
 80024c4:	7850      	ldrb	r0, [r2, #1]
 80024c6:	f000 bf57 	b.w	8003378 <vGBFunctionBIT>
 80024ca:	bf00      	nop
 80024cc:	24009254 	.word	0x24009254

080024d0 <vBIT_6_B>:
void vBIT_6_B(){      vGBFunctionBIT(reg.B, 6, &reg.F);}
 80024d0:	4a02      	ldr	r2, [pc, #8]	; (80024dc <vBIT_6_B+0xc>)
 80024d2:	2106      	movs	r1, #6
 80024d4:	78d0      	ldrb	r0, [r2, #3]
 80024d6:	f000 bf4f 	b.w	8003378 <vGBFunctionBIT>
 80024da:	bf00      	nop
 80024dc:	24009254 	.word	0x24009254

080024e0 <vBIT_6_C>:
void vBIT_6_C(){      vGBFunctionBIT(reg.C, 6, &reg.F);}
 80024e0:	4a02      	ldr	r2, [pc, #8]	; (80024ec <vBIT_6_C+0xc>)
 80024e2:	2106      	movs	r1, #6
 80024e4:	7890      	ldrb	r0, [r2, #2]
 80024e6:	f000 bf47 	b.w	8003378 <vGBFunctionBIT>
 80024ea:	bf00      	nop
 80024ec:	24009254 	.word	0x24009254

080024f0 <vBIT_6_D>:
void vBIT_6_D(){      vGBFunctionBIT(reg.D, 6, &reg.F);}
 80024f0:	4a02      	ldr	r2, [pc, #8]	; (80024fc <vBIT_6_D+0xc>)
 80024f2:	2106      	movs	r1, #6
 80024f4:	7950      	ldrb	r0, [r2, #5]
 80024f6:	f000 bf3f 	b.w	8003378 <vGBFunctionBIT>
 80024fa:	bf00      	nop
 80024fc:	24009254 	.word	0x24009254

08002500 <vBIT_6_E>:
void vBIT_6_E(){      vGBFunctionBIT(reg.E, 6, &reg.F);}
 8002500:	4a02      	ldr	r2, [pc, #8]	; (800250c <vBIT_6_E+0xc>)
 8002502:	2106      	movs	r1, #6
 8002504:	7910      	ldrb	r0, [r2, #4]
 8002506:	f000 bf37 	b.w	8003378 <vGBFunctionBIT>
 800250a:	bf00      	nop
 800250c:	24009254 	.word	0x24009254

08002510 <vBIT_6_H>:
void vBIT_6_H(){      vGBFunctionBIT(reg.H, 6, &reg.F);}
 8002510:	4a02      	ldr	r2, [pc, #8]	; (800251c <vBIT_6_H+0xc>)
 8002512:	2106      	movs	r1, #6
 8002514:	79d0      	ldrb	r0, [r2, #7]
 8002516:	f000 bf2f 	b.w	8003378 <vGBFunctionBIT>
 800251a:	bf00      	nop
 800251c:	24009254 	.word	0x24009254

08002520 <vBIT_6_L>:
void vBIT_6_L(){      vGBFunctionBIT(reg.L, 6, &reg.F);}
 8002520:	4a02      	ldr	r2, [pc, #8]	; (800252c <vBIT_6_L+0xc>)
 8002522:	2106      	movs	r1, #6
 8002524:	7990      	ldrb	r0, [r2, #6]
 8002526:	f000 bf27 	b.w	8003378 <vGBFunctionBIT>
 800252a:	bf00      	nop
 800252c:	24009254 	.word	0x24009254

08002530 <vBIT_6_HL>:
void vBIT_6_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 6, &reg.F);}
 8002530:	b510      	push	{r4, lr}
 8002532:	4c05      	ldr	r4, [pc, #20]	; (8002548 <vBIT_6_HL+0x18>)
 8002534:	88e0      	ldrh	r0, [r4, #6]
 8002536:	f000 fffb 	bl	8003530 <ucGBMemoryRead>
 800253a:	4622      	mov	r2, r4
 800253c:	2106      	movs	r1, #6
 800253e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002542:	f000 bf19 	b.w	8003378 <vGBFunctionBIT>
 8002546:	bf00      	nop
 8002548:	24009254 	.word	0x24009254

0800254c <vBIT_6_A>:
void vBIT_6_A(){      vGBFunctionBIT(reg.A, 6, &reg.F);}
 800254c:	4a02      	ldr	r2, [pc, #8]	; (8002558 <vBIT_6_A+0xc>)
 800254e:	2106      	movs	r1, #6
 8002550:	7850      	ldrb	r0, [r2, #1]
 8002552:	f000 bf11 	b.w	8003378 <vGBFunctionBIT>
 8002556:	bf00      	nop
 8002558:	24009254 	.word	0x24009254

0800255c <vBIT_7_B>:
void vBIT_7_B(){      vGBFunctionBIT(reg.B, 7, &reg.F);}
 800255c:	4a02      	ldr	r2, [pc, #8]	; (8002568 <vBIT_7_B+0xc>)
 800255e:	2107      	movs	r1, #7
 8002560:	78d0      	ldrb	r0, [r2, #3]
 8002562:	f000 bf09 	b.w	8003378 <vGBFunctionBIT>
 8002566:	bf00      	nop
 8002568:	24009254 	.word	0x24009254

0800256c <vBIT_7_C>:
void vBIT_7_C(){      vGBFunctionBIT(reg.C, 7, &reg.F);}
 800256c:	4a02      	ldr	r2, [pc, #8]	; (8002578 <vBIT_7_C+0xc>)
 800256e:	2107      	movs	r1, #7
 8002570:	7890      	ldrb	r0, [r2, #2]
 8002572:	f000 bf01 	b.w	8003378 <vGBFunctionBIT>
 8002576:	bf00      	nop
 8002578:	24009254 	.word	0x24009254

0800257c <vBIT_7_D>:
void vBIT_7_D(){      vGBFunctionBIT(reg.D, 7, &reg.F);}
 800257c:	4a02      	ldr	r2, [pc, #8]	; (8002588 <vBIT_7_D+0xc>)
 800257e:	2107      	movs	r1, #7
 8002580:	7950      	ldrb	r0, [r2, #5]
 8002582:	f000 bef9 	b.w	8003378 <vGBFunctionBIT>
 8002586:	bf00      	nop
 8002588:	24009254 	.word	0x24009254

0800258c <vBIT_7_E>:
void vBIT_7_E(){      vGBFunctionBIT(reg.E, 7, &reg.F);}
 800258c:	4a02      	ldr	r2, [pc, #8]	; (8002598 <vBIT_7_E+0xc>)
 800258e:	2107      	movs	r1, #7
 8002590:	7910      	ldrb	r0, [r2, #4]
 8002592:	f000 bef1 	b.w	8003378 <vGBFunctionBIT>
 8002596:	bf00      	nop
 8002598:	24009254 	.word	0x24009254

0800259c <vBIT_7_H>:
void vBIT_7_H(){      vGBFunctionBIT(reg.H, 7, &reg.F);}
 800259c:	4a02      	ldr	r2, [pc, #8]	; (80025a8 <vBIT_7_H+0xc>)
 800259e:	2107      	movs	r1, #7
 80025a0:	79d0      	ldrb	r0, [r2, #7]
 80025a2:	f000 bee9 	b.w	8003378 <vGBFunctionBIT>
 80025a6:	bf00      	nop
 80025a8:	24009254 	.word	0x24009254

080025ac <vBIT_7_L>:
void vBIT_7_L(){      vGBFunctionBIT(reg.L, 7, &reg.F);}
 80025ac:	4a02      	ldr	r2, [pc, #8]	; (80025b8 <vBIT_7_L+0xc>)
 80025ae:	2107      	movs	r1, #7
 80025b0:	7990      	ldrb	r0, [r2, #6]
 80025b2:	f000 bee1 	b.w	8003378 <vGBFunctionBIT>
 80025b6:	bf00      	nop
 80025b8:	24009254 	.word	0x24009254

080025bc <vBIT_7_HL>:
void vBIT_7_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 7, &reg.F);}
 80025bc:	b510      	push	{r4, lr}
 80025be:	4c05      	ldr	r4, [pc, #20]	; (80025d4 <vBIT_7_HL+0x18>)
 80025c0:	88e0      	ldrh	r0, [r4, #6]
 80025c2:	f000 ffb5 	bl	8003530 <ucGBMemoryRead>
 80025c6:	4622      	mov	r2, r4
 80025c8:	2107      	movs	r1, #7
 80025ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025ce:	f000 bed3 	b.w	8003378 <vGBFunctionBIT>
 80025d2:	bf00      	nop
 80025d4:	24009254 	.word	0x24009254

080025d8 <vBIT_7_A>:
void vBIT_7_A(){      vGBFunctionBIT(reg.A, 7, &reg.F);}
 80025d8:	4a02      	ldr	r2, [pc, #8]	; (80025e4 <vBIT_7_A+0xc>)
 80025da:	2107      	movs	r1, #7
 80025dc:	7850      	ldrb	r0, [r2, #1]
 80025de:	f000 becb 	b.w	8003378 <vGBFunctionBIT>
 80025e2:	bf00      	nop
 80025e4:	24009254 	.word	0x24009254

080025e8 <vRES_0_HL>:
void vRES_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 0));}
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <vRES_0_HL+0x1c>)
 80025ea:	2100      	movs	r1, #0
 80025ec:	b510      	push	{r4, lr}
 80025ee:	88dc      	ldrh	r4, [r3, #6]
 80025f0:	4620      	mov	r0, r4
 80025f2:	f000 fed9 	bl	80033a8 <ucGBFunctionRESHL>
 80025f6:	4601      	mov	r1, r0
 80025f8:	4620      	mov	r0, r4
 80025fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025fe:	f000 bf49 	b.w	8003494 <vGBMemoryWrite>
 8002602:	bf00      	nop
 8002604:	24009254 	.word	0x24009254

08002608 <vRES_1_HL>:
void vRES_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 1));}
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <vRES_1_HL+0x1c>)
 800260a:	2101      	movs	r1, #1
 800260c:	b510      	push	{r4, lr}
 800260e:	88dc      	ldrh	r4, [r3, #6]
 8002610:	4620      	mov	r0, r4
 8002612:	f000 fec9 	bl	80033a8 <ucGBFunctionRESHL>
 8002616:	4601      	mov	r1, r0
 8002618:	4620      	mov	r0, r4
 800261a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800261e:	f000 bf39 	b.w	8003494 <vGBMemoryWrite>
 8002622:	bf00      	nop
 8002624:	24009254 	.word	0x24009254

08002628 <vRES_2_HL>:
void vRES_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 2));}
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <vRES_2_HL+0x1c>)
 800262a:	2102      	movs	r1, #2
 800262c:	b510      	push	{r4, lr}
 800262e:	88dc      	ldrh	r4, [r3, #6]
 8002630:	4620      	mov	r0, r4
 8002632:	f000 feb9 	bl	80033a8 <ucGBFunctionRESHL>
 8002636:	4601      	mov	r1, r0
 8002638:	4620      	mov	r0, r4
 800263a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800263e:	f000 bf29 	b.w	8003494 <vGBMemoryWrite>
 8002642:	bf00      	nop
 8002644:	24009254 	.word	0x24009254

08002648 <vRES_3_HL>:
void vRES_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 3));}
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <vRES_3_HL+0x1c>)
 800264a:	2103      	movs	r1, #3
 800264c:	b510      	push	{r4, lr}
 800264e:	88dc      	ldrh	r4, [r3, #6]
 8002650:	4620      	mov	r0, r4
 8002652:	f000 fea9 	bl	80033a8 <ucGBFunctionRESHL>
 8002656:	4601      	mov	r1, r0
 8002658:	4620      	mov	r0, r4
 800265a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800265e:	f000 bf19 	b.w	8003494 <vGBMemoryWrite>
 8002662:	bf00      	nop
 8002664:	24009254 	.word	0x24009254

08002668 <vRES_4_HL>:
void vRES_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 4));}
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <vRES_4_HL+0x1c>)
 800266a:	2104      	movs	r1, #4
 800266c:	b510      	push	{r4, lr}
 800266e:	88dc      	ldrh	r4, [r3, #6]
 8002670:	4620      	mov	r0, r4
 8002672:	f000 fe99 	bl	80033a8 <ucGBFunctionRESHL>
 8002676:	4601      	mov	r1, r0
 8002678:	4620      	mov	r0, r4
 800267a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800267e:	f000 bf09 	b.w	8003494 <vGBMemoryWrite>
 8002682:	bf00      	nop
 8002684:	24009254 	.word	0x24009254

08002688 <vRES_5_HL>:
void vRES_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 5));}
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <vRES_5_HL+0x1c>)
 800268a:	2105      	movs	r1, #5
 800268c:	b510      	push	{r4, lr}
 800268e:	88dc      	ldrh	r4, [r3, #6]
 8002690:	4620      	mov	r0, r4
 8002692:	f000 fe89 	bl	80033a8 <ucGBFunctionRESHL>
 8002696:	4601      	mov	r1, r0
 8002698:	4620      	mov	r0, r4
 800269a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800269e:	f000 bef9 	b.w	8003494 <vGBMemoryWrite>
 80026a2:	bf00      	nop
 80026a4:	24009254 	.word	0x24009254

080026a8 <vRES_6_HL>:
void vRES_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 6));}
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <vRES_6_HL+0x1c>)
 80026aa:	2106      	movs	r1, #6
 80026ac:	b510      	push	{r4, lr}
 80026ae:	88dc      	ldrh	r4, [r3, #6]
 80026b0:	4620      	mov	r0, r4
 80026b2:	f000 fe79 	bl	80033a8 <ucGBFunctionRESHL>
 80026b6:	4601      	mov	r1, r0
 80026b8:	4620      	mov	r0, r4
 80026ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026be:	f000 bee9 	b.w	8003494 <vGBMemoryWrite>
 80026c2:	bf00      	nop
 80026c4:	24009254 	.word	0x24009254

080026c8 <vRES_7_HL>:
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <vRES_7_HL+0x1c>)
 80026ca:	2107      	movs	r1, #7
 80026cc:	b510      	push	{r4, lr}
 80026ce:	88dc      	ldrh	r4, [r3, #6]
 80026d0:	4620      	mov	r0, r4
 80026d2:	f000 fe69 	bl	80033a8 <ucGBFunctionRESHL>
 80026d6:	4601      	mov	r1, r0
 80026d8:	4620      	mov	r0, r4
 80026da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026de:	f000 bed9 	b.w	8003494 <vGBMemoryWrite>
 80026e2:	bf00      	nop
 80026e4:	24009254 	.word	0x24009254

080026e8 <vSET_0_HL>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <vSET_0_HL+0x1c>)
 80026ea:	2100      	movs	r1, #0
 80026ec:	b510      	push	{r4, lr}
 80026ee:	88dc      	ldrh	r4, [r3, #6]
 80026f0:	4620      	mov	r0, r4
 80026f2:	f000 fe65 	bl	80033c0 <ucGBFunctionSETHL>
 80026f6:	4601      	mov	r1, r0
 80026f8:	4620      	mov	r0, r4
 80026fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026fe:	f000 bec9 	b.w	8003494 <vGBMemoryWrite>
 8002702:	bf00      	nop
 8002704:	24009254 	.word	0x24009254

08002708 <vSET_1_HL>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <vSET_1_HL+0x1c>)
 800270a:	2101      	movs	r1, #1
 800270c:	b510      	push	{r4, lr}
 800270e:	88dc      	ldrh	r4, [r3, #6]
 8002710:	4620      	mov	r0, r4
 8002712:	f000 fe55 	bl	80033c0 <ucGBFunctionSETHL>
 8002716:	4601      	mov	r1, r0
 8002718:	4620      	mov	r0, r4
 800271a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800271e:	f000 beb9 	b.w	8003494 <vGBMemoryWrite>
 8002722:	bf00      	nop
 8002724:	24009254 	.word	0x24009254

08002728 <vSET_2_HL>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <vSET_2_HL+0x1c>)
 800272a:	2102      	movs	r1, #2
 800272c:	b510      	push	{r4, lr}
 800272e:	88dc      	ldrh	r4, [r3, #6]
 8002730:	4620      	mov	r0, r4
 8002732:	f000 fe45 	bl	80033c0 <ucGBFunctionSETHL>
 8002736:	4601      	mov	r1, r0
 8002738:	4620      	mov	r0, r4
 800273a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800273e:	f000 bea9 	b.w	8003494 <vGBMemoryWrite>
 8002742:	bf00      	nop
 8002744:	24009254 	.word	0x24009254

08002748 <vSET_3_HL>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <vSET_3_HL+0x1c>)
 800274a:	2103      	movs	r1, #3
 800274c:	b510      	push	{r4, lr}
 800274e:	88dc      	ldrh	r4, [r3, #6]
 8002750:	4620      	mov	r0, r4
 8002752:	f000 fe35 	bl	80033c0 <ucGBFunctionSETHL>
 8002756:	4601      	mov	r1, r0
 8002758:	4620      	mov	r0, r4
 800275a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800275e:	f000 be99 	b.w	8003494 <vGBMemoryWrite>
 8002762:	bf00      	nop
 8002764:	24009254 	.word	0x24009254

08002768 <vSET_4_HL>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <vSET_4_HL+0x1c>)
 800276a:	2104      	movs	r1, #4
 800276c:	b510      	push	{r4, lr}
 800276e:	88dc      	ldrh	r4, [r3, #6]
 8002770:	4620      	mov	r0, r4
 8002772:	f000 fe25 	bl	80033c0 <ucGBFunctionSETHL>
 8002776:	4601      	mov	r1, r0
 8002778:	4620      	mov	r0, r4
 800277a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800277e:	f000 be89 	b.w	8003494 <vGBMemoryWrite>
 8002782:	bf00      	nop
 8002784:	24009254 	.word	0x24009254

08002788 <vSET_5_HL>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <vSET_5_HL+0x1c>)
 800278a:	2105      	movs	r1, #5
 800278c:	b510      	push	{r4, lr}
 800278e:	88dc      	ldrh	r4, [r3, #6]
 8002790:	4620      	mov	r0, r4
 8002792:	f000 fe15 	bl	80033c0 <ucGBFunctionSETHL>
 8002796:	4601      	mov	r1, r0
 8002798:	4620      	mov	r0, r4
 800279a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800279e:	f000 be79 	b.w	8003494 <vGBMemoryWrite>
 80027a2:	bf00      	nop
 80027a4:	24009254 	.word	0x24009254

080027a8 <vSET_6_HL>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <vSET_6_HL+0x1c>)
 80027aa:	2106      	movs	r1, #6
 80027ac:	b510      	push	{r4, lr}
 80027ae:	88dc      	ldrh	r4, [r3, #6]
 80027b0:	4620      	mov	r0, r4
 80027b2:	f000 fe05 	bl	80033c0 <ucGBFunctionSETHL>
 80027b6:	4601      	mov	r1, r0
 80027b8:	4620      	mov	r0, r4
 80027ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027be:	f000 be69 	b.w	8003494 <vGBMemoryWrite>
 80027c2:	bf00      	nop
 80027c4:	24009254 	.word	0x24009254

080027c8 <vSET_7_HL>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <vSET_7_HL+0x1c>)
 80027ca:	2107      	movs	r1, #7
 80027cc:	b510      	push	{r4, lr}
 80027ce:	88dc      	ldrh	r4, [r3, #6]
 80027d0:	4620      	mov	r0, r4
 80027d2:	f000 fdf5 	bl	80033c0 <ucGBFunctionSETHL>
 80027d6:	4601      	mov	r1, r0
 80027d8:	4620      	mov	r0, r4
 80027da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027de:	f000 be59 	b.w	8003494 <vGBMemoryWrite>
 80027e2:	bf00      	nop
 80027e4:	24009254 	.word	0x24009254

080027e8 <vCCF>:
void vCCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); (checkbit(reg.F, C_FLAG)) ? resetbit(&reg.F, C_FLAG) : setbit(&reg.F, C_FLAG);}
 80027e8:	b510      	push	{r4, lr}
 80027ea:	4c0d      	ldr	r4, [pc, #52]	; (8002820 <vCCF+0x38>)
 80027ec:	2106      	movs	r1, #6
 80027ee:	4620      	mov	r0, r4
 80027f0:	f000 f9ba 	bl	8002b68 <resetbit>
 80027f4:	4620      	mov	r0, r4
 80027f6:	2105      	movs	r1, #5
 80027f8:	f000 f9b6 	bl	8002b68 <resetbit>
 80027fc:	7820      	ldrb	r0, [r4, #0]
 80027fe:	2104      	movs	r1, #4
 8002800:	f000 f9ba 	bl	8002b78 <checkbit>
 8002804:	b128      	cbz	r0, 8002812 <vCCF+0x2a>
 8002806:	4620      	mov	r0, r4
 8002808:	2104      	movs	r1, #4
 800280a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800280e:	f000 b9ab 	b.w	8002b68 <resetbit>
 8002812:	4620      	mov	r0, r4
 8002814:	2104      	movs	r1, #4
 8002816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800281a:	f000 b99d 	b.w	8002b58 <setbit>
 800281e:	bf00      	nop
 8002820:	24009254 	.word	0x24009254

08002824 <vRET_C.part.0>:
void vRET_NZ(){       customDuration = (checkbit(reg.F, Z_FLAG)) ?  8 : 20; if(checkbit(reg.F, Z_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002824:	4901      	ldr	r1, [pc, #4]	; (800282c <vRET_C.part.0+0x8>)
 8002826:	1e88      	subs	r0, r1, #2
 8002828:	f000 bbd2 	b.w	8002fd0 <vGBFunctionRET>
 800282c:	2400925e 	.word	0x2400925e

08002830 <vRET_NZ>:
 8002830:	b510      	push	{r4, lr}
 8002832:	4c0b      	ldr	r4, [pc, #44]	; (8002860 <vRET_NZ+0x30>)
 8002834:	2107      	movs	r1, #7
 8002836:	7820      	ldrb	r0, [r4, #0]
 8002838:	f000 f99e 	bl	8002b78 <checkbit>
 800283c:	2800      	cmp	r0, #0
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <vRET_NZ+0x34>)
 8002840:	f04f 0107 	mov.w	r1, #7
 8002844:	bf14      	ite	ne
 8002846:	2208      	movne	r2, #8
 8002848:	2214      	moveq	r2, #20
 800284a:	7820      	ldrb	r0, [r4, #0]
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	f000 f993 	bl	8002b78 <checkbit>
 8002852:	b100      	cbz	r0, 8002856 <vRET_NZ+0x26>
 8002854:	bd10      	pop	{r4, pc}
 8002856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800285a:	f7ff bfe3 	b.w	8002824 <vRET_C.part.0>
 800285e:	bf00      	nop
 8002860:	24009254 	.word	0x24009254
 8002864:	2400908c 	.word	0x2400908c

08002868 <vRET_Z>:
void vRET_Z(){        customDuration = (checkbit(reg.F, Z_FLAG)) ?  20 : 8; if(checkbit(reg.F, Z_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002868:	b510      	push	{r4, lr}
 800286a:	4c0b      	ldr	r4, [pc, #44]	; (8002898 <vRET_Z+0x30>)
 800286c:	2107      	movs	r1, #7
 800286e:	7820      	ldrb	r0, [r4, #0]
 8002870:	f000 f982 	bl	8002b78 <checkbit>
 8002874:	2800      	cmp	r0, #0
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <vRET_Z+0x34>)
 8002878:	f04f 0107 	mov.w	r1, #7
 800287c:	bf14      	ite	ne
 800287e:	2214      	movne	r2, #20
 8002880:	2208      	moveq	r2, #8
 8002882:	7820      	ldrb	r0, [r4, #0]
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	f000 f977 	bl	8002b78 <checkbit>
 800288a:	b900      	cbnz	r0, 800288e <vRET_Z+0x26>
 800288c:	bd10      	pop	{r4, pc}
 800288e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002892:	f7ff bfc7 	b.w	8002824 <vRET_C.part.0>
 8002896:	bf00      	nop
 8002898:	24009254 	.word	0x24009254
 800289c:	2400908c 	.word	0x2400908c

080028a0 <vRET_NC>:
void vRET_NC(){       customDuration =(checkbit(reg.F, C_FLAG)) ?  8 : 20; if(checkbit(reg.F, C_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 80028a0:	b510      	push	{r4, lr}
 80028a2:	4c0b      	ldr	r4, [pc, #44]	; (80028d0 <vRET_NC+0x30>)
 80028a4:	2104      	movs	r1, #4
 80028a6:	7820      	ldrb	r0, [r4, #0]
 80028a8:	f000 f966 	bl	8002b78 <checkbit>
 80028ac:	2800      	cmp	r0, #0
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <vRET_NC+0x34>)
 80028b0:	f04f 0104 	mov.w	r1, #4
 80028b4:	bf14      	ite	ne
 80028b6:	2208      	movne	r2, #8
 80028b8:	2214      	moveq	r2, #20
 80028ba:	7820      	ldrb	r0, [r4, #0]
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	f000 f95b 	bl	8002b78 <checkbit>
 80028c2:	b100      	cbz	r0, 80028c6 <vRET_NC+0x26>
 80028c4:	bd10      	pop	{r4, pc}
 80028c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ca:	f7ff bfab 	b.w	8002824 <vRET_C.part.0>
 80028ce:	bf00      	nop
 80028d0:	24009254 	.word	0x24009254
 80028d4:	2400908c 	.word	0x2400908c

080028d8 <vRET_C>:
void vRET_C(){        customDuration =(checkbit(reg.F, C_FLAG)) ?  20 : 8; if(checkbit(reg.F, C_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 80028d8:	b510      	push	{r4, lr}
 80028da:	4c0b      	ldr	r4, [pc, #44]	; (8002908 <vRET_C+0x30>)
 80028dc:	2104      	movs	r1, #4
 80028de:	7820      	ldrb	r0, [r4, #0]
 80028e0:	f000 f94a 	bl	8002b78 <checkbit>
 80028e4:	2800      	cmp	r0, #0
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <vRET_C+0x34>)
 80028e8:	f04f 0104 	mov.w	r1, #4
 80028ec:	bf14      	ite	ne
 80028ee:	2214      	movne	r2, #20
 80028f0:	2208      	moveq	r2, #8
 80028f2:	7820      	ldrb	r0, [r4, #0]
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	f000 f93f 	bl	8002b78 <checkbit>
 80028fa:	b900      	cbnz	r0, 80028fe <vRET_C+0x26>
 80028fc:	bd10      	pop	{r4, pc}
 80028fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002902:	f7ff bf8f 	b.w	8002824 <vRET_C.part.0>
 8002906:	bf00      	nop
 8002908:	24009254 	.word	0x24009254
 800290c:	2400908c 	.word	0x2400908c

08002910 <vLD_A_A>:
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop

08002914 <vLD_B_B>:
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop

08002918 <vLD_C_C>:
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop

0800291c <vLD_D_D>:
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop

08002920 <vLD_E_E>:
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop

08002924 <vLD_H_H>:
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop

08002928 <vLD_L_L>:
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop

0800292c <ucGetTstate>:

uint8_t ucGetTstate(){
	return tStates;
 800292c:	4b01      	ldr	r3, [pc, #4]	; (8002934 <ucGetTstate+0x8>)
}
 800292e:	7818      	ldrb	r0, [r3, #0]
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	24009096 	.word	0x24009096

08002938 <vGBCPUInterruptHandler>:
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
		//vGBMemoryPrint();
	}
}

void vGBCPUInterruptHandler(){
 8002938:	b570      	push	{r4, r5, r6, lr}
	if(ucOneCycleInterruptDelay == 1){
 800293a:	4d39      	ldr	r5, [pc, #228]	; (8002a20 <vGBCPUInterruptHandler+0xe8>)
 800293c:	782c      	ldrb	r4, [r5, #0]
 800293e:	2c01      	cmp	r4, #1
 8002940:	d002      	beq.n	8002948 <vGBCPUInterruptHandler+0x10>

			tStates += 5*4;
		}

	}else{
		ucOneCycleInterruptDelay++;
 8002942:	3401      	adds	r4, #1
 8002944:	702c      	strb	r4, [r5, #0]
	}
}
 8002946:	bd70      	pop	{r4, r5, r6, pc}
		if(ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR) & 0x1F){
 8002948:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800294c:	f000 fdf0 	bl	8003530 <ucGBMemoryRead>
 8002950:	4606      	mov	r6, r0
 8002952:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002956:	f000 fdeb 	bl	8003530 <ucGBMemoryRead>
 800295a:	4030      	ands	r0, r6
 800295c:	06c6      	lsls	r6, r0, #27
 800295e:	d0f2      	beq.n	8002946 <vGBCPUInterruptHandler+0xe>
			ucInterruptMasterEnable = 0;
 8002960:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <vGBCPUInterruptHandler+0xec>)
 8002962:	2600      	movs	r6, #0
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002964:	f64f 70ff 	movw	r0, #65535	; 0xffff
			ucInterruptMasterEnable = 0;
 8002968:	701e      	strb	r6, [r3, #0]
			ucOneCycleInterruptDelay = 0;
 800296a:	702e      	strb	r6, [r5, #0]
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 800296c:	f000 fde0 	bl	8003530 <ucGBMemoryRead>
 8002970:	4605      	mov	r5, r0
 8002972:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002976:	f000 fddb 	bl	8003530 <ucGBMemoryRead>
 800297a:	4028      	ands	r0, r5
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = VBLANK_VECTOR;
 800297c:	07c5      	lsls	r5, r0, #31
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 800297e:	b2c3      	uxtb	r3, r0
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = VBLANK_VECTOR;
 8002980:	d40c      	bmi.n	800299c <vGBCPUInterruptHandler+0x64>
			}else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = LCDSTAT_VECTOR;
 8002982:	0798      	lsls	r0, r3, #30
 8002984:	d417      	bmi.n	80029b6 <vGBCPUInterruptHandler+0x7e>
			}else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = TIMER_VECTOR;
 8002986:	0759      	lsls	r1, r3, #29
 8002988:	d422      	bmi.n	80029d0 <vGBCPUInterruptHandler+0x98>
			}else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = SERIAL_VECTOR;
 800298a:	071a      	lsls	r2, r3, #28
 800298c:	d42d      	bmi.n	80029ea <vGBCPUInterruptHandler+0xb2>
			}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 4); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = JOYPAD_VECTOR;
 800298e:	06db      	lsls	r3, r3, #27
 8002990:	d438      	bmi.n	8002a04 <vGBCPUInterruptHandler+0xcc>
			tStates += 5*4;
 8002992:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <vGBCPUInterruptHandler+0xf0>)
 8002994:	7813      	ldrb	r3, [r2, #0]
 8002996:	3314      	adds	r3, #20
 8002998:	7013      	strb	r3, [r2, #0]
}
 800299a:	bd70      	pop	{r4, r5, r6, pc}
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = VBLANK_VECTOR;
 800299c:	4631      	mov	r1, r6
 800299e:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029a2:	f000 fda9 	bl	80034f8 <vGBMemoryResetBit>
 80029a6:	4921      	ldr	r1, [pc, #132]	; (8002a2c <vGBCPUInterruptHandler+0xf4>)
 80029a8:	1e88      	subs	r0, r1, #2
 80029aa:	f000 fb2f 	bl	800300c <vGBFunctionPUSH>
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <vGBCPUInterruptHandler+0xf8>)
 80029b0:	2240      	movs	r2, #64	; 0x40
 80029b2:	815a      	strh	r2, [r3, #10]
 80029b4:	e7ed      	b.n	8002992 <vGBCPUInterruptHandler+0x5a>
			}else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = LCDSTAT_VECTOR;
 80029b6:	4621      	mov	r1, r4
 80029b8:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029bc:	f000 fd9c 	bl	80034f8 <vGBMemoryResetBit>
 80029c0:	491a      	ldr	r1, [pc, #104]	; (8002a2c <vGBCPUInterruptHandler+0xf4>)
 80029c2:	1e88      	subs	r0, r1, #2
 80029c4:	f000 fb22 	bl	800300c <vGBFunctionPUSH>
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <vGBCPUInterruptHandler+0xf8>)
 80029ca:	2248      	movs	r2, #72	; 0x48
 80029cc:	815a      	strh	r2, [r3, #10]
 80029ce:	e7e0      	b.n	8002992 <vGBCPUInterruptHandler+0x5a>
			}else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = TIMER_VECTOR;
 80029d0:	2102      	movs	r1, #2
 80029d2:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029d6:	f000 fd8f 	bl	80034f8 <vGBMemoryResetBit>
 80029da:	4914      	ldr	r1, [pc, #80]	; (8002a2c <vGBCPUInterruptHandler+0xf4>)
 80029dc:	1e88      	subs	r0, r1, #2
 80029de:	f000 fb15 	bl	800300c <vGBFunctionPUSH>
 80029e2:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <vGBCPUInterruptHandler+0xf8>)
 80029e4:	2250      	movs	r2, #80	; 0x50
 80029e6:	815a      	strh	r2, [r3, #10]
 80029e8:	e7d3      	b.n	8002992 <vGBCPUInterruptHandler+0x5a>
			}else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = SERIAL_VECTOR;
 80029ea:	2103      	movs	r1, #3
 80029ec:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029f0:	f000 fd82 	bl	80034f8 <vGBMemoryResetBit>
 80029f4:	490d      	ldr	r1, [pc, #52]	; (8002a2c <vGBCPUInterruptHandler+0xf4>)
 80029f6:	1e88      	subs	r0, r1, #2
 80029f8:	f000 fb08 	bl	800300c <vGBFunctionPUSH>
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <vGBCPUInterruptHandler+0xf8>)
 80029fe:	2258      	movs	r2, #88	; 0x58
 8002a00:	815a      	strh	r2, [r3, #10]
 8002a02:	e7c6      	b.n	8002992 <vGBCPUInterruptHandler+0x5a>
			}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 4); vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = JOYPAD_VECTOR;
 8002a04:	2104      	movs	r1, #4
 8002a06:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a0a:	f000 fd75 	bl	80034f8 <vGBMemoryResetBit>
 8002a0e:	4907      	ldr	r1, [pc, #28]	; (8002a2c <vGBCPUInterruptHandler+0xf4>)
 8002a10:	1e88      	subs	r0, r1, #2
 8002a12:	f000 fafb 	bl	800300c <vGBFunctionPUSH>
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <vGBCPUInterruptHandler+0xf8>)
 8002a18:	2260      	movs	r2, #96	; 0x60
 8002a1a:	815a      	strh	r2, [r3, #10]
 8002a1c:	e7b9      	b.n	8002992 <vGBCPUInterruptHandler+0x5a>
 8002a1e:	bf00      	nop
 8002a20:	24009099 	.word	0x24009099
 8002a24:	24009098 	.word	0x24009098
 8002a28:	24009096 	.word	0x24009096
 8002a2c:	2400925e 	.word	0x2400925e
 8002a30:	24009254 	.word	0x24009254

08002a34 <vGBCPUinstr>:

void vGBCPUinstr(uint8_t opcode){
 8002a34:	b570      	push	{r4, r5, r6, lr}

	if(reg.PC == 0x40){
 8002a36:	4d28      	ldr	r5, [pc, #160]	; (8002ad8 <vGBCPUinstr+0xa4>)
void vGBCPUinstr(uint8_t opcode){
 8002a38:	4604      	mov	r4, r0
	if(reg.PC == 0x40){
 8002a3a:	896b      	ldrh	r3, [r5, #10]
 8002a3c:	2b40      	cmp	r3, #64	; 0x40
 8002a3e:	d102      	bne.n	8002a46 <vGBCPUinstr+0x12>
		num = 5;
 8002a40:	4b26      	ldr	r3, [pc, #152]	; (8002adc <vGBCPUinstr+0xa8>)
 8002a42:	2205      	movs	r2, #5
 8002a44:	701a      	strb	r2, [r3, #0]
	}
	vGBMemorySetOP(opcode);
 8002a46:	4620      	mov	r0, r4
 8002a48:	f000 fcc4 	bl	80033d4 <vGBMemorySetOP>

	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002a4c:	2ccb      	cmp	r4, #203	; 0xcb
 8002a4e:	d027      	beq.n	8002aa0 <vGBCPUinstr+0x6c>
 8002a50:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <vGBCPUinstr+0xac>)
 8002a52:	8969      	ldrh	r1, [r5, #10]
 8002a54:	eb02 06c4 	add.w	r6, r2, r4, lsl #3
	((void (*)(void))instructions[opcode].instr)();
 8002a58:	f852 2034 	ldr.w	r2, [r2, r4, lsl #3]
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002a5c:	7933      	ldrb	r3, [r6, #4]
 8002a5e:	440b      	add	r3, r1
 8002a60:	816b      	strh	r3, [r5, #10]
	((void (*)(void))instructions[opcode].instr)();
 8002a62:	4790      	blx	r2

	if (opcode == 0xCB){
		tStates = prefix_instructions[ucGBMemoryRead(reg.PC - 1)].Tstate;
	}else if(instructions[opcode].Tstate == 255){
 8002a64:	7973      	ldrb	r3, [r6, #5]
 8002a66:	2bff      	cmp	r3, #255	; 0xff
 8002a68:	d00f      	beq.n	8002a8a <vGBCPUinstr+0x56>
		tStates = customDuration;
	}else{
		tStates = instructions[opcode].Tstate;
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <vGBCPUinstr+0xb0>)
 8002a6c:	7013      	strb	r3, [r2, #0]
	}

	if(ucInterruptMasterEnable == 1)
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <vGBCPUinstr+0xb4>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d011      	beq.n	8002a9a <vGBCPUinstr+0x66>
			vGBCPUInterruptHandler();

	//if( print == 1)
	//	vGBMemoryPrint();

	if(reg.PC == 0x2CA){
 8002a76:	896a      	ldrh	r2, [r5, #10]
 8002a78:	f240 23ca 	movw	r3, #714	; 0x2ca
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d000      	beq.n	8002a82 <vGBCPUinstr+0x4e>
		print = 1;
	}
}
 8002a80:	bd70      	pop	{r4, r5, r6, pc}
		print = 1;
 8002a82:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <vGBCPUinstr+0xb8>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
}
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
		tStates = customDuration;
 8002a8a:	4a19      	ldr	r2, [pc, #100]	; (8002af0 <vGBCPUinstr+0xbc>)
 8002a8c:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <vGBCPUinstr+0xb0>)
 8002a8e:	7812      	ldrb	r2, [r2, #0]
 8002a90:	701a      	strb	r2, [r3, #0]
	if(ucInterruptMasterEnable == 1)
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <vGBCPUinstr+0xb4>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d1ed      	bne.n	8002a76 <vGBCPUinstr+0x42>
			vGBCPUInterruptHandler();
 8002a9a:	f7ff ff4d 	bl	8002938 <vGBCPUInterruptHandler>
 8002a9e:	e7ea      	b.n	8002a76 <vGBCPUinstr+0x42>
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002aa0:	8968      	ldrh	r0, [r5, #10]
 8002aa2:	4c14      	ldr	r4, [pc, #80]	; (8002af4 <vGBCPUinstr+0xc0>)
 8002aa4:	3001      	adds	r0, #1
 8002aa6:	b280      	uxth	r0, r0
 8002aa8:	f000 fd42 	bl	8003530 <ucGBMemoryRead>
 8002aac:	8969      	ldrh	r1, [r5, #10]
 8002aae:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
	((void (*)(void))instructions[opcode].instr)();
 8002ab2:	4a0b      	ldr	r2, [pc, #44]	; (8002ae0 <vGBCPUinstr+0xac>)
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002ab4:	7903      	ldrb	r3, [r0, #4]
	((void (*)(void))instructions[opcode].instr)();
 8002ab6:	f8d2 2658 	ldr.w	r2, [r2, #1624]	; 0x658
	reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002aba:	440b      	add	r3, r1
 8002abc:	816b      	strh	r3, [r5, #10]
	((void (*)(void))instructions[opcode].instr)();
 8002abe:	4790      	blx	r2
		tStates = prefix_instructions[ucGBMemoryRead(reg.PC - 1)].Tstate;
 8002ac0:	8968      	ldrh	r0, [r5, #10]
 8002ac2:	3801      	subs	r0, #1
 8002ac4:	b280      	uxth	r0, r0
 8002ac6:	f000 fd33 	bl	8003530 <ucGBMemoryRead>
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <vGBCPUinstr+0xb0>)
 8002acc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002ad0:	7942      	ldrb	r2, [r0, #5]
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	e7cb      	b.n	8002a6e <vGBCPUinstr+0x3a>
 8002ad6:	bf00      	nop
 8002ad8:	24009254 	.word	0x24009254
 8002adc:	24009094 	.word	0x24009094
 8002ae0:	24000008 	.word	0x24000008
 8002ae4:	24009096 	.word	0x24009096
 8002ae8:	24009098 	.word	0x24009098
 8002aec:	24009095 	.word	0x24009095
 8002af0:	2400908c 	.word	0x2400908c
 8002af4:	24000808 	.word	0x24000808

08002af8 <vGBCPUboot>:
void vGBCPUboot(){
 8002af8:	b570      	push	{r4, r5, r6, lr}
	if(reg.PC <= 0xFF){
 8002afa:	4c11      	ldr	r4, [pc, #68]	; (8002b40 <vGBCPUboot+0x48>)
 8002afc:	8960      	ldrh	r0, [r4, #10]
 8002afe:	28ff      	cmp	r0, #255	; 0xff
 8002b00:	d90a      	bls.n	8002b18 <vGBCPUboot+0x20>
		numcount++;
 8002b02:	4a10      	ldr	r2, [pc, #64]	; (8002b44 <vGBCPUboot+0x4c>)
		if(n == 0){
 8002b04:	4d10      	ldr	r5, [pc, #64]	; (8002b48 <vGBCPUboot+0x50>)
		numcount++;
 8002b06:	e9d2 3100 	ldrd	r3, r1, [r2]
		if(n == 0){
 8002b0a:	682e      	ldr	r6, [r5, #0]
		numcount++;
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f141 0100 	adc.w	r1, r1, #0
 8002b12:	e9c2 3100 	strd	r3, r1, [r2]
		if(n == 0){
 8002b16:	b12e      	cbz	r6, 8002b24 <vGBCPUboot+0x2c>
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b18:	f000 fd0a 	bl	8003530 <ucGBMemoryRead>
}
 8002b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b20:	f7ff bf88 	b.w	8002a34 <vGBCPUinstr>
			vGBMemoryLoad(Tetris_gb, 256);
 8002b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b28:	4808      	ldr	r0, [pc, #32]	; (8002b4c <vGBCPUboot+0x54>)
 8002b2a:	f000 fc69 	bl	8003400 <vGBMemoryLoad>
			n = 1;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	8960      	ldrh	r0, [r4, #10]
 8002b32:	602b      	str	r3, [r5, #0]
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b34:	f000 fcfc 	bl	8003530 <ucGBMemoryRead>
}
 8002b38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002b3c:	f7ff bf7a 	b.w	8002a34 <vGBCPUinstr>
 8002b40:	24009254 	.word	0x24009254
 8002b44:	24009248 	.word	0x24009248
 8002b48:	24009090 	.word	0x24009090
 8002b4c:	2400100c 	.word	0x2400100c

08002b50 <concat_16bit_bigEndian>:
#include <stdio.h>
#include "gbfunctions.h"
#include "gbmemory.h"

uint16_t concat_16bit_bigEndian(uint8_t x, uint8_t y) {
	return (uint16_t) (y << 8) + x;
 8002b50:	eb00 2001 	add.w	r0, r0, r1, lsl #8
}
 8002b54:	b280      	uxth	r0, r0
 8002b56:	4770      	bx	lr

08002b58 <setbit>:

void setbit(uint8_t *n, uint8_t bit){
	(*n) |= (0x1 << bit);
 8002b58:	2301      	movs	r3, #1
 8002b5a:	fa03 f101 	lsl.w	r1, r3, r1
 8002b5e:	7803      	ldrb	r3, [r0, #0]
 8002b60:	4319      	orrs	r1, r3
 8002b62:	7001      	strb	r1, [r0, #0]
}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop

08002b68 <resetbit>:

void resetbit(uint8_t *n, uint8_t bit){
	(*n) &= ~(0x1 << bit);
 8002b68:	2301      	movs	r3, #1
 8002b6a:	fa03 f101 	lsl.w	r1, r3, r1
 8002b6e:	7803      	ldrb	r3, [r0, #0]
 8002b70:	ea23 0101 	bic.w	r1, r3, r1
 8002b74:	7001      	strb	r1, [r0, #0]
}
 8002b76:	4770      	bx	lr

08002b78 <checkbit>:

uint8_t checkbit(uint8_t n, uint8_t bit){
	return ((n >> bit) & 0x1);
 8002b78:	4108      	asrs	r0, r1
}
 8002b7a:	f000 0001 	and.w	r0, r0, #1
 8002b7e:	4770      	bx	lr

08002b80 <v8bitRegisterINC>:

void v8bitRegisterINC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002b80:	7803      	ldrb	r3, [r0, #0]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002b88:	780b      	ldrb	r3, [r1, #0]
 8002b8a:	bf0c      	ite	eq
 8002b8c:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002b90:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002b94:	700b      	strb	r3, [r1, #0]
	*reg = *reg + 1;
 8002b96:	7803      	ldrb	r3, [r0, #0]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002b9c:	f991 2000 	ldrsb.w	r2, [r1]
 8002ba0:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8002ba4:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002ba6:	7800      	ldrb	r0, [r0, #0]
 8002ba8:	b118      	cbz	r0, 8002bb2 <v8bitRegisterINC+0x32>
	(*n) &= ~(0x1 << bit);
 8002baa:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002bae:	700b      	strb	r3, [r1, #0]
}
 8002bb0:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002bb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	700b      	strb	r3, [r1, #0]
}
 8002bba:	4770      	bx	lr

08002bbc <v8bitRegisterDEC>:

void v8bitRegisterDEC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8002bbc:	7803      	ldrb	r3, [r0, #0]
 8002bbe:	f013 0f0f 	tst.w	r3, #15
	(*n) &= ~(0x1 << bit);
 8002bc2:	780b      	ldrb	r3, [r1, #0]
 8002bc4:	bf14      	ite	ne
 8002bc6:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002bca:	f043 0320 	orreq.w	r3, r3, #32
 8002bce:	700b      	strb	r3, [r1, #0]
	*reg = *reg - 1;
 8002bd0:	7803      	ldrb	r3, [r0, #0]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	7003      	strb	r3, [r0, #0]
	(*n) |= (0x1 << bit);
 8002bd6:	f991 3000 	ldrsb.w	r3, [r1]
 8002bda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bde:	700a      	strb	r2, [r1, #0]
	setbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002be0:	7802      	ldrb	r2, [r0, #0]
 8002be2:	b12a      	cbz	r2, 8002bf0 <v8bitRegisterDEC+0x34>
	(*n) &= ~(0x1 << bit);
 8002be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bec:	700b      	strb	r3, [r1, #0]
}
 8002bee:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002bf0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	700b      	strb	r3, [r1, #0]
}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop

08002bfc <vGBFunctionRLCA>:
	return ((n >> bit) & 0x1);
 8002bfc:	7802      	ldrb	r2, [r0, #0]

void vGBFunctionRLCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(*reg, 7);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002bfe:	09d3      	lsrs	r3, r2, #7
 8002c00:	bf0c      	ite	eq
 8002c02:	2300      	moveq	r3, #0
 8002c04:	2310      	movne	r3, #16
 8002c06:	700b      	strb	r3, [r1, #0]
	*reg <<= 1;
 8002c08:	7803      	ldrb	r3, [r0, #0]
 8002c0a:	005b      	lsls	r3, r3, #1
	*reg += tempCarry;
 8002c0c:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8002c10:	7003      	strb	r3, [r0, #0]
}
 8002c12:	4770      	bx	lr

08002c14 <vGBFunctionRRCA>:
	return ((n >> bit) & 0x1);
 8002c14:	7803      	ldrb	r3, [r0, #0]

void vGBFunctionRRCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(*reg, 0);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002c16:	f013 0301 	ands.w	r3, r3, #1
 8002c1a:	d007      	beq.n	8002c2c <vGBFunctionRRCA+0x18>
 8002c1c:	2310      	movs	r3, #16
 8002c1e:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002c20:	7803      	ldrb	r3, [r0, #0]
 8002c22:	085b      	lsrs	r3, r3, #1
	(*n) |= (0x1 << bit);
 8002c24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c28:	7003      	strb	r3, [r0, #0]
}
 8002c2a:	4770      	bx	lr
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002c2c:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002c2e:	7803      	ldrb	r3, [r0, #0]
 8002c30:	085b      	lsrs	r3, r3, #1
 8002c32:	7003      	strb	r3, [r0, #0]
	if (tempCarry != 0) setbit(reg, 7);
}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop

08002c38 <vGBFunction16bitADD>:

void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
	uint32_t tempRes = *regHL + reg16;
 8002c38:	8803      	ldrh	r3, [r0, #0]
 8002c3a:	4419      	add	r1, r3
	(tempRes & 0xFFFF0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002c3c:	03cb      	lsls	r3, r1, #15
void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
 8002c3e:	b430      	push	{r4, r5}
	(tempRes & 0xFFFF0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002c40:	d517      	bpl.n	8002c72 <vGBFunction16bitADD+0x3a>
	(*n) |= (0x1 << bit);
 8002c42:	f992 3000 	ldrsb.w	r3, [r2]
 8002c46:	f043 0310 	orr.w	r3, r3, #16
 8002c4a:	b2dc      	uxtb	r4, r3
 8002c4c:	7014      	strb	r4, [r2, #0]
	(((tempRes & 0x0FFF) < (*regHL & 0x0FFF))) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002c4e:	f3c1 050b 	ubfx	r5, r1, #0, #12
 8002c52:	8804      	ldrh	r4, [r0, #0]
 8002c54:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8002c58:	42a5      	cmp	r5, r4
 8002c5a:	d211      	bcs.n	8002c80 <vGBFunction16bitADD+0x48>
	(*n) |= (0x1 << bit);
 8002c5c:	f043 0320 	orr.w	r3, r3, #32
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	7013      	strb	r3, [r2, #0]
	*regHL = (uint16_t)(tempRes & 0xffff);
 8002c64:	8001      	strh	r1, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002c66:	7813      	ldrb	r3, [r2, #0]
 8002c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	resetbit(flagReg, N_FLAG);
}
 8002c6c:	bc30      	pop	{r4, r5}
	(*n) &= ~(0x1 << bit);
 8002c6e:	7013      	strb	r3, [r2, #0]
}
 8002c70:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002c72:	f992 4000 	ldrsb.w	r4, [r2]
 8002c76:	f024 0310 	bic.w	r3, r4, #16
 8002c7a:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002c7e:	e7e5      	b.n	8002c4c <vGBFunction16bitADD+0x14>
	(*n) &= ~(0x1 << bit);
 8002c80:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002c84:	e7ed      	b.n	8002c62 <vGBFunction16bitADD+0x2a>
 8002c86:	bf00      	nop

08002c88 <vGBFunctionRLA>:

void vGBFunctionRLA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002c88:	f990 2000 	ldrsb.w	r2, [r0]
	return ((n >> bit) & 0x1);
 8002c8c:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002c8e:	10d2      	asrs	r2, r2, #3
	return ((n >> bit) & 0x1);
 8002c90:	f3c3 1300 	ubfx	r3, r3, #4, #1
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002c94:	f002 0210 	and.w	r2, r2, #16
 8002c98:	700a      	strb	r2, [r1, #0]
	*regA <<= 1;
 8002c9a:	7802      	ldrb	r2, [r0, #0]
	*regA += prevCarry;
 8002c9c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002ca0:	7003      	strb	r3, [r0, #0]
}
 8002ca2:	4770      	bx	lr

08002ca4 <vGBFunctionRRA>:

void vGBFunctionRRA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002ca4:	7802      	ldrb	r2, [r0, #0]
	return ((n >> bit) & 0x1);
 8002ca6:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002ca8:	0112      	lsls	r2, r2, #4
	return ((n >> bit) & 0x1);
 8002caa:	091b      	lsrs	r3, r3, #4
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002cac:	f002 0210 	and.w	r2, r2, #16
	*regA >>= 1;
	*regA += (prevCarry << 7);
 8002cb0:	01db      	lsls	r3, r3, #7
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002cb2:	700a      	strb	r2, [r1, #0]
	*regA >>= 1;
 8002cb4:	7802      	ldrb	r2, [r0, #0]
	*regA += (prevCarry << 7);
 8002cb6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002cba:	7003      	strb	r3, [r0, #0]
}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop

08002cc0 <vGBFunctionJR_NZ>:
	return ((n >> bit) & 0x1);
 8002cc0:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_NZ(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002cc2:	4603      	mov	r3, r0
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002cc4:	09c9      	lsrs	r1, r1, #7
 8002cc6:	d105      	bne.n	8002cd4 <vGBFunctionJR_NZ+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002cc8:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002cca:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002ccc:	fa41 f282 	sxtab	r2, r1, r2
 8002cd0:	801a      	strh	r2, [r3, #0]
		return 12;
 8002cd2:	4770      	bx	lr
		return 8;
 8002cd4:	2008      	movs	r0, #8
	}
}
 8002cd6:	4770      	bx	lr

08002cd8 <vGBFunctionDAA>:
	return ((n >> bit) & 0x1);
 8002cd8:	780a      	ldrb	r2, [r1, #0]

void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
 8002cda:	b410      	push	{r4}
	uint16_t tempShort = *regA;
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002cdc:	f012 0f40 	tst.w	r2, #64	; 0x40
	uint16_t tempShort = *regA;
 8002ce0:	7804      	ldrb	r4, [r0, #0]
 8002ce2:	b2a3      	uxth	r3, r4
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002ce4:	d019      	beq.n	8002d1a <vGBFunctionDAA+0x42>
		if(checkbit(*flagReg, H_FLAG) != 0) tempShort = ( tempShort - 0x06) & 0xFF;
 8002ce6:	0694      	lsls	r4, r2, #26
 8002ce8:	d501      	bpl.n	8002cee <vGBFunctionDAA+0x16>
 8002cea:	3b06      	subs	r3, #6
 8002cec:	b2db      	uxtb	r3, r3
		if(checkbit(*flagReg, C_FLAG) != 0) tempShort -= -0x60;
	}else{
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
		if(checkbit(*flagReg, C_FLAG) || (tempShort > 0x9F)) tempShort += 0x60;
 8002cee:	06d2      	lsls	r2, r2, #27
 8002cf0:	d501      	bpl.n	8002cf6 <vGBFunctionDAA+0x1e>
 8002cf2:	3360      	adds	r3, #96	; 0x60
 8002cf4:	b29b      	uxth	r3, r3
	}
	*regA = tempShort;
 8002cf6:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002cf8:	f991 4000 	ldrsb.w	r4, [r1]
 8002cfc:	f024 0220 	bic.w	r2, r4, #32
 8002d00:	700a      	strb	r2, [r1, #0]
	resetbit(flagReg, H_FLAG);
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002d02:	7800      	ldrb	r0, [r0, #0]
 8002d04:	b198      	cbz	r0, 8002d2e <vGBFunctionDAA+0x56>
	(*n) &= ~(0x1 << bit);
 8002d06:	f004 025f 	and.w	r2, r4, #95	; 0x5f
	if(tempShort >= 0x100) setbit(flagReg, C_FLAG);
 8002d0a:	2bff      	cmp	r3, #255	; 0xff
}
 8002d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
	(*n) |= (0x1 << bit);
 8002d10:	bf88      	it	hi
 8002d12:	f042 0210 	orrhi.w	r2, r2, #16
 8002d16:	700a      	strb	r2, [r1, #0]
}
 8002d18:	4770      	bx	lr
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002d1a:	f012 0f20 	tst.w	r2, #32
 8002d1e:	d00a      	beq.n	8002d36 <vGBFunctionDAA+0x5e>
 8002d20:	3306      	adds	r3, #6
 8002d22:	b29b      	uxth	r3, r3
		if(checkbit(*flagReg, C_FLAG) || (tempShort > 0x9F)) tempShort += 0x60;
 8002d24:	2b9f      	cmp	r3, #159	; 0x9f
 8002d26:	d8e4      	bhi.n	8002cf2 <vGBFunctionDAA+0x1a>
 8002d28:	06d2      	lsls	r2, r2, #27
 8002d2a:	d5e4      	bpl.n	8002cf6 <vGBFunctionDAA+0x1e>
 8002d2c:	e7e1      	b.n	8002cf2 <vGBFunctionDAA+0x1a>
	(*n) |= (0x1 << bit);
 8002d2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d32:	b2d2      	uxtb	r2, r2
}
 8002d34:	e7e9      	b.n	8002d0a <vGBFunctionDAA+0x32>
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002d36:	f004 040f 	and.w	r4, r4, #15
 8002d3a:	2c09      	cmp	r4, #9
 8002d3c:	d9f2      	bls.n	8002d24 <vGBFunctionDAA+0x4c>
 8002d3e:	e7ef      	b.n	8002d20 <vGBFunctionDAA+0x48>

08002d40 <vGBFunctionJR_Z>:
	return ((n >> bit) & 0x1);
 8002d40:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_Z(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002d42:	4603      	mov	r3, r0
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002d44:	09c9      	lsrs	r1, r1, #7
 8002d46:	d005      	beq.n	8002d54 <vGBFunctionJR_Z+0x14>
		*regPC += (int8_t) r8value;
 8002d48:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002d4a:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002d4c:	fa41 f282 	sxtab	r2, r1, r2
 8002d50:	801a      	strh	r2, [r3, #0]
		return 12;
 8002d52:	4770      	bx	lr
	}else{
		return 8;
 8002d54:	2008      	movs	r0, #8
	}
}
 8002d56:	4770      	bx	lr

08002d58 <vGBFunctionJR_NC>:
	return ((n >> bit) & 0x1);
 8002d58:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_NC(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002d5a:	4603      	mov	r3, r0
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002d5c:	06c9      	lsls	r1, r1, #27
 8002d5e:	d405      	bmi.n	8002d6c <vGBFunctionJR_NC+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002d60:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002d62:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002d64:	fa41 f282 	sxtab	r2, r1, r2
 8002d68:	801a      	strh	r2, [r3, #0]
		return 12;
 8002d6a:	4770      	bx	lr
		return 8;
 8002d6c:	2008      	movs	r0, #8
	}
}
 8002d6e:	4770      	bx	lr

08002d70 <vMemoryLocationINC>:

void vMemoryLocationINC(uint16_t loc, uint8_t *flagReg){
 8002d70:	b538      	push	{r3, r4, r5, lr}
 8002d72:	460c      	mov	r4, r1
 8002d74:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002d76:	f000 fbdb 	bl	8003530 <ucGBMemoryRead>
 8002d7a:	f000 000f 	and.w	r0, r0, #15
	(*n) |= (0x1 << bit);
 8002d7e:	7823      	ldrb	r3, [r4, #0]
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002d80:	280f      	cmp	r0, #15
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002d82:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002d84:	bf0c      	ite	eq
 8002d86:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002d8a:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002d8e:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002d90:	f000 fbce 	bl	8003530 <ucGBMemoryRead>
 8002d94:	4601      	mov	r1, r0
 8002d96:	4628      	mov	r0, r5
 8002d98:	3101      	adds	r1, #1
 8002d9a:	b2c9      	uxtb	r1, r1
 8002d9c:	f000 fb7a 	bl	8003494 <vGBMemoryWrite>
	(*n) &= ~(0x1 << bit);
 8002da0:	7823      	ldrb	r3, [r4, #0]
	resetbit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002da2:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da8:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002daa:	f000 fbc1 	bl	8003530 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002dae:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002db0:	b118      	cbz	r0, 8002dba <vMemoryLocationINC+0x4a>
	(*n) &= ~(0x1 << bit);
 8002db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002db6:	7023      	strb	r3, [r4, #0]
}
 8002db8:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dbe:	7023      	strb	r3, [r4, #0]
}
 8002dc0:	bd38      	pop	{r3, r4, r5, pc}
 8002dc2:	bf00      	nop

08002dc4 <vMemoryLocationDEC>:

void vMemoryLocationDEC(uint16_t loc, uint8_t *flagReg){
 8002dc4:	b538      	push	{r3, r4, r5, lr}
 8002dc6:	460c      	mov	r4, r1
 8002dc8:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8002dca:	f000 fbb1 	bl	8003530 <ucGBMemoryRead>
 8002dce:	0702      	lsls	r2, r0, #28
	(*n) &= ~(0x1 << bit);
 8002dd0:	7823      	ldrb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002dd2:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002dd4:	bf14      	ite	ne
 8002dd6:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002dda:	f043 0320 	orreq.w	r3, r3, #32
 8002dde:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002de0:	f000 fba6 	bl	8003530 <ucGBMemoryRead>
 8002de4:	4601      	mov	r1, r0
 8002de6:	4628      	mov	r0, r5
 8002de8:	3901      	subs	r1, #1
 8002dea:	b2c9      	uxtb	r1, r1
 8002dec:	f000 fb52 	bl	8003494 <vGBMemoryWrite>
	(*n) |= (0x1 << bit);
 8002df0:	7823      	ldrb	r3, [r4, #0]
	setbit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002df2:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002df8:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002dfa:	f000 fb99 	bl	8003530 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002dfe:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e00:	b118      	cbz	r0, 8002e0a <vMemoryLocationDEC+0x46>
	(*n) &= ~(0x1 << bit);
 8002e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e06:	7023      	strb	r3, [r4, #0]
}
 8002e08:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0e:	7023      	strb	r3, [r4, #0]
}
 8002e10:	bd38      	pop	{r3, r4, r5, pc}
 8002e12:	bf00      	nop

08002e14 <vGBFunctionJR_C>:
	return ((n >> bit) & 0x1);
 8002e14:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_C(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002e16:	4603      	mov	r3, r0
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002e18:	06c9      	lsls	r1, r1, #27
 8002e1a:	d505      	bpl.n	8002e28 <vGBFunctionJR_C+0x14>
		*regPC += (int8_t) r8value;
 8002e1c:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002e1e:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002e20:	fa41 f282 	sxtab	r2, r1, r2
 8002e24:	801a      	strh	r2, [r3, #0]
		return 12;
 8002e26:	4770      	bx	lr
	}else{
		return 8;
 8002e28:	2008      	movs	r0, #8
	}
}
 8002e2a:	4770      	bx	lr

08002e2c <vGBFunctionADD>:

void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = *regA + regValue;
 8002e2c:	7803      	ldrb	r3, [r0, #0]
void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002e2e:	b430      	push	{r4, r5}
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e30:	f002 050f 	and.w	r5, r2, #15
 8002e34:	f003 040f 	and.w	r4, r3, #15
	uint32_t tempRes = *regA + regValue;
 8002e38:	441a      	add	r2, r3
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e3a:	1963      	adds	r3, r4, r5
 8002e3c:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002e3e:	f991 3000 	ldrsb.w	r3, [r1]
 8002e42:	bfc8      	it	gt
 8002e44:	f043 0320 	orrgt.w	r3, r3, #32
	resetbit(flagReg, N_FLAG);
	if(tempRes > 0xFF)	setbit(flagReg, C_FLAG);
 8002e48:	2aff      	cmp	r2, #255	; 0xff
	*regA = tempRes;
 8002e4a:	b2d2      	uxtb	r2, r2
	(*n) &= ~(0x1 << bit);
 8002e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 8002e50:	bfc8      	it	gt
 8002e52:	f043 0310 	orrgt.w	r3, r3, #16
 8002e56:	700b      	strb	r3, [r1, #0]
	*regA = tempRes;
 8002e58:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002e5a:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e5c:	b122      	cbz	r2, 8002e68 <vGBFunctionADD+0x3c>
	(*n) &= ~(0x1 << bit);
 8002e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002e62:	bc30      	pop	{r4, r5}
 8002e64:	700b      	strb	r3, [r1, #0]
 8002e66:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002e6c:	bc30      	pop	{r4, r5}
 8002e6e:	700b      	strb	r3, [r1, #0]
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop

08002e74 <vGBFunctionADC>:

void vGBFunctionADC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002e74:	b470      	push	{r4, r5, r6}
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002e76:	7804      	ldrb	r4, [r0, #0]
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e78:	f002 060f 	and.w	r6, r2, #15
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002e7c:	780b      	ldrb	r3, [r1, #0]
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e7e:	f004 050f 	and.w	r5, r4, #15
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002e82:	4422      	add	r2, r4
 8002e84:	f3c3 1400 	ubfx	r4, r3, #4, #1
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e88:	4435      	add	r5, r6
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002e8a:	4422      	add	r2, r4
	if((*regA & 0xF) + (regValue & 0xF) > 0xF)	setbit(flagReg, H_FLAG);
 8002e8c:	2d0f      	cmp	r5, #15
	(*n) |= (0x1 << bit);
 8002e8e:	bfc8      	it	gt
 8002e90:	f043 0320 	orrgt.w	r3, r3, #32
	resetbit(flagReg, N_FLAG);
	if(tempRes > 0xFF)	setbit(flagReg, C_FLAG);
 8002e94:	2aff      	cmp	r2, #255	; 0xff
	*regA = tempRes;
 8002e96:	b2d2      	uxtb	r2, r2
	(*n) |= (0x1 << bit);
 8002e98:	b25b      	sxtb	r3, r3
	(*n) &= ~(0x1 << bit);
 8002e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 8002e9e:	bfc8      	it	gt
 8002ea0:	f043 0310 	orrgt.w	r3, r3, #16
 8002ea4:	700b      	strb	r3, [r1, #0]
	*regA = tempRes;
 8002ea6:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002ea8:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002eaa:	b122      	cbz	r2, 8002eb6 <vGBFunctionADC+0x42>
	(*n) &= ~(0x1 << bit);
 8002eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002eb0:	bc70      	pop	{r4, r5, r6}
 8002eb2:	700b      	strb	r3, [r1, #0]
 8002eb4:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002eba:	bc70      	pop	{r4, r5, r6}
 8002ebc:	700b      	strb	r3, [r1, #0]
 8002ebe:	4770      	bx	lr

08002ec0 <vGBFunctionSUB>:

void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002ec0:	7803      	ldrb	r3, [r0, #0]
 8002ec2:	4293      	cmp	r3, r2
void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002ec4:	b430      	push	{r4, r5}
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002ec6:	d21d      	bcs.n	8002f04 <vGBFunctionSUB+0x44>
	(*n) |= (0x1 << bit);
 8002ec8:	f991 3000 	ldrsb.w	r3, [r1]
 8002ecc:	f043 0310 	orr.w	r3, r3, #16
 8002ed0:	b2dc      	uxtb	r4, r3
 8002ed2:	700c      	strb	r4, [r1, #0]
	((regValue & 0x0F) > (*regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002ed4:	f002 050f 	and.w	r5, r2, #15
 8002ed8:	7804      	ldrb	r4, [r0, #0]
 8002eda:	f004 040f 	and.w	r4, r4, #15
 8002ede:	42a5      	cmp	r5, r4
 8002ee0:	d920      	bls.n	8002f24 <vGBFunctionSUB+0x64>
	(*n) |= (0x1 << bit);
 8002ee2:	f043 0320 	orr.w	r3, r3, #32
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	700b      	strb	r3, [r1, #0]
	*regA -= regValue;
 8002eea:	7803      	ldrb	r3, [r0, #0]
 8002eec:	1a9a      	subs	r2, r3, r2
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	7002      	strb	r2, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002ef2:	b172      	cbz	r2, 8002f12 <vGBFunctionSUB+0x52>
	(*n) &= ~(0x1 << bit);
 8002ef4:	780b      	ldrb	r3, [r1, #0]
 8002ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002efe:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002f00:	700b      	strb	r3, [r1, #0]
}
 8002f02:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002f04:	f991 4000 	ldrsb.w	r4, [r1]
 8002f08:	f024 0310 	bic.w	r3, r4, #16
 8002f0c:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002f10:	e7df      	b.n	8002ed2 <vGBFunctionSUB+0x12>
	(*n) |= (0x1 << bit);
 8002f12:	f991 3000 	ldrsb.w	r3, [r1]
 8002f16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8002f1e:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002f20:	700b      	strb	r3, [r1, #0]
}
 8002f22:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002f24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002f28:	e7de      	b.n	8002ee8 <vGBFunctionSUB+0x28>
 8002f2a:	bf00      	nop

08002f2c <vGBFunctionSBC>:

void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	regValue +=  checkbit(*flagReg, C_FLAG);
 8002f2c:	780b      	ldrb	r3, [r1, #0]
void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002f2e:	b430      	push	{r4, r5}
	return ((n >> bit) & 0x1);
 8002f30:	f3c3 1500 	ubfx	r5, r3, #4, #1
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002f34:	7804      	ldrb	r4, [r0, #0]
	regValue +=  checkbit(*flagReg, C_FLAG);
 8002f36:	442a      	add	r2, r5
 8002f38:	b2d2      	uxtb	r2, r2
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002f3a:	4294      	cmp	r4, r2
	((regValue & 0x0F) > (*regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002f3c:	f002 050f 	and.w	r5, r2, #15
	(*n) |= (0x1 << bit);
 8002f40:	bf34      	ite	cc
 8002f42:	f043 0310 	orrcc.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8002f46:	f023 0310 	biccs.w	r3, r3, #16
 8002f4a:	b25c      	sxtb	r4, r3
 8002f4c:	700b      	strb	r3, [r1, #0]
	((regValue & 0x0F) > (*regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002f4e:	7803      	ldrb	r3, [r0, #0]
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	429d      	cmp	r5, r3
 8002f56:	d910      	bls.n	8002f7a <vGBFunctionSBC+0x4e>
	(*n) |= (0x1 << bit);
 8002f58:	f044 0320 	orr.w	r3, r4, #32
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	700b      	strb	r3, [r1, #0]
	*regA -= regValue;
 8002f60:	7803      	ldrb	r3, [r0, #0]
 8002f62:	1a9a      	subs	r2, r3, r2
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	7002      	strb	r2, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f68:	b152      	cbz	r2, 8002f80 <vGBFunctionSBC+0x54>
	(*n) &= ~(0x1 << bit);
 8002f6a:	780b      	ldrb	r3, [r1, #0]
 8002f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002f74:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002f76:	700b      	strb	r3, [r1, #0]
}
 8002f78:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002f7a:	f004 03df 	and.w	r3, r4, #223	; 0xdf
}
 8002f7e:	e7ee      	b.n	8002f5e <vGBFunctionSBC+0x32>
	(*n) |= (0x1 << bit);
 8002f80:	f991 3000 	ldrsb.w	r3, [r1]
 8002f84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8002f8c:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002f8e:	700b      	strb	r3, [r1, #0]
}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop

08002f94 <vGBFunctionCP>:
	(*n) |= (0x1 << bit);
 8002f94:	f991 3000 	ldrsb.w	r3, [r1]

void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002f98:	4282      	cmp	r2, r0
void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
 8002f9a:	b430      	push	{r4, r5}
	((regValue & 0x0F) > (regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002f9c:	f002 040f 	and.w	r4, r2, #15
 8002fa0:	f000 050f 	and.w	r5, r0, #15
	(*n) |= (0x1 << bit);
 8002fa4:	bf8c      	ite	hi
 8002fa6:	f043 0310 	orrhi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8002faa:	f023 0310 	bicls.w	r3, r3, #16
	((regValue & 0x0F) > (regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002fae:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 8002fb0:	bf8c      	ite	hi
 8002fb2:	f043 0320 	orrhi.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002fb6:	f023 0320 	bicls.w	r3, r3, #32
	(regA == regValue) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8002fba:	4282      	cmp	r2, r0
	(*n) |= (0x1 << bit);
 8002fbc:	bf0c      	ite	eq
 8002fbe:	f063 037f 	orneq	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8002fc2:	f003 037f 	andne.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002fca:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002fcc:	700b      	strb	r3, [r1, #0]
}
 8002fce:	4770      	bx	lr

08002fd0 <vGBFunctionRET>:

void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	4604      	mov	r4, r0
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8002fd4:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 8002fd6:	460e      	mov	r6, r1
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8002fd8:	f000 faaa 	bl	8003530 <ucGBMemoryRead>
 8002fdc:	8823      	ldrh	r3, [r4, #0]
 8002fde:	4605      	mov	r5, r0
 8002fe0:	1c58      	adds	r0, r3, #1
 8002fe2:	b280      	uxth	r0, r0
 8002fe4:	f000 faa4 	bl	8003530 <ucGBMemoryRead>
	return (uint16_t) (y << 8) + x;
 8002fe8:	eb05 2000 	add.w	r0, r5, r0, lsl #8
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 8002fec:	8030      	strh	r0, [r6, #0]
	*regSP += 2;
 8002fee:	8823      	ldrh	r3, [r4, #0]
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	8023      	strh	r3, [r4, #0]
}
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
 8002ff6:	bf00      	nop

08002ff8 <vGBFunctionPOP>:
 8002ff8:	f7ff bfea 	b.w	8002fd0 <vGBFunctionRET>

08002ffc <vGBFunctionJP_NZ_a16>:
	return ((n >> bit) & 0x1);
 8002ffc:	780b      	ldrb	r3, [r1, #0]
	*reg16 = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
	*regSP += 2;
}

uint8_t vGBFunctionJP_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002ffe:	09db      	lsrs	r3, r3, #7
 8003000:	d102      	bne.n	8003008 <vGBFunctionJP_NZ_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 8003002:	8002      	strh	r2, [r0, #0]
		return 16;
 8003004:	2010      	movs	r0, #16
 8003006:	4770      	bx	lr
		return 12;
 8003008:	200c      	movs	r0, #12
	}
}
 800300a:	4770      	bx	lr

0800300c <vGBFunctionPUSH>:
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}

void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	4604      	mov	r4, r0
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 8003010:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 8003012:	460d      	mov	r5, r1
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 8003014:	8809      	ldrh	r1, [r1, #0]
 8003016:	3801      	subs	r0, #1
 8003018:	0a09      	lsrs	r1, r1, #8
 800301a:	b280      	uxth	r0, r0
 800301c:	f000 fa3a 	bl	8003494 <vGBMemoryWrite>
	vGBMemoryWrite(*regSP - 2, (uint8_t) (*reg16 & 0x00FF));
 8003020:	8820      	ldrh	r0, [r4, #0]
 8003022:	7829      	ldrb	r1, [r5, #0]
 8003024:	3802      	subs	r0, #2
 8003026:	b280      	uxth	r0, r0
 8003028:	f000 fa34 	bl	8003494 <vGBMemoryWrite>
	*regSP -= 2;
 800302c:	8823      	ldrh	r3, [r4, #0]
 800302e:	3b02      	subs	r3, #2
 8003030:	8023      	strh	r3, [r4, #0]
}
 8003032:	bd38      	pop	{r3, r4, r5, pc}

08003034 <vGBFunctionCALL_NZ_a16>:
uint8_t vGBFunctionCALL_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8003034:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 8003036:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8003038:	09db      	lsrs	r3, r3, #7
 800303a:	d001      	beq.n	8003040 <vGBFunctionCALL_NZ_a16+0xc>
		return 12;
 800303c:	200c      	movs	r0, #12
}
 800303e:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003040:	4604      	mov	r4, r0
 8003042:	4610      	mov	r0, r2
 8003044:	4621      	mov	r1, r4
 8003046:	f7ff ffe1 	bl	800300c <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800304a:	8820      	ldrh	r0, [r4, #0]
 800304c:	3802      	subs	r0, #2
 800304e:	b280      	uxth	r0, r0
 8003050:	f000 fa6e 	bl	8003530 <ucGBMemoryRead>
 8003054:	8823      	ldrh	r3, [r4, #0]
 8003056:	4605      	mov	r5, r0
 8003058:	1e58      	subs	r0, r3, #1
 800305a:	b280      	uxth	r0, r0
 800305c:	f000 fa68 	bl	8003530 <ucGBMemoryRead>
 8003060:	4603      	mov	r3, r0
		return 24;
 8003062:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8003064:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003068:	8025      	strh	r5, [r4, #0]
}
 800306a:	bd38      	pop	{r3, r4, r5, pc}

0800306c <vGBFunctionJP_Z_a16>:
	return ((n >> bit) & 0x1);
 800306c:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, Z_FLAG) != 0){
 800306e:	09db      	lsrs	r3, r3, #7
 8003070:	d002      	beq.n	8003078 <vGBFunctionJP_Z_a16+0xc>
		*regPC = addr;
 8003072:	8002      	strh	r2, [r0, #0]
		return 16;
 8003074:	2010      	movs	r0, #16
 8003076:	4770      	bx	lr
	}else{
		return 12;
 8003078:	200c      	movs	r0, #12
	}
}
 800307a:	4770      	bx	lr

0800307c <vGBFunctionCALL_Z_a16>:

uint8_t vGBFunctionCALL_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 800307c:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 800307e:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8003080:	09db      	lsrs	r3, r3, #7
 8003082:	d101      	bne.n	8003088 <vGBFunctionCALL_Z_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 8003084:	200c      	movs	r0, #12
	}
}
 8003086:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003088:	4604      	mov	r4, r0
 800308a:	4610      	mov	r0, r2
 800308c:	4621      	mov	r1, r4
 800308e:	f7ff ffbd 	bl	800300c <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003092:	8820      	ldrh	r0, [r4, #0]
 8003094:	3802      	subs	r0, #2
 8003096:	b280      	uxth	r0, r0
 8003098:	f000 fa4a 	bl	8003530 <ucGBMemoryRead>
 800309c:	8823      	ldrh	r3, [r4, #0]
 800309e:	4605      	mov	r5, r0
 80030a0:	1e58      	subs	r0, r3, #1
 80030a2:	b280      	uxth	r0, r0
 80030a4:	f000 fa44 	bl	8003530 <ucGBMemoryRead>
 80030a8:	4603      	mov	r3, r0
		return 24;
 80030aa:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80030ac:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80030b0:	8025      	strh	r5, [r4, #0]
}
 80030b2:	bd38      	pop	{r3, r4, r5, pc}

080030b4 <vGBFunctionJP_NC_a16>:
	return ((n >> bit) & 0x1);
 80030b4:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, C_FLAG) != 0){
 80030b6:	06db      	lsls	r3, r3, #27
 80030b8:	d402      	bmi.n	80030c0 <vGBFunctionJP_NC_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 80030ba:	8002      	strh	r2, [r0, #0]
		return 16;
 80030bc:	2010      	movs	r0, #16
 80030be:	4770      	bx	lr
		return 12;
 80030c0:	200c      	movs	r0, #12
	}
}
 80030c2:	4770      	bx	lr

080030c4 <vGBFunctionCALL_NC_a16>:

uint8_t vGBFunctionCALL_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 80030c4:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 80030c6:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, C_FLAG) != 0){
 80030c8:	06db      	lsls	r3, r3, #27
 80030ca:	d501      	bpl.n	80030d0 <vGBFunctionCALL_NC_a16+0xc>
		return 12;
 80030cc:	200c      	movs	r0, #12
	}else{
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}
 80030ce:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 80030d0:	4604      	mov	r4, r0
 80030d2:	4610      	mov	r0, r2
 80030d4:	4621      	mov	r1, r4
 80030d6:	f7ff ff99 	bl	800300c <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80030da:	8820      	ldrh	r0, [r4, #0]
 80030dc:	3802      	subs	r0, #2
 80030de:	b280      	uxth	r0, r0
 80030e0:	f000 fa26 	bl	8003530 <ucGBMemoryRead>
 80030e4:	8823      	ldrh	r3, [r4, #0]
 80030e6:	4605      	mov	r5, r0
 80030e8:	1e58      	subs	r0, r3, #1
 80030ea:	b280      	uxth	r0, r0
 80030ec:	f000 fa20 	bl	8003530 <ucGBMemoryRead>
 80030f0:	4603      	mov	r3, r0
		return 24;
 80030f2:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80030f4:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80030f8:	8025      	strh	r5, [r4, #0]
}
 80030fa:	bd38      	pop	{r3, r4, r5, pc}

080030fc <vGBFunctionJP_C_a16>:
	return ((n >> bit) & 0x1);
 80030fc:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, C_FLAG) != 0){
 80030fe:	06db      	lsls	r3, r3, #27
 8003100:	d502      	bpl.n	8003108 <vGBFunctionJP_C_a16+0xc>
		*regPC = addr;
 8003102:	8002      	strh	r2, [r0, #0]
		return 16;
 8003104:	2010      	movs	r0, #16
 8003106:	4770      	bx	lr
	}else{
		return 12;
 8003108:	200c      	movs	r0, #12
	}
}
 800310a:	4770      	bx	lr

0800310c <vGBFunctionCALL_C_a16>:

uint8_t vGBFunctionCALL_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 800310c:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 800310e:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, C_FLAG) != 0){
 8003110:	06db      	lsls	r3, r3, #27
 8003112:	d401      	bmi.n	8003118 <vGBFunctionCALL_C_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 8003114:	200c      	movs	r0, #12
	}
}
 8003116:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003118:	4604      	mov	r4, r0
 800311a:	4610      	mov	r0, r2
 800311c:	4621      	mov	r1, r4
 800311e:	f7ff ff75 	bl	800300c <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003122:	8820      	ldrh	r0, [r4, #0]
 8003124:	3802      	subs	r0, #2
 8003126:	b280      	uxth	r0, r0
 8003128:	f000 fa02 	bl	8003530 <ucGBMemoryRead>
 800312c:	8823      	ldrh	r3, [r4, #0]
 800312e:	4605      	mov	r5, r0
 8003130:	1e58      	subs	r0, r3, #1
 8003132:	b280      	uxth	r0, r0
 8003134:	f000 f9fc 	bl	8003530 <ucGBMemoryRead>
 8003138:	4603      	mov	r3, r0
		return 24;
 800313a:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 800313c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003140:	8025      	strh	r5, [r4, #0]
}
 8003142:	bd38      	pop	{r3, r4, r5, pc}

08003144 <vGBFunctionADD_SP_r8>:

void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 8003144:	b430      	push	{r4, r5}
	uint32_t tempRes = *regSP + (int8_t) r8value;
 8003146:	8805      	ldrh	r5, [r0, #0]
	(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003148:	4b11      	ldr	r3, [pc, #68]	; (8003190 <vGBFunctionADD_SP_r8+0x4c>)
	uint32_t tempRes = *regSP + (int8_t) r8value;
 800314a:	fa45 f582 	sxtab	r5, r5, r2
	(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800314e:	402b      	ands	r3, r5
 8003150:	b1bb      	cbz	r3, 8003182 <vGBFunctionADD_SP_r8+0x3e>
	(*n) |= (0x1 << bit);
 8003152:	f991 3000 	ldrsb.w	r3, [r1]
 8003156:	f043 0310 	orr.w	r3, r3, #16
 800315a:	b2dc      	uxtb	r4, r3
 800315c:	700c      	strb	r4, [r1, #0]
	(((*regSP & 0x0F) + ((int8_t)r8value & 0x0F)) > 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 800315e:	f002 020f 	and.w	r2, r2, #15
 8003162:	8804      	ldrh	r4, [r0, #0]
 8003164:	f004 040f 	and.w	r4, r4, #15
 8003168:	4422      	add	r2, r4
 800316a:	2a0f      	cmp	r2, #15
	(*n) |= (0x1 << bit);
 800316c:	bfcc      	ite	gt
 800316e:	f043 0320 	orrgt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8003172:	f023 0320 	bicle.w	r3, r3, #32
 8003176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800317a:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	*regSP = tempRes & 0xFFFF;
 800317c:	8005      	strh	r5, [r0, #0]
}
 800317e:	bc30      	pop	{r4, r5}
 8003180:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003182:	f991 4000 	ldrsb.w	r4, [r1]
 8003186:	f024 0310 	bic.w	r3, r4, #16
 800318a:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 800318e:	e7e5      	b.n	800315c <vGBFunctionADD_SP_r8+0x18>
 8003190:	ffff0000 	.word	0xffff0000

08003194 <vGBFunctionLD_HL_SP_r8>:

void vGBFunctionLD_HL_SP_r8(uint16_t *regHL, uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 8003194:	b470      	push	{r4, r5, r6}
	uint32_t tempRes = *regSP + (int8_t) r8value;
 8003196:	880d      	ldrh	r5, [r1, #0]
	(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003198:	4c11      	ldr	r4, [pc, #68]	; (80031e0 <vGBFunctionLD_HL_SP_r8+0x4c>)
	uint32_t tempRes = *regSP + (int8_t) r8value;
 800319a:	fa45 f583 	sxtab	r5, r5, r3
	(tempRes & 0xffff0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800319e:	402c      	ands	r4, r5
 80031a0:	b1bc      	cbz	r4, 80031d2 <vGBFunctionLD_HL_SP_r8+0x3e>
	(*n) |= (0x1 << bit);
 80031a2:	f992 4000 	ldrsb.w	r4, [r2]
 80031a6:	f044 0410 	orr.w	r4, r4, #16
 80031aa:	b2e6      	uxtb	r6, r4
 80031ac:	7016      	strb	r6, [r2, #0]
	(((*regSP & 0x0F) + ((int8_t)r8value & 0x0F)) > 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	8809      	ldrh	r1, [r1, #0]
 80031b4:	f001 010f 	and.w	r1, r1, #15
 80031b8:	440b      	add	r3, r1
 80031ba:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 80031bc:	bfcc      	ite	gt
 80031be:	f044 0420 	orrgt.w	r4, r4, #32
	(*n) &= ~(0x1 << bit);
 80031c2:	f024 0420 	bicle.w	r4, r4, #32
 80031c6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 80031ca:	7014      	strb	r4, [r2, #0]
	resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	*regHL = tempRes & 0xFFFF;
 80031cc:	8005      	strh	r5, [r0, #0]
}
 80031ce:	bc70      	pop	{r4, r5, r6}
 80031d0:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80031d2:	f992 6000 	ldrsb.w	r6, [r2]
 80031d6:	f026 0410 	bic.w	r4, r6, #16
 80031da:	f006 06ef 	and.w	r6, r6, #239	; 0xef
}
 80031de:	e7e5      	b.n	80031ac <vGBFunctionLD_HL_SP_r8+0x18>
 80031e0:	ffff0000 	.word	0xffff0000

080031e4 <ucGBFunctionRLC>:

/*prefix functions*/

uint8_t ucGBFunctionRLC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(regValue, 7);
	regValue <<= 1;
 80031e4:	0043      	lsls	r3, r0, #1
	return ((n >> bit) & 0x1);
 80031e6:	11c2      	asrs	r2, r0, #7
	regValue += tempCarry;
 80031e8:	eb03 10d0 	add.w	r0, r3, r0, lsr #7
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80031ec:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80031f0:	d10a      	bne.n	8003208 <ucGBFunctionRLC+0x24>
	(*n) |= (0x1 << bit);
 80031f2:	f991 3000 	ldrsb.w	r3, [r1]
 80031f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80031fa:	b152      	cbz	r2, 8003212 <ucGBFunctionRLC+0x2e>
	(*n) |= (0x1 << bit);
 80031fc:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003200:	f043 0310 	orr.w	r3, r3, #16
 8003204:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003206:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003208:	780b      	ldrb	r3, [r1, #0]
 800320a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800320e:	2a00      	cmp	r2, #0
 8003210:	d1f4      	bne.n	80031fc <ucGBFunctionRLC+0x18>
	(*n) &= ~(0x1 << bit);
 8003212:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 8003216:	700b      	strb	r3, [r1, #0]
}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop

0800321c <ucGBFunctionRRC>:

uint8_t ucGBFunctionRRC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(regValue, 0);
	regValue >>= 1;
	if(tempCarry) setbit(&regValue, 7);
 800321c:	07c3      	lsls	r3, r0, #31
	regValue >>= 1;
 800321e:	ea4f 0250 	mov.w	r2, r0, lsr #1
	if(tempCarry) setbit(&regValue, 7);
 8003222:	d509      	bpl.n	8003238 <ucGBFunctionRRC+0x1c>
	(*n) &= ~(0x1 << bit);
 8003224:	780b      	ldrb	r3, [r1, #0]
	(*n) |= (0x1 << bit);
 8003226:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	(*n) &= ~(0x1 << bit);
 800322a:	f003 031f 	and.w	r3, r3, #31
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
	return regValue;
}
 800322e:	4610      	mov	r0, r2
	(*n) |= (0x1 << bit);
 8003230:	f043 0310 	orr.w	r3, r3, #16
 8003234:	700b      	strb	r3, [r1, #0]
}
 8003236:	4770      	bx	lr
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003238:	b942      	cbnz	r2, 800324c <ucGBFunctionRRC+0x30>
	(*n) |= (0x1 << bit);
 800323a:	f991 3000 	ldrsb.w	r3, [r1]
 800323e:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8003242:	f003 038f 	and.w	r3, r3, #143	; 0x8f
}
 8003246:	4610      	mov	r0, r2
 8003248:	700b      	strb	r3, [r1, #0]
 800324a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800324c:	780b      	ldrb	r3, [r1, #0]
 800324e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003252:	e7f6      	b.n	8003242 <ucGBFunctionRRC+0x26>

08003254 <ucGBFunctionRL>:

uint8_t ucGBFunctionRL(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
 8003254:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x80) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003256:	f010 0f80 	tst.w	r0, #128	; 0x80
	return ((n >> bit) & 0x1);
 800325a:	f3c3 1200 	ubfx	r2, r3, #4, #1
	(*n) |= (0x1 << bit);
 800325e:	bf14      	ite	ne
 8003260:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003264:	f023 0310 	biceq.w	r3, r3, #16
	regValue <<= 1;
	regValue += prevCarry;
 8003268:	eb02 0040 	add.w	r0, r2, r0, lsl #1
	(*n) &= ~(0x1 << bit);
 800326c:	b25b      	sxtb	r3, r3
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800326e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003272:	d105      	bne.n	8003280 <ucGBFunctionRL+0x2c>
	(*n) |= (0x1 << bit);
 8003274:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800327c:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800327e:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	700b      	strb	r3, [r1, #0]
}
 8003286:	4770      	bx	lr

08003288 <ucGBFunctionRR>:

uint8_t ucGBFunctionRR(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
 8003288:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800328a:	f010 0f01 	tst.w	r0, #1
	return ((n >> bit) & 0x1);
 800328e:	ea4f 1213 	mov.w	r2, r3, lsr #4
	(*n) |= (0x1 << bit);
 8003292:	bf14      	ite	ne
 8003294:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003298:	f023 0310 	biceq.w	r3, r3, #16
	regValue >>= 1;
	regValue += (prevCarry << 7);
 800329c:	01d2      	lsls	r2, r2, #7
	(*n) &= ~(0x1 << bit);
 800329e:	b25b      	sxtb	r3, r3
	regValue += (prevCarry << 7);
 80032a0:	eb02 0050 	add.w	r0, r2, r0, lsr #1
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80032a4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80032a8:	d105      	bne.n	80032b6 <ucGBFunctionRR+0x2e>
	(*n) |= (0x1 << bit);
 80032aa:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80032ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b2:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80032b4:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80032b6:	f003 031f 	and.w	r3, r3, #31
 80032ba:	700b      	strb	r3, [r1, #0]
}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop

080032c0 <ucGBFunctionSLA>:

uint8_t ucGBFunctionSLA(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x80) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80032c0:	0602      	lsls	r2, r0, #24
	(*n) |= (0x1 << bit);
 80032c2:	f991 3000 	ldrsb.w	r3, [r1]
	regValue <<= 1;
 80032c6:	ea4f 0040 	mov.w	r0, r0, lsl #1
	(*n) |= (0x1 << bit);
 80032ca:	bf4c      	ite	mi
 80032cc:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80032d0:	f023 0310 	bicpl.w	r3, r3, #16
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80032d4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80032d8:	d105      	bne.n	80032e6 <ucGBFunctionSLA+0x26>
	(*n) |= (0x1 << bit);
 80032da:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80032de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e2:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80032e4:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	700b      	strb	r3, [r1, #0]
}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop

080032f0 <ucGBFunctionSRA>:

uint8_t ucGBFunctionSRA(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempMSB = regValue & 0x80;
 80032f0:	f000 0380 	and.w	r3, r0, #128	; 0x80
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80032f4:	f010 0f01 	tst.w	r0, #1
	(*n) |= (0x1 << bit);
 80032f8:	f991 2000 	ldrsb.w	r2, [r1]
	regValue >>= 1;
	regValue += tempMSB;
 80032fc:	eb03 0050 	add.w	r0, r3, r0, lsr #1
	(*n) |= (0x1 << bit);
 8003300:	bf14      	ite	ne
 8003302:	f042 0210 	orrne.w	r2, r2, #16
	(*n) &= ~(0x1 << bit);
 8003306:	f022 0210 	biceq.w	r2, r2, #16
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800330a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800330e:	d105      	bne.n	800331c <ucGBFunctionSRA+0x2c>
	(*n) |= (0x1 << bit);
 8003310:	f002 039f 	and.w	r3, r2, #159	; 0x9f
 8003314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003318:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800331a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800331c:	f002 031f 	and.w	r3, r2, #31
 8003320:	700b      	strb	r3, [r1, #0]
}
 8003322:	4770      	bx	lr

08003324 <ucGBFunctionSWAP>:

uint8_t ucGBFunctionSWAP(uint8_t regValue, uint8_t *flagReg){
	regValue = ((regValue & 0x0F) << 4) | ((regValue & 0xF0) >> 4);
 8003324:	0903      	lsrs	r3, r0, #4
 8003326:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800332a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800332e:	d107      	bne.n	8003340 <ucGBFunctionSWAP+0x1c>
	(*n) |= (0x1 << bit);
 8003330:	f991 3000 	ldrsb.w	r3, [r1]
 8003334:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8003338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333c:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	resetbit(flagReg, C_FLAG);
	return regValue;
}
 800333e:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003340:	780b      	ldrb	r3, [r1, #0]
 8003342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334a:	700b      	strb	r3, [r1, #0]
}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop

08003350 <ucGBFunctionSRL>:

uint8_t ucGBFunctionSRL(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003350:	07c2      	lsls	r2, r0, #31
	(*n) |= (0x1 << bit);
 8003352:	f991 3000 	ldrsb.w	r3, [r1]
 8003356:	bf4c      	ite	mi
 8003358:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 800335c:	f023 0310 	bicpl.w	r3, r3, #16
	regValue >>= 1;
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003360:	0840      	lsrs	r0, r0, #1
 8003362:	d105      	bne.n	8003370 <ucGBFunctionSRL+0x20>
	(*n) |= (0x1 << bit);
 8003364:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336c:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800336e:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003370:	f003 031f 	and.w	r3, r3, #31
 8003374:	700b      	strb	r3, [r1, #0]
}
 8003376:	4770      	bx	lr

08003378 <vGBFunctionBIT>:
	return ((n >> bit) & 0x1);
 8003378:	fa40 f101 	asr.w	r1, r0, r1

void vGBFunctionBIT(uint8_t regValue, uint8_t bit, uint8_t *flagReg){
	(checkbit(regValue, bit) != 0) ?  resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 800337c:	07cb      	lsls	r3, r1, #31
 800337e:	d508      	bpl.n	8003392 <vGBFunctionBIT+0x1a>
	(*n) &= ~(0x1 << bit);
 8003380:	7813      	ldrb	r3, [r2, #0]
 8003382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 800338a:	f043 0320 	orr.w	r3, r3, #32
 800338e:	7013      	strb	r3, [r2, #0]
	resetbit(flagReg, N_FLAG);
	setbit(flagReg, H_FLAG);
}
 8003390:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8003392:	f992 3000 	ldrsb.w	r3, [r2]
 8003396:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 800339a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 800339e:	f043 0320 	orr.w	r3, r3, #32
 80033a2:	7013      	strb	r3, [r2, #0]
}
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop

080033a8 <ucGBFunctionRESHL>:

uint8_t ucGBFunctionRESHL(uint16_t regHLaddr, uint8_t bit){
 80033a8:	b510      	push	{r4, lr}
 80033aa:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 80033ac:	f000 f8c0 	bl	8003530 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 80033b0:	2301      	movs	r3, #1
 80033b2:	fa03 f104 	lsl.w	r1, r3, r4
 80033b6:	ea20 0001 	bic.w	r0, r0, r1
	resetbit(&tempRes, bit);
	return tempRes;
}
 80033ba:	b2c0      	uxtb	r0, r0
 80033bc:	bd10      	pop	{r4, pc}
 80033be:	bf00      	nop

080033c0 <ucGBFunctionSETHL>:

uint8_t ucGBFunctionSETHL(uint16_t regHLaddr, uint8_t bit){
 80033c0:	b510      	push	{r4, lr}
 80033c2:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 80033c4:	f000 f8b4 	bl	8003530 <ucGBMemoryRead>
	(*n) |= (0x1 << bit);
 80033c8:	2301      	movs	r3, #1
 80033ca:	fa03 f104 	lsl.w	r1, r3, r4
 80033ce:	4308      	orrs	r0, r1
	setbit(&tempRes, bit);
	return tempRes;
}
 80033d0:	b2c0      	uxtb	r0, r0
 80033d2:	bd10      	pop	{r4, pc}

080033d4 <vGBMemorySetOP>:

extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc3;

void vGBMemorySetOP(uint8_t op){
	current_op = op;
 80033d4:	4b01      	ldr	r3, [pc, #4]	; (80033dc <vGBMemorySetOP+0x8>)
 80033d6:	7018      	strb	r0, [r3, #0]
}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	24009250 	.word	0x24009250

080033e0 <vGBMemoryInit>:

void vGBMemoryInit(){
	mem.ram[0xFF00] = 0xCF;
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <vGBMemoryInit+0x1c>)
	mem.ram[0xFF0F] = 0xE1;
 80033e2:	f64f 700f 	movw	r0, #65295	; 0xff0f
	mem.ram[0xFF00] = 0xCF;
 80033e6:	21cf      	movs	r1, #207	; 0xcf
 80033e8:	f503 427f 	add.w	r2, r3, #65280	; 0xff00
void vGBMemoryInit(){
 80033ec:	b410      	push	{r4}
	mem.ram[0xFF0F] = 0xE1;
 80033ee:	24e1      	movs	r4, #225	; 0xe1
	mem.ram[0xFF00] = 0xCF;
 80033f0:	7011      	strb	r1, [r2, #0]
	mem.ram[0xFF0F] = 0xE1;
 80033f2:	541c      	strb	r4, [r3, r0]
}
 80033f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	24009260 	.word	0x24009260

08003400 <vGBMemoryLoad>:

// loads data into memory map
void vGBMemoryLoad(const void* data, uint32_t size){
 8003400:	4603      	mov	r3, r0
 8003402:	460a      	mov	r2, r1
	memcpy(mem.ram , data, size);
 8003404:	4801      	ldr	r0, [pc, #4]	; (800340c <vGBMemoryLoad+0xc>)
 8003406:	4619      	mov	r1, r3
 8003408:	f006 bb1a 	b.w	8009a40 <memcpy>
 800340c:	24009260 	.word	0x24009260

08003410 <vGBMemoryJoypad>:
}

void vGBMemoryJoypad(uint8_t data){
	uint32_t value;

	if((data >> 4) & 0x1){
 8003410:	06c1      	lsls	r1, r0, #27
void vGBMemoryJoypad(uint8_t data){
 8003412:	b508      	push	{r3, lr}
	if((data >> 4) & 0x1){
 8003414:	d419      	bmi.n	800344a <vGBMemoryJoypad+0x3a>
		HAL_ADC_Start(&hadc1);
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	    value = HAL_ADC_GetValue(&hadc1) >> 12;
	}else if((data >> 4) & 0x2){
 8003416:	0903      	lsrs	r3, r0, #4
 8003418:	079a      	lsls	r2, r3, #30
 800341a:	d400      	bmi.n	800341e <vGBMemoryJoypad+0xe>
	}else if(value > 0x2){
	    mem.ram[JOY_ADDR] &= ~(0x2);
	}else{
		mem.ram[JOY_ADDR] &= ~(0x1);
	}
}
 800341c:	bd08      	pop	{r3, pc}
		HAL_ADC_Start(&hadc3);
 800341e:	481a      	ldr	r0, [pc, #104]	; (8003488 <vGBMemoryJoypad+0x78>)
 8003420:	f002 fd80 	bl	8005f24 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8003424:	f04f 31ff 	mov.w	r1, #4294967295
 8003428:	4817      	ldr	r0, [pc, #92]	; (8003488 <vGBMemoryJoypad+0x78>)
 800342a:	f002 fa69 	bl	8005900 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc3) >> 12;
 800342e:	4816      	ldr	r0, [pc, #88]	; (8003488 <vGBMemoryJoypad+0x78>)
 8003430:	f002 faf0 	bl	8005a14 <HAL_ADC_GetValue>
 8003434:	0b00      	lsrs	r0, r0, #12
	if(value == 0xf){
 8003436:	280f      	cmp	r0, #15
 8003438:	d0f0      	beq.n	800341c <vGBMemoryJoypad+0xc>
	if((value >> 3) & 0x1){
 800343a:	0703      	lsls	r3, r0, #28
 800343c:	d512      	bpl.n	8003464 <vGBMemoryJoypad+0x54>
		mem.ram[JOY_ADDR] &= ~(0x4);
 800343e:	4a13      	ldr	r2, [pc, #76]	; (800348c <vGBMemoryJoypad+0x7c>)
 8003440:	7813      	ldrb	r3, [r2, #0]
 8003442:	f023 0304 	bic.w	r3, r3, #4
 8003446:	7013      	strb	r3, [r2, #0]
}
 8003448:	bd08      	pop	{r3, pc}
		HAL_ADC_Start(&hadc1);
 800344a:	4811      	ldr	r0, [pc, #68]	; (8003490 <vGBMemoryJoypad+0x80>)
 800344c:	f002 fd6a 	bl	8005f24 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003450:	f04f 31ff 	mov.w	r1, #4294967295
 8003454:	480e      	ldr	r0, [pc, #56]	; (8003490 <vGBMemoryJoypad+0x80>)
 8003456:	f002 fa53 	bl	8005900 <HAL_ADC_PollForConversion>
	    value = HAL_ADC_GetValue(&hadc1) >> 12;
 800345a:	480d      	ldr	r0, [pc, #52]	; (8003490 <vGBMemoryJoypad+0x80>)
 800345c:	f002 fada 	bl	8005a14 <HAL_ADC_GetValue>
 8003460:	0b00      	lsrs	r0, r0, #12
 8003462:	e7e8      	b.n	8003436 <vGBMemoryJoypad+0x26>
	}else if((value & 0x6) == 0x6){
 8003464:	f000 0306 	and.w	r3, r0, #6
		mem.ram[JOY_ADDR] &= ~(0x8);
 8003468:	4a08      	ldr	r2, [pc, #32]	; (800348c <vGBMemoryJoypad+0x7c>)
	}else if((value & 0x6) == 0x6){
 800346a:	2b06      	cmp	r3, #6
		mem.ram[JOY_ADDR] &= ~(0x8);
 800346c:	7813      	ldrb	r3, [r2, #0]
	}else if((value & 0x6) == 0x6){
 800346e:	d007      	beq.n	8003480 <vGBMemoryJoypad+0x70>
	}else if(value > 0x2){
 8003470:	2802      	cmp	r0, #2
	    mem.ram[JOY_ADDR] &= ~(0x2);
 8003472:	bf8c      	ite	hi
 8003474:	f023 0302 	bichi.w	r3, r3, #2
		mem.ram[JOY_ADDR] &= ~(0x1);
 8003478:	f023 0301 	bicls.w	r3, r3, #1
 800347c:	7013      	strb	r3, [r2, #0]
}
 800347e:	bd08      	pop	{r3, pc}
		mem.ram[JOY_ADDR] &= ~(0x8);
 8003480:	f023 0308 	bic.w	r3, r3, #8
 8003484:	7013      	strb	r3, [r2, #0]
}
 8003486:	bd08      	pop	{r3, pc}
 8003488:	240193a4 	.word	0x240193a4
 800348c:	24019160 	.word	0x24019160
 8003490:	24019340 	.word	0x24019340

08003494 <vGBMemoryWrite>:

void vGBMemoryWrite(uint16_t address, uint8_t data){
	if(address == JOY_ADDR){
 8003494:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8003498:	d00f      	beq.n	80034ba <vGBMemoryWrite+0x26>

// reads a location from memory map
uint8_t ucGBMemoryRead(uint16_t address){
//	if((ucGBMemoryRead(0xFF41) & 0x03)  == 0x03 && address >= 0x8000 && address < 0xA000)
//			return 0xFF;
	return mem.ram[address];
 800349a:	4a09      	ldr	r2, [pc, #36]	; (80034c0 <vGBMemoryWrite+0x2c>)
 800349c:	f64f 7341 	movw	r3, #65345	; 0xff41
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 80034a0:	5cd3      	ldrb	r3, [r2, r3]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d001      	beq.n	80034ae <vGBMemoryWrite+0x1a>
	mem.ram[address] = data;
 80034aa:	5411      	strb	r1, [r2, r0]
}
 80034ac:	4770      	bx	lr
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 80034ae:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
 80034b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b6:	d2f8      	bcs.n	80034aa <vGBMemoryWrite+0x16>
}
 80034b8:	4770      	bx	lr
		vGBMemoryJoypad(data);
 80034ba:	4608      	mov	r0, r1
 80034bc:	f7ff bfa8 	b.w	8003410 <vGBMemoryJoypad>
 80034c0:	24009260 	.word	0x24009260

080034c4 <vGBMemorySetBit>:
	return mem.ram[address];
 80034c4:	4a0b      	ldr	r2, [pc, #44]	; (80034f4 <vGBMemorySetBit+0x30>)
 80034c6:	f64f 7341 	movw	r3, #65345	; 0xff41
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 80034ca:	5cd3      	ldrb	r3, [r2, r3]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d009      	beq.n	80034e8 <vGBMemorySetBit+0x24>
void vGBMemorySetBit(uint16_t address, uint8_t bit){
 80034d4:	b410      	push	{r4}
	mem.ram[address] |= (0x1 << bit);
 80034d6:	2401      	movs	r4, #1
 80034d8:	5c13      	ldrb	r3, [r2, r0]
 80034da:	fa04 f101 	lsl.w	r1, r4, r1
 80034de:	4319      	orrs	r1, r3
 80034e0:	5411      	strb	r1, [r2, r0]
}
 80034e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034e6:	4770      	bx	lr
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 80034e8:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
 80034ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f0:	d2f0      	bcs.n	80034d4 <vGBMemorySetBit+0x10>
 80034f2:	4770      	bx	lr
 80034f4:	24009260 	.word	0x24009260

080034f8 <vGBMemoryResetBit>:
	return mem.ram[address];
 80034f8:	4a0c      	ldr	r2, [pc, #48]	; (800352c <vGBMemoryResetBit+0x34>)
 80034fa:	f64f 7341 	movw	r3, #65345	; 0xff41
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 80034fe:	5cd3      	ldrb	r3, [r2, r3]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	2b03      	cmp	r3, #3
 8003506:	d00a      	beq.n	800351e <vGBMemoryResetBit+0x26>
void vGBMemoryResetBit(uint16_t address, uint8_t bit){
 8003508:	b410      	push	{r4}
	mem.ram[address] &= ~(0x1 << bit);
 800350a:	2401      	movs	r4, #1
 800350c:	5c13      	ldrb	r3, [r2, r0]
 800350e:	fa04 f101 	lsl.w	r1, r4, r1
 8003512:	ea23 0101 	bic.w	r1, r3, r1
 8003516:	5411      	strb	r1, [r2, r0]
}
 8003518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800351c:	4770      	bx	lr
	if(((ucGBMemoryRead(STAT_ADDR) & MODE_3)  == MODE_3) && (address >= VRAM_BASE && address < CARTRAM_BASE))
 800351e:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
 8003522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003526:	d2ef      	bcs.n	8003508 <vGBMemoryResetBit+0x10>
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	24009260 	.word	0x24009260

08003530 <ucGBMemoryRead>:
	return mem.ram[address];
 8003530:	4b01      	ldr	r3, [pc, #4]	; (8003538 <ucGBMemoryRead+0x8>)
}
 8003532:	5c18      	ldrb	r0, [r3, r0]
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	24009260 	.word	0x24009260

0800353c <usGBMemoryReadShort>:

uint16_t usGBMemoryReadShort(uint16_t address){
//	if((ucGBMemoryRead(0xFF41) & 0x03)  == 0x03 && address >= 0x8000 && address < 0xA000)
//			return 0xFFFF;
	return *((uint16_t*) &mem.ram[address]);
 800353c:	4b01      	ldr	r3, [pc, #4]	; (8003544 <usGBMemoryReadShort+0x8>)
}
 800353e:	5a18      	ldrh	r0, [r3, r0]
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	24009260 	.word	0x24009260

08003548 <setMode.part.0>:
 * @return Nothing
 */
void setMode(uint8_t mode){
	Mode = mode;
	switch (mode) {
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 8003548:	2101      	movs	r1, #1
 800354a:	f64f 7041 	movw	r0, #65345	; 0xff41
void setMode(uint8_t mode){
 800354e:	b508      	push	{r3, lr}
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 8003550:	f7ff ffd2 	bl	80034f8 <vGBMemoryResetBit>
 8003554:	2100      	movs	r1, #0
 8003556:	f64f 7041 	movw	r0, #65345	; 0xff41
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
		default:                                                                       break;
	}
}
 800355a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 800355e:	f7ff bfcb 	b.w	80034f8 <vGBMemoryResetBit>
 8003562:	bf00      	nop

08003564 <vSetFrameBuffer>:
	memset(gb_frame, 0, 160*144*4);
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <vSetFrameBuffer+0x10>)
 8003566:	f44f 32b4 	mov.w	r2, #92160	; 0x16800
 800356a:	2100      	movs	r1, #0
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	f006 ba75 	b.w	8009a5c <memset>
 8003572:	bf00      	nop
 8003574:	24001008 	.word	0x24001008

08003578 <vCheckBGP>:
void vCheckBGP(){
 8003578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 800357a:	f64f 7047 	movw	r0, #65351	; 0xff47
			case 2: color_to_pallette[i] = DARK_GREEN;     break;
 800357e:	4f0e      	ldr	r7, [pc, #56]	; (80035b8 <vCheckBGP+0x40>)
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 8003580:	f7ff ffd6 	bl	8003530 <ucGBMemoryRead>
			case 3: color_to_pallette[i] = DARKEST_GREEN;  break;
 8003584:	4e0d      	ldr	r6, [pc, #52]	; (80035bc <vCheckBGP+0x44>)
 8003586:	490e      	ldr	r1, [pc, #56]	; (80035c0 <vCheckBGP+0x48>)
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 8003588:	2200      	movs	r2, #0
			case 1: color_to_pallette[i] = LIGHT_GREEN;    break;
 800358a:	4d0e      	ldr	r5, [pc, #56]	; (80035c4 <vCheckBGP+0x4c>)
			case 0: color_to_pallette[i] = LIGHTEST_GREEN; break;
 800358c:	4c0e      	ldr	r4, [pc, #56]	; (80035c8 <vCheckBGP+0x50>)
		switch ((BGP >> (i*2)) & 0x03) {
 800358e:	fa40 f302 	asr.w	r3, r0, r2
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d00c      	beq.n	80035b4 <vCheckBGP+0x3c>
 800359a:	2b03      	cmp	r3, #3
 800359c:	d008      	beq.n	80035b0 <vCheckBGP+0x38>
 800359e:	2b01      	cmp	r3, #1
			case 0: color_to_pallette[i] = LIGHTEST_GREEN; break;
 80035a0:	bf14      	ite	ne
 80035a2:	600c      	strne	r4, [r1, #0]
			case 1: color_to_pallette[i] = LIGHT_GREEN;    break;
 80035a4:	600d      	streq	r5, [r1, #0]
	for(int i = 0; i < 4; i++){
 80035a6:	3202      	adds	r2, #2
 80035a8:	3104      	adds	r1, #4
 80035aa:	2a08      	cmp	r2, #8
 80035ac:	d1ef      	bne.n	800358e <vCheckBGP+0x16>
}
 80035ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			case 3: color_to_pallette[i] = DARKEST_GREEN;  break;
 80035b0:	600e      	str	r6, [r1, #0]
 80035b2:	e7f8      	b.n	80035a6 <vCheckBGP+0x2e>
			case 2: color_to_pallette[i] = DARK_GREEN;     break;
 80035b4:	600f      	str	r7, [r1, #0]
 80035b6:	e7f6      	b.n	80035a6 <vCheckBGP+0x2e>
 80035b8:	ff306230 	.word	0xff306230
 80035bc:	ff0f380f 	.word	0xff0f380f
 80035c0:	24019268 	.word	0x24019268
 80035c4:	ff8bac0f 	.word	0xff8bac0f
 80035c8:	ff9bbc0f 	.word	0xff9bbc0f

080035cc <getTileLineData>:
uint16_t getTileLineData(uint16_t tile_offset, uint8_t line_offset){
 80035cc:	b538      	push	{r3, r4, r5, lr}
	if (BackWinTileDataAddr == 0x8000){
 80035ce:	4d11      	ldr	r5, [pc, #68]	; (8003614 <getTileLineData+0x48>)
uint16_t getTileLineData(uint16_t tile_offset, uint8_t line_offset){
 80035d0:	460c      	mov	r4, r1
	if (BackWinTileDataAddr == 0x8000){
 80035d2:	882b      	ldrh	r3, [r5, #0]
 80035d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return usGBMemoryReadShort(BackWinTileDataAddr + (ucGBMemoryRead(BackTileDisplayAddr + tile_offset) * 0x10) + line_offset);
 80035d8:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <getTileLineData+0x4c>)
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	4418      	add	r0, r3
 80035de:	b280      	uxth	r0, r0
	if (BackWinTileDataAddr == 0x8000){
 80035e0:	d00c      	beq.n	80035fc <getTileLineData+0x30>
		int8_t temp  = (int8_t)(ucGBMemoryRead(BackTileDisplayAddr + tile_offset));
 80035e2:	f7ff ffa5 	bl	8003530 <ucGBMemoryRead>
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 80035e6:	8829      	ldrh	r1, [r5, #0]
		uint16_t temp2 =( temp + 128) * 0x10;
 80035e8:	b240      	sxtb	r0, r0
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 80035ea:	440c      	add	r4, r1
		uint16_t temp2 =( temp + 128) * 0x10;
 80035ec:	3080      	adds	r0, #128	; 0x80
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 80035ee:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}
 80035f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usGBMemoryReadShort(BackWinTileDataAddr + temp2 + line_offset);
 80035f6:	b280      	uxth	r0, r0
 80035f8:	f7ff bfa0 	b.w	800353c <usGBMemoryReadShort>
		return usGBMemoryReadShort(BackWinTileDataAddr + (ucGBMemoryRead(BackTileDisplayAddr + tile_offset) * 0x10) + line_offset);
 80035fc:	f7ff ff98 	bl	8003530 <ucGBMemoryRead>
 8003600:	8829      	ldrh	r1, [r5, #0]
 8003602:	440c      	add	r4, r1
 8003604:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}
 8003608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usGBMemoryReadShort(BackWinTileDataAddr + (ucGBMemoryRead(BackTileDisplayAddr + tile_offset) * 0x10) + line_offset);
 800360c:	b280      	uxth	r0, r0
 800360e:	f7ff bf95 	b.w	800353c <usGBMemoryReadShort>
 8003612:	bf00      	nop
 8003614:	24019266 	.word	0x24019266
 8003618:	24019278 	.word	0x24019278

0800361c <LYC_check>:
void LYC_check(uint8_t ly){
 800361c:	b510      	push	{r4, lr}
 800361e:	4604      	mov	r4, r0
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003620:	f64f 7045 	movw	r0, #65349	; 0xff45
 8003624:	f7ff ff84 	bl	8003530 <ucGBMemoryRead>
		vGBMemorySetBit(STAT_ADDR, 2);
 8003628:	2102      	movs	r1, #2
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 800362a:	42a0      	cmp	r0, r4
		vGBMemorySetBit(STAT_ADDR, 2);
 800362c:	f64f 7041 	movw	r0, #65345	; 0xff41
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003630:	d003      	beq.n	800363a <LYC_check+0x1e>
}
 8003632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vGBMemoryResetBit(STAT_ADDR, 2);
 8003636:	f7ff bf5f 	b.w	80034f8 <vGBMemoryResetBit>
}
 800363a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vGBMemorySetBit(STAT_ADDR, 2);
 800363e:	f7ff bf41 	b.w	80034c4 <vGBMemorySetBit>
 8003642:	bf00      	nop

08003644 <setMode>:
void setMode(uint8_t mode){
 8003644:	b508      	push	{r3, lr}
	Mode = mode;
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <setMode+0x64>)
 8003648:	7018      	strb	r0, [r3, #0]
	switch (mode) {
 800364a:	2803      	cmp	r0, #3
 800364c:	d82b      	bhi.n	80036a6 <setMode+0x62>
 800364e:	e8df f000 	tbb	[pc, r0]
 8003652:	1202      	.short	0x1202
 8003654:	061e      	.short	0x061e
}
 8003656:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800365a:	f7ff bf75 	b.w	8003548 <setMode.part.0>
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 800365e:	2101      	movs	r1, #1
 8003660:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003664:	f7ff ff2e 	bl	80034c4 <vGBMemorySetBit>
 8003668:	2100      	movs	r1, #0
 800366a:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 800366e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 8003672:	f7ff bf27 	b.w	80034c4 <vGBMemorySetBit>
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 8003676:	2101      	movs	r1, #1
 8003678:	f64f 7041 	movw	r0, #65345	; 0xff41
 800367c:	f7ff ff3c 	bl	80034f8 <vGBMemoryResetBit>
 8003680:	2100      	movs	r1, #0
 8003682:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 8003686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 800368a:	f7ff bf1b 	b.w	80034c4 <vGBMemorySetBit>
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 800368e:	2101      	movs	r1, #1
 8003690:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003694:	f7ff ff16 	bl	80034c4 <vGBMemorySetBit>
 8003698:	2100      	movs	r1, #0
 800369a:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 800369e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 80036a2:	f7ff bf29 	b.w	80034f8 <vGBMemoryResetBit>
}
 80036a6:	bd08      	pop	{r3, pc}
 80036a8:	24019264 	.word	0x24019264

080036ac <update_buffer>:
 * @param res
 * @param j
 * @param amt
 */
void update_buffer(uint16_t res, int pixelPos, uint16_t amt){
	for (int n = 1; n <= amt; n++){
 80036ac:	2a00      	cmp	r2, #0
 80036ae:	d03a      	beq.n	8003726 <update_buffer+0x7a>
 80036b0:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		switch (res){
				case 0x0000: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[0]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[0]; break;
				case 0x0080: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[1]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[1]; break;
				case 0x8000: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[2]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[2]; break;
				case 0x8080: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[3]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[3]; break;
 80036b4:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <update_buffer+0x7c>)
void update_buffer(uint16_t res, int pixelPos, uint16_t amt){
 80036b6:	b4f0      	push	{r4, r5, r6, r7}
				case 0x8080: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[3]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[3]; break;
 80036b8:	4c1c      	ldr	r4, [pc, #112]	; (800372c <update_buffer+0x80>)
 80036ba:	1c56      	adds	r6, r2, #1
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	ea4f 15cc 	mov.w	r5, ip, lsl #7
 80036c2:	7824      	ldrb	r4, [r4, #0]
				case 0x8000: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[2]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[2]; break;
 80036c4:	4f1a      	ldr	r7, [pc, #104]	; (8003730 <update_buffer+0x84>)
				case 0x8080: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[3]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[3]; break;
 80036c6:	fb02 f404 	mul.w	r4, r2, r4
	for (int n = 1; n <= amt; n++){
 80036ca:	2201      	movs	r2, #1
				case 0x8080: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[3]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[3]; break;
 80036cc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80036d0:	eb01 1484 	add.w	r4, r1, r4, lsl #6
		switch (res){
 80036d4:	f248 0180 	movw	r1, #32896	; 0x8080
 80036d8:	eb04 144c 	add.w	r4, r4, ip, lsl #5
 80036dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80036e0:	e008      	b.n	80036f4 <update_buffer+0x48>
 80036e2:	2880      	cmp	r0, #128	; 0x80
 80036e4:	d102      	bne.n	80036ec <update_buffer+0x40>
				case 0x0080: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[1]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[1]; break;
 80036e6:	687c      	ldr	r4, [r7, #4]
 80036e8:	e9c3 4400 	strd	r4, r4, [r3]
	for (int n = 1; n <= amt; n++){
 80036ec:	3201      	adds	r2, #1
 80036ee:	442b      	add	r3, r5
 80036f0:	42b2      	cmp	r2, r6
 80036f2:	d00c      	beq.n	800370e <update_buffer+0x62>
		switch (res){
 80036f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80036f8:	d011      	beq.n	800371e <update_buffer+0x72>
 80036fa:	d80a      	bhi.n	8003712 <update_buffer+0x66>
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d1f0      	bne.n	80036e2 <update_buffer+0x36>
	for (int n = 1; n <= amt; n++){
 8003700:	3201      	adds	r2, #1
				case 0x0000: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[0]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[0]; break;
 8003702:	683c      	ldr	r4, [r7, #0]
	for (int n = 1; n <= amt; n++){
 8003704:	42b2      	cmp	r2, r6
				case 0x0000: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[0]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[0]; break;
 8003706:	e9c3 4400 	strd	r4, r4, [r3]
	for (int n = 1; n <= amt; n++){
 800370a:	442b      	add	r3, r5
 800370c:	d1f2      	bne.n	80036f4 <update_buffer+0x48>
				default: break;
			}
	}

}
 800370e:	bcf0      	pop	{r4, r5, r6, r7}
 8003710:	4770      	bx	lr
		switch (res){
 8003712:	4288      	cmp	r0, r1
 8003714:	d1ea      	bne.n	80036ec <update_buffer+0x40>
				case 0x8080: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[3]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[3]; break;
 8003716:	68fc      	ldr	r4, [r7, #12]
 8003718:	e9c3 4400 	strd	r4, r4, [r3]
 800371c:	e7e6      	b.n	80036ec <update_buffer+0x40>
				case 0x8000: gb_frame[pixelPos + (2 * ly * amt * 160) + (amt * 160 * n)] = color_to_pallette[2]; gb_frame[(pixelPos+1) + (2 * ly * amt * 160)  + (amt * 160 * n)] = color_to_pallette[2]; break;
 800371e:	68bc      	ldr	r4, [r7, #8]
 8003720:	e9c3 4400 	strd	r4, r4, [r3]
 8003724:	e7e2      	b.n	80036ec <update_buffer+0x40>
 8003726:	4770      	bx	lr
 8003728:	24001008 	.word	0x24001008
 800372c:	2400909b 	.word	0x2400909b
 8003730:	24019268 	.word	0x24019268

08003734 <vGBPPUDrawLine>:
 * @param SCY Scroll Y Register
 * @returns Nothing
 */
void vGBPPUDrawLine(uint8_t ly, uint8_t SCX, uint8_t SCY){

	uint16_t tile_offset = (((SCY + ly) / 8) * 32) + (SCX / 8);			                   	   // gives the address offset in the tile map
 8003734:	4402      	add	r2, r0
void vGBPPUDrawLine(uint8_t ly, uint8_t SCX, uint8_t SCY){
 8003736:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t tile_offset = (((SCY + ly) / 8) * 32) + (SCX / 8);			                   	   // gives the address offset in the tile map
 800373a:	10d3      	asrs	r3, r2, #3
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 800373c:	f002 0207 	and.w	r2, r2, #7
	uint16_t tile_offset = (((SCY + ly) / 8) * 32) + (SCX / 8);			                   	   // gives the address offset in the tile map
 8003740:	08ce      	lsrs	r6, r1, #3
	uint8_t pixl_offset = SCX % 8;											                   // gives current pixel offset
 8003742:	f001 0407 	and.w	r4, r1, #7
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 8003746:	ea4f 0842 	mov.w	r8, r2, lsl #1

	uint16_t tile_data = getTileLineData(tile_offset, line_offset);                            // tile data holds tile line information

		for(int j = 0; j < 160*2; j+= 2){
 800374a:	f04f 0900 	mov.w	r9, #0
	uint16_t tile_offset = (((SCY + ly) / 8) * 32) + (SCX / 8);			                   	   // gives the address offset in the tile map
 800374e:	eb06 1643 	add.w	r6, r6, r3, lsl #5

			update_buffer(((tile_data << pixl_offset) & 0x8080), j,  2);
 8003752:	4f12      	ldr	r7, [pc, #72]	; (800379c <vGBPPUDrawLine+0x68>)
	uint16_t tile_data = getTileLineData(tile_offset, line_offset);                            // tile data holds tile line information
 8003754:	4641      	mov	r1, r8
 8003756:	4630      	mov	r0, r6
 8003758:	f7ff ff38 	bl	80035cc <getTileLineData>
 800375c:	4605      	mov	r5, r0
		for(int j = 0; j < 160*2; j+= 2){
 800375e:	e002      	b.n	8003766 <vGBPPUDrawLine+0x32>
 8003760:	f5b9 7fa0 	cmp.w	r9, #320	; 0x140
 8003764:	d017      	beq.n	8003796 <vGBPPUDrawLine+0x62>
			update_buffer(((tile_data << pixl_offset) & 0x8080), j,  2);
 8003766:	fa05 f304 	lsl.w	r3, r5, r4
			pixl_offset++;
 800376a:	3401      	adds	r4, #1
			update_buffer(((tile_data << pixl_offset) & 0x8080), j,  2);
 800376c:	2202      	movs	r2, #2
 800376e:	4649      	mov	r1, r9
 8003770:	403b      	ands	r3, r7
			pixl_offset++;
 8003772:	b2e4      	uxtb	r4, r4
		for(int j = 0; j < 160*2; j+= 2){
 8003774:	4491      	add	r9, r2
			update_buffer(((tile_data << pixl_offset) & 0x8080), j,  2);
 8003776:	b298      	uxth	r0, r3
 8003778:	f7ff ff98 	bl	80036ac <update_buffer>

			if(pixl_offset == 8){
 800377c:	2c08      	cmp	r4, #8
 800377e:	d1ef      	bne.n	8003760 <vGBPPUDrawLine+0x2c>
				tile_offset++;
 8003780:	3601      	adds	r6, #1
				pixl_offset = 0;
				tile_data = getTileLineData(tile_offset, line_offset);
 8003782:	4641      	mov	r1, r8
				pixl_offset = 0;
 8003784:	2400      	movs	r4, #0
				tile_offset++;
 8003786:	b2b6      	uxth	r6, r6
				tile_data = getTileLineData(tile_offset, line_offset);
 8003788:	4630      	mov	r0, r6
 800378a:	f7ff ff1f 	bl	80035cc <getTileLineData>
		for(int j = 0; j < 160*2; j+= 2){
 800378e:	f5b9 7fa0 	cmp.w	r9, #320	; 0x140
				tile_data = getTileLineData(tile_offset, line_offset);
 8003792:	4605      	mov	r5, r0
		for(int j = 0; j < 160*2; j+= 2){
 8003794:	d1e7      	bne.n	8003766 <vGBPPUDrawLine+0x32>

			}

		}

}
 8003796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800379a:	bf00      	nop
 800379c:	ffff8080 	.word	0xffff8080

080037a0 <gbPPUStep>:
void gbPPUStep(){
 80037a0:	b538      	push	{r3, r4, r5, lr}
	if(ucGBMemoryRead(LCDC_ADDR) & 0x80){															// check MSB of LCDC for screen en
 80037a2:	f64f 7040 	movw	r0, #65344	; 0xff40
 80037a6:	f7ff fec3 	bl	8003530 <ucGBMemoryRead>
 80037aa:	0603      	lsls	r3, r0, #24
 80037ac:	d400      	bmi.n	80037b0 <gbPPUStep+0x10>
}
 80037ae:	bd38      	pop	{r3, r4, r5, pc}
		tStatesTotal += ucGetTstate();
 80037b0:	4c44      	ldr	r4, [pc, #272]	; (80038c4 <gbPPUStep+0x124>)
 80037b2:	f7ff f8bb 	bl	800292c <ucGetTstate>
			ly++;
 80037b6:	4d44      	ldr	r5, [pc, #272]	; (80038c8 <gbPPUStep+0x128>)
		tStatesTotal += ucGetTstate();
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	4418      	add	r0, r3
		if (tStatesTotal > 456){												// end of hblank or vblank
 80037bc:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
		tStatesTotal += ucGetTstate();
 80037c0:	6020      	str	r0, [r4, #0]
		if (tStatesTotal > 456){												// end of hblank or vblank
 80037c2:	d90d      	bls.n	80037e0 <gbPPUStep+0x40>
			ly++;
 80037c4:	7829      	ldrb	r1, [r5, #0]
 80037c6:	3101      	adds	r1, #1
 80037c8:	b2c9      	uxtb	r1, r1
			if(ly > 153){												// end of vblank
 80037ca:	2999      	cmp	r1, #153	; 0x99
			ly++;
 80037cc:	7029      	strb	r1, [r5, #0]
			if(ly > 153){												// end of vblank
 80037ce:	d86d      	bhi.n	80038ac <gbPPUStep+0x10c>
			vGBMemoryWrite(LY_ADDR, ly);								// update LY register
 80037d0:	f64f 7044 	movw	r0, #65348	; 0xff44
 80037d4:	f7ff fe5e 	bl	8003494 <vGBMemoryWrite>
			tStatesTotal -= 456;
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80037de:	6023      	str	r3, [r4, #0]
		LYC_check(ly);
 80037e0:	7828      	ldrb	r0, [r5, #0]
 80037e2:	f7ff ff1b 	bl	800361c <LYC_check>
		if (ly > 143){													// vblank
 80037e6:	782b      	ldrb	r3, [r5, #0]
 80037e8:	2b8f      	cmp	r3, #143	; 0x8f
 80037ea:	d80b      	bhi.n	8003804 <gbPPUStep+0x64>
			if (tStatesTotal <= 80 && Mode != MODE_2)											// oam
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	2b50      	cmp	r3, #80	; 0x50
 80037f0:	d812      	bhi.n	8003818 <gbPPUStep+0x78>
 80037f2:	4b36      	ldr	r3, [pc, #216]	; (80038cc <gbPPUStep+0x12c>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d0d9      	beq.n	80037ae <gbPPUStep+0xe>
				setMode(MODE_2);
 80037fa:	2002      	movs	r0, #2
}
 80037fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				setMode(MODE_2);
 8003800:	f7ff bf20 	b.w	8003644 <setMode>
			setMode(MODE_1);
 8003804:	2001      	movs	r0, #1
 8003806:	f7ff ff1d 	bl	8003644 <setMode>
			vGBMemorySetBit(0xFF0F, 0);
 800380a:	2100      	movs	r1, #0
 800380c:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 8003810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			vGBMemorySetBit(0xFF0F, 0);
 8003814:	f7ff be56 	b.w	80034c4 <vGBMemorySetBit>
			else if(tStatesTotal > 80 && tStatesTotal <= 252 && Mode != MODE_3){										// vram
 8003818:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
 800381c:	2aab      	cmp	r2, #171	; 0xab
 800381e:	d838      	bhi.n	8003892 <gbPPUStep+0xf2>
 8003820:	4b2a      	ldr	r3, [pc, #168]	; (80038cc <gbPPUStep+0x12c>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b03      	cmp	r3, #3
 8003826:	d0c2      	beq.n	80037ae <gbPPUStep+0xe>
				vCheckBGP();
 8003828:	f7ff fea6 	bl	8003578 <vCheckBGP>
	BackWinTileDataAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 800382c:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003830:	f7ff fe7e 	bl	8003530 <ucGBMemoryRead>
 8003834:	4602      	mov	r2, r0
 8003836:	4b26      	ldr	r3, [pc, #152]	; (80038d0 <gbPPUStep+0x130>)
	BackTileDisplayAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003838:	f64f 7040 	movw	r0, #65344	; 0xff40
	BackWinTileDataAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 800383c:	f012 0f10 	tst.w	r2, #16
				ucSCY = ucGBMemoryRead(SCY_ADDR);
 8003840:	4c24      	ldr	r4, [pc, #144]	; (80038d4 <gbPPUStep+0x134>)
	BackWinTileDataAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003842:	bf14      	ite	ne
 8003844:	f44f 4200 	movne.w	r2, #32768	; 0x8000
 8003848:	f44f 4208 	moveq.w	r2, #34816	; 0x8800
 800384c:	801a      	strh	r2, [r3, #0]
	BackTileDisplayAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 800384e:	f7ff fe6f 	bl	8003530 <ucGBMemoryRead>
 8003852:	4602      	mov	r2, r0
 8003854:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <gbPPUStep+0x138>)
				ucSCY = ucGBMemoryRead(SCY_ADDR);
 8003856:	f64f 7042 	movw	r0, #65346	; 0xff42
	BackTileDisplayAddr = (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 800385a:	f012 0f08 	tst.w	r2, #8
 800385e:	bf14      	ite	ne
 8003860:	f44f 421c 	movne.w	r2, #39936	; 0x9c00
 8003864:	f44f 4218 	moveq.w	r2, #38912	; 0x9800
 8003868:	801a      	strh	r2, [r3, #0]
				ucSCY = ucGBMemoryRead(SCY_ADDR);
 800386a:	f7ff fe61 	bl	8003530 <ucGBMemoryRead>
 800386e:	4603      	mov	r3, r0
				ucSCX = ucGBMemoryRead(SCX_ADDR);
 8003870:	f64f 7043 	movw	r0, #65347	; 0xff43
				ucSCY = ucGBMemoryRead(SCY_ADDR);
 8003874:	7023      	strb	r3, [r4, #0]
				ucSCX = ucGBMemoryRead(SCX_ADDR);
 8003876:	f7ff fe5b 	bl	8003530 <ucGBMemoryRead>
 800387a:	4b18      	ldr	r3, [pc, #96]	; (80038dc <gbPPUStep+0x13c>)
 800387c:	4601      	mov	r1, r0
				vGBPPUDrawLine(ly, ucSCX, ucSCY);
 800387e:	7822      	ldrb	r2, [r4, #0]
 8003880:	7828      	ldrb	r0, [r5, #0]
				ucSCX = ucGBMemoryRead(SCX_ADDR);
 8003882:	7019      	strb	r1, [r3, #0]
				vGBPPUDrawLine(ly, ucSCX, ucSCY);
 8003884:	f7ff ff56 	bl	8003734 <vGBPPUDrawLine>
				setMode(MODE_3);
 8003888:	2003      	movs	r0, #3
}
 800388a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				setMode(MODE_3);
 800388e:	f7ff bed9 	b.w	8003644 <setMode>
			}else if(tStatesTotal > 252 && tStatesTotal <= 456 && Mode != MODE_0)										// hblank
 8003892:	3bfd      	subs	r3, #253	; 0xfd
 8003894:	2bcb      	cmp	r3, #203	; 0xcb
 8003896:	d88a      	bhi.n	80037ae <gbPPUStep+0xe>
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <gbPPUStep+0x12c>)
 800389a:	781a      	ldrb	r2, [r3, #0]
 800389c:	2a00      	cmp	r2, #0
 800389e:	d086      	beq.n	80037ae <gbPPUStep+0xe>
	Mode = mode;
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
}
 80038a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038a8:	f7ff be4e 	b.w	8003548 <setMode.part.0>
				dummy2_code(gb_frame);
 80038ac:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <gbPPUStep+0x140>)
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	f000 faba 	bl	8003e28 <dummy2_code>
				setMode(MODE_2);
 80038b4:	2002      	movs	r0, #2
 80038b6:	f7ff fec5 	bl	8003644 <setMode>
				ly = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	4619      	mov	r1, r3
 80038be:	702b      	strb	r3, [r5, #0]
 80038c0:	e786      	b.n	80037d0 <gbPPUStep+0x30>
 80038c2:	bf00      	nop
 80038c4:	24019260 	.word	0x24019260
 80038c8:	2400909b 	.word	0x2400909b
 80038cc:	24019264 	.word	0x24019264
 80038d0:	24019266 	.word	0x24019266
 80038d4:	2401927a 	.word	0x2401927a
 80038d8:	24019278 	.word	0x24019278
 80038dc:	24019265 	.word	0x24019265
 80038e0:	24001008 	.word	0x24001008

080038e4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80038e4:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80038e6:	2004      	movs	r0, #4
{
 80038e8:	b09e      	sub	sp, #120	; 0x78
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80038ea:	f003 ff4d 	bl	8007788 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ee:	4a2f      	ldr	r2, [pc, #188]	; (80039ac <SystemClock_Config+0xc8>)
 80038f0:	2300      	movs	r3, #0
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038f6:	4b2e      	ldr	r3, [pc, #184]	; (80039b0 <SystemClock_Config+0xcc>)
 80038f8:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80038fc:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038fe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003900:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003902:	f002 0201 	and.w	r2, r2, #1
 8003906:	9201      	str	r2, [sp, #4]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800390e:	619a      	str	r2, [r3, #24]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003916:	9301      	str	r3, [sp, #4]
 8003918:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800391a:	6983      	ldr	r3, [r0, #24]
 800391c:	049b      	lsls	r3, r3, #18
 800391e:	d5fc      	bpl.n	800391a <SystemClock_Config+0x36>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003920:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003922:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8003926:	2200      	movs	r2, #0
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003928:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;

  RCC_OscInitStruct.PLL.PLLM = 5;
 800392a:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 800392c:	25a0      	movs	r5, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800392e:	2408      	movs	r4, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003930:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work
 8003932:	2110      	movs	r1, #16
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003934:	900c      	str	r0, [sp, #48]	; 0x30
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003936:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8003938:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800393a:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 800393c:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 800393e:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work
 8003940:	9119      	str	r1, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003942:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003944:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003948:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800394c:	e9cd 6516 	strd	r6, r5, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003950:	f003 ff56 	bl	8007800 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8003954:	b108      	cbz	r0, 800395a <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003956:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003958:	e7fe      	b.n	8003958 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800395a:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800395c:	263f      	movs	r6, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800395e:	2503      	movs	r5, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003960:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003964:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8003966:	2104      	movs	r1, #4
 8003968:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800396a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800396c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003970:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003974:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8003978:	f004 fad8 	bl	8007f2c <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 800397c:	b108      	cbz	r0, 8003982 <SystemClock_Config+0x9e>
 800397e:	b672      	cpsid	i
  while (1)
 8003980:	e7fe      	b.n	8003980 <SystemClock_Config+0x9c>
  __HAL_RCC_CSI_ENABLE() ;
 8003982:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <SystemClock_Config+0xd0>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800398a:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800398c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003990:	f042 0202 	orr.w	r2, r2, #2
 8003994:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003998:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	9302      	str	r3, [sp, #8]
 80039a2:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 80039a4:	f001 ffa4 	bl	80058f0 <HAL_EnableCompensationCell>
}
 80039a8:	b01e      	add	sp, #120	; 0x78
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
 80039ac:	58000400 	.word	0x58000400
 80039b0:	58024800 	.word	0x58024800
 80039b4:	58024400 	.word	0x58024400

080039b8 <PeriphCommonClock_Config>:
{
 80039b8:	b530      	push	{r4, r5, lr}
 80039ba:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039bc:	229c      	movs	r2, #156	; 0x9c
 80039be:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80039c0:	250c      	movs	r5, #12
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039c2:	a809      	add	r0, sp, #36	; 0x24
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80039c4:	24c0      	movs	r4, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039c6:	f006 f849 	bl	8009a5c <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80039ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80039ce:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80039d0:	2120      	movs	r1, #32
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80039d2:	2200      	movs	r2, #0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80039d4:	9000      	str	r0, [sp, #0]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039d6:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80039d8:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80039da:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80039dc:	9502      	str	r5, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80039de:	9208      	str	r2, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80039e0:	e9cd 3303 	strd	r3, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80039e4:	e9cd 4106 	strd	r4, r1, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039e8:	f004 fce4 	bl	80083b4 <HAL_RCCEx_PeriphCLKConfig>
 80039ec:	b108      	cbz	r0, 80039f2 <PeriphCommonClock_Config+0x3a>
 80039ee:	b672      	cpsid	i
  while (1)
 80039f0:	e7fe      	b.n	80039f0 <PeriphCommonClock_Config+0x38>
}
 80039f2:	b031      	add	sp, #196	; 0xc4
 80039f4:	bd30      	pop	{r4, r5, pc}
 80039f6:	bf00      	nop

080039f8 <main>:
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80039f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039fc:	49c6      	ldr	r1, [pc, #792]	; (8003d18 <main+0x320>)
 80039fe:	e002      	b.n	8003a06 <main+0xe>
 8003a00:	3b01      	subs	r3, #1
 8003a02:	f000 8108 	beq.w	8003c16 <main+0x21e>
 8003a06:	680a      	ldr	r2, [r1, #0]
 8003a08:	0410      	lsls	r0, r2, #16
 8003a0a:	d4f9      	bmi.n	8003a00 <main+0x8>
{
 8003a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a10:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 8003a12:	f001 ff09 	bl	8005828 <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003a16:	4ac1      	ldr	r2, [pc, #772]	; (8003d1c <main+0x324>)
 8003a18:	6953      	ldr	r3, [r2, #20]
 8003a1a:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8003a1e:	d111      	bne.n	8003a44 <main+0x4c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a24:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003a28:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003a2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a30:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003a34:	6953      	ldr	r3, [r2, #20]
 8003a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a40:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003a44:	4ab5      	ldr	r2, [pc, #724]	; (8003d1c <main+0x324>)
 8003a46:	6953      	ldr	r3, [r2, #20]
 8003a48:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8003a4c:	d124      	bne.n	8003a98 <main+0xa0>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003a4e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003a52:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003a56:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003a5a:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003a5e:	f3c5 304e 	ubfx	r0, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003a62:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8003a66:	0140      	lsls	r0, r0, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003a68:	ea00 0406 	and.w	r4, r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003a6c:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003a6e:	ea44 7183 	orr.w	r1, r4, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003a72:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003a74:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8003a78:	1c59      	adds	r1, r3, #1
 8003a7a:	d1f8      	bne.n	8003a6e <main+0x76>
    } while(sets-- != 0U);
 8003a7c:	3820      	subs	r0, #32
 8003a7e:	f110 0f20 	cmn.w	r0, #32
 8003a82:	d1f1      	bne.n	8003a68 <main+0x70>
 8003a84:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003a88:	6953      	ldr	r3, [r2, #20]
 8003a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8e:	6153      	str	r3, [r2, #20]
 8003a90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a94:	f3bf 8f6f 	isb	sy
__HAL_RCC_HSEM_CLK_ENABLE();
 8003a98:	4c9f      	ldr	r4, [pc, #636]	; (8003d18 <main+0x320>)
  SystemClock_Config();
 8003a9a:	f7ff ff23 	bl	80038e4 <SystemClock_Config>
  PeriphCommonClock_Config();
 8003a9e:	f7ff ff8b 	bl	80039b8 <PeriphCommonClock_Config>
HAL_HSEM_FastTake(HSEM_ID_0);
 8003aa2:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 8003aa4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8003aa8:	4625      	mov	r5, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8003aaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003aae:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003ab2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	9b00      	ldr	r3, [sp, #0]
HAL_HSEM_FastTake(HSEM_ID_0);
 8003abe:	f003 fbed 	bl	800729c <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	f003 fbf7 	bl	80072b8 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8003aca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ace:	e002      	b.n	8003ad6 <main+0xde>
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	f000 80a2 	beq.w	8003c1a <main+0x222>
 8003ad6:	682a      	ldr	r2, [r5, #0]
 8003ad8:	0412      	lsls	r2, r2, #16
 8003ada:	d5f9      	bpl.n	8003ad0 <main+0xd8>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003adc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae0:	2601      	movs	r6, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae2:	2202      	movs	r2, #2
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae4:	2400      	movs	r4, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8003aea:	f44f 7780 	mov.w	r7, #256	; 0x100
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8003aee:	a90b      	add	r1, sp, #44	; 0x2c
 8003af0:	488b      	ldr	r0, [pc, #556]	; (8003d20 <main+0x328>)
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003af6:	f44f 2800 	mov.w	r8, #524288	; 0x80000
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003afa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  hadc1.Instance = ADC1;
 8003afe:	f8df a248 	ldr.w	sl, [pc, #584]	; 8003d48 <main+0x350>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b02:	4033      	ands	r3, r6
 8003b04:	9302      	str	r3, [sp, #8]
 8003b06:	9b02      	ldr	r3, [sp, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b08:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003b12:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003b16:	4013      	ands	r3, r2
 8003b18:	9303      	str	r3, [sp, #12]
 8003b1a:	9b03      	ldr	r3, [sp, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b1c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003b20:	f043 0308 	orr.w	r3, r3, #8
 8003b24:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003b28:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	9304      	str	r3, [sp, #16]
 8003b32:	9b04      	ldr	r3, [sp, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b34:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003b40:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	9305      	str	r3, [sp, #20]
 8003b4a:	9b05      	ldr	r3, [sp, #20]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b4c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b54:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003b58:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b60:	9306      	str	r3, [sp, #24]
 8003b62:	9b06      	ldr	r3, [sp, #24]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b64:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003b68:	f043 0320 	orr.w	r3, r3, #32
 8003b6c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003b70:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b74:	920c      	str	r2, [sp, #48]	; 0x30
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b76:	f003 0320 	and.w	r3, r3, #32
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8003b7a:	970b      	str	r7, [sp, #44]	; 0x2c
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b7c:	9307      	str	r3, [sp, #28]
 8003b7e:	9b07      	ldr	r3, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b80:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003b84:	940f      	str	r4, [sp, #60]	; 0x3c
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8003b86:	f003 fa5d 	bl	8007044 <HAL_GPIO_Init>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b8a:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8003b8c:	f44f 4270 	mov.w	r2, #61440	; 0xf000
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003b90:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003b94:	a90b      	add	r1, sp, #44	; 0x2c
 8003b96:	4863      	ldr	r0, [pc, #396]	; (8003d24 <main+0x32c>)
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003b98:	433b      	orrs	r3, r7
 8003b9a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003b9e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003ba2:	2504      	movs	r5, #4
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8003ba4:	920b      	str	r2, [sp, #44]	; 0x2c
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003ba6:	403b      	ands	r3, r7
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003baa:	940e      	str	r4, [sp, #56]	; 0x38
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003bac:	9301      	str	r3, [sp, #4]
 8003bae:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb0:	960c      	str	r6, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003bb2:	f003 fa47 	bl	8007044 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003bb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bba:	a90b      	add	r1, sp, #44	; 0x2c
 8003bbc:	485a      	ldr	r0, [pc, #360]	; (8003d28 <main+0x330>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003bbe:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc0:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc6:	f003 fa3d 	bl	8007044 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8003bca:	4b58      	ldr	r3, [pc, #352]	; (8003d2c <main+0x334>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003bcc:	4650      	mov	r0, sl
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003bce:	f8aa 4014 	strh.w	r4, [sl, #20]
  ADC_MultiModeTypeDef multimode = {0};
 8003bd2:	9408      	str	r4, [sp, #32]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003bd4:	9411      	str	r4, [sp, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 1;
 8003bd6:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003bda:	f88a 401c 	strb.w	r4, [sl, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003bde:	f8ca 4034 	str.w	r4, [sl, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003be2:	f88a 4038 	strb.w	r4, [sl, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003be6:	f8ca 5010 	str.w	r5, [sl, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003bea:	e9ca 3800 	strd	r3, r8, [sl]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003bee:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003bf2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8003bf6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  ADC_MultiModeTypeDef multimode = {0};
 8003bfa:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003bfe:	e9ca 4402 	strd	r4, r4, [sl, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c02:	e9ca 4409 	strd	r4, r4, [sl, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003c06:	e9ca 440b 	strd	r4, r4, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c0a:	f002 facf 	bl	80061ac <HAL_ADC_Init>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	b128      	cbz	r0, 8003c1e <main+0x226>
  __ASM volatile ("cpsid i" : : : "memory");
 8003c12:	b672      	cpsid	i
  while (1)
 8003c14:	e7fe      	b.n	8003c14 <main+0x21c>
 8003c16:	b672      	cpsid	i
 8003c18:	e7fe      	b.n	8003c18 <main+0x220>
 8003c1a:	b672      	cpsid	i
 8003c1c:	e7fe      	b.n	8003c1c <main+0x224>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003c1e:	a908      	add	r1, sp, #32
 8003c20:	4650      	mov	r0, sl
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003c22:	9308      	str	r3, [sp, #32]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003c24:	f002 fbce 	bl	80063c4 <HAL_ADCEx_MultiModeConfigChannel>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	b108      	cbz	r0, 8003c30 <main+0x238>
 8003c2c:	b672      	cpsid	i
  while (1)
 8003c2e:	e7fe      	b.n	8003c2e <main+0x236>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c30:	f04f 0906 	mov.w	r9, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003c34:	f240 74ff 	movw	r4, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c38:	4650      	mov	r0, sl
 8003c3a:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003c3c:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.OffsetSignedSaturation = DISABLE;
 8003c3e:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  sConfig.Channel = ADC_CHANNEL_0;
 8003c42:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c44:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003c48:	940e      	str	r4, [sp, #56]	; 0x38
  sConfig.Offset = 0;
 8003c4a:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c4e:	f001 fee5 	bl	8005a1c <HAL_ADC_ConfigChannel>
 8003c52:	4603      	mov	r3, r0
 8003c54:	b108      	cbz	r0, 8003c5a <main+0x262>
 8003c56:	b672      	cpsid	i
  while (1)
 8003c58:	e7fe      	b.n	8003c58 <main+0x260>
  hadc3.Instance = ADC3;
 8003c5a:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8003d4c <main+0x354>
 8003c5e:	4a34      	ldr	r2, [pc, #208]	; (8003d30 <main+0x338>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8003c60:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003c62:	4650      	mov	r0, sl
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003c64:	f8aa 3014 	strh.w	r3, [sl, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003c68:	f88a 301c 	strb.w	r3, [sl, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003c6c:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8003c70:	f88a 3038 	strb.w	r3, [sl, #56]	; 0x38
  hadc3.Init.NbrOfConversion = 1;
 8003c74:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc3.Instance = ADC3;
 8003c78:	f8ca 2000 	str.w	r2, [sl]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003c7c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8003c80:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8003c84:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8003c88:	e9ca 8301 	strd	r8, r3, [sl, #4]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c8c:	e9ca 3503 	strd	r3, r5, [sl, #12]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c90:	e9ca 3309 	strd	r3, r3, [sl, #36]	; 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003c94:	e9ca 330b 	strd	r3, r3, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003c98:	f002 fa88 	bl	80061ac <HAL_ADC_Init>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	b108      	cbz	r0, 8003ca4 <main+0x2ac>
 8003ca0:	b672      	cpsid	i
  while (1)
 8003ca2:	e7fe      	b.n	8003ca2 <main+0x2aa>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003ca4:	a90b      	add	r1, sp, #44	; 0x2c
 8003ca6:	4650      	mov	r0, sl
  sConfig.OffsetSignedSaturation = DISABLE;
 8003ca8:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003cac:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003cb0:	e9cd 690b 	strd	r6, r9, [sp, #44]	; 0x2c
  sConfig.Offset = 0;
 8003cb4:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003cb8:	f001 feb0 	bl	8005a1c <HAL_ADC_ConfigChannel>
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	b108      	cbz	r0, 8003cc4 <main+0x2cc>
 8003cc0:	b672      	cpsid	i
  while (1)
 8003cc2:	e7fe      	b.n	8003cc2 <main+0x2ca>
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8003cc4:	4631      	mov	r1, r6
 8003cc6:	f001 fc4d 	bl	8005564 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8003cca:	481a      	ldr	r0, [pc, #104]	; (8003d34 <main+0x33c>)
 8003ccc:	f005 fdfe 	bl	80098cc <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f005 fe2d 	bl	8009930 <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8003cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cda:	f005 fe7d 	bl	80099d8 <UTIL_LCD_Clear>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8003cde:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce2:	f005 fe3d 	bl	8009960 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 8003ce6:	4814      	ldr	r0, [pc, #80]	; (8003d38 <main+0x340>)
 8003ce8:	f005 fe32 	bl	8009950 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 8003cec:	4813      	ldr	r0, [pc, #76]	; (8003d3c <main+0x344>)
 8003cee:	f005 fe3f 	bl	8009970 <UTIL_LCD_SetFont>
  vGBMemoryLoad(Tetris_gb, 32768);
 8003cf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cf6:	4812      	ldr	r0, [pc, #72]	; (8003d40 <main+0x348>)
 8003cf8:	f7ff fb82 	bl	8003400 <vGBMemoryLoad>
  vGBMemoryLoad(dmg_boot_bin, 256);													// load boot rom into appropriate place in memory map
 8003cfc:	4639      	mov	r1, r7
 8003cfe:	4811      	ldr	r0, [pc, #68]	; (8003d44 <main+0x34c>)
 8003d00:	f7ff fb7e 	bl	8003400 <vGBMemoryLoad>
  vGBMemoryInit();
 8003d04:	f7ff fb6c 	bl	80033e0 <vGBMemoryInit>
  vSetFrameBuffer();
 8003d08:	f7ff fc2c 	bl	8003564 <vSetFrameBuffer>
		  vGBCPUboot();
 8003d0c:	f7fe fef4 	bl	8002af8 <vGBCPUboot>
		  gbPPUStep();
 8003d10:	f7ff fd46 	bl	80037a0 <gbPPUStep>
  while (1)
 8003d14:	e7fa      	b.n	8003d0c <main+0x314>
 8003d16:	bf00      	nop
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	e000ed00 	.word	0xe000ed00
 8003d20:	58020000 	.word	0x58020000
 8003d24:	58022000 	.word	0x58022000
 8003d28:	58020800 	.word	0x58020800
 8003d2c:	40022000 	.word	0x40022000
 8003d30:	58026000 	.word	0x58026000
 8003d34:	08009d08 	.word	0x08009d08
 8003d38:	ff0000ff 	.word	0xff0000ff
 8003d3c:	24009064 	.word	0x24009064
 8003d40:	2400100c 	.word	0x2400100c
 8003d44:	08009a94 	.word	0x08009a94
 8003d48:	24019340 	.word	0x24019340
 8003d4c:	240193a4 	.word	0x240193a4

08003d50 <HAL_LTDC_LineEventCallback>:
  *                the configuration information for the LTDC.
  * @retval None
  */
void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
  if(pend_buffer >= 0)
 8003d50:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <HAL_LTDC_LineEventCallback+0x3c>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	2a00      	cmp	r2, #0
 8003d56:	db15      	blt.n	8003d84 <HAL_LTDC_LineEventCallback+0x34>
  {
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003d58:	490d      	ldr	r1, [pc, #52]	; (8003d90 <HAL_LTDC_LineEventCallback+0x40>)
 8003d5a:	6802      	ldr	r2, [r0, #0]
{
 8003d5c:	b470      	push	{r4, r5, r6}
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003d5e:	681d      	ldr	r5, [r3, #0]
    __HAL_LTDC_RELOAD_CONFIG(hltdc);

    front_buffer = pend_buffer;
    pend_buffer = -1;
 8003d60:	f04f 34ff 	mov.w	r4, #4294967295
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003d64:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
    front_buffer = pend_buffer;
 8003d68:	4d0a      	ldr	r5, [pc, #40]	; (8003d94 <HAL_LTDC_LineEventCallback+0x44>)
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8003d6a:	f8c2 60ac 	str.w	r6, [r2, #172]	; 0xac
    __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8003d6e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003d70:	f041 0101 	orr.w	r1, r1, #1
 8003d74:	6251      	str	r1, [r2, #36]	; 0x24
  }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8003d76:	2100      	movs	r1, #0
    front_buffer = pend_buffer;
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	602a      	str	r2, [r5, #0]
    pend_buffer = -1;
 8003d7c:	601c      	str	r4, [r3, #0]
}
 8003d7e:	bc70      	pop	{r4, r5, r6}
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8003d80:	f003 bc46 	b.w	8007610 <HAL_LTDC_ProgramLineEvent>
 8003d84:	2100      	movs	r1, #0
 8003d86:	f003 bc43 	b.w	8007610 <HAL_LTDC_ProgramLineEvent>
 8003d8a:	bf00      	nop
 8003d8c:	2400900c 	.word	0x2400900c
 8003d90:	08009b94 	.word	0x08009b94
 8003d94:	2400909c 	.word	0x2400909c

08003d98 <CopyBuffer>:

void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize)
{
 8003d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9c:	b083      	sub	sp, #12

  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
  uint32_t source      = (uint32_t)pSrc;

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  hdma2d.Init.Mode         = DMA2D_M2M;
 8003d9e:	4c20      	ldr	r4, [pc, #128]	; (8003e20 <CopyBuffer+0x88>)
 8003da0:	2500      	movs	r5, #0
  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hdma2d.XferCpltCallback  = NULL;

  /*##-3- Foreground Configuration ###########################################*/
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003da2:	f04f 0eff 	mov.w	lr, #255	; 0xff
{
 8003da6:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 8003daa:	4681      	mov	r9, r0
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
  hdma2d.LayerCfg[1].InputOffset = 0;
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */

  hdma2d.Instance          = DMA2D;
 8003dac:	f8df c074 	ldr.w	ip, [pc, #116]	; 8003e24 <CopyBuffer+0x8c>

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8003db0:	4620      	mov	r0, r4
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 8003db2:	f5ca 7b48 	rsb	fp, sl, #800	; 0x320
  hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8003db6:	60a5      	str	r5, [r4, #8]
  hdma2d.XferCpltCallback  = NULL;
 8003db8:	6225      	str	r5, [r4, #32]
{
 8003dba:	460f      	mov	r7, r1
  hdma2d.LayerCfg[1].InputOffset = 0;
 8003dbc:	6465      	str	r5, [r4, #68]	; 0x44
{
 8003dbe:	4690      	mov	r8, r2
 8003dc0:	461e      	mov	r6, r3
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 8003dc2:	f8c4 b00c 	str.w	fp, [r4, #12]
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003dc6:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
  hdma2d.Init.Mode         = DMA2D_M2M;
 8003dca:	e9c4 c500 	strd	ip, r5, [r4]
  hdma2d.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 8003dce:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8003dd2:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 8003dd6:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
{
 8003dda:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8003dde:	f002 fc1b 	bl	8006618 <HAL_DMA2D_Init>
 8003de2:	b110      	cbz	r0, 8003dea <CopyBuffer+0x52>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
      }
    }
  }
}
 8003de4:	b003      	add	sp, #12
 8003de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK)
 8003dea:	2101      	movs	r1, #1
 8003dec:	4620      	mov	r0, r4
 8003dee:	f002 fcf7 	bl	80067e0 <HAL_DMA2D_ConfigLayer>
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d1f6      	bne.n	8003de4 <CopyBuffer+0x4c>
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8003df6:	f44f 7248 	mov.w	r2, #800	; 0x320
      if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8003dfa:	4653      	mov	r3, sl
 8003dfc:	4649      	mov	r1, r9
 8003dfe:	4620      	mov	r0, r4
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8003e00:	fb02 8206 	mla	r2, r2, r6, r8
      if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8003e04:	9500      	str	r5, [sp, #0]
 8003e06:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8003e0a:	f002 fc47 	bl	800669c <HAL_DMA2D_Start>
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	d1e8      	bne.n	8003de4 <CopyBuffer+0x4c>
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8003e12:	4620      	mov	r0, r4
 8003e14:	2164      	movs	r1, #100	; 0x64
}
 8003e16:	b003      	add	sp, #12
 8003e18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8003e1c:	f002 bc5a 	b.w	80066d4 <HAL_DMA2D_PollForTransfer>
 8003e20:	240090a0 	.word	0x240090a0
 8003e24:	52001000 	.word	0x52001000

08003e28 <dummy2_code>:

void dummy2_code(uint32_t* gb_frame){
 8003e28:	b510      	push	{r4, lr}
	CopyBuffer((uint32_t *) gb_frame, (uint32_t *)Buffers[0], 0, 0, 160 * 2, 144 * 2);
 8003e2a:	2300      	movs	r3, #0
void dummy2_code(uint32_t* gb_frame){
 8003e2c:	b082      	sub	sp, #8
	CopyBuffer((uint32_t *) gb_frame, (uint32_t *)Buffers[0], 0, 0, 160 * 2, 144 * 2);
 8003e2e:	f44f 7490 	mov.w	r4, #288	; 0x120
 8003e32:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003e36:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8003e3a:	e9cd 2400 	strd	r2, r4, [sp]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f7ff ffaa 	bl	8003d98 <CopyBuffer>
	LTDC_LAYER(&hlcd_ltdc, 0)->CFBAR = ((uint32_t)Buffers[0]);
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <dummy2_code+0x2c>)
 8003e46:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 //__HAL_LTDC_RELOAD_CONFIG(&hlcd_ltdc);
}
 8003e50:	b002      	add	sp, #8
 8003e52:	bd10      	pop	{r4, pc}
 8003e54:	2401945c 	.word	0x2401945c

08003e58 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e58:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <HAL_MspInit+0x20>)
{
 8003e5a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003e60:	f042 0202 	orr.w	r2, r2, #2
 8003e64:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003e68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e74:	b002      	add	sp, #8
 8003e76:	4770      	bx	lr
 8003e78:	58024400 	.word	0x58024400

08003e7c <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003e7c:	4938      	ldr	r1, [pc, #224]	; (8003f60 <HAL_ADC_MspInit+0xe4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7e:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8003e80:	6802      	ldr	r2, [r0, #0]
{
 8003e82:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8003e84:	428a      	cmp	r2, r1
{
 8003e86:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e88:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003e8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003e90:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8003e92:	d004      	beq.n	8003e9e <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8003e94:	4933      	ldr	r1, [pc, #204]	; (8003f64 <HAL_ADC_MspInit+0xe8>)
 8003e96:	428a      	cmp	r2, r1
 8003e98:	d026      	beq.n	8003ee8 <HAL_ADC_MspInit+0x6c>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003e9a:	b00a      	add	sp, #40	; 0x28
 8003e9c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003e9e:	4b32      	ldr	r3, [pc, #200]	; (8003f68 <HAL_ADC_MspInit+0xec>)
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8003ea0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003ea4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8003ea8:	4608      	mov	r0, r1
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003eaa:	f042 0220 	orr.w	r2, r2, #32
 8003eae:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003eb2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003eb6:	f002 0220 	and.w	r2, r2, #32
 8003eba:	9200      	str	r2, [sp, #0]
 8003ebc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ebe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	9b01      	ldr	r3, [sp, #4]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8003ed6:	f001 fd01 	bl	80058dc <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8003eda:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ede:	4608      	mov	r0, r1
 8003ee0:	f001 fcfc 	bl	80058dc <HAL_SYSCFG_AnalogSwitchConfig>
}
 8003ee4:	b00a      	add	sp, #40	; 0x28
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003ee8:	4a1f      	ldr	r2, [pc, #124]	; (8003f68 <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8003eea:	f44f 6680 	mov.w	r6, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eee:	2503      	movs	r5, #3
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8003ef0:	a905      	add	r1, sp, #20
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003ef2:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8003ef6:	481d      	ldr	r0, [pc, #116]	; (8003f6c <HAL_ADC_MspInit+0xf0>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003ef8:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8003efc:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8003f00:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8003f04:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
 8003f08:	9402      	str	r4, [sp, #8]
 8003f0a:	9c02      	ldr	r4, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f0c:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8003f10:	f044 0420 	orr.w	r4, r4, #32
 8003f14:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8003f18:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8003f1c:	f004 0420 	and.w	r4, r4, #32
 8003f20:	9403      	str	r4, [sp, #12]
 8003f22:	9c03      	ldr	r4, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f24:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8003f28:	f044 0404 	orr.w	r4, r4, #4
 8003f2c:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8003f30:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f34:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f36:	f002 0204 	and.w	r2, r2, #4
 8003f3a:	9204      	str	r2, [sp, #16]
 8003f3c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f3e:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8003f42:	f003 f87f 	bl	8007044 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003f46:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8003f4a:	4608      	mov	r0, r1
 8003f4c:	f001 fcc6 	bl	80058dc <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003f50:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003f54:	4608      	mov	r0, r1
 8003f56:	f001 fcc1 	bl	80058dc <HAL_SYSCFG_AnalogSwitchConfig>
}
 8003f5a:	b00a      	add	sp, #40	; 0x28
 8003f5c:	bd70      	pop	{r4, r5, r6, pc}
 8003f5e:	bf00      	nop
 8003f60:	40022000 	.word	0x40022000
 8003f64:	58026000 	.word	0x58026000
 8003f68:	58024400 	.word	0x58024400
 8003f6c:	58021400 	.word	0x58021400

08003f70 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop

08003f74 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8003f74:	4c05      	ldr	r4, [pc, #20]	; (8003f8c <HardFault_Handler+0x18>)
{
 8003f76:	b508      	push	{r3, lr}
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f7e:	f003 f983 	bl	8007288 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8003f82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f86:	f001 fc91 	bl	80058ac <HAL_Delay>
  while (1)
 8003f8a:	e7f5      	b.n	8003f78 <HardFault_Handler+0x4>
 8003f8c:	58022000 	.word	0x58022000

08003f90 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003f90:	e7fe      	b.n	8003f90 <MemManage_Handler>
 8003f92:	bf00      	nop

08003f94 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003f94:	e7fe      	b.n	8003f94 <BusFault_Handler>
 8003f96:	bf00      	nop

08003f98 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003f98:	e7fe      	b.n	8003f98 <UsageFault_Handler>
 8003f9a:	bf00      	nop

08003f9c <SVC_Handler>:
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop

08003fa0 <DebugMon_Handler>:
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop

08003fa4 <PendSV_Handler>:
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop

08003fa8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8003fa8:	f001 bc6e 	b.w	8005888 <HAL_IncTick>

08003fac <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8003fac:	4801      	ldr	r0, [pc, #4]	; (8003fb4 <LTDC_IRQHandler+0x8>)
 8003fae:	f003 ba9d 	b.w	80074ec <HAL_LTDC_IRQHandler>
 8003fb2:	bf00      	nop
 8003fb4:	2401945c 	.word	0x2401945c

08003fb8 <LTDC_ER_IRQHandler>:
 8003fb8:	f7ff bff8 	b.w	8003fac <LTDC_IRQHandler>

08003fbc <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 8003fbc:	4801      	ldr	r0, [pc, #4]	; (8003fc4 <DSI_IRQHandler+0x8>)
 8003fbe:	f002 bd63 	b.w	8006a88 <HAL_DSI_IRQHandler>
 8003fc2:	bf00      	nop
 8003fc4:	24019520 	.word	0x24019520

08003fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004000 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fcc:	f7fc f984 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fd0:	480c      	ldr	r0, [pc, #48]	; (8004004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fd2:	490d      	ldr	r1, [pc, #52]	; (8004008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fd4:	4a0d      	ldr	r2, [pc, #52]	; (800400c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fd8:	e002      	b.n	8003fe0 <LoopCopyDataInit>

08003fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fde:	3304      	adds	r3, #4

08003fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fe4:	d3f9      	bcc.n	8003fda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fe6:	4a0a      	ldr	r2, [pc, #40]	; (8004010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fe8:	4c0a      	ldr	r4, [pc, #40]	; (8004014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fec:	e001      	b.n	8003ff2 <LoopFillZerobss>

08003fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ff0:	3204      	adds	r2, #4

08003ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ff4:	d3fb      	bcc.n	8003fee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ff6:	f005 fcff 	bl	80099f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ffa:	f7ff fcfd 	bl	80039f8 <main>
  bx  lr
 8003ffe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004000:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8004004:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004008:	2400906c 	.word	0x2400906c
  ldr r2, =_sidata
 800400c:	0800b7f4 	.word	0x0800b7f4
  ldr r2, =_sbss
 8004010:	24009070 	.word	0x24009070
  ldr r4, =_ebss
 8004014:	240195dc 	.word	0x240195dc

08004018 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004018:	e7fe      	b.n	8004018 <ADC3_IRQHandler>
	...

0800401c <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 800401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                     pRegMode->BurstType     |\
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800401e:	4c0e      	ldr	r4, [pc, #56]	; (8004058 <IS42S32800J_ModeRegConfig+0x3c>)
 8004020:	2304      	movs	r3, #4
{
 8004022:	460a      	mov	r2, r1
  Command.CommandTarget          = pRegMode->TargetBank;
  Command.AutoRefreshNumber      = 1;
 8004024:	2601      	movs	r6, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004026:	6023      	str	r3, [r4, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004028:	69d7      	ldr	r7, [r2, #28]
 800402a:	e9d1 3503 	ldrd	r3, r5, [r1, #12]
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800402e:	4621      	mov	r1, r4
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004030:	432b      	orrs	r3, r5
                     pRegMode->BurstType     |\
 8004032:	6955      	ldr	r5, [r2, #20]
 8004034:	432b      	orrs	r3, r5
                     pRegMode->CASLatency    |\
 8004036:	6995      	ldr	r5, [r2, #24]
 8004038:	432b      	orrs	r3, r5
  Command.CommandTarget          = pRegMode->TargetBank;
 800403a:	6815      	ldr	r5, [r2, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800403c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
 8004040:	60a6      	str	r6, [r4, #8]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004042:	433b      	orrs	r3, r7
  Command.CommandTarget          = pRegMode->TargetBank;
 8004044:	6065      	str	r5, [r4, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 8004046:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004048:	f005 fb5c 	bl	8009704 <HAL_SDRAM_SendCommand>
 800404c:	3800      	subs	r0, #0
 800404e:	bf18      	it	ne
 8004050:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004052:	4240      	negs	r0, r0
 8004054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004056:	bf00      	nop
 8004058:	24009108 	.word	0x24009108

0800405c <IS42S32800J_Init>:
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800405c:	680a      	ldr	r2, [r1, #0]
{
 800405e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004060:	4c22      	ldr	r4, [pc, #136]	; (80040ec <IS42S32800J_Init+0x90>)
 8004062:	2301      	movs	r3, #1
  Command.ModeRegisterDefinition = 0;
 8004064:	2700      	movs	r7, #0
{
 8004066:	460d      	mov	r5, r1
  Command.CommandTarget          = Interface;
 8004068:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800406a:	4621      	mov	r1, r4
 800406c:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8004070:	4606      	mov	r6, r0
  Command.ModeRegisterDefinition = 0;
 8004072:	60e7      	str	r7, [r4, #12]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004074:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 8004076:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004078:	f005 fb44 	bl	8009704 <HAL_SDRAM_SendCommand>
 800407c:	2800      	cmp	r0, #0
 800407e:	d132      	bne.n	80040e6 <IS42S32800J_Init+0x8a>
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8004080:	f001 fc0e 	bl	80058a0 <HAL_GetTick>
 8004084:	4607      	mov	r7, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004086:	f001 fc0b 	bl	80058a0 <HAL_GetTick>
 800408a:	4287      	cmp	r7, r0
 800408c:	d0fb      	beq.n	8004086 <IS42S32800J_Init+0x2a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800408e:	682a      	ldr	r2, [r5, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004090:	2002      	movs	r0, #2
  Command.AutoRefreshNumber      = 1;
 8004092:	2101      	movs	r1, #1
  Command.ModeRegisterDefinition = 0;
 8004094:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
 8004096:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004098:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 800409c:	6020      	str	r0, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800409e:	4630      	mov	r0, r6
  Command.AutoRefreshNumber      = 1;
 80040a0:	60a1      	str	r1, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80040a2:	4912      	ldr	r1, [pc, #72]	; (80040ec <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 80040a4:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80040a6:	f005 fb2d 	bl	8009704 <HAL_SDRAM_SendCommand>
 80040aa:	4603      	mov	r3, r0
 80040ac:	b9d8      	cbnz	r0, 80040e6 <IS42S32800J_Init+0x8a>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 80040ae:	6828      	ldr	r0, [r5, #0]
  Command.AutoRefreshNumber      = 8;
 80040b0:	2708      	movs	r7, #8
  Command.CommandMode            = RefreshMode;
 80040b2:	6869      	ldr	r1, [r5, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80040b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = Interface;
 80040b8:	6060      	str	r0, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80040ba:	4630      	mov	r0, r6
  Command.CommandMode            = RefreshMode;
 80040bc:	6021      	str	r1, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80040be:	490b      	ldr	r1, [pc, #44]	; (80040ec <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 80040c0:	60e3      	str	r3, [r4, #12]
  Command.AutoRefreshNumber      = 8;
 80040c2:	60a7      	str	r7, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80040c4:	f005 fb1e 	bl	8009704 <HAL_SDRAM_SendCommand>
 80040c8:	b968      	cbnz	r0, 80040e6 <IS42S32800J_Init+0x8a>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 80040ca:	4629      	mov	r1, r5
 80040cc:	4630      	mov	r0, r6
 80040ce:	f7ff ffa5 	bl	800401c <IS42S32800J_ModeRegConfig>
 80040d2:	b940      	cbnz	r0, 80040e6 <IS42S32800J_Init+0x8a>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80040d4:	68a9      	ldr	r1, [r5, #8]
 80040d6:	4630      	mov	r0, r6
 80040d8:	f005 fb34 	bl	8009744 <HAL_SDRAM_ProgramRefreshRate>
 80040dc:	3800      	subs	r0, #0
 80040de:	bf18      	it	ne
 80040e0:	2001      	movne	r0, #1
 80040e2:	4240      	negs	r0, r0
}
 80040e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = IS42S32800J_ERROR;
 80040e6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80040ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040ec:	24009108 	.word	0x24009108

080040f0 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop

080040f8 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 80040f8:	4b02      	ldr	r3, [pc, #8]	; (8004104 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 80040fa:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	600b      	str	r3, [r1, #0]
}
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	24009118 	.word	0x24009118

08004108 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8004108:	4b02      	ldr	r3, [pc, #8]	; (8004114 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 800410a:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	600b      	str	r3, [r1, #0]
}
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	24009118 	.word	0x24009118

08004118 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004118:	4b06      	ldr	r3, [pc, #24]	; (8004134 <OTM8009A_GetXSize+0x1c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	b123      	cbz	r3, 8004128 <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 800411e:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 8004122:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 8004124:	600b      	str	r3, [r1, #0]
}
 8004126:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 8004128:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 800412c:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 800412e:	600b      	str	r3, [r1, #0]
}
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	24009118 	.word	0x24009118

08004138 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <OTM8009A_GetYSize+0x1c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	b123      	cbz	r3, 8004148 <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 800413e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 8004142:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 8004144:	600b      	str	r3, [r1, #0]
}
 8004146:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 8004148:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 800414c:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 800414e:	600b      	str	r3, [r1, #0]
}
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	24009118 	.word	0x24009118

08004158 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004158:	f04f 30ff 	mov.w	r0, #4294967295
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop

08004160 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004160:	f04f 30ff 	mov.w	r0, #4294967295
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop

08004168 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004168:	f04f 30ff 	mov.w	r0, #4294967295
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop

08004170 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004170:	f04f 30ff 	mov.w	r0, #4294967295
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop

08004178 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004178:	f04f 30ff 	mov.w	r0, #4294967295
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop

08004180 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8004180:	f04f 30ff 	mov.w	r0, #4294967295
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop

08004188 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004188:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800418a:	6884      	ldr	r4, [r0, #8]
 800418c:	8800      	ldrh	r0, [r0, #0]
 800418e:	46a4      	mov	ip, r4
}
 8004190:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004194:	4760      	bx	ip
 8004196:	bf00      	nop

08004198 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004198:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800419a:	6844      	ldr	r4, [r0, #4]
 800419c:	8800      	ldrh	r0, [r0, #0]
 800419e:	46a4      	mov	ip, r4
}
 80041a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80041a4:	4760      	bx	ip
 80041a6:	bf00      	nop

080041a8 <OTM8009A_Init>:
{
 80041a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80041ac:	2300      	movs	r3, #0
 80041ae:	f100 0710 	add.w	r7, r0, #16
{
 80041b2:	b082      	sub	sp, #8
 80041b4:	4680      	mov	r8, r0
 80041b6:	4689      	mov	r9, r1
 80041b8:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80041ba:	4619      	mov	r1, r3
 80041bc:	4ae0      	ldr	r2, [pc, #896]	; (8004540 <OTM8009A_Init+0x398>)
 80041be:	4638      	mov	r0, r7
 80041c0:	f000 fcd6 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80041c4:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80041c6:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80041c8:	4ade      	ldr	r2, [pc, #888]	; (8004544 <OTM8009A_Init+0x39c>)
 80041ca:	21ff      	movs	r1, #255	; 0xff
 80041cc:	4638      	mov	r0, r7
 80041ce:	f000 fccf 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80041d2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80041d4:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80041d6:	4adc      	ldr	r2, [pc, #880]	; (8004548 <OTM8009A_Init+0x3a0>)
 80041d8:	4619      	mov	r1, r3
 80041da:	4638      	mov	r0, r7
 80041dc:	f000 fcc8 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80041e0:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80041e2:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80041e4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80041e6:	4ad9      	ldr	r2, [pc, #868]	; (800454c <OTM8009A_Init+0x3a4>)
 80041e8:	21ff      	movs	r1, #255	; 0xff
 80041ea:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80041ec:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80041ee:	f000 fcbf 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80041f2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80041f4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80041f6:	4ad4      	ldr	r2, [pc, #848]	; (8004548 <OTM8009A_Init+0x3a0>)
 80041f8:	4619      	mov	r1, r3
 80041fa:	4638      	mov	r0, r7
 80041fc:	f000 fcb8 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004200:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004202:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004204:	2300      	movs	r3, #0
 8004206:	4ad2      	ldr	r2, [pc, #840]	; (8004550 <OTM8009A_Init+0x3a8>)
 8004208:	21c4      	movs	r1, #196	; 0xc4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800420a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800420c:	4638      	mov	r0, r7
 800420e:	f000 fcaf 	bl	8004b70 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004212:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004216:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 8004218:	4798      	blx	r3
 800421a:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800421c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004220:	4798      	blx	r3
 8004222:	1b00      	subs	r0, r0, r4
 8004224:	2809      	cmp	r0, #9
 8004226:	d9f9      	bls.n	800421c <OTM8009A_Init+0x74>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004228:	2300      	movs	r3, #0
 800422a:	4aca      	ldr	r2, [pc, #808]	; (8004554 <OTM8009A_Init+0x3ac>)
 800422c:	4638      	mov	r0, r7
 800422e:	4619      	mov	r1, r3
 8004230:	f000 fc9e 	bl	8004b70 <otm8009a_write_reg>
 8004234:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004236:	2300      	movs	r3, #0
 8004238:	4ac7      	ldr	r2, [pc, #796]	; (8004558 <OTM8009A_Init+0x3b0>)
 800423a:	21c4      	movs	r1, #196	; 0xc4
 800423c:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800423e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004240:	f000 fc96 	bl	8004b70 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8004244:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004248:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 800424a:	4798      	blx	r3
 800424c:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800424e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004252:	4798      	blx	r3
 8004254:	1b40      	subs	r0, r0, r5
 8004256:	2809      	cmp	r0, #9
 8004258:	d9f9      	bls.n	800424e <OTM8009A_Init+0xa6>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800425a:	2300      	movs	r3, #0
 800425c:	4abf      	ldr	r2, [pc, #764]	; (800455c <OTM8009A_Init+0x3b4>)
 800425e:	4638      	mov	r0, r7
 8004260:	4619      	mov	r1, r3
 8004262:	f000 fc85 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004266:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004268:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800426a:	4abd      	ldr	r2, [pc, #756]	; (8004560 <OTM8009A_Init+0x3b8>)
 800426c:	21c5      	movs	r1, #197	; 0xc5
 800426e:	4638      	mov	r0, r7
 8004270:	f000 fc7e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004274:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004276:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004278:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800427a:	4619      	mov	r1, r3
 800427c:	4ab9      	ldr	r2, [pc, #740]	; (8004564 <OTM8009A_Init+0x3bc>)
 800427e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004280:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004282:	f000 fc75 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004286:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004288:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800428a:	4ab7      	ldr	r2, [pc, #732]	; (8004568 <OTM8009A_Init+0x3c0>)
 800428c:	21c5      	movs	r1, #197	; 0xc5
 800428e:	4638      	mov	r0, r7
 8004290:	f000 fc6e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004294:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004296:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004298:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800429a:	4619      	mov	r1, r3
 800429c:	4ab3      	ldr	r2, [pc, #716]	; (800456c <OTM8009A_Init+0x3c4>)
 800429e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80042a0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80042a2:	f000 fc65 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80042a6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80042a8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80042aa:	4ab1      	ldr	r2, [pc, #708]	; (8004570 <OTM8009A_Init+0x3c8>)
 80042ac:	21c0      	movs	r1, #192	; 0xc0
 80042ae:	4638      	mov	r0, r7
 80042b0:	f000 fc5e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80042b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80042b6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80042b8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80042ba:	4619      	mov	r1, r3
 80042bc:	4aa0      	ldr	r2, [pc, #640]	; (8004540 <OTM8009A_Init+0x398>)
 80042be:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80042c0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80042c2:	f000 fc55 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80042c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80042c8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80042ca:	4aaa      	ldr	r2, [pc, #680]	; (8004574 <OTM8009A_Init+0x3cc>)
 80042cc:	21d9      	movs	r1, #217	; 0xd9
 80042ce:	4638      	mov	r0, r7
 80042d0:	f000 fc4e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80042d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80042d6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80042d8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80042da:	4619      	mov	r1, r3
 80042dc:	4aa6      	ldr	r2, [pc, #664]	; (8004578 <OTM8009A_Init+0x3d0>)
 80042de:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80042e0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80042e2:	f000 fc45 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80042e6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80042e8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80042ea:	4aa4      	ldr	r2, [pc, #656]	; (800457c <OTM8009A_Init+0x3d4>)
 80042ec:	21c1      	movs	r1, #193	; 0xc1
 80042ee:	4638      	mov	r0, r7
 80042f0:	f000 fc3e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80042f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80042f6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80042f8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80042fa:	4619      	mov	r1, r3
 80042fc:	4aa0      	ldr	r2, [pc, #640]	; (8004580 <OTM8009A_Init+0x3d8>)
 80042fe:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004300:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004302:	f000 fc35 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004306:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004308:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800430a:	4a9e      	ldr	r2, [pc, #632]	; (8004584 <OTM8009A_Init+0x3dc>)
 800430c:	21c1      	movs	r1, #193	; 0xc1
 800430e:	4638      	mov	r0, r7
 8004310:	f000 fc2e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004314:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004316:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004318:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800431a:	4619      	mov	r1, r3
 800431c:	4a9a      	ldr	r2, [pc, #616]	; (8004588 <OTM8009A_Init+0x3e0>)
 800431e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004320:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004322:	f000 fc25 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004326:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004328:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800432a:	4a98      	ldr	r2, [pc, #608]	; (800458c <OTM8009A_Init+0x3e4>)
 800432c:	21c5      	movs	r1, #197	; 0xc5
 800432e:	4638      	mov	r0, r7
 8004330:	f000 fc1e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004334:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004336:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004338:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800433a:	4619      	mov	r1, r3
 800433c:	4a94      	ldr	r2, [pc, #592]	; (8004590 <OTM8009A_Init+0x3e8>)
 800433e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004340:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004342:	f000 fc15 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004346:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004348:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800434a:	4a87      	ldr	r2, [pc, #540]	; (8004568 <OTM8009A_Init+0x3c0>)
 800434c:	21c5      	movs	r1, #197	; 0xc5
 800434e:	4638      	mov	r0, r7
 8004350:	f000 fc0e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004354:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004356:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004358:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800435a:	4619      	mov	r1, r3
 800435c:	4a78      	ldr	r2, [pc, #480]	; (8004540 <OTM8009A_Init+0x398>)
 800435e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004360:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004362:	f000 fc05 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004366:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004368:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800436a:	4a8a      	ldr	r2, [pc, #552]	; (8004594 <OTM8009A_Init+0x3ec>)
 800436c:	21d8      	movs	r1, #216	; 0xd8
 800436e:	4638      	mov	r0, r7
 8004370:	f000 fbfe 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004374:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004376:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004378:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800437a:	4619      	mov	r1, r3
 800437c:	4a86      	ldr	r2, [pc, #536]	; (8004598 <OTM8009A_Init+0x3f0>)
 800437e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004380:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004382:	f000 fbf5 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004386:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004388:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800438a:	4a84      	ldr	r2, [pc, #528]	; (800459c <OTM8009A_Init+0x3f4>)
 800438c:	21c5      	movs	r1, #197	; 0xc5
 800438e:	4638      	mov	r0, r7
 8004390:	f000 fbee 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004394:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004396:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004398:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800439a:	4619      	mov	r1, r3
 800439c:	4a80      	ldr	r2, [pc, #512]	; (80045a0 <OTM8009A_Init+0x3f8>)
 800439e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80043a0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80043a2:	f000 fbe5 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80043a6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80043a8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80043aa:	4a7e      	ldr	r2, [pc, #504]	; (80045a4 <OTM8009A_Init+0x3fc>)
 80043ac:	21c0      	movs	r1, #192	; 0xc0
 80043ae:	4638      	mov	r0, r7
 80043b0:	f000 fbde 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80043b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80043b6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80043b8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80043ba:	4619      	mov	r1, r3
 80043bc:	4a7a      	ldr	r2, [pc, #488]	; (80045a8 <OTM8009A_Init+0x400>)
 80043be:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80043c0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80043c2:	f000 fbd5 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80043c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80043c8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80043ca:	4a78      	ldr	r2, [pc, #480]	; (80045ac <OTM8009A_Init+0x404>)
 80043cc:	21c5      	movs	r1, #197	; 0xc5
 80043ce:	4638      	mov	r0, r7
 80043d0:	f000 fbce 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80043d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80043d6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80043d8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80043da:	4619      	mov	r1, r3
 80043dc:	4a66      	ldr	r2, [pc, #408]	; (8004578 <OTM8009A_Init+0x3d0>)
 80043de:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80043e0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80043e2:	f000 fbc5 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80043e6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80043e8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80043ea:	4a71      	ldr	r2, [pc, #452]	; (80045b0 <OTM8009A_Init+0x408>)
 80043ec:	21c4      	movs	r1, #196	; 0xc4
 80043ee:	4638      	mov	r0, r7
 80043f0:	f000 fbbe 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80043f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80043f6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80043f8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80043fa:	4619      	mov	r1, r3
 80043fc:	4a60      	ldr	r2, [pc, #384]	; (8004580 <OTM8009A_Init+0x3d8>)
 80043fe:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004400:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004402:	f000 fbb5 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004406:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004408:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800440a:	4a6a      	ldr	r2, [pc, #424]	; (80045b4 <OTM8009A_Init+0x40c>)
 800440c:	21c1      	movs	r1, #193	; 0xc1
 800440e:	4638      	mov	r0, r7
 8004410:	f000 fbae 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004414:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004416:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004418:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800441a:	4619      	mov	r1, r3
 800441c:	4a66      	ldr	r2, [pc, #408]	; (80045b8 <OTM8009A_Init+0x410>)
 800441e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004420:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004422:	f000 fba5 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004426:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004428:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800442a:	4a64      	ldr	r2, [pc, #400]	; (80045bc <OTM8009A_Init+0x414>)
 800442c:	21b3      	movs	r1, #179	; 0xb3
 800442e:	4638      	mov	r0, r7
 8004430:	f000 fb9e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004434:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004436:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004438:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800443a:	4619      	mov	r1, r3
 800443c:	4a42      	ldr	r2, [pc, #264]	; (8004548 <OTM8009A_Init+0x3a0>)
 800443e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004440:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004442:	f000 fb95 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004446:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004448:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800444a:	4a5d      	ldr	r2, [pc, #372]	; (80045c0 <OTM8009A_Init+0x418>)
 800444c:	21ce      	movs	r1, #206	; 0xce
 800444e:	4638      	mov	r0, r7
 8004450:	f000 fb8e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004454:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004456:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004458:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800445a:	4619      	mov	r1, r3
 800445c:	4a59      	ldr	r2, [pc, #356]	; (80045c4 <OTM8009A_Init+0x41c>)
 800445e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004460:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004462:	f000 fb85 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004466:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004468:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800446a:	4a57      	ldr	r2, [pc, #348]	; (80045c8 <OTM8009A_Init+0x420>)
 800446c:	21ce      	movs	r1, #206	; 0xce
 800446e:	4638      	mov	r0, r7
 8004470:	f000 fb7e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004474:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004476:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004478:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800447a:	4619      	mov	r1, r3
 800447c:	4a53      	ldr	r2, [pc, #332]	; (80045cc <OTM8009A_Init+0x424>)
 800447e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004480:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004482:	f000 fb75 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004486:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004488:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800448a:	4a51      	ldr	r2, [pc, #324]	; (80045d0 <OTM8009A_Init+0x428>)
 800448c:	21ce      	movs	r1, #206	; 0xce
 800448e:	4638      	mov	r0, r7
 8004490:	f000 fb6e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004494:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004496:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004498:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800449a:	4619      	mov	r1, r3
 800449c:	4a4d      	ldr	r2, [pc, #308]	; (80045d4 <OTM8009A_Init+0x42c>)
 800449e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80044a0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80044a2:	f000 fb65 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80044a6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80044a8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80044aa:	4a4b      	ldr	r2, [pc, #300]	; (80045d8 <OTM8009A_Init+0x430>)
 80044ac:	21cf      	movs	r1, #207	; 0xcf
 80044ae:	4638      	mov	r0, r7
 80044b0:	f000 fb5e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80044b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80044b6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80044b8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80044ba:	4619      	mov	r1, r3
 80044bc:	4a47      	ldr	r2, [pc, #284]	; (80045dc <OTM8009A_Init+0x434>)
 80044be:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80044c0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80044c2:	f000 fb55 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80044c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80044c8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80044ca:	4a45      	ldr	r2, [pc, #276]	; (80045e0 <OTM8009A_Init+0x438>)
 80044cc:	21cf      	movs	r1, #207	; 0xcf
 80044ce:	4638      	mov	r0, r7
 80044d0:	f000 fb4e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80044d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80044d6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80044d8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80044da:	4619      	mov	r1, r3
 80044dc:	4a1a      	ldr	r2, [pc, #104]	; (8004548 <OTM8009A_Init+0x3a0>)
 80044de:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80044e0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80044e2:	f000 fb45 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80044e6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80044e8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80044ea:	4a3e      	ldr	r2, [pc, #248]	; (80045e4 <OTM8009A_Init+0x43c>)
 80044ec:	21cb      	movs	r1, #203	; 0xcb
 80044ee:	4638      	mov	r0, r7
 80044f0:	f000 fb3e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80044f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80044f6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80044f8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80044fa:	4619      	mov	r1, r3
 80044fc:	4a3a      	ldr	r2, [pc, #232]	; (80045e8 <OTM8009A_Init+0x440>)
 80044fe:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004500:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004502:	f000 fb35 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004506:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004508:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800450a:	4a38      	ldr	r2, [pc, #224]	; (80045ec <OTM8009A_Init+0x444>)
 800450c:	21cb      	movs	r1, #203	; 0xcb
 800450e:	4638      	mov	r0, r7
 8004510:	f000 fb2e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004514:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004516:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004518:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800451a:	4619      	mov	r1, r3
 800451c:	4a29      	ldr	r2, [pc, #164]	; (80045c4 <OTM8009A_Init+0x41c>)
 800451e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004520:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004522:	f000 fb25 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004526:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004528:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800452a:	4a31      	ldr	r2, [pc, #196]	; (80045f0 <OTM8009A_Init+0x448>)
 800452c:	21cb      	movs	r1, #203	; 0xcb
 800452e:	4638      	mov	r0, r7
 8004530:	f000 fb1e 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004534:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004536:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004538:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800453a:	4619      	mov	r1, r3
 800453c:	e05a      	b.n	80045f4 <OTM8009A_Init+0x44c>
 800453e:	bf00      	nop
 8004540:	08009cd5 	.word	0x08009cd5
 8004544:	08009ba4 	.word	0x08009ba4
 8004548:	08009cd6 	.word	0x08009cd6
 800454c:	08009c30 	.word	0x08009c30
 8004550:	08009cd7 	.word	0x08009cd7
 8004554:	08009cd8 	.word	0x08009cd8
 8004558:	08009cd9 	.word	0x08009cd9
 800455c:	08009cda 	.word	0x08009cda
 8004560:	08009cdb 	.word	0x08009cdb
 8004564:	08009cdc 	.word	0x08009cdc
 8004568:	08009cdd 	.word	0x08009cdd
 800456c:	08009cde 	.word	0x08009cde
 8004570:	08009cdf 	.word	0x08009cdf
 8004574:	08009ce0 	.word	0x08009ce0
 8004578:	08009ce1 	.word	0x08009ce1
 800457c:	08009ce2 	.word	0x08009ce2
 8004580:	08009ce3 	.word	0x08009ce3
 8004584:	08009ce4 	.word	0x08009ce4
 8004588:	08009ce5 	.word	0x08009ce5
 800458c:	08009ce6 	.word	0x08009ce6
 8004590:	08009ce7 	.word	0x08009ce7
 8004594:	08009ca4 	.word	0x08009ca4
 8004598:	08009ce8 	.word	0x08009ce8
 800459c:	08009ce9 	.word	0x08009ce9
 80045a0:	08009cea 	.word	0x08009cea
 80045a4:	08009ceb 	.word	0x08009ceb
 80045a8:	08009cec 	.word	0x08009cec
 80045ac:	08009ced 	.word	0x08009ced
 80045b0:	08009cee 	.word	0x08009cee
 80045b4:	08009cef 	.word	0x08009cef
 80045b8:	08009cf0 	.word	0x08009cf0
 80045bc:	08009ca8 	.word	0x08009ca8
 80045c0:	08009cac 	.word	0x08009cac
 80045c4:	08009cf1 	.word	0x08009cf1
 80045c8:	08009cb4 	.word	0x08009cb4
 80045cc:	08009cf2 	.word	0x08009cf2
 80045d0:	08009cc4 	.word	0x08009cc4
 80045d4:	08009cf3 	.word	0x08009cf3
 80045d8:	08009ba8 	.word	0x08009ba8
 80045dc:	08009cf4 	.word	0x08009cf4
 80045e0:	08009d01 	.word	0x08009d01
 80045e4:	08009bb4 	.word	0x08009bb4
 80045e8:	08009cf5 	.word	0x08009cf5
 80045ec:	08009bc0 	.word	0x08009bc0
 80045f0:	08009bd0 	.word	0x08009bd0
 80045f4:	4ad1      	ldr	r2, [pc, #836]	; (800493c <OTM8009A_Init+0x794>)
 80045f6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80045f8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80045fa:	f000 fab9 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80045fe:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004600:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004602:	4acf      	ldr	r2, [pc, #828]	; (8004940 <OTM8009A_Init+0x798>)
 8004604:	21cb      	movs	r1, #203	; 0xcb
 8004606:	4638      	mov	r0, r7
 8004608:	f000 fab2 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800460c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800460e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004610:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004612:	4619      	mov	r1, r3
 8004614:	4acb      	ldr	r2, [pc, #812]	; (8004944 <OTM8009A_Init+0x79c>)
 8004616:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004618:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800461a:	f000 faa9 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800461e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004620:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004622:	4ac9      	ldr	r2, [pc, #804]	; (8004948 <OTM8009A_Init+0x7a0>)
 8004624:	21cb      	movs	r1, #203	; 0xcb
 8004626:	4638      	mov	r0, r7
 8004628:	f000 faa2 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800462c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800462e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004630:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004632:	4619      	mov	r1, r3
 8004634:	4ac5      	ldr	r2, [pc, #788]	; (800494c <OTM8009A_Init+0x7a4>)
 8004636:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004638:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800463a:	f000 fa99 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800463e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004640:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004642:	4ac3      	ldr	r2, [pc, #780]	; (8004950 <OTM8009A_Init+0x7a8>)
 8004644:	21cb      	movs	r1, #203	; 0xcb
 8004646:	4638      	mov	r0, r7
 8004648:	f000 fa92 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800464c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800464e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004650:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004652:	4619      	mov	r1, r3
 8004654:	4abf      	ldr	r2, [pc, #764]	; (8004954 <OTM8009A_Init+0x7ac>)
 8004656:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004658:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800465a:	f000 fa89 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800465e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004660:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004662:	4abd      	ldr	r2, [pc, #756]	; (8004958 <OTM8009A_Init+0x7b0>)
 8004664:	21cb      	movs	r1, #203	; 0xcb
 8004666:	4638      	mov	r0, r7
 8004668:	f000 fa82 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800466c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800466e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004670:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004672:	4619      	mov	r1, r3
 8004674:	4ab9      	ldr	r2, [pc, #740]	; (800495c <OTM8009A_Init+0x7b4>)
 8004676:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004678:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800467a:	f000 fa79 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800467e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004680:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004682:	4ab7      	ldr	r2, [pc, #732]	; (8004960 <OTM8009A_Init+0x7b8>)
 8004684:	21cb      	movs	r1, #203	; 0xcb
 8004686:	4638      	mov	r0, r7
 8004688:	f000 fa72 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800468c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800468e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004690:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004692:	4619      	mov	r1, r3
 8004694:	4ab3      	ldr	r2, [pc, #716]	; (8004964 <OTM8009A_Init+0x7bc>)
 8004696:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004698:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800469a:	f000 fa69 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800469e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80046a0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80046a2:	4ab1      	ldr	r2, [pc, #708]	; (8004968 <OTM8009A_Init+0x7c0>)
 80046a4:	21cc      	movs	r1, #204	; 0xcc
 80046a6:	4638      	mov	r0, r7
 80046a8:	f000 fa62 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80046ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80046ae:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80046b0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80046b2:	4619      	mov	r1, r3
 80046b4:	4aad      	ldr	r2, [pc, #692]	; (800496c <OTM8009A_Init+0x7c4>)
 80046b6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80046b8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80046ba:	f000 fa59 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80046be:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80046c0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80046c2:	4aab      	ldr	r2, [pc, #684]	; (8004970 <OTM8009A_Init+0x7c8>)
 80046c4:	21cc      	movs	r1, #204	; 0xcc
 80046c6:	4638      	mov	r0, r7
 80046c8:	f000 fa52 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80046cc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80046ce:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80046d0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80046d2:	4619      	mov	r1, r3
 80046d4:	4aa7      	ldr	r2, [pc, #668]	; (8004974 <OTM8009A_Init+0x7cc>)
 80046d6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80046d8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80046da:	f000 fa49 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80046de:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80046e0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80046e2:	4aa5      	ldr	r2, [pc, #660]	; (8004978 <OTM8009A_Init+0x7d0>)
 80046e4:	21cc      	movs	r1, #204	; 0xcc
 80046e6:	4638      	mov	r0, r7
 80046e8:	f000 fa42 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80046ec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80046ee:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80046f0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80046f2:	4619      	mov	r1, r3
 80046f4:	4a91      	ldr	r2, [pc, #580]	; (800493c <OTM8009A_Init+0x794>)
 80046f6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80046f8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80046fa:	f000 fa39 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80046fe:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004700:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004702:	4a9e      	ldr	r2, [pc, #632]	; (800497c <OTM8009A_Init+0x7d4>)
 8004704:	21cc      	movs	r1, #204	; 0xcc
 8004706:	4638      	mov	r0, r7
 8004708:	f000 fa32 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800470c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800470e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004710:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004712:	4619      	mov	r1, r3
 8004714:	4a8b      	ldr	r2, [pc, #556]	; (8004944 <OTM8009A_Init+0x79c>)
 8004716:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004718:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800471a:	f000 fa29 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800471e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004720:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004722:	4a97      	ldr	r2, [pc, #604]	; (8004980 <OTM8009A_Init+0x7d8>)
 8004724:	21cc      	movs	r1, #204	; 0xcc
 8004726:	4638      	mov	r0, r7
 8004728:	f000 fa22 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800472c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800472e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004730:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004732:	4619      	mov	r1, r3
 8004734:	4a85      	ldr	r2, [pc, #532]	; (800494c <OTM8009A_Init+0x7a4>)
 8004736:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004738:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800473a:	f000 fa19 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800473e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004740:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004742:	4a90      	ldr	r2, [pc, #576]	; (8004984 <OTM8009A_Init+0x7dc>)
 8004744:	21cc      	movs	r1, #204	; 0xcc
 8004746:	4638      	mov	r0, r7
 8004748:	f000 fa12 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800474c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800474e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004750:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004752:	4619      	mov	r1, r3
 8004754:	4a8c      	ldr	r2, [pc, #560]	; (8004988 <OTM8009A_Init+0x7e0>)
 8004756:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004758:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800475a:	f000 fa09 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800475e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004760:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004762:	4a8a      	ldr	r2, [pc, #552]	; (800498c <OTM8009A_Init+0x7e4>)
 8004764:	21c5      	movs	r1, #197	; 0xc5
 8004766:	4638      	mov	r0, r7
 8004768:	f000 fa02 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800476c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800476e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004770:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004772:	4619      	mov	r1, r3
 8004774:	4a86      	ldr	r2, [pc, #536]	; (8004990 <OTM8009A_Init+0x7e8>)
 8004776:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004778:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800477a:	f000 f9f9 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800477e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004780:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004782:	4a84      	ldr	r2, [pc, #528]	; (8004994 <OTM8009A_Init+0x7ec>)
 8004784:	21f5      	movs	r1, #245	; 0xf5
 8004786:	4638      	mov	r0, r7
 8004788:	f000 f9f2 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800478c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800478e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004790:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004792:	4619      	mov	r1, r3
 8004794:	4a80      	ldr	r2, [pc, #512]	; (8004998 <OTM8009A_Init+0x7f0>)
 8004796:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004798:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800479a:	f000 f9e9 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800479e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80047a0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80047a2:	4a7e      	ldr	r2, [pc, #504]	; (800499c <OTM8009A_Init+0x7f4>)
 80047a4:	21c6      	movs	r1, #198	; 0xc6
 80047a6:	4638      	mov	r0, r7
 80047a8:	f000 f9e2 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80047ae:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80047b0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047b2:	4619      	mov	r1, r3
 80047b4:	4a7a      	ldr	r2, [pc, #488]	; (80049a0 <OTM8009A_Init+0x7f8>)
 80047b6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80047b8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047ba:	f000 f9d9 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80047be:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047c0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80047c2:	4a78      	ldr	r2, [pc, #480]	; (80049a4 <OTM8009A_Init+0x7fc>)
 80047c4:	21ff      	movs	r1, #255	; 0xff
 80047c6:	4638      	mov	r0, r7
 80047c8:	f000 f9d2 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047cc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047ce:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047d0:	4a73      	ldr	r2, [pc, #460]	; (80049a0 <OTM8009A_Init+0x7f8>)
 80047d2:	4619      	mov	r1, r3
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80047d4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047d6:	4638      	mov	r0, r7
 80047d8:	f000 f9ca 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80047de:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047e0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047e2:	4619      	mov	r1, r3
 80047e4:	4a6e      	ldr	r2, [pc, #440]	; (80049a0 <OTM8009A_Init+0x7f8>)
 80047e6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047e8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047ea:	f000 f9c1 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80047ee:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047f0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80047f2:	4a6d      	ldr	r2, [pc, #436]	; (80049a8 <OTM8009A_Init+0x800>)
 80047f4:	21e1      	movs	r1, #225	; 0xe1
 80047f6:	4638      	mov	r0, r7
 80047f8:	f000 f9ba 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80047fe:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004800:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004802:	4619      	mov	r1, r3
 8004804:	4a66      	ldr	r2, [pc, #408]	; (80049a0 <OTM8009A_Init+0x7f8>)
 8004806:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004808:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800480a:	f000 f9b1 	bl	8004b70 <otm8009a_write_reg>
 800480e:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004810:	2310      	movs	r3, #16
 8004812:	4a66      	ldr	r2, [pc, #408]	; (80049ac <OTM8009A_Init+0x804>)
 8004814:	21e2      	movs	r1, #226	; 0xe2
 8004816:	4638      	mov	r0, r7
 8004818:	f000 f9aa 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800481c:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800481e:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004820:	2300      	movs	r3, #0
 8004822:	4a63      	ldr	r2, [pc, #396]	; (80049b0 <OTM8009A_Init+0x808>)
 8004824:	2111      	movs	r1, #17
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004826:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004828:	4638      	mov	r0, r7
 800482a:	f000 f9a1 	bl	8004b70 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 800482e:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004832:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8004834:	4798      	blx	r3
 8004836:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004838:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800483c:	4798      	blx	r3
 800483e:	1b40      	subs	r0, r0, r5
 8004840:	2877      	cmp	r0, #119	; 0x77
 8004842:	d9f9      	bls.n	8004838 <OTM8009A_Init+0x690>
  switch(ColorCoding)
 8004844:	f1b9 0f00 	cmp.w	r9, #0
 8004848:	d074      	beq.n	8004934 <OTM8009A_Init+0x78c>
 800484a:	f1b9 0f02 	cmp.w	r9, #2
 800484e:	d14f      	bne.n	80048f0 <OTM8009A_Init+0x748>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8004850:	2300      	movs	r3, #0
 8004852:	4a58      	ldr	r2, [pc, #352]	; (80049b4 <OTM8009A_Init+0x80c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004854:	213a      	movs	r1, #58	; 0x3a
 8004856:	4638      	mov	r0, r7
 8004858:	f000 f98a 	bl	8004b70 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800485c:	4d56      	ldr	r5, [pc, #344]	; (80049b8 <OTM8009A_Init+0x810>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800485e:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004862:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8004864:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004868:	d046      	beq.n	80048f8 <OTM8009A_Init+0x750>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800486a:	2300      	movs	r3, #0
 800486c:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800486e:	2300      	movs	r3, #0
 8004870:	4a52      	ldr	r2, [pc, #328]	; (80049bc <OTM8009A_Init+0x814>)
 8004872:	2151      	movs	r1, #81	; 0x51
 8004874:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004876:	469a      	mov	sl, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004878:	f000 f97a 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800487c:	4a50      	ldr	r2, [pc, #320]	; (80049c0 <OTM8009A_Init+0x818>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800487e:	eb04 0900 	add.w	r9, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004882:	4653      	mov	r3, sl
 8004884:	2153      	movs	r1, #83	; 0x53
 8004886:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004888:	f8c5 a008 	str.w	sl, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800488c:	f000 f970 	bl	8004b70 <otm8009a_write_reg>
 8004890:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8004892:	4653      	mov	r3, sl
 8004894:	4a4b      	ldr	r2, [pc, #300]	; (80049c4 <OTM8009A_Init+0x81c>)
 8004896:	2155      	movs	r1, #85	; 0x55
 8004898:	4638      	mov	r0, r7
 800489a:	f000 f969 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800489e:	444c      	add	r4, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80048a0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80048a2:	4653      	mov	r3, sl
 80048a4:	4a48      	ldr	r2, [pc, #288]	; (80049c8 <OTM8009A_Init+0x820>)
 80048a6:	215e      	movs	r1, #94	; 0x5e
 80048a8:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80048aa:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80048ac:	f000 f960 	bl	8004b70 <otm8009a_write_reg>
 80048b0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80048b2:	4653      	mov	r3, sl
 80048b4:	4a45      	ldr	r2, [pc, #276]	; (80049cc <OTM8009A_Init+0x824>)
 80048b6:	2129      	movs	r1, #41	; 0x29
 80048b8:	4638      	mov	r0, r7
 80048ba:	f000 f959 	bl	8004b70 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80048be:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80048c0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048c2:	4653      	mov	r3, sl
 80048c4:	4651      	mov	r1, sl
 80048c6:	4a36      	ldr	r2, [pc, #216]	; (80049a0 <OTM8009A_Init+0x7f8>)
 80048c8:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80048ca:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048cc:	f000 f950 	bl	8004b70 <otm8009a_write_reg>
 80048d0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80048d2:	4653      	mov	r3, sl
 80048d4:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80048d6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80048d8:	4a3d      	ldr	r2, [pc, #244]	; (80049d0 <OTM8009A_Init+0x828>)
 80048da:	212c      	movs	r1, #44	; 0x2c
 80048dc:	f000 f948 	bl	8004b70 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 80048e0:	42c4      	cmn	r4, r0
}
 80048e2:	bf14      	ite	ne
 80048e4:	f04f 30ff 	movne.w	r0, #4294967295
 80048e8:	4650      	moveq	r0, sl
 80048ea:	b002      	add	sp, #8
 80048ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80048f0:	f1ba 0f01 	cmp.w	sl, #1
 80048f4:	4d30      	ldr	r5, [pc, #192]	; (80049b8 <OTM8009A_Init+0x810>)
 80048f6:	d1b8      	bne.n	800486a <OTM8009A_Init+0x6c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80048f8:	2660      	movs	r6, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80048fa:	2300      	movs	r3, #0
 80048fc:	f10d 0207 	add.w	r2, sp, #7
 8004900:	2136      	movs	r1, #54	; 0x36
 8004902:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004904:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004908:	f000 f932 	bl	8004b70 <otm8009a_write_reg>
 800490c:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800490e:	2304      	movs	r3, #4
 8004910:	4a30      	ldr	r2, [pc, #192]	; (80049d4 <OTM8009A_Init+0x82c>)
 8004912:	212a      	movs	r1, #42	; 0x2a
 8004914:	4638      	mov	r0, r7
 8004916:	f000 f92b 	bl	8004b70 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800491a:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800491c:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800491e:	2304      	movs	r3, #4
 8004920:	4a2d      	ldr	r2, [pc, #180]	; (80049d8 <OTM8009A_Init+0x830>)
 8004922:	212b      	movs	r1, #43	; 0x2b
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004924:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004926:	4638      	mov	r0, r7
 8004928:	f000 f922 	bl	8004b70 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800492c:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004930:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8004932:	e79c      	b.n	800486e <OTM8009A_Init+0x6c6>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004934:	464b      	mov	r3, r9
 8004936:	4a29      	ldr	r2, [pc, #164]	; (80049dc <OTM8009A_Init+0x834>)
 8004938:	e78c      	b.n	8004854 <OTM8009A_Init+0x6ac>
 800493a:	bf00      	nop
 800493c:	08009cf2 	.word	0x08009cf2
 8004940:	08009be0 	.word	0x08009be0
 8004944:	08009cf3 	.word	0x08009cf3
 8004948:	08009bec 	.word	0x08009bec
 800494c:	08009cf4 	.word	0x08009cf4
 8004950:	08009bfc 	.word	0x08009bfc
 8004954:	08009cf6 	.word	0x08009cf6
 8004958:	08009c0c 	.word	0x08009c0c
 800495c:	08009cf7 	.word	0x08009cf7
 8004960:	08009c18 	.word	0x08009c18
 8004964:	08009cd6 	.word	0x08009cd6
 8004968:	08009c24 	.word	0x08009c24
 800496c:	08009cf5 	.word	0x08009cf5
 8004970:	08009c34 	.word	0x08009c34
 8004974:	08009cf1 	.word	0x08009cf1
 8004978:	08009c44 	.word	0x08009c44
 800497c:	08009c54 	.word	0x08009c54
 8004980:	08009c60 	.word	0x08009c60
 8004984:	08009c70 	.word	0x08009c70
 8004988:	08009ce1 	.word	0x08009ce1
 800498c:	08009d02 	.word	0x08009d02
 8004990:	08009d03 	.word	0x08009d03
 8004994:	08009d04 	.word	0x08009d04
 8004998:	08009d05 	.word	0x08009d05
 800499c:	08009d06 	.word	0x08009d06
 80049a0:	08009cd5 	.word	0x08009cd5
 80049a4:	08009c80 	.word	0x08009c80
 80049a8:	08009c84 	.word	0x08009c84
 80049ac:	08009c94 	.word	0x08009c94
 80049b0:	08009cf8 	.word	0x08009cf8
 80049b4:	08009cf9 	.word	0x08009cf9
 80049b8:	24009118 	.word	0x24009118
 80049bc:	08009cfb 	.word	0x08009cfb
 80049c0:	08009cfc 	.word	0x08009cfc
 80049c4:	08009cfd 	.word	0x08009cfd
 80049c8:	08009cfe 	.word	0x08009cfe
 80049cc:	08009cff 	.word	0x08009cff
 80049d0:	08009d00 	.word	0x08009d00
 80049d4:	08009b9c 	.word	0x08009b9c
 80049d8:	08009ba0 	.word	0x08009ba0
 80049dc:	08009cfa 	.word	0x08009cfa

080049e0 <OTM8009A_SetBrightness>:
{
 80049e0:	b570      	push	{r4, r5, r6, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80049e2:	ebc1 2401 	rsb	r4, r1, r1, lsl #8
 80049e6:	4e0b      	ldr	r6, [pc, #44]	; (8004a14 <OTM8009A_SetBrightness+0x34>)
{
 80049e8:	b082      	sub	sp, #8
 80049ea:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80049ec:	fba6 6404 	umull	r6, r4, r6, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80049f0:	2300      	movs	r3, #0
 80049f2:	f10d 0207 	add.w	r2, sp, #7
 80049f6:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80049f8:	0964      	lsrs	r4, r4, #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80049fa:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80049fc:	f88d 4007 	strb.w	r4, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8004a00:	f000 f8b6 	bl	8004b70 <otm8009a_write_reg>
 8004a04:	b918      	cbnz	r0, 8004a0e <OTM8009A_SetBrightness+0x2e>
    OTM8009ACtx.Brightness = Brightness;
 8004a06:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <OTM8009A_SetBrightness+0x38>)
 8004a08:	609d      	str	r5, [r3, #8]
}
 8004a0a:	b002      	add	sp, #8
 8004a0c:	bd70      	pop	{r4, r5, r6, pc}
    ret = OTM8009A_ERROR;
 8004a0e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8004a12:	e7fa      	b.n	8004a0a <OTM8009A_SetBrightness+0x2a>
 8004a14:	51eb851f 	.word	0x51eb851f
 8004a18:	24009118 	.word	0x24009118

08004a1c <OTM8009A_DisplayOn>:
{
 8004a1c:	b500      	push	{lr}
 8004a1e:	b083      	sub	sp, #12
  uint8_t display = 0;
 8004a20:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8004a22:	2129      	movs	r1, #41	; 0x29
 8004a24:	3010      	adds	r0, #16
 8004a26:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8004a2a:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8004a2e:	f000 f89f 	bl	8004b70 <otm8009a_write_reg>
 8004a32:	3800      	subs	r0, #0
 8004a34:	bf18      	it	ne
 8004a36:	2001      	movne	r0, #1
}
 8004a38:	4240      	negs	r0, r0
 8004a3a:	b003      	add	sp, #12
 8004a3c:	f85d fb04 	ldr.w	pc, [sp], #4

08004a40 <OTM8009A_DisplayOff>:
{
 8004a40:	b500      	push	{lr}
 8004a42:	b083      	sub	sp, #12
  uint8_t display = 0;
 8004a44:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8004a46:	2128      	movs	r1, #40	; 0x28
 8004a48:	3010      	adds	r0, #16
 8004a4a:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8004a4e:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8004a52:	f000 f88d 	bl	8004b70 <otm8009a_write_reg>
 8004a56:	3800      	subs	r0, #0
 8004a58:	bf18      	it	ne
 8004a5a:	2001      	movne	r0, #1
}
 8004a5c:	4240      	negs	r0, r0
 8004a5e:	b003      	add	sp, #12
 8004a60:	f85d fb04 	ldr.w	pc, [sp], #4

08004a64 <OTM8009A_SetOrientation>:
{
 8004a64:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004a66:	2360      	movs	r3, #96	; 0x60
{
 8004a68:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8004a6a:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8004a6c:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8004a6e:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8004a72:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8004a76:	d83e      	bhi.n	8004af6 <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004a78:	d020      	beq.n	8004abc <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8004a7a:	f100 0510 	add.w	r5, r0, #16
 8004a7e:	4633      	mov	r3, r6
 8004a80:	f10d 0207 	add.w	r2, sp, #7
 8004a84:	2136      	movs	r1, #54	; 0x36
 8004a86:	4628      	mov	r0, r5
 8004a88:	f000 f872 	bl	8004b70 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004a8c:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8004a8e:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004a90:	4a1a      	ldr	r2, [pc, #104]	; (8004afc <OTM8009A_SetOrientation+0x98>)
 8004a92:	212a      	movs	r1, #42	; 0x2a
 8004a94:	4628      	mov	r0, r5
 8004a96:	f000 f86b 	bl	8004b70 <otm8009a_write_reg>
 8004a9a:	4607      	mov	r7, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004a9c:	2304      	movs	r3, #4
 8004a9e:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004aa0:	443c      	add	r4, r7
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004aa2:	4a17      	ldr	r2, [pc, #92]	; (8004b00 <OTM8009A_SetOrientation+0x9c>)
 8004aa4:	212b      	movs	r1, #43	; 0x2b
 8004aa6:	f000 f863 	bl	8004b70 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8004aaa:	4b16      	ldr	r3, [pc, #88]	; (8004b04 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004aac:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8004aae:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 8004ab0:	3800      	subs	r0, #0
 8004ab2:	bf18      	it	ne
 8004ab4:	2001      	movne	r0, #1
 8004ab6:	4240      	negs	r0, r0
}
 8004ab8:	b003      	add	sp, #12
 8004aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004abc:	f100 0510 	add.w	r5, r0, #16
 8004ac0:	4633      	mov	r3, r6
 8004ac2:	460f      	mov	r7, r1
 8004ac4:	f10d 0206 	add.w	r2, sp, #6
 8004ac8:	2136      	movs	r1, #54	; 0x36
 8004aca:	4628      	mov	r0, r5
 8004acc:	f000 f850 	bl	8004b70 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004ad0:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8004ad2:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004ad4:	4a09      	ldr	r2, [pc, #36]	; (8004afc <OTM8009A_SetOrientation+0x98>)
 8004ad6:	212a      	movs	r1, #42	; 0x2a
 8004ad8:	4628      	mov	r0, r5
 8004ada:	f000 f849 	bl	8004b70 <otm8009a_write_reg>
 8004ade:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	4a06      	ldr	r2, [pc, #24]	; (8004b00 <OTM8009A_SetOrientation+0x9c>)
 8004ae6:	212b      	movs	r1, #43	; 0x2b
 8004ae8:	f000 f842 	bl	8004b70 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8004aec:	4434      	add	r4, r6
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8004aee:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8004af0:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8004af2:	601f      	str	r7, [r3, #0]
 8004af4:	e7dc      	b.n	8004ab0 <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 8004af6:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004afa:	e7dd      	b.n	8004ab8 <OTM8009A_SetOrientation+0x54>
 8004afc:	08009b9c 	.word	0x08009b9c
 8004b00:	08009ba0 	.word	0x08009ba0
 8004b04:	24009118 	.word	0x24009118

08004b08 <OTM8009A_ReadID>:
{ 
 8004b08:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8004b0a:	3010      	adds	r0, #16
 8004b0c:	21da      	movs	r1, #218	; 0xda
{ 
 8004b0e:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8004b10:	2300      	movs	r3, #0
 8004b12:	f000 f825 	bl	8004b60 <otm8009a_read_reg>
 8004b16:	3800      	subs	r0, #0
 8004b18:	bf18      	it	ne
 8004b1a:	2001      	movne	r0, #1
}  
 8004b1c:	4240      	negs	r0, r0
 8004b1e:	bd08      	pop	{r3, pc}

08004b20 <OTM8009A_DrawVLine>:
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop

08004b28 <OTM8009A_GetPixel>:
 8004b28:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop

08004b30 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8004b30:	b178      	cbz	r0, 8004b52 <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004b32:	684a      	ldr	r2, [r1, #4]
 8004b34:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 8004b36:	2000      	movs	r0, #0
{
 8004b38:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 8004b3a:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8004b3e:	4906      	ldr	r1, [pc, #24]	; (8004b58 <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004b40:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8004b42:	4a06      	ldr	r2, [pc, #24]	; (8004b5c <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 8004b44:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8004b48:	e9c3 1305 	strd	r1, r3, [r3, #20]
}
 8004b4c:	bc30      	pop	{r4, r5}
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8004b4e:	611a      	str	r2, [r3, #16]
}
 8004b50:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8004b52:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004b56:	4770      	bx	lr
 8004b58:	08004189 	.word	0x08004189
 8004b5c:	08004199 	.word	0x08004199

08004b60 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8004b60:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004b62:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004b66:	46a4      	mov	ip, r4
}
 8004b68:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004b6c:	4760      	bx	ip
 8004b6e:	bf00      	nop

08004b70 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8004b70:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8004b72:	6804      	ldr	r4, [r0, #0]
 8004b74:	6880      	ldr	r0, [r0, #8]
 8004b76:	46a4      	mov	ip, r4
}
 8004b78:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8004b7c:	4760      	bx	ip
 8004b7e:	bf00      	nop

08004b80 <BSP_GetTick>:
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
  return (int32_t)HAL_GetTick();
 8004b80:	f000 be8e 	b.w	80058a0 <HAL_GetTick>

08004b84 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8004b84:	b910      	cbnz	r0, 8004b8c <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8004b86:	4b03      	ldr	r3, [pc, #12]	; (8004b94 <BSP_LCD_SetActiveLayer+0x10>)
 8004b88:	6099      	str	r1, [r3, #8]
 8004b8a:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8004b8c:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	24019504 	.word	0x24019504

08004b98 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8004b98:	b918      	cbnz	r0, 8004ba2 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8004b9a:	4b03      	ldr	r3, [pc, #12]	; (8004ba8 <BSP_LCD_GetPixelFormat+0x10>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	600b      	str	r3, [r1, #0]
 8004ba0:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8004ba2:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8004ba6:	4770      	bx	lr
 8004ba8:	24019504 	.word	0x24019504

08004bac <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8004bac:	b948      	cbnz	r0, 8004bc2 <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <BSP_LCD_GetXSize+0x1c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb4:	b11b      	cbz	r3, 8004bbe <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <BSP_LCD_GetXSize+0x20>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	600b      	str	r3, [r1, #0]
 8004bbc:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 8004bbe:	4618      	mov	r0, r3
  }

  return ret;
}
 8004bc0:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8004bc2:	f06f 0001 	mvn.w	r0, #1
 8004bc6:	4770      	bx	lr
 8004bc8:	24009128 	.word	0x24009128
 8004bcc:	24019504 	.word	0x24019504

08004bd0 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8004bd0:	b948      	cbnz	r0, 8004be6 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <BSP_LCD_GetYSize+0x1c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd8:	b11b      	cbz	r3, 8004be2 <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8004bda:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <BSP_LCD_GetYSize+0x20>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	600b      	str	r3, [r1, #0]
 8004be0:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 8004be2:	4618      	mov	r0, r3
  }

  return ret;
}
 8004be4:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8004be6:	f06f 0001 	mvn.w	r0, #1
 8004bea:	4770      	bx	lr
 8004bec:	24009128 	.word	0x24009128
 8004bf0:	24019504 	.word	0x24019504

08004bf4 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8004bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf8:	e9dd b409 	ldrd	fp, r4, [sp, #36]	; 0x24
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8004bfc:	b39c      	cbz	r4, 8004c66 <BSP_LCD_FillRGBRect+0x72>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004bfe:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004c02:	4d1a      	ldr	r5, [pc, #104]	; (8004c6c <BSP_LCD_FillRGBRect+0x78>)
 8004c04:	eb04 0802 	add.w	r8, r4, r2
 8004c08:	eb0b 0e01 	add.w	lr, fp, r1
 8004c0c:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8004c10:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8004c70 <BSP_LCD_FillRGBRect+0x7c>
 8004c14:	2734      	movs	r7, #52	; 0x34
    for(j = 0; j < Width; j++)
 8004c16:	f1bb 0f00 	cmp.w	fp, #0
 8004c1a:	d021      	beq.n	8004c60 <BSP_LCD_FillRGBRect+0x6c>
 8004c1c:	460c      	mov	r4, r1
 8004c1e:	e00a      	b.n	8004c36 <BSP_LCD_FillRGBRect+0x42>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004c20:	682e      	ldr	r6, [r5, #0]
 8004c22:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8004c24:	fb06 4602 	mla	r6, r6, r2, r4
 8004c28:	3401      	adds	r4, #1
 8004c2a:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    for(j = 0; j < Width; j++)
 8004c2e:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 8004c30:	6928      	ldr	r0, [r5, #16]
 8004c32:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8004c34:	d014      	beq.n	8004c60 <BSP_LCD_FillRGBRect+0x6c>
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004c36:	68a8      	ldr	r0, [r5, #8]
 8004c38:	f8d3 9000 	ldr.w	r9, [r3]
 8004c3c:	fb07 c000 	mla	r0, r7, r0, ip
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004c40:	fa1f fa89 	uxth.w	sl, r9
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004c44:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8004c46:	2e00      	cmp	r6, #0
 8004c48:	d0ea      	beq.n	8004c20 <BSP_LCD_FillRGBRect+0x2c>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004c4a:	682e      	ldr	r6, [r5, #0]
 8004c4c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8004c4e:	fb06 4602 	mla	r6, r6, r2, r4
 8004c52:	3401      	adds	r4, #1
 8004c54:	f820 a016 	strh.w	sl, [r0, r6, lsl #1]
    for(j = 0; j < Width; j++)
 8004c58:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 8004c5a:	6928      	ldr	r0, [r5, #16]
 8004c5c:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8004c5e:	d1ea      	bne.n	8004c36 <BSP_LCD_FillRGBRect+0x42>
  for(i = 0; i < Height; i++)
 8004c60:	3201      	adds	r2, #1
 8004c62:	4542      	cmp	r2, r8
 8004c64:	d1d7      	bne.n	8004c16 <BSP_LCD_FillRGBRect+0x22>
}
 8004c66:	2000      	movs	r0, #0
 8004c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c6c:	24019504 	.word	0x24019504
 8004c70:	2401945c 	.word	0x2401945c

08004c74 <BSP_LCD_ReadPixel>:
{
 8004c74:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004c76:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004c7a:	4e10      	ldr	r6, [pc, #64]	; (8004cbc <BSP_LCD_ReadPixel+0x48>)
 8004c7c:	4f10      	ldr	r7, [pc, #64]	; (8004cc0 <BSP_LCD_ReadPixel+0x4c>)
 8004c7e:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8004c82:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8004c86:	0080      	lsls	r0, r0, #2
 8004c88:	68ac      	ldr	r4, [r5, #8]
 8004c8a:	fb0c 7404 	mla	r4, ip, r4, r7
 8004c8e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004c90:	b94d      	cbnz	r5, 8004ca6 <BSP_LCD_ReadPixel+0x32>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8004c92:	5830      	ldr	r0, [r6, r0]
 8004c94:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8004c96:	fb00 1202 	mla	r2, r0, r2, r1
}
 8004c9a:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8004c9c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 8004ca0:	bcf0      	pop	{r4, r5, r6, r7}
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8004ca6:	5835      	ldr	r5, [r6, r0]
 8004ca8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004caa:	fb05 1202 	mla	r2, r5, r2, r1
 8004cae:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 8004cb2:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8004cb4:	b292      	uxth	r2, r2
}
 8004cb6:	bcf0      	pop	{r4, r5, r6, r7}
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	4770      	bx	lr
 8004cbc:	24019504 	.word	0x24019504
 8004cc0:	2401945c 	.word	0x2401945c

08004cc4 <BSP_LCD_WritePixel>:
{
 8004cc4:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004cc6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004cca:	4e0f      	ldr	r6, [pc, #60]	; (8004d08 <BSP_LCD_WritePixel+0x44>)
 8004ccc:	4f0f      	ldr	r7, [pc, #60]	; (8004d0c <BSP_LCD_WritePixel+0x48>)
 8004cce:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8004cd2:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8004cd6:	0080      	lsls	r0, r0, #2
 8004cd8:	68ac      	ldr	r4, [r5, #8]
 8004cda:	fb0c 7404 	mla	r4, ip, r4, r7
 8004cde:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004ce0:	b945      	cbnz	r5, 8004cf4 <BSP_LCD_WritePixel+0x30>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004ce2:	5830      	ldr	r0, [r6, r0]
 8004ce4:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8004ce6:	fb00 1202 	mla	r2, r0, r2, r1
  }

  return BSP_ERROR_NONE;
}
 8004cea:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004cec:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 8004cf0:	bcf0      	pop	{r4, r5, r6, r7}
 8004cf2:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004cf4:	5835      	ldr	r5, [r6, r0]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004cfa:	fb05 1202 	mla	r2, r5, r2, r1
}
 8004cfe:	bcf0      	pop	{r4, r5, r6, r7}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8004d00:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 8004d04:	2000      	movs	r0, #0
 8004d06:	4770      	bx	lr
 8004d08:	24019504 	.word	0x24019504
 8004d0c:	2401945c 	.word	0x2401945c

08004d10 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8004d10:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8004d12:	2406      	movs	r4, #6
{
 8004d14:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8004d16:	9101      	str	r1, [sp, #4]
 8004d18:	4601      	mov	r1, r0
 8004d1a:	9202      	str	r2, [sp, #8]
 8004d1c:	9400      	str	r4, [sp, #0]
 8004d1e:	4805      	ldr	r0, [pc, #20]	; (8004d34 <DSI_IO_Read+0x24>)
 8004d20:	f002 f908 	bl	8006f34 <HAL_DSI_Read>
 8004d24:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 8004d26:	bf14      	ite	ne
 8004d28:	f06f 0007 	mvnne.w	r0, #7
 8004d2c:	2000      	moveq	r0, #0
 8004d2e:	b004      	add	sp, #16
 8004d30:	bd10      	pop	{r4, pc}
 8004d32:	bf00      	nop
 8004d34:	24019520 	.word	0x24019520

08004d38 <BSP_LCD_DrawBitmap>:
{
 8004d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004d3c:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8004d40:	4e4f      	ldr	r6, [pc, #316]	; (8004e80 <BSP_LCD_DrawBitmap+0x148>)
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004d42:	7d1c      	ldrb	r4, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004d44:	f04f 0934 	mov.w	r9, #52	; 0x34
 8004d48:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 8004d4c:	f856 802c 	ldr.w	r8, [r6, ip, lsl #2]
 8004d50:	f8df e138 	ldr.w	lr, [pc, #312]	; 8004e8c <BSP_LCD_DrawBitmap+0x154>
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004d54:	0424      	lsls	r4, r4, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004d56:	fb08 1202 	mla	r2, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004d5a:	f893 c013 	ldrb.w	ip, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004d5e:	68b9      	ldr	r1, [r7, #8]
{
 8004d60:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004d62:	7b1d      	ldrb	r5, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004d64:	eb04 240c 	add.w	r4, r4, ip, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004d68:	fb09 e101 	mla	r1, r9, r1, lr
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004d6c:	f893 800b 	ldrb.w	r8, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8004d70:	f893 c01d 	ldrb.w	ip, [r3, #29]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004d74:	042d      	lsls	r5, r5, #16
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004d76:	f893 a018 	ldrb.w	sl, [r3, #24]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8004d7a:	f893 901c 	ldrb.w	r9, [r3, #28]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004d7e:	eb05 2508 	add.w	r5, r5, r8, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004d82:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004d84:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004d88:	f8d7 8010 	ldr.w	r8, [r7, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8004d8c:	eb09 290c 	add.w	r9, r9, ip, lsl #8
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004d90:	7c9f      	ldrb	r7, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004d92:	f893 e017 	ldrb.w	lr, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004d96:	fb08 1802 	mla	r8, r8, r2, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004d9a:	f893 c00a 	ldrb.w	ip, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004d9e:	443c      	add	r4, r7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004da0:	eb0a 2a0e 	add.w	sl, sl, lr, lsl #8
 8004da4:	7d9f      	ldrb	r7, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004da6:	4465      	add	r5, ip
 8004da8:	7b59      	ldrb	r1, [r3, #13]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004daa:	44ba      	add	sl, r7
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004dac:	7d5f      	ldrb	r7, [r3, #21]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004dae:	eb05 6101 	add.w	r1, r5, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 8004db2:	f1a9 0520 	sub.w	r5, r9, #32
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004db6:	7e5a      	ldrb	r2, [r3, #25]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004db8:	eb04 6407 	add.w	r4, r4, r7, lsl #24
  if ((bit_pixel/8U) == 4U)
 8004dbc:	2d07      	cmp	r5, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004dbe:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004dc2:	9403      	str	r4, [sp, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8004dc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 8004dc8:	d957      	bls.n	8004e7a <BSP_LCD_DrawBitmap+0x142>
  else if ((bit_pixel/8U) == 2U)
 8004dca:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 8004dce:	2c08      	cmp	r4, #8
 8004dd0:	bf34      	ite	cc
 8004dd2:	f04f 0b02 	movcc.w	fp, #2
 8004dd6:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8004dda:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8004dde:	9c03      	ldr	r4, [sp, #12]
 8004de0:	f10a 35ff 	add.w	r5, sl, #4294967295
 8004de4:	fb04 f909 	mul.w	r9, r4, r9
 8004de8:	fb09 1505 	mla	r5, r9, r5, r1
 8004dec:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 8004dee:	f1ba 0f00 	cmp.w	sl, #0
 8004df2:	d03e      	beq.n	8004e72 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004df4:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 8004df6:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 8004dfa:	2700      	movs	r7, #0
 8004dfc:	4c21      	ldr	r4, [pc, #132]	; (8004e84 <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004dfe:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8004e02:	e006      	b.n	8004e12 <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8004e04:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 8004e06:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8004e08:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 8004e0a:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8004e0c:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 8004e10:	d02f      	beq.n	8004e72 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004e12:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 8004e14:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8004e16:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004e1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8004e1e:	2b02      	cmp	r3, #2
  hlcd_dma2d.Instance = DMA2D;
 8004e20:	4919      	ldr	r1, [pc, #100]	; (8004e88 <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8004e22:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  for(index=0; index < height; index++)
 8004e26:	f107 0701 	add.w	r7, r7, #1
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8004e2a:	bf18      	it	ne
 8004e2c:	4613      	movne	r3, r2
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004e2e:	64e2      	str	r2, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8004e30:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004e32:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8004e36:	e9c4 1000 	strd	r1, r0, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004e3a:	4812      	ldr	r0, [pc, #72]	; (8004e84 <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.Init.OutputOffset = 0;
 8004e3c:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004e40:	f001 fbea 	bl	8006618 <HAL_DMA2D_Init>
 8004e44:	2800      	cmp	r0, #0
 8004e46:	d1dd      	bne.n	8004e04 <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8004e48:	2101      	movs	r1, #1
 8004e4a:	480e      	ldr	r0, [pc, #56]	; (8004e84 <BSP_LCD_DrawBitmap+0x14c>)
 8004e4c:	f001 fcc8 	bl	80067e0 <HAL_DMA2D_ConfigLayer>
 8004e50:	2800      	cmp	r0, #0
 8004e52:	d1d7      	bne.n	8004e04 <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8004e54:	2001      	movs	r0, #1
 8004e56:	9b03      	ldr	r3, [sp, #12]
 8004e58:	4642      	mov	r2, r8
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	9000      	str	r0, [sp, #0]
 8004e5e:	4809      	ldr	r0, [pc, #36]	; (8004e84 <BSP_LCD_DrawBitmap+0x14c>)
 8004e60:	f001 fc1c 	bl	800669c <HAL_DMA2D_Start>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	d1cd      	bne.n	8004e04 <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8004e68:	2132      	movs	r1, #50	; 0x32
 8004e6a:	4806      	ldr	r0, [pc, #24]	; (8004e84 <BSP_LCD_DrawBitmap+0x14c>)
 8004e6c:	f001 fc32 	bl	80066d4 <HAL_DMA2D_PollForTransfer>
 8004e70:	e7c8      	b.n	8004e04 <BSP_LCD_DrawBitmap+0xcc>
}
 8004e72:	2000      	movs	r0, #0
 8004e74:	b005      	add	sp, #20
 8004e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8004e7a:	f04f 0b00 	mov.w	fp, #0
 8004e7e:	e7ac      	b.n	8004dda <BSP_LCD_DrawBitmap+0xa2>
 8004e80:	24019504 	.word	0x24019504
 8004e84:	2401953c 	.word	0x2401953c
 8004e88:	52001000 	.word	0x52001000
 8004e8c:	2401945c 	.word	0x2401945c

08004e90 <LL_FillBuffer>:
{
 8004e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004e94:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004e98:	4c28      	ldr	r4, [pc, #160]	; (8004f3c <LL_FillBuffer+0xac>)
{
 8004e9a:	4617      	mov	r7, r2
 8004e9c:	b082      	sub	sp, #8
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004e9e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8004ea2:	4698      	mov	r8, r3
 8004ea4:	460e      	mov	r6, r1
 8004ea6:	9b08      	ldr	r3, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004ea8:	68c2      	ldr	r2, [r0, #12]
{
 8004eaa:	9d09      	ldr	r5, [sp, #36]	; 0x24
  switch(Lcd_Ctx[Instance].PixelFormat)
 8004eac:	2a02      	cmp	r2, #2
 8004eae:	d00f      	beq.n	8004ed0 <LL_FillBuffer+0x40>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8004eb0:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8004eb2:	4c23      	ldr	r4, [pc, #140]	; (8004f40 <LL_FillBuffer+0xb0>)
 8004eb4:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 8004eb8:	4922      	ldr	r1, [pc, #136]	; (8004f44 <LL_FillBuffer+0xb4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004eba:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8004ebc:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8004ebe:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 8004ec0:	e9c4 1c00 	strd	r1, ip, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004ec4:	f001 fba8 	bl	8006618 <HAL_DMA2D_Init>
 8004ec8:	b308      	cbz	r0, 8004f0e <LL_FillBuffer+0x7e>
}
 8004eca:	b002      	add	sp, #8
 8004ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8004ed0:	f3c5 1045 	ubfx	r0, r5, #5, #6
 8004ed4:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 8004ed8:	f005 041f 	and.w	r4, r5, #31
 8004edc:	eb00 15c0 	add.w	r5, r0, r0, lsl #7
 8004ee0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8004ee4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8004ee8:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 8004eec:	3521      	adds	r5, #33	; 0x21
 8004eee:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 8004ef2:	3117      	adds	r1, #23
 8004ef4:	09ad      	lsrs	r5, r5, #6
 8004ef6:	0989      	lsrs	r1, r1, #6
 8004ef8:	022d      	lsls	r5, r5, #8
 8004efa:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8004efe:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8004f02:	3017      	adds	r0, #23
 8004f04:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 8004f08:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 8004f0c:	e7d1      	b.n	8004eb2 <LL_FillBuffer+0x22>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8004f0e:	2101      	movs	r1, #1
 8004f10:	4620      	mov	r0, r4
 8004f12:	f001 fc65 	bl	80067e0 <HAL_DMA2D_ConfigLayer>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	d1d7      	bne.n	8004eca <LL_FillBuffer+0x3a>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	4632      	mov	r2, r6
 8004f1e:	4629      	mov	r1, r5
 8004f20:	4620      	mov	r0, r4
 8004f22:	f8cd 8000 	str.w	r8, [sp]
 8004f26:	f001 fbb9 	bl	800669c <HAL_DMA2D_Start>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d1cd      	bne.n	8004eca <LL_FillBuffer+0x3a>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8004f2e:	4620      	mov	r0, r4
 8004f30:	2119      	movs	r1, #25
}
 8004f32:	b002      	add	sp, #8
 8004f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8004f38:	f001 bbcc 	b.w	80066d4 <HAL_DMA2D_PollForTransfer>
 8004f3c:	24019504 	.word	0x24019504
 8004f40:	2401953c 	.word	0x2401953c
 8004f44:	52001000 	.word	0x52001000

08004f48 <BSP_LCD_DrawHLine>:
{
 8004f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004f4c:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8004f50:	4f12      	ldr	r7, [pc, #72]	; (8004f9c <BSP_LCD_DrawHLine+0x54>)
{
 8004f52:	460c      	mov	r4, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004f54:	f8df e048 	ldr.w	lr, [pc, #72]	; 8004fa0 <BSP_LCD_DrawHLine+0x58>
 8004f58:	eb07 018c 	add.w	r1, r7, ip, lsl #2
 8004f5c:	f04f 0834 	mov.w	r8, #52	; 0x34
 8004f60:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8004f64:	eb04 0c03 	add.w	ip, r4, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004f68:	688d      	ldr	r5, [r1, #8]
{
 8004f6a:	b082      	sub	sp, #8
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004f6c:	690e      	ldr	r6, [r1, #16]
 8004f6e:	fb02 4207 	mla	r2, r2, r7, r4
 8004f72:	fb08 e505 	mla	r5, r8, r5, lr
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8004f76:	4567      	cmp	r7, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004f78:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8004f7a:	bf38      	it	cc
 8004f7c:	1b3b      	subcc	r3, r7, r4
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8004f7e:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004f80:	fb06 1102 	mla	r1, r6, r2, r1
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8004f84:	9a08      	ldr	r2, [sp, #32]
 8004f86:	9400      	str	r4, [sp, #0]
 8004f88:	9201      	str	r2, [sp, #4]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	f7ff ff7f 	bl	8004e90 <LL_FillBuffer>
}
 8004f92:	4620      	mov	r0, r4
 8004f94:	b002      	add	sp, #8
 8004f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f9a:	bf00      	nop
 8004f9c:	24019504 	.word	0x24019504
 8004fa0:	2401945c 	.word	0x2401945c

08004fa4 <BSP_LCD_DrawVLine>:
{
 8004fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004fa8:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8004fac:	4c11      	ldr	r4, [pc, #68]	; (8004ff4 <BSP_LCD_DrawVLine+0x50>)
 8004fae:	4d12      	ldr	r5, [pc, #72]	; (8004ff8 <BSP_LCD_DrawVLine+0x54>)
 8004fb0:	f04f 0834 	mov.w	r8, #52	; 0x34
 8004fb4:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8004fb8:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8004fbc:	eb02 0c03 	add.w	ip, r2, r3
{
 8004fc0:	b082      	sub	sp, #8
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004fc2:	68be      	ldr	r6, [r7, #8]
 8004fc4:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8004fc8:	3c01      	subs	r4, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004fca:	fb08 5606 	mla	r6, r8, r6, r5
 8004fce:	693d      	ldr	r5, [r7, #16]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8004fd0:	687f      	ldr	r7, [r7, #4]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004fd2:	6df6      	ldr	r6, [r6, #92]	; 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8004fd4:	45bc      	cmp	ip, r7
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004fd6:	fb05 6101 	mla	r1, r5, r1, r6
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8004fda:	bf88      	it	hi
 8004fdc:	1abb      	subhi	r3, r7, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8004fde:	9a08      	ldr	r2, [sp, #32]
 8004fe0:	e9cd 4200 	strd	r4, r2, [sp]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f7ff ff53 	bl	8004e90 <LL_FillBuffer>
}
 8004fea:	2000      	movs	r0, #0
 8004fec:	b002      	add	sp, #8
 8004fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff2:	bf00      	nop
 8004ff4:	24019504 	.word	0x24019504
 8004ff8:	2401945c 	.word	0x2401945c

08004ffc <BSP_LCD_FillRect>:
{
 8004ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8004ffe:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 8005002:	4f0e      	ldr	r7, [pc, #56]	; (800503c <BSP_LCD_FillRect+0x40>)
 8005004:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8005008:	4d0d      	ldr	r5, [pc, #52]	; (8005040 <BSP_LCD_FillRect+0x44>)
 800500a:	eb07 0684 	add.w	r6, r7, r4, lsl #2
 800500e:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
{
 8005012:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005014:	68b7      	ldr	r7, [r6, #8]
 8005016:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800501a:	1ae4      	subs	r4, r4, r3
 800501c:	461a      	mov	r2, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800501e:	fb0e 5507 	mla	r5, lr, r7, r5
 8005022:	6937      	ldr	r7, [r6, #16]
{
 8005024:	9e09      	ldr	r6, [sp, #36]	; 0x24
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005026:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8005028:	9400      	str	r4, [sp, #0]
 800502a:	fb07 3101 	mla	r1, r7, r1, r3
 800502e:	9b08      	ldr	r3, [sp, #32]
 8005030:	9601      	str	r6, [sp, #4]
 8005032:	f7ff ff2d 	bl	8004e90 <LL_FillBuffer>
}
 8005036:	2000      	movs	r0, #0
 8005038:	b003      	add	sp, #12
 800503a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503c:	24019504 	.word	0x24019504
 8005040:	2401945c 	.word	0x2401945c

08005044 <LTDC_MspInit.part.0>:
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005044:	4b0d      	ldr	r3, [pc, #52]	; (800507c <LTDC_MspInit.part.0+0x38>)
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
 8005046:	b082      	sub	sp, #8
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005048:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800504c:	f042 0208 	orr.w	r2, r2, #8
 8005050:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005054:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005058:	f002 0208 	and.w	r2, r2, #8
 800505c:	9201      	str	r2, [sp, #4]
 800505e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_LTDC_FORCE_RESET();
 8005060:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005064:	f042 0208 	orr.w	r2, r2, #8
 8005068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 800506c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005070:	f022 0208 	bic.w	r2, r2, #8
 8005074:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8005078:	b002      	add	sp, #8
 800507a:	4770      	bx	lr
 800507c:	58024400 	.word	0x58024400

08005080 <DMA2D_MspInit.part.0>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <DMA2D_MspInit.part.0+0x30>)
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
 8005082:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005084:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005088:	f042 0210 	orr.w	r2, r2, #16
 800508c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005090:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005094:	f002 0210 	and.w	r2, r2, #16
 8005098:	9201      	str	r2, [sp, #4]
 800509a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800509c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800509e:	f042 0210 	orr.w	r2, r2, #16
 80050a2:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80050a4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80050a6:	f022 0210 	bic.w	r2, r2, #16
 80050aa:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80050ac:	b002      	add	sp, #8
 80050ae:	4770      	bx	lr
 80050b0:	58024400 	.word	0x58024400

080050b4 <DSI_MspInit.part.0>:
    __HAL_RCC_DSI_CLK_ENABLE();
 80050b4:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <DSI_MspInit.part.0+0x38>)
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
 80050b6:	b082      	sub	sp, #8
    __HAL_RCC_DSI_CLK_ENABLE();
 80050b8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80050bc:	f042 0210 	orr.w	r2, r2, #16
 80050c0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80050c4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80050c8:	f002 0210 	and.w	r2, r2, #16
 80050cc:	9201      	str	r2, [sp, #4]
 80050ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DSI_FORCE_RESET();
 80050d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80050d4:	f042 0210 	orr.w	r2, r2, #16
 80050d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 80050dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80050e0:	f022 0210 	bic.w	r2, r2, #16
 80050e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80050e8:	b002      	add	sp, #8
 80050ea:	4770      	bx	lr
 80050ec:	58024400 	.word	0x58024400

080050f0 <DSI_IO_Write>:
  if(Size <= 1U)
 80050f0:	2b01      	cmp	r3, #1
{
 80050f2:	b530      	push	{r4, r5, lr}
 80050f4:	460d      	mov	r5, r1
 80050f6:	b083      	sub	sp, #12
 80050f8:	4601      	mov	r1, r0
  if(Size <= 1U)
 80050fa:	d909      	bls.n	8005110 <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 80050fc:	480a      	ldr	r0, [pc, #40]	; (8005128 <DSI_IO_Write+0x38>)
 80050fe:	e9cd 5200 	strd	r5, r2, [sp]
 8005102:	2239      	movs	r2, #57	; 0x39
 8005104:	f001 feaa 	bl	8006e5c <HAL_DSI_LongWrite>
 8005108:	b958      	cbnz	r0, 8005122 <DSI_IO_Write+0x32>
  int32_t ret = BSP_ERROR_NONE;
 800510a:	2000      	movs	r0, #0
}
 800510c:	b003      	add	sp, #12
 800510e:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8005110:	5cd0      	ldrb	r0, [r2, r3]
 8005112:	462b      	mov	r3, r5
 8005114:	2215      	movs	r2, #21
 8005116:	9000      	str	r0, [sp, #0]
 8005118:	4803      	ldr	r0, [pc, #12]	; (8005128 <DSI_IO_Write+0x38>)
 800511a:	f001 fe8b 	bl	8006e34 <HAL_DSI_ShortWrite>
 800511e:	2800      	cmp	r0, #0
 8005120:	d0f3      	beq.n	800510a <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 8005122:	f06f 0007 	mvn.w	r0, #7
 8005126:	e7f1      	b.n	800510c <DSI_IO_Write+0x1c>
 8005128:	24019520 	.word	0x24019520

0800512c <BSP_LCD_Reset>:
  LCD_RESET_GPIO_CLK_ENABLE();
 800512c:	4b16      	ldr	r3, [pc, #88]	; (8005188 <BSP_LCD_Reset+0x5c>)
 800512e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
{
 8005136:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 8005138:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 800513c:	b087      	sub	sp, #28
  LCD_RESET_GPIO_CLK_ENABLE();
 800513e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8005142:	2508      	movs	r5, #8
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8005144:	4c11      	ldr	r4, [pc, #68]	; (800518c <BSP_LCD_Reset+0x60>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005146:	2601      	movs	r6, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800514c:	2703      	movs	r7, #3
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800514e:	4620      	mov	r0, r4
 8005150:	a901      	add	r1, sp, #4
  LCD_RESET_GPIO_CLK_ENABLE();
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8005156:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005158:	9704      	str	r7, [sp, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800515a:	e9cd 6602 	strd	r6, r6, [sp, #8]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800515e:	f001 ff71 	bl	8007044 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8005162:	4629      	mov	r1, r5
 8005164:	4620      	mov	r0, r4
 8005166:	2200      	movs	r2, #0
 8005168:	f002 f88a 	bl	8007280 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800516c:	2014      	movs	r0, #20
 800516e:	f000 fb9d 	bl	80058ac <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8005172:	4632      	mov	r2, r6
 8005174:	4629      	mov	r1, r5
 8005176:	4620      	mov	r0, r4
 8005178:	f002 f882 	bl	8007280 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800517c:	200a      	movs	r0, #10
 800517e:	f000 fb95 	bl	80058ac <HAL_Delay>
}
 8005182:	b007      	add	sp, #28
 8005184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005186:	bf00      	nop
 8005188:	58024400 	.word	0x58024400
 800518c:	58021800 	.word	0x58021800

08005190 <MX_DSIHOST_DSI_Init>:
{
 8005190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdsi->Instance = DSI;
 8005194:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
{
 8005198:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800519a:	2500      	movs	r5, #0
  hdsi->Init.TXEscapeCkdiv = 4;
 800519c:	f04f 0904 	mov.w	r9, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80051a0:	2601      	movs	r6, #1
  PLLInit.PLLNDIV = 100;
 80051a2:	f04f 0e64 	mov.w	lr, #100	; 0x64
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80051a6:	f04f 0c05 	mov.w	ip, #5
  hdsi->Instance = DSI;
 80051aa:	6007      	str	r7, [r0, #0]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80051ac:	60c6      	str	r6, [r0, #12]
{
 80051ae:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 80051b0:	4669      	mov	r1, sp
{
 80051b2:	4604      	mov	r4, r0
 80051b4:	4690      	mov	r8, r2
 80051b6:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80051b8:	9502      	str	r5, [sp, #8]
  hdsi->Init.TXEscapeCkdiv = 4;
 80051ba:	e9c0 5901 	strd	r5, r9, [r0, #4]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80051be:	e9cd ec00 	strd	lr, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 80051c2:	f001 fb9f 	bl	8006904 <HAL_DSI_Init>
 80051c6:	b118      	cbz	r0, 80051d0 <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 80051c8:	4630      	mov	r0, r6
}
 80051ca:	b01e      	add	sp, #120	; 0x78
 80051cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80051d0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80051d4:	4a22      	ldr	r2, [pc, #136]	; (8005260 <MX_DSIHOST_DSI_Init+0xd0>)
 80051d6:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 80051d8:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80051da:	fb03 2207 	mla	r2, r3, r7, r2
 80051de:	4b21      	ldr	r3, [pc, #132]	; (8005264 <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 80051e0:	2402      	movs	r4, #2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 80051e2:	2110      	movs	r1, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80051e4:	fba3 2302 	umull	r2, r3, r3, r2
  VidCfg.NullPacketSize = 0xFFFU;
 80051e8:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 80051ec:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 80051f0:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80051f4:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 80051f6:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80051f8:	9505      	str	r5, [sp, #20]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80051fa:	950a      	str	r5, [sp, #40]	; 0x28
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 80051fc:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 80051fe:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 8005202:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8005206:	f44f 6800 	mov.w	r8, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 800520a:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800520c:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800520e:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8005212:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005214:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.NullPacketSize = 0xFFFU;
 8005218:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 800521a:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.ColorCoding = PixelFormat;
 800521e:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8005222:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8005226:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800522a:	9614      	str	r6, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 800522c:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8005230:	270f      	movs	r7, #15
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8005232:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005236:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800523a:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800523e:	a903      	add	r1, sp, #12
  VidCfg.LPVACTLargestPacketSize = 4;
 8005240:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005244:	e9cd e517 	strd	lr, r5, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005248:	e9cd 8419 	strd	r8, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800524c:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005250:	f001 fc90 	bl	8006b74 <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 8005254:	3800      	subs	r0, #0
 8005256:	bf18      	it	ne
 8005258:	2001      	movne	r0, #1
}
 800525a:	b01e      	add	sp, #120	; 0x78
 800525c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005260:	0042c1d8 	.word	0x0042c1d8
 8005264:	4c751ce3 	.word	0x4c751ce3

08005268 <MX_LTDC_Init>:
{
 8005268:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Instance = LTDC;
 800526a:	4d0e      	ldr	r5, [pc, #56]	; (80052a4 <MX_LTDC_Init+0x3c>)
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800526c:	f101 0423 	add.w	r4, r1, #35	; 0x23
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8005270:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8005272:	2701      	movs	r7, #1
  hltdc->Instance = LTDC;
 8005274:	6005      	str	r5, [r0, #0]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8005276:	250f      	movs	r5, #15
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8005278:	2623      	movs	r6, #35	; 0x23
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800527a:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 800527c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800527e:	1954      	adds	r4, r2, r5
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005280:	2100      	movs	r1, #0
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8005282:	321f      	adds	r2, #31
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8005284:	6147      	str	r7, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8005286:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8005288:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800528a:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 800528c:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 800528e:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8005292:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8005294:	6181      	str	r1, [r0, #24]
}
 8005296:	bcf0      	pop	{r4, r5, r6, r7}
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005298:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800529c:	e9c0 1103 	strd	r1, r1, [r0, #12]
  return HAL_LTDC_Init(hltdc);
 80052a0:	f002 b8ac 	b.w	80073fc <HAL_LTDC_Init>
 80052a4:	50001000 	.word	0x50001000

080052a8 <MX_LTDC_ConfigLayer>:
{
 80052a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052aa:	4613      	mov	r3, r2
 80052ac:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 80052ae:	24ff      	movs	r4, #255	; 0xff
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80052b0:	460a      	mov	r2, r1
  pLayerCfg.WindowY0 = Config->Y0;
 80052b2:	6899      	ldr	r1, [r3, #8]
  pLayerCfg.Alpha0 = 0;
 80052b4:	2500      	movs	r5, #0
  pLayerCfg.Alpha = 255;
 80052b6:	9406      	str	r4, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80052b8:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.WindowY0 = Config->Y0;
 80052bc:	9103      	str	r1, [sp, #12]
  pLayerCfg.Alpha0 = 0;
 80052be:	9507      	str	r5, [sp, #28]
  pLayerCfg.Backcolor.Blue = 0;
 80052c0:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 80052c4:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  pLayerCfg.WindowX1 = Config->X1;
 80052c8:	e9d3 4600 	ldrd	r4, r6, [r3]
  pLayerCfg.WindowX0 = Config->X0;
 80052cc:	9401      	str	r4, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 80052ce:	1b34      	subs	r4, r6, r4
  pLayerCfg.WindowX1 = Config->X1;
 80052d0:	9602      	str	r6, [sp, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80052d2:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 80052d4:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 80052d6:	68dc      	ldr	r4, [r3, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80052d8:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 80052da:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80052dc:	910c      	str	r1, [sp, #48]	; 0x30
  pLayerCfg.FBStartAdress = Config->Address;
 80052de:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80052e2:	e9cd 7608 	strd	r7, r6, [sp, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 80052e6:	9105      	str	r1, [sp, #20]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80052e8:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 80052ea:	930a      	str	r3, [sp, #40]	; 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80052ec:	f002 f960 	bl	80075b0 <HAL_LTDC_ConfigLayer>
}
 80052f0:	b00f      	add	sp, #60	; 0x3c
 80052f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052f4 <MX_LTDC_ClockConfig>:
{
 80052f4:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 80052f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 80052fa:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 80052fc:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 80052fe:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8005300:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8005304:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8005306:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005308:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 800530a:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 800530c:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800530e:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 8005310:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8005312:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8005316:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800531a:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800531e:	f003 f849 	bl	80083b4 <HAL_RCCEx_PeriphCLKConfig>
}
 8005322:	b031      	add	sp, #196	; 0xc4
 8005324:	bd30      	pop	{r4, r5, pc}
 8005326:	bf00      	nop

08005328 <BSP_LCD_InitEx>:
{
 8005328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800532c:	2901      	cmp	r1, #1
{
 800532e:	b093      	sub	sp, #76	; 0x4c
 8005330:	461d      	mov	r5, r3
 8005332:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005336:	9103      	str	r1, [sp, #12]
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005338:	f200 80f2 	bhi.w	8005520 <BSP_LCD_InitEx+0x1f8>
 800533c:	1e03      	subs	r3, r0, #0
 800533e:	bf18      	it	ne
 8005340:	2301      	movne	r3, #1
 8005342:	2800      	cmp	r0, #0
 8005344:	f040 80ec 	bne.w	8005520 <BSP_LCD_InitEx+0x1f8>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8005348:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800534a:	2901      	cmp	r1, #1
 800534c:	f200 80e8 	bhi.w	8005520 <BSP_LCD_InitEx+0x1f8>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005350:	2a02      	cmp	r2, #2
 8005352:	f000 80ab 	beq.w	80054ac <BSP_LCD_InitEx+0x184>
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 8005356:	9301      	str	r3, [sp, #4]
      Lcd_Ctx[Instance].BppFactor = 4U;
 8005358:	2104      	movs	r1, #4
      dsi_pixel_format = DSI_RGB888;
 800535a:	2305      	movs	r3, #5
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800535c:	4c72      	ldr	r4, [pc, #456]	; (8005528 <BSP_LCD_InitEx+0x200>)
    BSP_LCD_Reset(Instance);
 800535e:	2000      	movs	r0, #0
 8005360:	4f72      	ldr	r7, [pc, #456]	; (800552c <BSP_LCD_InitEx+0x204>)
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005362:	2600      	movs	r6, #0
 8005364:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8005366:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 800536a:	6139      	str	r1, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800536c:	f04f 0b02 	mov.w	fp, #2
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8005370:	60fa      	str	r2, [r7, #12]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8005372:	f04f 0a04 	mov.w	sl, #4
    Lcd_Ctx[Instance].XSize  = Width;
 8005376:	603d      	str	r5, [r7, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8005378:	f8c7 8004 	str.w	r8, [r7, #4]
    BSP_LCD_Reset(Instance);
 800537c:	f7ff fed6 	bl	800512c <BSP_LCD_Reset>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005380:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005384:	2201      	movs	r2, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005386:	a90c      	add	r1, sp, #48	; 0x30
 8005388:	4869      	ldr	r0, [pc, #420]	; (8005530 <BSP_LCD_InitEx+0x208>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800538a:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 800538e:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8005392:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8005396:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800539a:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800539e:	920d      	str	r2, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80053a0:	960e      	str	r6, [sp, #56]	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80053a2:	f8cd c014 	str.w	ip, [sp, #20]
 80053a6:	f8dd c014 	ldr.w	ip, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80053aa:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80053ae:	f001 fe49 	bl	8007044 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80053b2:	2201      	movs	r2, #1
 80053b4:	4649      	mov	r1, r9
 80053b6:	485e      	ldr	r0, [pc, #376]	; (8005530 <BSP_LCD_InitEx+0x208>)
 80053b8:	f001 ff62 	bl	8007280 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 80053bc:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80053c0:	a90c      	add	r1, sp, #48	; 0x30
 80053c2:	485b      	ldr	r0, [pc, #364]	; (8005530 <BSP_LCD_InitEx+0x208>)
  LCD_TE_GPIO_CLK_ENABLE();
 80053c4:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
    hlcd_dma2d.Instance = DMA2D;
 80053c8:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8005560 <BSP_LCD_InitEx+0x238>
  LCD_TE_GPIO_CLK_ENABLE();
 80053cc:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 80053d0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80053d4:	960d      	str	r6, [sp, #52]	; 0x34
  LCD_TE_GPIO_CLK_ENABLE();
 80053d6:	f404 7400 	and.w	r4, r4, #512	; 0x200
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80053da:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  gpio_init_structure.Pin       = LCD_TE_PIN;
 80053de:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  LCD_TE_GPIO_CLK_ENABLE();
 80053e2:	9406      	str	r4, [sp, #24]
 80053e4:	9c06      	ldr	r4, [sp, #24]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80053e6:	f001 fe2d 	bl	8007044 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 80053ea:	2201      	movs	r2, #1
 80053ec:	4651      	mov	r1, sl
 80053ee:	4850      	ldr	r0, [pc, #320]	; (8005530 <BSP_LCD_InitEx+0x208>)
 80053f0:	f001 ff46 	bl	8007280 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 80053f4:	4632      	mov	r2, r6
 80053f6:	210f      	movs	r1, #15
 80053f8:	2058      	movs	r0, #88	; 0x58
 80053fa:	f001 f85f 	bl	80064bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80053fe:	2058      	movs	r0, #88	; 0x58
 8005400:	f001 f896 	bl	8006530 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8005404:	4632      	mov	r2, r6
 8005406:	210f      	movs	r1, #15
 8005408:	205a      	movs	r0, #90	; 0x5a
 800540a:	f001 f857 	bl	80064bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800540e:	205a      	movs	r0, #90	; 0x5a
 8005410:	f001 f88e 	bl	8006530 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 8005414:	4632      	mov	r2, r6
 8005416:	210f      	movs	r1, #15
 8005418:	207b      	movs	r0, #123	; 0x7b
 800541a:	f001 f84f 	bl	80064bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800541e:	207b      	movs	r0, #123	; 0x7b
 8005420:	f001 f886 	bl	8006530 <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 8005424:	4c43      	ldr	r4, [pc, #268]	; (8005534 <BSP_LCD_InitEx+0x20c>)
    hlcd_dma2d.Instance = DMA2D;
 8005426:	4844      	ldr	r0, [pc, #272]	; (8005538 <BSP_LCD_InitEx+0x210>)
    hlcd_dsi.Instance = DSI;
 8005428:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800542c:	4943      	ldr	r1, [pc, #268]	; (800553c <BSP_LCD_InitEx+0x214>)
    hlcd_ltdc.Instance = LTDC;
 800542e:	4e44      	ldr	r6, [pc, #272]	; (8005540 <BSP_LCD_InitEx+0x218>)
    hlcd_dsi.Instance = DSI;
 8005430:	600a      	str	r2, [r1, #0]
    hlcd_ltdc.Instance = LTDC;
 8005432:	6026      	str	r6, [r4, #0]
    hlcd_dma2d.Instance = DMA2D;
 8005434:	f8c9 0000 	str.w	r0, [r9]
  if(hltdc->Instance == LTDC)
 8005438:	f7ff fe04 	bl	8005044 <LTDC_MspInit.part.0>
  if(hdma2d->Instance == DMA2D)
 800543c:	f8d9 2000 	ldr.w	r2, [r9]
 8005440:	9b02      	ldr	r3, [sp, #8]
 8005442:	4282      	cmp	r2, r0
 8005444:	d03a      	beq.n	80054bc <BSP_LCD_InitEx+0x194>
  if(hdsi->Instance == DSI)
 8005446:	680a      	ldr	r2, [r1, #0]
 8005448:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800544c:	d031      	beq.n	80054b2 <BSP_LCD_InitEx+0x18a>
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800544e:	4642      	mov	r2, r8
 8005450:	4629      	mov	r1, r5
 8005452:	483a      	ldr	r0, [pc, #232]	; (800553c <BSP_LCD_InitEx+0x214>)
 8005454:	f7ff fe9c 	bl	8005190 <MX_DSIHOST_DSI_Init>
 8005458:	2800      	cmp	r0, #0
 800545a:	d15c      	bne.n	8005516 <BSP_LCD_InitEx+0x1ee>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800545c:	4835      	ldr	r0, [pc, #212]	; (8005534 <BSP_LCD_InitEx+0x20c>)
 800545e:	f7ff ff49 	bl	80052f4 <MX_LTDC_ClockConfig>
 8005462:	2800      	cmp	r0, #0
 8005464:	d157      	bne.n	8005516 <BSP_LCD_InitEx+0x1ee>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8005466:	4642      	mov	r2, r8
 8005468:	4629      	mov	r1, r5
 800546a:	4832      	ldr	r0, [pc, #200]	; (8005534 <BSP_LCD_InitEx+0x20c>)
 800546c:	f7ff fefc 	bl	8005268 <MX_LTDC_Init>
 8005470:	2800      	cmp	r0, #0
 8005472:	d150      	bne.n	8005516 <BSP_LCD_InitEx+0x1ee>
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8005474:	f000 f8b2 	bl	80055dc <BSP_SDRAM_Init>
 8005478:	2800      	cmp	r0, #0
 800547a:	d14c      	bne.n	8005516 <BSP_LCD_InitEx+0x1ee>
      config.PixelFormat = ltdc_pixel_format;
 800547c:	9c01      	ldr	r4, [sp, #4]
      config.Address     = LCD_LAYER_0_ADDRESS;
 800547e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005482:	4601      	mov	r1, r0
      config.X0          = 0;
 8005484:	900c      	str	r0, [sp, #48]	; 0x30
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005486:	aa0c      	add	r2, sp, #48	; 0x30
      config.Y1          = Height;
 8005488:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      config.Y0          = 0;
 800548c:	e9cd 500d 	strd	r5, r0, [sp, #52]	; 0x34
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005490:	4828      	ldr	r0, [pc, #160]	; (8005534 <BSP_LCD_InitEx+0x20c>)
      config.Address     = LCD_LAYER_0_ADDRESS;
 8005492:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005496:	f7ff ff07 	bl	80052a8 <MX_LTDC_ConfigLayer>
 800549a:	4604      	mov	r4, r0
 800549c:	b190      	cbz	r0, 80054c4 <BSP_LCD_InitEx+0x19c>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800549e:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 80054a2:	2301      	movs	r3, #1
 80054a4:	61bb      	str	r3, [r7, #24]
}
 80054a6:	b013      	add	sp, #76	; 0x4c
 80054a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Lcd_Ctx[Instance].BppFactor = 2U;
 80054ac:	4611      	mov	r1, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 80054ae:	9201      	str	r2, [sp, #4]
 80054b0:	e754      	b.n	800535c <BSP_LCD_InitEx+0x34>
 80054b2:	9302      	str	r3, [sp, #8]
 80054b4:	f7ff fdfe 	bl	80050b4 <DSI_MspInit.part.0>
 80054b8:	9b02      	ldr	r3, [sp, #8]
 80054ba:	e7c8      	b.n	800544e <BSP_LCD_InitEx+0x126>
 80054bc:	f7ff fde0 	bl	8005080 <DMA2D_MspInit.part.0>
 80054c0:	9b02      	ldr	r3, [sp, #8]
 80054c2:	e7c0      	b.n	8005446 <BSP_LCD_InitEx+0x11e>
        (void)HAL_DSI_Start(&hlcd_dsi);
 80054c4:	481d      	ldr	r0, [pc, #116]	; (800553c <BSP_LCD_InitEx+0x214>)
 80054c6:	f001 fc8d 	bl	8006de4 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 80054ca:	2104      	movs	r1, #4
 80054cc:	481b      	ldr	r0, [pc, #108]	; (800553c <BSP_LCD_InitEx+0x214>)
 80054ce:	f001 fc75 	bl	8006dbc <HAL_DSI_ConfigFlowControl>
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
 80054d2:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <BSP_LCD_InitEx+0x21c>)
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 80054d4:	4d1c      	ldr	r5, [pc, #112]	; (8005548 <BSP_LCD_InitEx+0x220>)
 80054d6:	a908      	add	r1, sp, #32
  IOCtx.WriteReg    = DSI_IO_Write;
 80054d8:	4a1c      	ldr	r2, [pc, #112]	; (800554c <BSP_LCD_InitEx+0x224>)
  IOCtx.GetTick     = BSP_GetTick;
 80054da:	930b      	str	r3, [sp, #44]	; 0x2c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 80054dc:	4628      	mov	r0, r5
  IOCtx.ReadReg     = DSI_IO_Read;
 80054de:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <BSP_LCD_InitEx+0x228>)
  IOCtx.Address     = 0;
 80054e0:	f8ad 4020 	strh.w	r4, [sp, #32]
  IOCtx.ReadReg     = DSI_IO_Read;
 80054e4:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 80054e8:	f7ff fb22 	bl	8004b30 <OTM8009A_RegisterBusIO>
 80054ec:	b980      	cbnz	r0, 8005510 <BSP_LCD_InitEx+0x1e8>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 80054ee:	4c19      	ldr	r4, [pc, #100]	; (8005554 <BSP_LCD_InitEx+0x22c>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 80054f0:	4628      	mov	r0, r5
 80054f2:	a907      	add	r1, sp, #28
    Lcd_CompObj = &OTM8009AObj;
 80054f4:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 80054f6:	f7ff fb07 	bl	8004b08 <OTM8009A_ReadID>
 80054fa:	b948      	cbnz	r0, 8005510 <BSP_LCD_InitEx+0x1e8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 80054fc:	4b16      	ldr	r3, [pc, #88]	; (8005558 <BSP_LCD_InitEx+0x230>)
 80054fe:	4d17      	ldr	r5, [pc, #92]	; (800555c <BSP_LCD_InitEx+0x234>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8005500:	6820      	ldr	r0, [r4, #0]
 8005502:	9a03      	ldr	r2, [sp, #12]
 8005504:	9901      	ldr	r1, [sp, #4]
 8005506:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8005508:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800550a:	47a0      	blx	r4
 800550c:	2800      	cmp	r0, #0
 800550e:	d0c8      	beq.n	80054a2 <BSP_LCD_InitEx+0x17a>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005510:	f06f 0006 	mvn.w	r0, #6
 8005514:	e7c5      	b.n	80054a2 <BSP_LCD_InitEx+0x17a>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005516:	f06f 0003 	mvn.w	r0, #3
}
 800551a:	b013      	add	sp, #76	; 0x4c
 800551c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005520:	f06f 0001 	mvn.w	r0, #1
 8005524:	e7bf      	b.n	80054a6 <BSP_LCD_InitEx+0x17e>
 8005526:	bf00      	nop
 8005528:	58024400 	.word	0x58024400
 800552c:	24019504 	.word	0x24019504
 8005530:	58022400 	.word	0x58022400
 8005534:	2401945c 	.word	0x2401945c
 8005538:	52001000 	.word	0x52001000
 800553c:	24019520 	.word	0x24019520
 8005540:	50001000 	.word	0x50001000
 8005544:	08004b81 	.word	0x08004b81
 8005548:	2400912c 	.word	0x2400912c
 800554c:	080050f1 	.word	0x080050f1
 8005550:	08004d11 	.word	0x08004d11
 8005554:	24009124 	.word	0x24009124
 8005558:	24009010 	.word	0x24009010
 800555c:	24009128 	.word	0x24009128
 8005560:	2401953c 	.word	0x2401953c

08005564 <BSP_LCD_Init>:
{
 8005564:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8005566:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 800556a:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800556c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005570:	2201      	movs	r2, #1
 8005572:	9400      	str	r4, [sp, #0]
 8005574:	f7ff fed8 	bl	8005328 <BSP_LCD_InitEx>
}
 8005578:	b002      	add	sp, #8
 800557a:	bd10      	pop	{r4, pc}

0800557c <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 800557c:	b5f0      	push	{r4, r5, r6, r7, lr}
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 800557e:	4915      	ldr	r1, [pc, #84]	; (80055d4 <MX_SDRAM_Init+0x58>)

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005580:	2620      	movs	r6, #32
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005582:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005584:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005588:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 800558c:	b089      	sub	sp, #36	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800558e:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <MX_SDRAM_Init+0x5c>)
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005590:	f44f 77c0 	mov.w	r7, #384	; 0x180
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8005594:	6001      	str	r1, [r0, #0]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005596:	2101      	movs	r1, #1
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005598:	6106      	str	r6, [r0, #16]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800559a:	2604      	movs	r6, #4
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800559c:	6145      	str	r5, [r0, #20]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800559e:	2500      	movs	r5, #0
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80055a0:	6202      	str	r2, [r0, #32]

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 80055a2:	2202      	movs	r2, #2
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80055a4:	6244      	str	r4, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 80055a6:	2407      	movs	r4, #7
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80055a8:	6187      	str	r7, [r0, #24]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80055aa:	60c6      	str	r6, [r0, #12]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80055ac:	61c5      	str	r5, [r0, #28]
  sdram_timing.SelfRefreshTime      = 4;
 80055ae:	9603      	str	r6, [sp, #12]
  sdram_timing.LoadToActiveDelay    = 2;
 80055b0:	9201      	str	r2, [sp, #4]
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 80055b2:	9207      	str	r2, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80055b4:	9402      	str	r4, [sp, #8]
  sdram_timing.RowCycleDelay        = 7;
 80055b6:	9404      	str	r4, [sp, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80055b8:	e9c0 1101 	strd	r1, r1, [r0, #4]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80055bc:	eb0d 0106 	add.w	r1, sp, r6
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80055c0:	629d      	str	r5, [r3, #40]	; 0x28
  sdram_timing.RPDelay              = 2;
 80055c2:	e9cd 2205 	strd	r2, r2, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80055c6:	f004 f873 	bl	80096b0 <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }
  return HAL_OK;
}
 80055ca:	1b40      	subs	r0, r0, r5
 80055cc:	bf18      	it	ne
 80055ce:	2001      	movne	r0, #1
 80055d0:	b009      	add	sp, #36	; 0x24
 80055d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055d4:	52004140 	.word	0x52004140
 80055d8:	240195a4 	.word	0x240195a4

080055dc <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
 80055dc:	2800      	cmp	r0, #0
 80055de:	f040 80e1 	bne.w	80057a4 <BSP_SDRAM_Init+0x1c8>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80055e2:	4b73      	ldr	r3, [pc, #460]	; (80057b0 <BSP_SDRAM_Init+0x1d4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80055e4:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 80055e6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80055ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
 80055ee:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 80055f0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
 80055f4:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_FMC_CLK_ENABLE();
 80055f6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80055fa:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80055fc:	2002      	movs	r0, #2
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80055fe:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8005600:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005604:	2703      	movs	r7, #3
  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8005606:	f240 2602 	movw	r6, #514	; 0x202
  __HAL_RCC_FMC_CLK_ENABLE();
 800560a:	9201      	str	r2, [sp, #4]
 800560c:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 800560e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005612:	430a      	orrs	r2, r1
 8005614:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005618:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800561c:	400a      	ands	r2, r1
 800561e:	9202      	str	r2, [sp, #8]
 8005620:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005622:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005626:	f042 0208 	orr.w	r2, r2, #8
 800562a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800562e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005632:	f002 0208 	and.w	r2, r2, #8
 8005636:	9203      	str	r2, [sp, #12]
 8005638:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800563a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800563e:	f042 0210 	orr.w	r2, r2, #16
 8005642:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005646:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800564a:	f002 0210 	and.w	r2, r2, #16
 800564e:	9204      	str	r2, [sp, #16]
 8005650:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005652:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005656:	f042 0220 	orr.w	r2, r2, #32
 800565a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800565e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005662:	f002 0220 	and.w	r2, r2, #32
 8005666:	9205      	str	r2, [sp, #20]
 8005668:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800566a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800566e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005672:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005676:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800567a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800567e:	9206      	str	r2, [sp, #24]
 8005680:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005682:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005686:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800568a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800568e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005692:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005696:	9207      	str	r2, [sp, #28]
 8005698:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800569a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800569e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80056a6:	f24c 7203 	movw	r2, #50947	; 0xc703
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80056aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80056ae:	900a      	str	r0, [sp, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80056b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80056b4:	483f      	ldr	r0, [pc, #252]	; (80057b4 <BSP_SDRAM_Init+0x1d8>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80056b6:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80056b8:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80056ba:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80056bc:	9209      	str	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80056be:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80056c0:	940d      	str	r4, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80056c2:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80056c4:	f001 fcbe 	bl	8007044 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80056c8:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80056cc:	a909      	add	r1, sp, #36	; 0x24
 80056ce:	483a      	ldr	r0, [pc, #232]	; (80057b8 <BSP_SDRAM_Init+0x1dc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80056d0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80056d2:	f001 fcb7 	bl	8007044 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80056d6:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80056da:	a909      	add	r1, sp, #36	; 0x24
 80056dc:	4837      	ldr	r0, [pc, #220]	; (80057bc <BSP_SDRAM_Init+0x1e0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80056de:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80056e0:	f001 fcb0 	bl	8007044 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80056e4:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80056e8:	a909      	add	r1, sp, #36	; 0x24
 80056ea:	4835      	ldr	r0, [pc, #212]	; (80057c0 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80056ec:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80056ee:	f001 fca9 	bl	8007044 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80056f2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80056f6:	a909      	add	r1, sp, #36	; 0x24
 80056f8:	4832      	ldr	r0, [pc, #200]	; (80057c4 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80056fa:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80056fc:	f001 fca2 	bl	8007044 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005700:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005704:	a909      	add	r1, sp, #36	; 0x24
 8005706:	4830      	ldr	r0, [pc, #192]	; (80057c8 <BSP_SDRAM_Init+0x1ec>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005708:	4c30      	ldr	r4, [pc, #192]	; (80057cc <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800570a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800570c:	f001 fc9a 	bl	8007044 <HAL_GPIO_Init>
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005710:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005714:	f640 0008 	movw	r0, #2056	; 0x808
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005718:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800571c:	2120      	movs	r1, #32
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 800571e:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005720:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005724:	60a3      	str	r3, [r4, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005726:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005728:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
  mdma_handle.Init.BufferTransferLength     = 128;
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800572a:	4a29      	ldr	r2, [pc, #164]	; (80057d0 <BSP_SDRAM_Init+0x1f4>)
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800572c:	60e3      	str	r3, [r4, #12]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800572e:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength     = 128;
 8005730:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005732:	61e1      	str	r1, [r4, #28]
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005734:	6022      	str	r2, [r4, #0]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005736:	6125      	str	r5, [r4, #16]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005738:	e9c4 6005 	strd	r6, r0, [r4, #20]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800573c:	4e25      	ldr	r6, [pc, #148]	; (80057d4 <BSP_SDRAM_Init+0x1f8>)

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800573e:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005740:	6334      	str	r4, [r6, #48]	; 0x30
 8005742:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8005744:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8005748:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800574c:	f001 fffa 	bl	8007744 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8005750:	4620      	mov	r0, r4
 8005752:	f001 ff7d 	bl	8007650 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8005756:	462a      	mov	r2, r5
 8005758:	210f      	movs	r1, #15
 800575a:	207a      	movs	r0, #122	; 0x7a
 800575c:	f000 feae 	bl	80064bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8005760:	207a      	movs	r0, #122	; 0x7a
 8005762:	f000 fee5 	bl	8006530 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8005766:	4630      	mov	r0, r6
 8005768:	f7ff ff08 	bl	800557c <MX_SDRAM_Init>
 800576c:	4603      	mov	r3, r0
 800576e:	b9e0      	cbnz	r0, 80057aa <BSP_SDRAM_Init+0x1ce>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005770:	4919      	ldr	r1, [pc, #100]	; (80057d8 <BSP_SDRAM_Init+0x1fc>)
 8005772:	f04f 0c08 	mov.w	ip, #8
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005776:	f44f 7200 	mov.w	r2, #512	; 0x200
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800577a:	f240 6503 	movw	r5, #1539	; 0x603
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 800577e:	2430      	movs	r4, #48	; 0x30
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005780:	4630      	mov	r0, r6
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8005782:	604f      	str	r7, [r1, #4]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8005784:	60cb      	str	r3, [r1, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8005786:	610b      	str	r3, [r1, #16]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8005788:	618b      	str	r3, [r1, #24]
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800578a:	f8c1 c000 	str.w	ip, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800578e:	608d      	str	r5, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005790:	614c      	str	r4, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005792:	61ca      	str	r2, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005794:	f7fe fc62 	bl	800405c <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005798:	2800      	cmp	r0, #0
 800579a:	bf18      	it	ne
 800579c:	f06f 0004 	mvnne.w	r0, #4
}
 80057a0:	b00f      	add	sp, #60	; 0x3c
 80057a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80057a4:	f06f 0001 	mvn.w	r0, #1
}
 80057a8:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
 80057aa:	f04f 30ff 	mov.w	r0, #4294967295
 80057ae:	e7f7      	b.n	80057a0 <BSP_SDRAM_Init+0x1c4>
 80057b0:	58024400 	.word	0x58024400
 80057b4:	58020c00 	.word	0x58020c00
 80057b8:	58021000 	.word	0x58021000
 80057bc:	58021400 	.word	0x58021400
 80057c0:	58021800 	.word	0x58021800
 80057c4:	58021c00 	.word	0x58021c00
 80057c8:	58022000 	.word	0x58022000
 80057cc:	2400914c 	.word	0x2400914c
 80057d0:	52000040 	.word	0x52000040
 80057d4:	240195a4 	.word	0x240195a4
 80057d8:	240091b8 	.word	0x240091b8

080057dc <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80057dc:	4b0f      	ldr	r3, [pc, #60]	; (800581c <HAL_InitTick+0x40>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	b90b      	cbnz	r3, 80057e6 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80057e2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80057e4:	4770      	bx	lr
{
 80057e6:	b510      	push	{r4, lr}
 80057e8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80057ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80057ee:	4a0c      	ldr	r2, [pc, #48]	; (8005820 <HAL_InitTick+0x44>)
 80057f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80057f4:	6810      	ldr	r0, [r2, #0]
 80057f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80057fa:	f000 fea7 	bl	800654c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057fe:	2c0f      	cmp	r4, #15
 8005800:	d800      	bhi.n	8005804 <HAL_InitTick+0x28>
 8005802:	b108      	cbz	r0, 8005808 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8005804:	2001      	movs	r0, #1
}
 8005806:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005808:	2200      	movs	r2, #0
 800580a:	4621      	mov	r1, r4
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	f000 fe54 	bl	80064bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005814:	4b03      	ldr	r3, [pc, #12]	; (8005824 <HAL_InitTick+0x48>)
 8005816:	2000      	movs	r0, #0
 8005818:	601c      	str	r4, [r3, #0]
}
 800581a:	bd10      	pop	{r4, pc}
 800581c:	2400905c 	.word	0x2400905c
 8005820:	24000000 	.word	0x24000000
 8005824:	24009060 	.word	0x24009060

08005828 <HAL_Init>:
{
 8005828:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800582a:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800582c:	4c12      	ldr	r4, [pc, #72]	; (8005878 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800582e:	f000 fe31 	bl	8006494 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005832:	4d12      	ldr	r5, [pc, #72]	; (800587c <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005834:	f002 fada 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 8005838:	4b11      	ldr	r3, [pc, #68]	; (8005880 <HAL_Init+0x58>)
 800583a:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800583c:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800583e:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005840:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005842:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005846:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005848:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800584a:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800584c:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 8005850:	4c0c      	ldr	r4, [pc, #48]	; (8005884 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005852:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005856:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800585c:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800585e:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005860:	f7ff ffbc 	bl	80057dc <HAL_InitTick>
 8005864:	b110      	cbz	r0, 800586c <HAL_Init+0x44>
    return HAL_ERROR;
 8005866:	2401      	movs	r4, #1
}
 8005868:	4620      	mov	r0, r4
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	4604      	mov	r4, r0
  HAL_MspInit();
 800586e:	f7fe faf3 	bl	8003e58 <HAL_MspInit>
}
 8005872:	4620      	mov	r0, r4
 8005874:	bd38      	pop	{r3, r4, r5, pc}
 8005876:	bf00      	nop
 8005878:	08009a84 	.word	0x08009a84
 800587c:	24000004 	.word	0x24000004
 8005880:	58024400 	.word	0x58024400
 8005884:	24000000 	.word	0x24000000

08005888 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005888:	4a03      	ldr	r2, [pc, #12]	; (8005898 <HAL_IncTick+0x10>)
 800588a:	4b04      	ldr	r3, [pc, #16]	; (800589c <HAL_IncTick+0x14>)
 800588c:	6811      	ldr	r1, [r2, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	440b      	add	r3, r1
 8005892:	6013      	str	r3, [r2, #0]
}
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	240195d8 	.word	0x240195d8
 800589c:	2400905c 	.word	0x2400905c

080058a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80058a0:	4b01      	ldr	r3, [pc, #4]	; (80058a8 <HAL_GetTick+0x8>)
 80058a2:	6818      	ldr	r0, [r3, #0]
}
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	240195d8 	.word	0x240195d8

080058ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80058b0:	f7ff fff6 	bl	80058a0 <HAL_GetTick>
 80058b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058b6:	1c63      	adds	r3, r4, #1
 80058b8:	d002      	beq.n	80058c0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80058ba:	4b04      	ldr	r3, [pc, #16]	; (80058cc <HAL_Delay+0x20>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80058c0:	f7ff ffee 	bl	80058a0 <HAL_GetTick>
 80058c4:	1b43      	subs	r3, r0, r5
 80058c6:	42a3      	cmp	r3, r4
 80058c8:	d3fa      	bcc.n	80058c0 <HAL_Delay+0x14>
  {
  }
}
 80058ca:	bd38      	pop	{r3, r4, r5, pc}
 80058cc:	2400905c 	.word	0x2400905c

080058d0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80058d0:	4b01      	ldr	r3, [pc, #4]	; (80058d8 <HAL_GetREVID+0x8>)
 80058d2:	6818      	ldr	r0, [r3, #0]
}
 80058d4:	0c00      	lsrs	r0, r0, #16
 80058d6:	4770      	bx	lr
 80058d8:	5c001000 	.word	0x5c001000

080058dc <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80058dc:	4a03      	ldr	r2, [pc, #12]	; (80058ec <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 80058de:	6853      	ldr	r3, [r2, #4]
 80058e0:	ea23 0000 	bic.w	r0, r3, r0
 80058e4:	4301      	orrs	r1, r0
 80058e6:	6051      	str	r1, [r2, #4]
}
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	58000400 	.word	0x58000400

080058f0 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80058f0:	4a02      	ldr	r2, [pc, #8]	; (80058fc <HAL_EnableCompensationCell+0xc>)
 80058f2:	6a13      	ldr	r3, [r2, #32]
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	6213      	str	r3, [r2, #32]
}
 80058fa:	4770      	bx	lr
 80058fc:	58000400 	.word	0x58000400

08005900 <HAL_ADC_PollForConversion>:
{
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005900:	4a40      	ldr	r2, [pc, #256]	; (8005a04 <HAL_ADC_PollForConversion+0x104>)
 8005902:	6803      	ldr	r3, [r0, #0]
 8005904:	4293      	cmp	r3, r2
{
 8005906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800590a:	4606      	mov	r6, r0
 800590c:	460d      	mov	r5, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800590e:	d044      	beq.n	800599a <HAL_ADC_PollForConversion+0x9a>
 8005910:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005914:	4293      	cmp	r3, r2
 8005916:	d040      	beq.n	800599a <HAL_ADC_PollForConversion+0x9a>
 8005918:	4a3b      	ldr	r2, [pc, #236]	; (8005a08 <HAL_ADC_PollForConversion+0x108>)

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800591a:	6934      	ldr	r4, [r6, #16]
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800591c:	6897      	ldr	r7, [r2, #8]
 800591e:	2c08      	cmp	r4, #8
 8005920:	f007 071f 	and.w	r7, r7, #31
 8005924:	d00a      	beq.n	800593c <HAL_ADC_PollForConversion+0x3c>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005926:	2f09      	cmp	r7, #9
 8005928:	d84d      	bhi.n	80059c6 <HAL_ADC_PollForConversion+0xc6>
 800592a:	f240 2121 	movw	r1, #545	; 0x221
 800592e:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005930:	07c9      	lsls	r1, r1, #31
 8005932:	d548      	bpl.n	80059c6 <HAL_ADC_PollForConversion+0xc6>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	07da      	lsls	r2, r3, #31
 8005938:	d449      	bmi.n	80059ce <HAL_ADC_PollForConversion+0xce>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800593a:	2404      	movs	r4, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800593c:	f7ff ffb0 	bl	80058a0 <HAL_GetTick>
 8005940:	6832      	ldr	r2, [r6, #0]
 8005942:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005944:	e001      	b.n	800594a <HAL_ADC_PollForConversion+0x4a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005946:	1c6b      	adds	r3, r5, #1
 8005948:	d129      	bne.n	800599e <HAL_ADC_PollForConversion+0x9e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800594a:	6813      	ldr	r3, [r2, #0]
 800594c:	4223      	tst	r3, r4
 800594e:	d0fa      	beq.n	8005946 <HAL_ADC_PollForConversion+0x46>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005950:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8005952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005956:	6573      	str	r3, [r6, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005958:	68d3      	ldr	r3, [r2, #12]
 800595a:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 800595e:	d10f      	bne.n	8005980 <HAL_ADC_PollForConversion+0x80>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005960:	7d73      	ldrb	r3, [r6, #21]
 8005962:	b96b      	cbnz	r3, 8005980 <HAL_ADC_PollForConversion+0x80>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005964:	6813      	ldr	r3, [r2, #0]
 8005966:	0718      	lsls	r0, r3, #28
 8005968:	d50a      	bpl.n	8005980 <HAL_ADC_PollForConversion+0x80>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800596a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800596c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005970:	6573      	str	r3, [r6, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005972:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8005974:	04d9      	lsls	r1, r3, #19
 8005976:	d403      	bmi.n	8005980 <HAL_ADC_PollForConversion+0x80>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005978:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800597a:	f043 0301 	orr.w	r3, r3, #1
 800597e:	6573      	str	r3, [r6, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005980:	4b22      	ldr	r3, [pc, #136]	; (8005a0c <HAL_ADC_PollForConversion+0x10c>)
 8005982:	429a      	cmp	r2, r3
 8005984:	d02e      	beq.n	80059e4 <HAL_ADC_PollForConversion+0xe4>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005986:	68d0      	ldr	r0, [r2, #12]
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005988:	2c08      	cmp	r4, #8
 800598a:	d027      	beq.n	80059dc <HAL_ADC_PollForConversion+0xdc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800598c:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8005990:	d134      	bne.n	80059fc <HAL_ADC_PollForConversion+0xfc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005992:	230c      	movs	r3, #12
 8005994:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8005996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800599a:	4a1d      	ldr	r2, [pc, #116]	; (8005a10 <HAL_ADC_PollForConversion+0x110>)
 800599c:	e7bd      	b.n	800591a <HAL_ADC_PollForConversion+0x1a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800599e:	f7ff ff7f 	bl	80058a0 <HAL_GetTick>
 80059a2:	eba0 0008 	sub.w	r0, r0, r8
 80059a6:	6832      	ldr	r2, [r6, #0]
 80059a8:	42a8      	cmp	r0, r5
 80059aa:	d801      	bhi.n	80059b0 <HAL_ADC_PollForConversion+0xb0>
 80059ac:	2d00      	cmp	r5, #0
 80059ae:	d1cc      	bne.n	800594a <HAL_ADC_PollForConversion+0x4a>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80059b0:	6813      	ldr	r3, [r2, #0]
 80059b2:	4023      	ands	r3, r4
 80059b4:	d1c9      	bne.n	800594a <HAL_ADC_PollForConversion+0x4a>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80059b6:	6d72      	ldr	r2, [r6, #84]	; 0x54
          return HAL_TIMEOUT;
 80059b8:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 80059ba:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80059be:	f042 0204 	orr.w	r2, r2, #4
 80059c2:	6572      	str	r2, [r6, #84]	; 0x54
          return HAL_TIMEOUT;
 80059c4:	e7e7      	b.n	8005996 <HAL_ADC_PollForConversion+0x96>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80059c6:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80059c8:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 80059cc:	d0b5      	beq.n	800593a <HAL_ADC_PollForConversion+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059ce:	6d73      	ldr	r3, [r6, #84]	; 0x54
        return HAL_ERROR;
 80059d0:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059d2:	f043 0320 	orr.w	r3, r3, #32
 80059d6:	6573      	str	r3, [r6, #84]	; 0x54
}
 80059d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80059dc:	2000      	movs	r0, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80059de:	6014      	str	r4, [r2, #0]
}
 80059e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80059e4:	2f09      	cmp	r7, #9
 80059e6:	d902      	bls.n	80059ee <HAL_ADC_PollForConversion+0xee>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80059e8:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <HAL_ADC_PollForConversion+0x104>)
 80059ea:	68d8      	ldr	r0, [r3, #12]
 80059ec:	e7cc      	b.n	8005988 <HAL_ADC_PollForConversion+0x88>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80059ee:	f240 2321 	movw	r3, #545	; 0x221
 80059f2:	fa23 f707 	lsr.w	r7, r3, r7
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80059f6:	07fb      	lsls	r3, r7, #31
 80059f8:	d4c5      	bmi.n	8005986 <HAL_ADC_PollForConversion+0x86>
 80059fa:	e7f5      	b.n	80059e8 <HAL_ADC_PollForConversion+0xe8>
  return HAL_OK;
 80059fc:	2000      	movs	r0, #0
}
 80059fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a02:	bf00      	nop
 8005a04:	40022000 	.word	0x40022000
 8005a08:	58026300 	.word	0x58026300
 8005a0c:	40022100 	.word	0x40022100
 8005a10:	40022300 	.word	0x40022300

08005a14 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005a14:	6803      	ldr	r3, [r0, #0]
 8005a16:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop

08005a1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005a1e:	2200      	movs	r2, #0
{
 8005a20:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8005a22:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a24:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8005a28:	2a01      	cmp	r2, #1
 8005a2a:	f000 813a 	beq.w	8005ca2 <HAL_ADC_ConfigChannel+0x286>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a32:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8005a34:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a38:	6894      	ldr	r4, [r2, #8]
 8005a3a:	0766      	lsls	r6, r4, #29
 8005a3c:	f100 8099 	bmi.w	8005b72 <HAL_ADC_ConfigChannel+0x156>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005a40:	680c      	ldr	r4, [r1, #0]
 8005a42:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8005a46:	2d00      	cmp	r5, #0
 8005a48:	f040 809e 	bne.w	8005b88 <HAL_ADC_ConfigChannel+0x16c>
 8005a4c:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8005a50:	fa00 f00c 	lsl.w	r0, r0, ip
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005a54:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8005a56:	261f      	movs	r6, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005a58:	69d5      	ldr	r5, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a5a:	09a7      	lsrs	r7, r4, #6
  MODIFY_REG(*preg,
 8005a5c:	4034      	ands	r4, r6
 8005a5e:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a60:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8005a64:	f007 070c 	and.w	r7, r7, #12
  MODIFY_REG(*preg,
 8005a68:	40a6      	lsls	r6, r4
 8005a6a:	61d0      	str	r0, [r2, #28]
 8005a6c:	fa0c f404 	lsl.w	r4, ip, r4
 8005a70:	5978      	ldr	r0, [r7, r5]
 8005a72:	ea20 0006 	bic.w	r0, r0, r6
 8005a76:	4320      	orrs	r0, r4
 8005a78:	5178      	str	r0, [r7, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a7a:	6890      	ldr	r0, [r2, #8]
 8005a7c:	0745      	lsls	r5, r0, #29
 8005a7e:	f100 8081 	bmi.w	8005b84 <HAL_ADC_ConfigChannel+0x168>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a82:	6895      	ldr	r5, [r2, #8]
 8005a84:	f015 0508 	ands.w	r5, r5, #8
 8005a88:	d157      	bne.n	8005b3a <HAL_ADC_ConfigChannel+0x11e>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005a8a:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a8c:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8005a90:	2007      	movs	r0, #7
 8005a92:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a94:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8005a98:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a9c:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8005aa0:	fa00 fe04 	lsl.w	lr, r0, r4
 8005aa4:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005aa8:	4fc3      	ldr	r7, [pc, #780]	; (8005db8 <HAL_ADC_ConfigChannel+0x39c>)
 8005aaa:	f85c 0006 	ldr.w	r0, [ip, r6]
 8005aae:	ea20 000e 	bic.w	r0, r0, lr
 8005ab2:	4320      	orrs	r0, r4
 8005ab4:	f84c 0006 	str.w	r0, [ip, r6]
 8005ab8:	6838      	ldr	r0, [r7, #0]
 8005aba:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8005abe:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8005ac2:	f000 8098 	beq.w	8005bf6 <HAL_ADC_ConfigChannel+0x1da>
 8005ac6:	68d0      	ldr	r0, [r2, #12]
 8005ac8:	68d6      	ldr	r6, [r2, #12]
 8005aca:	f010 0f10 	tst.w	r0, #16
 8005ace:	6948      	ldr	r0, [r1, #20]
 8005ad0:	f040 8107 	bne.w	8005ce2 <HAL_ADC_ConfigChannel+0x2c6>
 8005ad4:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8005ad8:	0076      	lsls	r6, r6, #1
 8005ada:	fa00 f606 	lsl.w	r6, r0, r6
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005ade:	690f      	ldr	r7, [r1, #16]
 8005ae0:	2f04      	cmp	r7, #4
 8005ae2:	f000 80e1 	beq.w	8005ca8 <HAL_ADC_ConfigChannel+0x28c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ae6:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 8005aea:	6808      	ldr	r0, [r1, #0]
 8005aec:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8005af0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005af4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8005af8:	ea40 000c 	orr.w	r0, r0, ip
 8005afc:	4330      	orrs	r0, r6
 8005afe:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005b02:	7e4f      	ldrb	r7, [r1, #25]
 8005b04:	690e      	ldr	r6, [r1, #16]
 8005b06:	2f01      	cmp	r7, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005b08:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8005b0c:	bf0c      	ite	eq
 8005b0e:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 8005b12:	2700      	movne	r7, #0
 8005b14:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005b18:	4338      	orrs	r0, r7
 8005b1a:	f844 0026 	str.w	r0, [r4, r6, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005b1e:	7e0c      	ldrb	r4, [r1, #24]
 8005b20:	6908      	ldr	r0, [r1, #16]
 8005b22:	2c01      	cmp	r4, #1
 8005b24:	d104      	bne.n	8005b30 <HAL_ADC_ConfigChannel+0x114>
 8005b26:	f000 001f 	and.w	r0, r0, #31
 8005b2a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8005b2e:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005b30:	6910      	ldr	r0, [r2, #16]
 8005b32:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8005b36:	4305      	orrs	r5, r0
 8005b38:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b3a:	6890      	ldr	r0, [r2, #8]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b3c:	07c4      	lsls	r4, r0, #31
 8005b3e:	d416      	bmi.n	8005b6e <HAL_ADC_ConfigChannel+0x152>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005b40:	68ce      	ldr	r6, [r1, #12]
 8005b42:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8005b44:	f006 0718 	and.w	r7, r6, #24
 8005b48:	4c9c      	ldr	r4, [pc, #624]	; (8005dbc <HAL_ADC_ConfigChannel+0x3a0>)
 8005b4a:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 8005b4e:	40fc      	lsrs	r4, r7
 8005b50:	f3c0 0713 	ubfx	r7, r0, #0, #20

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005b54:	f8df c288 	ldr.w	ip, [pc, #648]	; 8005de0 <HAL_ADC_ConfigChannel+0x3c4>
 8005b58:	4004      	ands	r4, r0
 8005b5a:	ea25 0507 	bic.w	r5, r5, r7
 8005b5e:	4566      	cmp	r6, ip
 8005b60:	ea44 0405 	orr.w	r4, r4, r5
 8005b64:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 8005b68:	d04d      	beq.n	8005c06 <HAL_ADC_ConfigChannel+0x1ea>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	db15      	blt.n	8005b9a <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b6e:	2000      	movs	r0, #0
 8005b70:	e003      	b.n	8005b7a <HAL_ADC_ConfigChannel+0x15e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b74:	f042 0220 	orr.w	r2, r2, #32
 8005b78:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8005b80:	b003      	add	sp, #12
 8005b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b84:	6890      	ldr	r0, [r2, #8]
 8005b86:	e7d8      	b.n	8005b3a <HAL_ADC_ConfigChannel+0x11e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b88:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005b8c:	b115      	cbz	r5, 8005b94 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8005b8e:	fab5 f585 	clz	r5, r5
 8005b92:	40a8      	lsls	r0, r5
 8005b94:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8005b98:	e75c      	b.n	8005a54 <HAL_ADC_ConfigChannel+0x38>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b9a:	4989      	ldr	r1, [pc, #548]	; (8005dc0 <HAL_ADC_ConfigChannel+0x3a4>)
 8005b9c:	428a      	cmp	r2, r1
 8005b9e:	f000 80c6 	beq.w	8005d2e <HAL_ADC_ConfigChannel+0x312>
 8005ba2:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8005ba6:	428a      	cmp	r2, r1
 8005ba8:	f000 80c1 	beq.w	8005d2e <HAL_ADC_ConfigChannel+0x312>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bac:	4e85      	ldr	r6, [pc, #532]	; (8005dc4 <HAL_ADC_ConfigChannel+0x3a8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005bae:	4d86      	ldr	r5, [pc, #536]	; (8005dc8 <HAL_ADC_ConfigChannel+0x3ac>)
 8005bb0:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bb2:	68b4      	ldr	r4, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005bb4:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005bb8:	43e4      	mvns	r4, r4
 8005bba:	f004 0401 	and.w	r4, r4, #1
 8005bbe:	2c00      	cmp	r4, #0
 8005bc0:	f000 80c3 	beq.w	8005d4a <HAL_ADC_ConfigChannel+0x32e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005bc4:	4c81      	ldr	r4, [pc, #516]	; (8005dcc <HAL_ADC_ConfigChannel+0x3b0>)
 8005bc6:	42a0      	cmp	r0, r4
 8005bc8:	f000 810c 	beq.w	8005de4 <HAL_ADC_ConfigChannel+0x3c8>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005bcc:	4c80      	ldr	r4, [pc, #512]	; (8005dd0 <HAL_ADC_ConfigChannel+0x3b4>)
 8005bce:	42a0      	cmp	r0, r4
 8005bd0:	f000 812b 	beq.w	8005e2a <HAL_ADC_ConfigChannel+0x40e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005bd4:	4c7f      	ldr	r4, [pc, #508]	; (8005dd4 <HAL_ADC_ConfigChannel+0x3b8>)
 8005bd6:	42a0      	cmp	r0, r4
 8005bd8:	d1c9      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 8005bda:	0249      	lsls	r1, r1, #9
 8005bdc:	d4c7      	bmi.n	8005b6e <HAL_ADC_ConfigChannel+0x152>
 8005bde:	4979      	ldr	r1, [pc, #484]	; (8005dc4 <HAL_ADC_ConfigChannel+0x3a8>)
 8005be0:	428a      	cmp	r2, r1
 8005be2:	d1c4      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005be4:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005be6:	2000      	movs	r0, #0
 8005be8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005bec:	4332      	orrs	r2, r6
 8005bee:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005bf2:	60aa      	str	r2, [r5, #8]
}
 8005bf4:	e7c1      	b.n	8005b7a <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005bf6:	68d6      	ldr	r6, [r2, #12]
 8005bf8:	6948      	ldr	r0, [r1, #20]
 8005bfa:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8005bfe:	0076      	lsls	r6, r6, #1
 8005c00:	fa00 f606 	lsl.w	r6, r0, r6
 8005c04:	e76b      	b.n	8005ade <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c06:	2f00      	cmp	r7, #0
 8005c08:	d071      	beq.n	8005cee <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005c0e:	2c00      	cmp	r4, #0
 8005c10:	f000 80af 	beq.w	8005d72 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8005c14:	fab4 f484 	clz	r4, r4
 8005c18:	3401      	adds	r4, #1
 8005c1a:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c1e:	2c09      	cmp	r4, #9
 8005c20:	f240 80a7 	bls.w	8005d72 <HAL_ADC_ConfigChannel+0x356>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c24:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005c28:	2d00      	cmp	r5, #0
 8005c2a:	f000 8112 	beq.w	8005e52 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8005c2e:	fab5 f585 	clz	r5, r5
 8005c32:	3501      	adds	r5, #1
 8005c34:	06ad      	lsls	r5, r5, #26
 8005c36:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c3a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005c3e:	2c00      	cmp	r4, #0
 8005c40:	f000 8105 	beq.w	8005e4e <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 8005c44:	2601      	movs	r6, #1
 8005c46:	fab4 f484 	clz	r4, r4
 8005c4a:	4434      	add	r4, r6
 8005c4c:	f004 041f 	and.w	r4, r4, #31
 8005c50:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c54:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c56:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	f000 80f5 	beq.w	8005e4a <HAL_ADC_ConfigChannel+0x42e>
  return __builtin_clz(value);
 8005c60:	fab0 f480 	clz	r4, r0
 8005c64:	3401      	adds	r4, #1
 8005c66:	f004 041f 	and.w	r4, r4, #31
 8005c6a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005c6e:	f1a4 001e 	sub.w	r0, r4, #30
 8005c72:	0500      	lsls	r0, r0, #20
 8005c74:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c78:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8005c7a:	f04f 0c07 	mov.w	ip, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c7e:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8005c82:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c84:	0dc7      	lsrs	r7, r0, #23
  MODIFY_REG(*preg,
 8005c86:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c8a:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8005c8e:	fa0c fc00 	lsl.w	ip, ip, r0
 8005c92:	4086      	lsls	r6, r0
 8005c94:	597c      	ldr	r4, [r7, r5]
 8005c96:	ea24 000c 	bic.w	r0, r4, ip
 8005c9a:	4330      	orrs	r0, r6
 8005c9c:	5178      	str	r0, [r7, r5]
 8005c9e:	6808      	ldr	r0, [r1, #0]
}
 8005ca0:	e763      	b.n	8005b6a <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8005ca2:	2002      	movs	r0, #2
}
 8005ca4:	b003      	add	sp, #12
 8005ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ca8:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005caa:	680d      	ldr	r5, [r1, #0]
 8005cac:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005cb0:	06ac      	lsls	r4, r5, #26
 8005cb2:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8005cb6:	d030      	beq.n	8005d1a <HAL_ADC_ConfigChannel+0x2fe>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005cb8:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005cba:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005cbe:	4284      	cmp	r4, r0
 8005cc0:	d026      	beq.n	8005d10 <HAL_ADC_ConfigChannel+0x2f4>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005cc2:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005cc4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005cc8:	4284      	cmp	r4, r0
 8005cca:	d02b      	beq.n	8005d24 <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ccc:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005cce:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005cd2:	4284      	cmp	r4, r0
 8005cd4:	f47f af31 	bne.w	8005b3a <HAL_ADC_ConfigChannel+0x11e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005cd8:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005cda:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005cde:	66d0      	str	r0, [r2, #108]	; 0x6c
 8005ce0:	e72b      	b.n	8005b3a <HAL_ADC_ConfigChannel+0x11e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005ce2:	0876      	lsrs	r6, r6, #1
 8005ce4:	f006 0608 	and.w	r6, r6, #8
 8005ce8:	fa00 f606 	lsl.w	r6, r0, r6
 8005cec:	e6f7      	b.n	8005ade <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005cee:	0e80      	lsrs	r0, r0, #26
 8005cf0:	1c44      	adds	r4, r0, #1
 8005cf2:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cf6:	2e09      	cmp	r6, #9
 8005cf8:	d82d      	bhi.n	8005d56 <HAL_ADC_ConfigChannel+0x33a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005cfa:	06a5      	lsls	r5, r4, #26
 8005cfc:	2401      	movs	r4, #1
 8005cfe:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005d02:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005d06:	fa04 f606 	lsl.w	r6, r4, r6
 8005d0a:	0500      	lsls	r0, r0, #20
 8005d0c:	4335      	orrs	r5, r6
 8005d0e:	e7b3      	b.n	8005c78 <HAL_ADC_ConfigChannel+0x25c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005d10:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005d12:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d16:	6650      	str	r0, [r2, #100]	; 0x64
 8005d18:	e7d3      	b.n	8005cc2 <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005d1a:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005d1c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d20:	6610      	str	r0, [r2, #96]	; 0x60
 8005d22:	e7c9      	b.n	8005cb8 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005d24:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005d26:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d2a:	6690      	str	r0, [r2, #104]	; 0x68
 8005d2c:	e7ce      	b.n	8005ccc <HAL_ADC_ConfigChannel+0x2b0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005d2e:	492a      	ldr	r1, [pc, #168]	; (8005dd8 <HAL_ADC_ConfigChannel+0x3bc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d30:	4e23      	ldr	r6, [pc, #140]	; (8005dc0 <HAL_ADC_ConfigChannel+0x3a4>)
 8005d32:	4c2a      	ldr	r4, [pc, #168]	; (8005ddc <HAL_ADC_ConfigChannel+0x3c0>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d34:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005d36:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d38:	68b7      	ldr	r7, [r6, #8]
 8005d3a:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005d3c:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d40:	433c      	orrs	r4, r7
 8005d42:	43e4      	mvns	r4, r4
 8005d44:	f004 0401 	and.w	r4, r4, #1
 8005d48:	e739      	b.n	8005bbe <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8005d4c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d4e:	f042 0220 	orr.w	r2, r2, #32
 8005d52:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8005d54:	e711      	b.n	8005b7a <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d56:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005d5a:	2701      	movs	r7, #1
 8005d5c:	06a5      	lsls	r5, r4, #26
 8005d5e:	381e      	subs	r0, #30
 8005d60:	fa07 f606 	lsl.w	r6, r7, r6
 8005d64:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005d68:	0500      	lsls	r0, r0, #20
 8005d6a:	4335      	orrs	r5, r6
 8005d6c:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8005d70:	e782      	b.n	8005c78 <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d72:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005d76:	2c00      	cmp	r4, #0
 8005d78:	d073      	beq.n	8005e62 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8005d7a:	fab4 f484 	clz	r4, r4
 8005d7e:	3401      	adds	r4, #1
 8005d80:	06a4      	lsls	r4, r4, #26
 8005d82:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d86:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 8005d8a:	2e00      	cmp	r6, #0
 8005d8c:	d067      	beq.n	8005e5e <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 8005d8e:	2501      	movs	r5, #1
 8005d90:	fab6 f686 	clz	r6, r6
 8005d94:	442e      	add	r6, r5
 8005d96:	f006 061f 	and.w	r6, r6, #31
 8005d9a:	40b5      	lsls	r5, r6
 8005d9c:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d9e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005da2:	2800      	cmp	r0, #0
 8005da4:	d058      	beq.n	8005e58 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8005da6:	fab0 f480 	clz	r4, r0
 8005daa:	3401      	adds	r4, #1
 8005dac:	f004 041f 	and.w	r4, r4, #31
 8005db0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005db4:	0520      	lsls	r0, r4, #20
 8005db6:	e75f      	b.n	8005c78 <HAL_ADC_ConfigChannel+0x25c>
 8005db8:	5c001000 	.word	0x5c001000
 8005dbc:	000fffff 	.word	0x000fffff
 8005dc0:	40022000 	.word	0x40022000
 8005dc4:	58026000 	.word	0x58026000
 8005dc8:	58026300 	.word	0x58026300
 8005dcc:	cb840000 	.word	0xcb840000
 8005dd0:	c7520000 	.word	0xc7520000
 8005dd4:	cfb80000 	.word	0xcfb80000
 8005dd8:	40022300 	.word	0x40022300
 8005ddc:	40022100 	.word	0x40022100
 8005de0:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005de4:	0208      	lsls	r0, r1, #8
 8005de6:	f53f aec2 	bmi.w	8005b6e <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005dea:	491f      	ldr	r1, [pc, #124]	; (8005e68 <HAL_ADC_ConfigChannel+0x44c>)
 8005dec:	428a      	cmp	r2, r1
 8005dee:	f47f aebe 	bne.w	8005b6e <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005df2:	4a1e      	ldr	r2, [pc, #120]	; (8005e6c <HAL_ADC_ConfigChannel+0x450>)
 8005df4:	481e      	ldr	r0, [pc, #120]	; (8005e70 <HAL_ADC_ConfigChannel+0x454>)
 8005df6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005df8:	68a9      	ldr	r1, [r5, #8]
 8005dfa:	0992      	lsrs	r2, r2, #6
 8005dfc:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005e00:	fba0 0202 	umull	r0, r2, r0, r2
 8005e04:	4331      	orrs	r1, r6
 8005e06:	0992      	lsrs	r2, r2, #6
 8005e08:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005e0c:	3201      	adds	r2, #1
 8005e0e:	60a9      	str	r1, [r5, #8]
 8005e10:	0052      	lsls	r2, r2, #1
 8005e12:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8005e14:	9a01      	ldr	r2, [sp, #4]
 8005e16:	2a00      	cmp	r2, #0
 8005e18:	f43f aea9 	beq.w	8005b6e <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 8005e1c:	9a01      	ldr	r2, [sp, #4]
 8005e1e:	3a01      	subs	r2, #1
 8005e20:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8005e22:	9a01      	ldr	r2, [sp, #4]
 8005e24:	2a00      	cmp	r2, #0
 8005e26:	d1f9      	bne.n	8005e1c <HAL_ADC_ConfigChannel+0x400>
 8005e28:	e6a1      	b.n	8005b6e <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e2a:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8005e2e:	f47f ae9e 	bne.w	8005b6e <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e32:	490d      	ldr	r1, [pc, #52]	; (8005e68 <HAL_ADC_ConfigChannel+0x44c>)
 8005e34:	428a      	cmp	r2, r1
 8005e36:	f47f ae9a 	bne.w	8005b6e <HAL_ADC_ConfigChannel+0x152>
 8005e3a:	68aa      	ldr	r2, [r5, #8]
 8005e3c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005e40:	4332      	orrs	r2, r6
 8005e42:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005e46:	60aa      	str	r2, [r5, #8]
}
 8005e48:	e697      	b.n	8005b7a <HAL_ADC_ConfigChannel+0x15e>
 8005e4a:	480a      	ldr	r0, [pc, #40]	; (8005e74 <HAL_ADC_ConfigChannel+0x458>)
 8005e4c:	e714      	b.n	8005c78 <HAL_ADC_ConfigChannel+0x25c>
 8005e4e:	2402      	movs	r4, #2
 8005e50:	e700      	b.n	8005c54 <HAL_ADC_ConfigChannel+0x238>
 8005e52:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8005e56:	e6f0      	b.n	8005c3a <HAL_ADC_ConfigChannel+0x21e>
 8005e58:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8005e5c:	e70c      	b.n	8005c78 <HAL_ADC_ConfigChannel+0x25c>
 8005e5e:	2502      	movs	r5, #2
 8005e60:	e79c      	b.n	8005d9c <HAL_ADC_ConfigChannel+0x380>
 8005e62:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8005e66:	e78e      	b.n	8005d86 <HAL_ADC_ConfigChannel+0x36a>
 8005e68:	58026000 	.word	0x58026000
 8005e6c:	24000000 	.word	0x24000000
 8005e70:	053e2d63 	.word	0x053e2d63
 8005e74:	fe500000 	.word	0xfe500000

08005e78 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e78:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	07d1      	lsls	r1, r2, #31
 8005e7e:	d501      	bpl.n	8005e84 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e80:	2000      	movs	r0, #0
}
 8005e82:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005e84:	6899      	ldr	r1, [r3, #8]
 8005e86:	4a21      	ldr	r2, [pc, #132]	; (8005f0c <ADC_Enable+0x94>)
 8005e88:	4211      	tst	r1, r2
{
 8005e8a:	b570      	push	{r4, r5, r6, lr}
 8005e8c:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005e8e:	d008      	beq.n	8005ea2 <ADC_Enable+0x2a>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e90:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 8005e92:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e94:	f043 0310 	orr.w	r3, r3, #16
 8005e98:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e9c:	4303      	orrs	r3, r0
 8005e9e:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8005ea0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8005ea2:	6899      	ldr	r1, [r3, #8]
 8005ea4:	4a1a      	ldr	r2, [pc, #104]	; (8005f10 <ADC_Enable+0x98>)
 8005ea6:	400a      	ands	r2, r1
 8005ea8:	f042 0201 	orr.w	r2, r2, #1
 8005eac:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005eae:	f7ff fcf7 	bl	80058a0 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	4a17      	ldr	r2, [pc, #92]	; (8005f14 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8005eb6:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d01f      	beq.n	8005efc <ADC_Enable+0x84>
 8005ebc:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d01b      	beq.n	8005efc <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005ec4:	4a14      	ldr	r2, [pc, #80]	; (8005f18 <ADC_Enable+0xa0>)
 8005ec6:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	07d6      	lsls	r6, r2, #31
 8005ecc:	d414      	bmi.n	8005ef8 <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 8005ece:	4e10      	ldr	r6, [pc, #64]	; (8005f10 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ed0:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ed2:	07d0      	lsls	r0, r2, #31
 8005ed4:	d404      	bmi.n	8005ee0 <ADC_Enable+0x68>
  MODIFY_REG(ADCx->CR,
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	4032      	ands	r2, r6
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ee0:	f7ff fcde 	bl	80058a0 <HAL_GetTick>
 8005ee4:	1b43      	subs	r3, r0, r5
 8005ee6:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ee8:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005eea:	d902      	bls.n	8005ef2 <ADC_Enable+0x7a>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	07d1      	lsls	r1, r2, #31
 8005ef0:	d5ce      	bpl.n	8005e90 <ADC_Enable+0x18>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	07d2      	lsls	r2, r2, #31
 8005ef6:	d5eb      	bpl.n	8005ed0 <ADC_Enable+0x58>
  return HAL_OK;
 8005ef8:	2000      	movs	r0, #0
}
 8005efa:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005efc:	4a07      	ldr	r2, [pc, #28]	; (8005f1c <ADC_Enable+0xa4>)
 8005efe:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f00:	06d2      	lsls	r2, r2, #27
 8005f02:	d0e1      	beq.n	8005ec8 <ADC_Enable+0x50>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f04:	4a06      	ldr	r2, [pc, #24]	; (8005f20 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d1de      	bne.n	8005ec8 <ADC_Enable+0x50>
 8005f0a:	e7f5      	b.n	8005ef8 <ADC_Enable+0x80>
 8005f0c:	8000003f 	.word	0x8000003f
 8005f10:	7fffffc0 	.word	0x7fffffc0
 8005f14:	40022000 	.word	0x40022000
 8005f18:	58026300 	.word	0x58026300
 8005f1c:	40022300 	.word	0x40022300
 8005f20:	40022100 	.word	0x40022100

08005f24 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f24:	4a39      	ldr	r2, [pc, #228]	; (800600c <HAL_ADC_Start+0xe8>)
 8005f26:	6803      	ldr	r3, [r0, #0]
 8005f28:	4293      	cmp	r3, r2
{
 8005f2a:	b570      	push	{r4, r5, r6, lr}
 8005f2c:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f2e:	d045      	beq.n	8005fbc <HAL_ADC_Start+0x98>
 8005f30:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d041      	beq.n	8005fbc <HAL_ADC_Start+0x98>
 8005f38:	4a35      	ldr	r2, [pc, #212]	; (8006010 <HAL_ADC_Start+0xec>)
 8005f3a:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f3c:	689d      	ldr	r5, [r3, #8]
 8005f3e:	f015 0504 	ands.w	r5, r5, #4
 8005f42:	d141      	bne.n	8005fc8 <HAL_ADC_Start+0xa4>
    __HAL_LOCK(hadc);
 8005f44:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d03d      	beq.n	8005fc8 <HAL_ADC_Start+0xa4>
 8005f4c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8005f4e:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8005f50:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8005f54:	f7ff ff90 	bl	8005e78 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d137      	bne.n	8005fcc <HAL_ADC_Start+0xa8>
      ADC_STATE_CLR_SET(hadc->State,
 8005f5c:	6d61      	ldr	r1, [r4, #84]	; 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005f5e:	f006 061f 	and.w	r6, r6, #31
 8005f62:	4a2c      	ldr	r2, [pc, #176]	; (8006014 <HAL_ADC_Start+0xf0>)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f64:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8005f66:	400a      	ands	r2, r1
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f68:	492b      	ldr	r1, [pc, #172]	; (8006018 <HAL_ADC_Start+0xf4>)
      ADC_STATE_CLR_SET(hadc->State,
 8005f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f6e:	428b      	cmp	r3, r1
      ADC_STATE_CLR_SET(hadc->State,
 8005f70:	6562      	str	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f72:	d044      	beq.n	8005ffe <HAL_ADC_Start+0xda>
 8005f74:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f76:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005f78:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005f7c:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f7e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005f80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f84:	d03f      	beq.n	8006006 <HAL_ADC_Start+0xe2>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005f86:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005f88:	f022 0206 	bic.w	r2, r2, #6
 8005f8c:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f8e:	251c      	movs	r5, #28
      __HAL_UNLOCK(hadc);
 8005f90:	2200      	movs	r2, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f92:	428b      	cmp	r3, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f94:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 8005f96:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f9a:	d020      	beq.n	8005fde <HAL_ADC_Start+0xba>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f9c:	2e09      	cmp	r6, #9
 8005f9e:	d918      	bls.n	8005fd2 <HAL_ADC_Start+0xae>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005fa0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fa6:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005fa8:	68cb      	ldr	r3, [r1, #12]
 8005faa:	019b      	lsls	r3, r3, #6
 8005fac:	d505      	bpl.n	8005fba <HAL_ADC_Start+0x96>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005fae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005fb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005fb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fb8:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005fbc:	4a17      	ldr	r2, [pc, #92]	; (800601c <HAL_ADC_Start+0xf8>)
 8005fbe:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005fc0:	689d      	ldr	r5, [r3, #8]
 8005fc2:	f015 0504 	ands.w	r5, r5, #4
 8005fc6:	d0bd      	beq.n	8005f44 <HAL_ADC_Start+0x20>
    tmp_hal_status = HAL_BUSY;
 8005fc8:	2002      	movs	r0, #2
}
 8005fca:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8005fcc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
 8005fd0:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005fd2:	f240 2221 	movw	r2, #545	; 0x221
 8005fd6:	fa22 f606 	lsr.w	r6, r2, r6
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005fda:	07f5      	lsls	r5, r6, #31
 8005fdc:	d5e0      	bpl.n	8005fa0 <HAL_ADC_Start+0x7c>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	0192      	lsls	r2, r2, #6
 8005fe2:	d505      	bpl.n	8005ff0 <HAL_ADC_Start+0xcc>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005fe4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005fe6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005fea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fee:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8005ff0:	6899      	ldr	r1, [r3, #8]
 8005ff2:	4a0b      	ldr	r2, [pc, #44]	; (8006020 <HAL_ADC_Start+0xfc>)
 8005ff4:	400a      	ands	r2, r1
 8005ff6:	f042 0204 	orr.w	r2, r2, #4
 8005ffa:	609a      	str	r2, [r3, #8]
}
 8005ffc:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ffe:	4903      	ldr	r1, [pc, #12]	; (800600c <HAL_ADC_Start+0xe8>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006000:	2e00      	cmp	r6, #0
 8006002:	d0b8      	beq.n	8005f76 <HAL_ADC_Start+0x52>
 8006004:	e7bb      	b.n	8005f7e <HAL_ADC_Start+0x5a>
        ADC_CLEAR_ERRORCODE(hadc);
 8006006:	65a2      	str	r2, [r4, #88]	; 0x58
 8006008:	e7c1      	b.n	8005f8e <HAL_ADC_Start+0x6a>
 800600a:	bf00      	nop
 800600c:	40022000 	.word	0x40022000
 8006010:	58026300 	.word	0x58026300
 8006014:	fffff0fe 	.word	0xfffff0fe
 8006018:	40022100 	.word	0x40022100
 800601c:	40022300 	.word	0x40022300
 8006020:	7fffffc0 	.word	0x7fffffc0

08006024 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006024:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006026:	4a5a      	ldr	r2, [pc, #360]	; (8006190 <ADC_ConfigureBoostMode+0x16c>)
{
 8006028:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800602a:	6803      	ldr	r3, [r0, #0]
 800602c:	4293      	cmp	r3, r2
 800602e:	d029      	beq.n	8006084 <ADC_ConfigureBoostMode+0x60>
 8006030:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006034:	4293      	cmp	r3, r2
 8006036:	d025      	beq.n	8006084 <ADC_ConfigureBoostMode+0x60>
 8006038:	4b56      	ldr	r3, [pc, #344]	; (8006194 <ADC_ConfigureBoostMode+0x170>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8006040:	bf14      	ite	ne
 8006042:	2301      	movne	r3, #1
 8006044:	2300      	moveq	r3, #0
 8006046:	b333      	cbz	r3, 8006096 <ADC_ConfigureBoostMode+0x72>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006048:	f002 f89a 	bl	8008180 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800604c:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 800604e:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8006050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006054:	f000 808b 	beq.w	800616e <ADC_ConfigureBoostMode+0x14a>
 8006058:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800605c:	d06f      	beq.n	800613e <ADC_ConfigureBoostMode+0x11a>
 800605e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006062:	f000 8084 	beq.w	800616e <ADC_ConfigureBoostMode+0x14a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006066:	f7ff fc33 	bl	80058d0 <HAL_GetREVID>
 800606a:	f241 0303 	movw	r3, #4099	; 0x1003
 800606e:	4298      	cmp	r0, r3
 8006070:	d84e      	bhi.n	8006110 <ADC_ConfigureBoostMode+0xec>
  {
    if (freq > 20000000UL)
 8006072:	4b49      	ldr	r3, [pc, #292]	; (8006198 <ADC_ConfigureBoostMode+0x174>)
 8006074:	429d      	cmp	r5, r3
 8006076:	d92d      	bls.n	80060d4 <ADC_ConfigureBoostMode+0xb0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006078:	6822      	ldr	r2, [r4, #0]
 800607a:	6893      	ldr	r3, [r2, #8]
 800607c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006080:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006082:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006084:	4b45      	ldr	r3, [pc, #276]	; (800619c <ADC_ConfigureBoostMode+0x178>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800608c:	bf14      	ite	ne
 800608e:	2301      	movne	r3, #1
 8006090:	2300      	moveq	r3, #0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1d8      	bne.n	8006048 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006096:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800609a:	f003 f985 	bl	80093a8 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800609e:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80060a0:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80060a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80060a6:	d06c      	beq.n	8006182 <ADC_ConfigureBoostMode+0x15e>
 80060a8:	d808      	bhi.n	80060bc <ADC_ConfigureBoostMode+0x98>
 80060aa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80060ae:	d050      	beq.n	8006152 <ADC_ConfigureBoostMode+0x12e>
 80060b0:	d916      	bls.n	80060e0 <ADC_ConfigureBoostMode+0xbc>
 80060b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060b6:	d1d6      	bne.n	8006066 <ADC_ConfigureBoostMode+0x42>
        freq /= 32UL;
 80060b8:	0945      	lsrs	r5, r0, #5
        break;
 80060ba:	e7d4      	b.n	8006066 <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 80060bc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80060c0:	d045      	beq.n	800614e <ADC_ConfigureBoostMode+0x12a>
 80060c2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80060c6:	d1ce      	bne.n	8006066 <ADC_ConfigureBoostMode+0x42>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80060c8:	f7ff fc02 	bl	80058d0 <HAL_GetREVID>
 80060cc:	f241 0303 	movw	r3, #4099	; 0x1003
 80060d0:	4298      	cmp	r0, r3
 80060d2:	d840      	bhi.n	8006156 <ADC_ConfigureBoostMode+0x132>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80060d4:	6822      	ldr	r2, [r4, #0]
 80060d6:	6893      	ldr	r3, [r2, #8]
 80060d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060dc:	6093      	str	r3, [r2, #8]
}
 80060de:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 80060e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060e4:	d006      	beq.n	80060f4 <ADC_ConfigureBoostMode+0xd0>
 80060e6:	d90a      	bls.n	80060fe <ADC_ConfigureBoostMode+0xda>
 80060e8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80060ec:	d002      	beq.n	80060f4 <ADC_ConfigureBoostMode+0xd0>
 80060ee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80060f2:	d1b8      	bne.n	8006066 <ADC_ConfigureBoostMode+0x42>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80060f4:	0c9b      	lsrs	r3, r3, #18
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 80060fc:	e7b3      	b.n	8006066 <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 80060fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006102:	d0f7      	beq.n	80060f4 <ADC_ConfigureBoostMode+0xd0>
 8006104:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006108:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800610c:	d0f2      	beq.n	80060f4 <ADC_ConfigureBoostMode+0xd0>
 800610e:	e7aa      	b.n	8006066 <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8006110:	4b23      	ldr	r3, [pc, #140]	; (80061a0 <ADC_ConfigureBoostMode+0x17c>)
 8006112:	429d      	cmp	r5, r3
 8006114:	d805      	bhi.n	8006122 <ADC_ConfigureBoostMode+0xfe>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006116:	6822      	ldr	r2, [r4, #0]
 8006118:	6893      	ldr	r3, [r2, #8]
 800611a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800611e:	6093      	str	r3, [r2, #8]
}
 8006120:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8006122:	4b20      	ldr	r3, [pc, #128]	; (80061a4 <ADC_ConfigureBoostMode+0x180>)
 8006124:	429d      	cmp	r5, r3
 8006126:	d91a      	bls.n	800615e <ADC_ConfigureBoostMode+0x13a>
    else if (freq <= 25000000UL)
 8006128:	4b1f      	ldr	r3, [pc, #124]	; (80061a8 <ADC_ConfigureBoostMode+0x184>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800612a:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 800612c:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800612e:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8006130:	d829      	bhi.n	8006186 <ADC_ConfigureBoostMode+0x162>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800613a:	6093      	str	r3, [r2, #8]
}
 800613c:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 800613e:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006140:	f7ff fbc6 	bl	80058d0 <HAL_GetREVID>
 8006144:	f241 0303 	movw	r3, #4099	; 0x1003
 8006148:	4298      	cmp	r0, r3
 800614a:	d8e1      	bhi.n	8006110 <ADC_ConfigureBoostMode+0xec>
 800614c:	e791      	b.n	8006072 <ADC_ConfigureBoostMode+0x4e>
        freq /= 128UL;
 800614e:	09c5      	lsrs	r5, r0, #7
        break;
 8006150:	e789      	b.n	8006066 <ADC_ConfigureBoostMode+0x42>
        freq /= 16UL;
 8006152:	0905      	lsrs	r5, r0, #4
        break;
 8006154:	e787      	b.n	8006066 <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8006156:	4b12      	ldr	r3, [pc, #72]	; (80061a0 <ADC_ConfigureBoostMode+0x17c>)
 8006158:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 800615c:	d2db      	bcs.n	8006116 <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800615e:	6822      	ldr	r2, [r4, #0]
 8006160:	6893      	ldr	r3, [r2, #8]
 8006162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800616a:	6093      	str	r3, [r2, #8]
}
 800616c:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800616e:	0c1b      	lsrs	r3, r3, #16
 8006170:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006174:	f7ff fbac 	bl	80058d0 <HAL_GetREVID>
 8006178:	f241 0303 	movw	r3, #4099	; 0x1003
 800617c:	4298      	cmp	r0, r3
 800617e:	d8c7      	bhi.n	8006110 <ADC_ConfigureBoostMode+0xec>
 8006180:	e777      	b.n	8006072 <ADC_ConfigureBoostMode+0x4e>
        freq /= 64UL;
 8006182:	0985      	lsrs	r5, r0, #6
        break;
 8006184:	e76f      	b.n	8006066 <ADC_ConfigureBoostMode+0x42>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006186:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800618a:	6093      	str	r3, [r2, #8]
}
 800618c:	bd38      	pop	{r3, r4, r5, pc}
 800618e:	bf00      	nop
 8006190:	40022000 	.word	0x40022000
 8006194:	58026300 	.word	0x58026300
 8006198:	01312d00 	.word	0x01312d00
 800619c:	40022300 	.word	0x40022300
 80061a0:	00bebc21 	.word	0x00bebc21
 80061a4:	017d7841 	.word	0x017d7841
 80061a8:	02faf081 	.word	0x02faf081

080061ac <HAL_ADC_Init>:
{
 80061ac:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80061ae:	2300      	movs	r3, #0
{
 80061b0:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80061b2:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80061b4:	2800      	cmp	r0, #0
 80061b6:	f000 80d0 	beq.w	800635a <HAL_ADC_Init+0x1ae>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80061ba:	6d45      	ldr	r5, [r0, #84]	; 0x54
 80061bc:	4604      	mov	r4, r0
 80061be:	2d00      	cmp	r5, #0
 80061c0:	f000 80ba 	beq.w	8006338 <HAL_ADC_Init+0x18c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80061c4:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80061c6:	6893      	ldr	r3, [r2, #8]
 80061c8:	009d      	lsls	r5, r3, #2
 80061ca:	d503      	bpl.n	80061d4 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80061cc:	6891      	ldr	r1, [r2, #8]
 80061ce:	4b71      	ldr	r3, [pc, #452]	; (8006394 <HAL_ADC_Init+0x1e8>)
 80061d0:	400b      	ands	r3, r1
 80061d2:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80061d4:	6893      	ldr	r3, [r2, #8]
 80061d6:	00d8      	lsls	r0, r3, #3
 80061d8:	d416      	bmi.n	8006208 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80061da:	4b6f      	ldr	r3, [pc, #444]	; (8006398 <HAL_ADC_Init+0x1ec>)
 80061dc:	4d6f      	ldr	r5, [pc, #444]	; (800639c <HAL_ADC_Init+0x1f0>)
 80061de:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80061e0:	6890      	ldr	r0, [r2, #8]
 80061e2:	099b      	lsrs	r3, r3, #6
 80061e4:	496e      	ldr	r1, [pc, #440]	; (80063a0 <HAL_ADC_Init+0x1f4>)
 80061e6:	fba5 5303 	umull	r5, r3, r5, r3
 80061ea:	4001      	ands	r1, r0
 80061ec:	099b      	lsrs	r3, r3, #6
 80061ee:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80061f2:	3301      	adds	r3, #1
 80061f4:	6091      	str	r1, [r2, #8]
 80061f6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80061f8:	9b01      	ldr	r3, [sp, #4]
 80061fa:	b12b      	cbz	r3, 8006208 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 80061fc:	9b01      	ldr	r3, [sp, #4]
 80061fe:	3b01      	subs	r3, #1
 8006200:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006202:	9b01      	ldr	r3, [sp, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f9      	bne.n	80061fc <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006208:	6893      	ldr	r3, [r2, #8]
 800620a:	00d9      	lsls	r1, r3, #3
 800620c:	d424      	bmi.n	8006258 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800620e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006210:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006212:	f043 0310 	orr.w	r3, r3, #16
 8006216:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006218:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800621a:	432b      	orrs	r3, r5
 800621c:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800621e:	6893      	ldr	r3, [r2, #8]
 8006220:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006224:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006226:	d11d      	bne.n	8006264 <HAL_ADC_Init+0xb8>
 8006228:	06db      	lsls	r3, r3, #27
 800622a:	d41b      	bmi.n	8006264 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 800622c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800622e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006232:	f043 0302 	orr.w	r3, r3, #2
 8006236:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006238:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800623a:	07de      	lsls	r6, r3, #31
 800623c:	d428      	bmi.n	8006290 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800623e:	4b59      	ldr	r3, [pc, #356]	; (80063a4 <HAL_ADC_Init+0x1f8>)
 8006240:	429a      	cmp	r2, r3
 8006242:	d017      	beq.n	8006274 <HAL_ADC_Init+0xc8>
 8006244:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006248:	429a      	cmp	r2, r3
 800624a:	d013      	beq.n	8006274 <HAL_ADC_Init+0xc8>
 800624c:	4b56      	ldr	r3, [pc, #344]	; (80063a8 <HAL_ADC_Init+0x1fc>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	07d9      	lsls	r1, r3, #31
 8006252:	d41d      	bmi.n	8006290 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006254:	4a55      	ldr	r2, [pc, #340]	; (80063ac <HAL_ADC_Init+0x200>)
 8006256:	e015      	b.n	8006284 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006258:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800625a:	2500      	movs	r5, #0
 800625c:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006260:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006262:	d0e1      	beq.n	8006228 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006264:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006266:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006268:	f043 0310 	orr.w	r3, r3, #16
}
 800626c:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800626e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006270:	b002      	add	sp, #8
 8006272:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006274:	4a4b      	ldr	r2, [pc, #300]	; (80063a4 <HAL_ADC_Init+0x1f8>)
 8006276:	4b4e      	ldr	r3, [pc, #312]	; (80063b0 <HAL_ADC_Init+0x204>)
 8006278:	6892      	ldr	r2, [r2, #8]
 800627a:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800627c:	4313      	orrs	r3, r2
 800627e:	07d8      	lsls	r0, r3, #31
 8006280:	d406      	bmi.n	8006290 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006282:	4a4c      	ldr	r2, [pc, #304]	; (80063b4 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006284:	6893      	ldr	r3, [r2, #8]
 8006286:	6861      	ldr	r1, [r4, #4]
 8006288:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800628c:	430b      	orrs	r3, r1
 800628e:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006290:	f7ff fb1e 	bl	80058d0 <HAL_GetREVID>
 8006294:	f241 0303 	movw	r3, #4099	; 0x1003
 8006298:	68a1      	ldr	r1, [r4, #8]
 800629a:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800629c:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800629e:	d851      	bhi.n	8006344 <HAL_ADC_Init+0x198>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80062a0:	7d66      	ldrb	r6, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80062a2:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80062a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80062a6:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
 80062aa:	4302      	orrs	r2, r0
 80062ac:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d103      	bne.n	80062ba <HAL_ADC_Init+0x10e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80062b2:	6a23      	ldr	r3, [r4, #32]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80062ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062bc:	b123      	cbz	r3, 80062c8 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80062be:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80062c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80062c4:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80062c6:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	493b      	ldr	r1, [pc, #236]	; (80063b8 <HAL_ADC_Init+0x20c>)
 80062cc:	68d8      	ldr	r0, [r3, #12]
 80062ce:	4001      	ands	r1, r0
 80062d0:	430a      	orrs	r2, r1
 80062d2:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80062da:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80062dc:	d11c      	bne.n	8006318 <HAL_ADC_Init+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80062de:	0712      	lsls	r2, r2, #28
 80062e0:	d41a      	bmi.n	8006318 <HAL_ADC_Init+0x16c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80062e2:	68d9      	ldr	r1, [r3, #12]
 80062e4:	4a35      	ldr	r2, [pc, #212]	; (80063bc <HAL_ADC_Init+0x210>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80062e6:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80062e8:	400a      	ands	r2, r1
 80062ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80062ec:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 80062f0:	430a      	orrs	r2, r1
 80062f2:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80062f4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80062f8:	2a01      	cmp	r2, #1
 80062fa:	d03a      	beq.n	8006372 <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80062fc:	691a      	ldr	r2, [r3, #16]
 80062fe:	f022 0201 	bic.w	r2, r2, #1
 8006302:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006304:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006306:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800630a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800630e:	430a      	orrs	r2, r1
 8006310:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006312:	f7ff fe87 	bl	8006024 <ADC_ConfigureBoostMode>
 8006316:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006318:	68e2      	ldr	r2, [r4, #12]
 800631a:	2a01      	cmp	r2, #1
 800631c:	d021      	beq.n	8006362 <HAL_ADC_Init+0x1b6>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800631e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006320:	f022 020f 	bic.w	r2, r2, #15
 8006324:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006326:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8006328:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800632a:	f023 0303 	bic.w	r3, r3, #3
 800632e:	f043 0301 	orr.w	r3, r3, #1
 8006332:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006334:	b002      	add	sp, #8
 8006336:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8006338:	f7fd fda0 	bl	8003e7c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800633c:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 800633e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8006342:	e73f      	b.n	80061c4 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006344:	2910      	cmp	r1, #16
 8006346:	d1ab      	bne.n	80062a0 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006348:	7d60      	ldrb	r0, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800634a:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800634c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800634e:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8006352:	430a      	orrs	r2, r1
 8006354:	f042 021c 	orr.w	r2, r2, #28
 8006358:	e7a9      	b.n	80062ae <HAL_ADC_Init+0x102>
    return HAL_ERROR;
 800635a:	2501      	movs	r5, #1
}
 800635c:	4628      	mov	r0, r5
 800635e:	b002      	add	sp, #8
 8006360:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006362:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006364:	69a2      	ldr	r2, [r4, #24]
 8006366:	f021 010f 	bic.w	r1, r1, #15
 800636a:	3a01      	subs	r2, #1
 800636c:	430a      	orrs	r2, r1
 800636e:	631a      	str	r2, [r3, #48]	; 0x30
 8006370:	e7d9      	b.n	8006326 <HAL_ADC_Init+0x17a>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006372:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8006376:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8006378:	3901      	subs	r1, #1
 800637a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800637c:	4332      	orrs	r2, r6
 800637e:	691e      	ldr	r6, [r3, #16]
 8006380:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006384:	490e      	ldr	r1, [pc, #56]	; (80063c0 <HAL_ADC_Init+0x214>)
 8006386:	4302      	orrs	r2, r0
 8006388:	4031      	ands	r1, r6
 800638a:	430a      	orrs	r2, r1
 800638c:	f042 0201 	orr.w	r2, r2, #1
 8006390:	611a      	str	r2, [r3, #16]
 8006392:	e7b7      	b.n	8006304 <HAL_ADC_Init+0x158>
 8006394:	5fffffc0 	.word	0x5fffffc0
 8006398:	24000000 	.word	0x24000000
 800639c:	053e2d63 	.word	0x053e2d63
 80063a0:	6fffffc0 	.word	0x6fffffc0
 80063a4:	40022000 	.word	0x40022000
 80063a8:	58026000 	.word	0x58026000
 80063ac:	58026300 	.word	0x58026300
 80063b0:	40022100 	.word	0x40022100
 80063b4:	40022300 	.word	0x40022300
 80063b8:	fff0c003 	.word	0xfff0c003
 80063bc:	ffffbffc 	.word	0xffffbffc
 80063c0:	fc00f81e 	.word	0xfc00f81e

080063c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80063c4:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80063c6:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 80063ca:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80063cc:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80063ce:	2a01      	cmp	r2, #1
 80063d0:	d04d      	beq.n	800646e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80063d2:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80063d4:	4c2b      	ldr	r4, [pc, #172]	; (8006484 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80063d6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80063d8:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80063da:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80063dc:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80063de:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 80063e0:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80063e4:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80063e6:	d008      	beq.n	80063fa <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063e8:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80063ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063ee:	f041 0120 	orr.w	r1, r1, #32
 80063f2:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80063f4:	b01a      	add	sp, #104	; 0x68
 80063f6:	bcf0      	pop	{r4, r5, r6, r7}
 80063f8:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063fa:	4c23      	ldr	r4, [pc, #140]	; (8006488 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80063fc:	68a2      	ldr	r2, [r4, #8]
 80063fe:	0752      	lsls	r2, r2, #29
 8006400:	d50b      	bpl.n	800641a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006402:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006406:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006408:	f042 0220 	orr.w	r2, r2, #32
 800640c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8006414:	b01a      	add	sp, #104	; 0x68
 8006416:	bcf0      	pop	{r4, r5, r6, r7}
 8006418:	4770      	bx	lr
 800641a:	68a8      	ldr	r0, [r5, #8]
 800641c:	f010 0004 	ands.w	r0, r0, #4
 8006420:	d1f0      	bne.n	8006404 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006422:	b1c6      	cbz	r6, 8006456 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006424:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006490 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8006428:	684f      	ldr	r7, [r1, #4]
 800642a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800642e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006432:	433a      	orrs	r2, r7
 8006434:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006438:	68ad      	ldr	r5, [r5, #8]
 800643a:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800643c:	432a      	orrs	r2, r5
 800643e:	07d4      	lsls	r4, r2, #31
 8006440:	d413      	bmi.n	800646a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 8006442:	688a      	ldr	r2, [r1, #8]
 8006444:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8006448:	4910      	ldr	r1, [pc, #64]	; (800648c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 800644a:	4316      	orrs	r6, r2
 800644c:	4021      	ands	r1, r4
 800644e:	430e      	orrs	r6, r1
 8006450:	f8cc 6008 	str.w	r6, [ip, #8]
 8006454:	e7db      	b.n	800640e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006456:	490e      	ldr	r1, [pc, #56]	; (8006490 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8006458:	688a      	ldr	r2, [r1, #8]
 800645a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800645e:	608a      	str	r2, [r1, #8]
 8006460:	68a8      	ldr	r0, [r5, #8]
 8006462:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006464:	4302      	orrs	r2, r0
 8006466:	07d0      	lsls	r0, r2, #31
 8006468:	d505      	bpl.n	8006476 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800646a:	2000      	movs	r0, #0
 800646c:	e7cf      	b.n	800640e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 800646e:	2002      	movs	r0, #2
}
 8006470:	b01a      	add	sp, #104	; 0x68
 8006472:	bcf0      	pop	{r4, r5, r6, r7}
 8006474:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006476:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006478:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800647a:	4a04      	ldr	r2, [pc, #16]	; (800648c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 800647c:	4022      	ands	r2, r4
 800647e:	608a      	str	r2, [r1, #8]
 8006480:	e7c5      	b.n	800640e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006482:	bf00      	nop
 8006484:	40022000 	.word	0x40022000
 8006488:	40022100 	.word	0x40022100
 800648c:	fffff0e0 	.word	0xfffff0e0
 8006490:	40022300 	.word	0x40022300

08006494 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006494:	4907      	ldr	r1, [pc, #28]	; (80064b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006496:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8006498:	4b07      	ldr	r3, [pc, #28]	; (80064b8 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800649a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800649c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064a0:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064a2:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80064a6:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80064a8:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064ac:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80064ae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80064b0:	60cb      	str	r3, [r1, #12]
 80064b2:	4770      	bx	lr
 80064b4:	e000ed00 	.word	0xe000ed00
 80064b8:	05fa0000 	.word	0x05fa0000

080064bc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064bc:	4b19      	ldr	r3, [pc, #100]	; (8006524 <HAL_NVIC_SetPriority+0x68>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064c4:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064c6:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064ca:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064cc:	2d04      	cmp	r5, #4
 80064ce:	bf28      	it	cs
 80064d0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064d2:	2c06      	cmp	r4, #6
 80064d4:	d919      	bls.n	800650a <HAL_NVIC_SetPriority+0x4e>
 80064d6:	3b03      	subs	r3, #3
 80064d8:	f04f 34ff 	mov.w	r4, #4294967295
 80064dc:	409c      	lsls	r4, r3
 80064de:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064e2:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80064e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064e8:	fa04 f405 	lsl.w	r4, r4, r5
 80064ec:	ea21 0104 	bic.w	r1, r1, r4
 80064f0:	fa01 f103 	lsl.w	r1, r1, r3
 80064f4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80064f8:	db0a      	blt.n	8006510 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064fa:	0109      	lsls	r1, r1, #4
 80064fc:	4b0a      	ldr	r3, [pc, #40]	; (8006528 <HAL_NVIC_SetPriority+0x6c>)
 80064fe:	b2c9      	uxtb	r1, r1
 8006500:	4403      	add	r3, r0
 8006502:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006506:	bc30      	pop	{r4, r5}
 8006508:	4770      	bx	lr
 800650a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800650c:	4613      	mov	r3, r2
 800650e:	e7e8      	b.n	80064e2 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006510:	f000 000f 	and.w	r0, r0, #15
 8006514:	0109      	lsls	r1, r1, #4
 8006516:	4b05      	ldr	r3, [pc, #20]	; (800652c <HAL_NVIC_SetPriority+0x70>)
 8006518:	b2c9      	uxtb	r1, r1
 800651a:	4403      	add	r3, r0
 800651c:	7619      	strb	r1, [r3, #24]
 800651e:	bc30      	pop	{r4, r5}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	e000ed00 	.word	0xe000ed00
 8006528:	e000e100 	.word	0xe000e100
 800652c:	e000ecfc 	.word	0xe000ecfc

08006530 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006530:	2800      	cmp	r0, #0
 8006532:	db07      	blt.n	8006544 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006534:	2301      	movs	r3, #1
 8006536:	f000 011f 	and.w	r1, r0, #31
 800653a:	4a03      	ldr	r2, [pc, #12]	; (8006548 <HAL_NVIC_EnableIRQ+0x18>)
 800653c:	0940      	lsrs	r0, r0, #5
 800653e:	408b      	lsls	r3, r1
 8006540:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	e000e100 	.word	0xe000e100

0800654c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800654c:	3801      	subs	r0, #1
 800654e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006552:	d20d      	bcs.n	8006570 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006554:	4b07      	ldr	r3, [pc, #28]	; (8006574 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006556:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006558:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800655a:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800655c:	25f0      	movs	r5, #240	; 0xf0
 800655e:	4c06      	ldr	r4, [pc, #24]	; (8006578 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006560:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006562:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006564:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800656a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800656c:	bc30      	pop	{r4, r5}
 800656e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006570:	2001      	movs	r0, #1
 8006572:	4770      	bx	lr
 8006574:	e000e010 	.word	0xe000e010
 8006578:	e000ed00 	.word	0xe000ed00

0800657c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800657c:	b470      	push	{r4, r5, r6}
 800657e:	9c03      	ldr	r4, [sp, #12]

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006580:	e9d0 5600 	ldrd	r5, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006584:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8006588:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800658a:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800658e:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8006592:	ea43 0304 	orr.w	r3, r3, r4
 8006596:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006598:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800659a:	d008      	beq.n	80065ae <DMA2D_SetConfig+0x32>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800659c:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 80065a0:	d002      	beq.n	80065a8 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80065a2:	60e9      	str	r1, [r5, #12]
  }
}
 80065a4:	bc70      	pop	{r4, r5, r6}
 80065a6:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80065a8:	6169      	str	r1, [r5, #20]
}
 80065aa:	bc70      	pop	{r4, r5, r6}
 80065ac:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80065ae:	6883      	ldr	r3, [r0, #8]
 80065b0:	b1b3      	cbz	r3, 80065e0 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d017      	beq.n	80065e6 <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80065b6:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80065b8:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80065bc:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80065c0:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80065c2:	d01e      	beq.n	8006602 <DMA2D_SetConfig+0x86>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80065c4:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80065c6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80065ca:	d00f      	beq.n	80065ec <DMA2D_SetConfig+0x70>
      tmp2 = (tmp2 >> 20U);
 80065cc:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 80065ce:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80065d0:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 80065d2:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80065d4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80065d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80065dc:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80065e0:	63a9      	str	r1, [r5, #56]	; 0x38
}
 80065e2:	bc70      	pop	{r4, r5, r6}
 80065e4:	4770      	bx	lr
      tmp = (tmp3 | tmp2 | tmp4);
 80065e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80065ea:	e7f9      	b.n	80065e0 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 80065ec:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 80065ee:	0ae4      	lsrs	r4, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80065f0:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 80065f2:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80065f4:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 80065f8:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 80065fc:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8006600:	e7ee      	b.n	80065e0 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 8006602:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 8006604:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006606:	02c9      	lsls	r1, r1, #11
 8006608:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 800660c:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8006610:	e7e6      	b.n	80065e0 <DMA2D_SetConfig+0x64>
 8006612:	bf00      	nop

08006614 <HAL_DMA2D_MspInit>:
}
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop

08006618 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8006618:	2800      	cmp	r0, #0
 800661a:	d036      	beq.n	800668a <HAL_DMA2D_Init+0x72>
{
 800661c:	b570      	push	{r4, r5, r6, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800661e:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8006622:	4604      	mov	r4, r0
 8006624:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006628:	b353      	cbz	r3, 8006680 <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800662a:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800662c:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800662e:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006630:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006632:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006636:	4916      	ldr	r1, [pc, #88]	; (8006690 <HAL_DMA2D_Init+0x78>)
 8006638:	681e      	ldr	r6, [r3, #0]
 800663a:	6862      	ldr	r2, [r4, #4]
 800663c:	4031      	ands	r1, r6
 800663e:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006640:	4814      	ldr	r0, [pc, #80]	; (8006694 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006642:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006644:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006646:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006648:	69a1      	ldr	r1, [r4, #24]
 800664a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800664c:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800664e:	4912      	ldr	r1, [pc, #72]	; (8006698 <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006650:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006652:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006654:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006656:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006658:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800665a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800665c:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800665e:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006660:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006662:	0552      	lsls	r2, r2, #21
 8006664:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006666:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006668:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800666a:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 800666e:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006670:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8006674:	430a      	orrs	r2, r1
 8006676:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006678:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800667a:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 800667e:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8006680:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8006684:	f7ff ffc6 	bl	8006614 <HAL_DMA2D_MspInit>
 8006688:	e7cf      	b.n	800662a <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 800668a:	2001      	movs	r0, #1
}
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	fff8ffbf 	.word	0xfff8ffbf
 8006694:	fffffef8 	.word	0xfffffef8
 8006698:	ffff0000 	.word	0xffff0000

0800669c <HAL_DMA2D_Start>:
{
 800669c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 800669e:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
{
 80066a2:	b083      	sub	sp, #12
  __HAL_LOCK(hdma2d);
 80066a4:	2d01      	cmp	r5, #1
 80066a6:	d011      	beq.n	80066cc <HAL_DMA2D_Start+0x30>
 80066a8:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80066aa:	9f08      	ldr	r7, [sp, #32]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80066ac:	2502      	movs	r5, #2
 80066ae:	4604      	mov	r4, r0
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80066b0:	9700      	str	r7, [sp, #0]
  __HAL_LOCK(hdma2d);
 80066b2:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80066b6:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80066ba:	f7ff ff5f 	bl	800657c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80066be:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 80066c0:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80066c2:	6813      	ldr	r3, [r2, #0]
 80066c4:	4333      	orrs	r3, r6
 80066c6:	6013      	str	r3, [r2, #0]
}
 80066c8:	b003      	add	sp, #12
 80066ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma2d);
 80066cc:	2002      	movs	r0, #2
}
 80066ce:	b003      	add	sp, #12
 80066d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066d2:	bf00      	nop

080066d4 <HAL_DMA2D_PollForTransfer>:
{
 80066d4:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80066d6:	2300      	movs	r3, #0
{
 80066d8:	b082      	sub	sp, #8
 80066da:	4605      	mov	r5, r0
 80066dc:	460c      	mov	r4, r1
  __IO uint32_t isrflags = 0x0U;
 80066de:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80066e0:	6803      	ldr	r3, [r0, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	07d2      	lsls	r2, r2, #31
 80066e6:	d40f      	bmi.n	8006708 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80066e8:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80066ea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80066ec:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 80066ee:	0692      	lsls	r2, r2, #26
 80066f0:	d433      	bmi.n	800675a <HAL_DMA2D_PollForTransfer+0x86>
  __HAL_UNLOCK(hdma2d);
 80066f2:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80066f4:	2412      	movs	r4, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80066f6:	2101      	movs	r1, #1
  return HAL_OK;
 80066f8:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80066fa:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 80066fc:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006700:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
}
 8006704:	b002      	add	sp, #8
 8006706:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8006708:	f7ff f8ca 	bl	80058a0 <HAL_GetTick>
 800670c:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800670e:	682b      	ldr	r3, [r5, #0]
 8006710:	e001      	b.n	8006716 <HAL_DMA2D_PollForTransfer+0x42>
      if (Timeout != HAL_MAX_DELAY)
 8006712:	1c60      	adds	r0, r4, #1
 8006714:	d148      	bne.n	80067a8 <HAL_DMA2D_PollForTransfer+0xd4>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	0791      	lsls	r1, r2, #30
 800671a:	d4e5      	bmi.n	80066e8 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006720:	9a01      	ldr	r2, [sp, #4]
 8006722:	f012 0f21 	tst.w	r2, #33	; 0x21
 8006726:	d0f4      	beq.n	8006712 <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006728:	9a01      	ldr	r2, [sp, #4]
 800672a:	0696      	lsls	r6, r2, #26
 800672c:	d503      	bpl.n	8006736 <HAL_DMA2D_PollForTransfer+0x62>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800672e:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006730:	f042 0202 	orr.w	r2, r2, #2
 8006734:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006736:	9a01      	ldr	r2, [sp, #4]
 8006738:	07d4      	lsls	r4, r2, #31
 800673a:	d503      	bpl.n	8006744 <HAL_DMA2D_PollForTransfer+0x70>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800673c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800673e:	f042 0201 	orr.w	r2, r2, #1
 8006742:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006744:	2421      	movs	r4, #33	; 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006746:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 8006748:	2200      	movs	r2, #0
        return HAL_ERROR;
 800674a:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800674c:	609c      	str	r4, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800674e:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 8006752:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
}
 8006756:	b002      	add	sp, #8
 8006758:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800675a:	f7ff f8a1 	bl	80058a0 <HAL_GetTick>
 800675e:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006760:	682b      	ldr	r3, [r5, #0]
 8006762:	e001      	b.n	8006768 <HAL_DMA2D_PollForTransfer+0x94>
      if (Timeout != HAL_MAX_DELAY)
 8006764:	1c61      	adds	r1, r4, #1
 8006766:	d132      	bne.n	80067ce <HAL_DMA2D_PollForTransfer+0xfa>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	06d2      	lsls	r2, r2, #27
 800676c:	d4c1      	bmi.n	80066f2 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006772:	9a01      	ldr	r2, [sp, #4]
 8006774:	f012 0f29 	tst.w	r2, #41	; 0x29
 8006778:	d0f4      	beq.n	8006764 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800677a:	9a01      	ldr	r2, [sp, #4]
 800677c:	0716      	lsls	r6, r2, #28
 800677e:	d503      	bpl.n	8006788 <HAL_DMA2D_PollForTransfer+0xb4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006780:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006782:	f042 0204 	orr.w	r2, r2, #4
 8006786:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006788:	9a01      	ldr	r2, [sp, #4]
 800678a:	0694      	lsls	r4, r2, #26
 800678c:	d503      	bpl.n	8006796 <HAL_DMA2D_PollForTransfer+0xc2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800678e:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006790:	f042 0202 	orr.w	r2, r2, #2
 8006794:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006796:	9a01      	ldr	r2, [sp, #4]
 8006798:	07d0      	lsls	r0, r2, #31
 800679a:	d503      	bpl.n	80067a4 <HAL_DMA2D_PollForTransfer+0xd0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800679c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800679e:	f042 0201 	orr.w	r2, r2, #1
 80067a2:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80067a4:	2429      	movs	r4, #41	; 0x29
 80067a6:	e7ce      	b.n	8006746 <HAL_DMA2D_PollForTransfer+0x72>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067a8:	f7ff f87a 	bl	80058a0 <HAL_GetTick>
 80067ac:	1b80      	subs	r0, r0, r6
 80067ae:	42a0      	cmp	r0, r4
 80067b0:	d801      	bhi.n	80067b6 <HAL_DMA2D_PollForTransfer+0xe2>
 80067b2:	2c00      	cmp	r4, #0
 80067b4:	d1ab      	bne.n	800670e <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80067b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80067b8:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 80067ba:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80067bc:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 80067c0:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 80067c2:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80067c6:	666b      	str	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80067c8:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
          return HAL_TIMEOUT;
 80067cc:	e79a      	b.n	8006704 <HAL_DMA2D_PollForTransfer+0x30>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067ce:	f7ff f867 	bl	80058a0 <HAL_GetTick>
 80067d2:	1b80      	subs	r0, r0, r6
 80067d4:	42a0      	cmp	r0, r4
 80067d6:	d8ee      	bhi.n	80067b6 <HAL_DMA2D_PollForTransfer+0xe2>
 80067d8:	2c00      	cmp	r4, #0
 80067da:	d1c1      	bne.n	8006760 <HAL_DMA2D_PollForTransfer+0x8c>
 80067dc:	e7eb      	b.n	80067b6 <HAL_DMA2D_PollForTransfer+0xe2>
 80067de:	bf00      	nop

080067e0 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 80067e0:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 80067e4:	2a01      	cmp	r2, #1
 80067e6:	d063      	beq.n	80068b0 <HAL_DMA2D_ConfigLayer+0xd0>
 80067e8:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80067ea:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80067ee:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80067f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 80067f4:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 80067f6:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80067f8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 80067fc:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006800:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006802:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8006804:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006806:	0512      	lsls	r2, r2, #20
 8006808:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800680a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800680e:	f1a4 0609 	sub.w	r6, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006812:	4322      	orrs	r2, r4
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006814:	2e01      	cmp	r6, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006816:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800681a:	d922      	bls.n	8006862 <HAL_DMA2D_ConfigLayer+0x82>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800681c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800681e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006822:	b981      	cbnz	r1, 8006846 <HAL_DMA2D_ConfigLayer+0x66>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	4923      	ldr	r1, [pc, #140]	; (80068b4 <HAL_DMA2D_ConfigLayer+0xd4>)
 8006828:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800682a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800682c:	4029      	ands	r1, r5
 800682e:	430a      	orrs	r2, r1
 8006830:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006832:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 8006834:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006836:	2101      	movs	r1, #1
  return HAL_OK;
 8006838:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800683a:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800683e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8006842:	bc70      	pop	{r4, r5, r6}
 8006844:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006846:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006848:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800684a:	d129      	bne.n	80068a0 <HAL_DMA2D_ConfigLayer+0xc0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800684c:	69e6      	ldr	r6, [r4, #28]
 800684e:	491a      	ldr	r1, [pc, #104]	; (80068b8 <HAL_DMA2D_ConfigLayer+0xd8>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006850:	6c05      	ldr	r5, [r0, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006852:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006854:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006856:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 800685a:	430a      	orrs	r2, r1
 800685c:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800685e:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006860:	e7e8      	b.n	8006834 <HAL_DMA2D_ConfigLayer+0x54>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006862:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006864:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8006868:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800686a:	b161      	cbz	r1, 8006886 <HAL_DMA2D_ConfigLayer+0xa6>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800686c:	6819      	ldr	r1, [r3, #0]
 800686e:	4c11      	ldr	r4, [pc, #68]	; (80068b4 <HAL_DMA2D_ConfigLayer+0xd4>)
 8006870:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006872:	6b45      	ldr	r5, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006874:	4034      	ands	r4, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006876:	6a86      	ldr	r6, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006878:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800687c:	4322      	orrs	r2, r4
 800687e:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006880:	610e      	str	r6, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006882:	620d      	str	r5, [r1, #32]
 8006884:	e7d6      	b.n	8006834 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006886:	6819      	ldr	r1, [r3, #0]
 8006888:	4c0a      	ldr	r4, [pc, #40]	; (80068b4 <HAL_DMA2D_ConfigLayer+0xd4>)
 800688a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800688c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800688e:	402c      	ands	r4, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006890:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006892:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006896:	4322      	orrs	r2, r4
 8006898:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800689a:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800689c:	6288      	str	r0, [r1, #40]	; 0x28
 800689e:	e7c9      	b.n	8006834 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80068a0:	69e5      	ldr	r5, [r4, #28]
 80068a2:	4904      	ldr	r1, [pc, #16]	; (80068b4 <HAL_DMA2D_ConfigLayer+0xd4>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80068a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80068a6:	4029      	ands	r1, r5
 80068a8:	430a      	orrs	r2, r1
 80068aa:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80068ac:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80068ae:	e7c1      	b.n	8006834 <HAL_DMA2D_ConfigLayer+0x54>
  __HAL_LOCK(hdma2d);
 80068b0:	2002      	movs	r0, #2
}
 80068b2:	4770      	bx	lr
 80068b4:	00ccfff0 	.word	0x00ccfff0
 80068b8:	00c0fff0 	.word	0x00c0fff0

080068bc <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80068bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c0:	4605      	mov	r5, r0
 80068c2:	4688      	mov	r8, r1
 80068c4:	4617      	mov	r7, r2
 80068c6:	4699      	mov	r9, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80068c8:	f7fe ffea 	bl	80058a0 <HAL_GetTick>
 80068cc:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80068ce:	e005      	b.n	80068dc <DSI_ShortWrite+0x20>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80068d0:	f7fe ffe6 	bl	80058a0 <HAL_GetTick>
 80068d4:	1b84      	subs	r4, r0, r6
 80068d6:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80068da:	d80e      	bhi.n	80068fa <DSI_ShortWrite+0x3e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80068dc:	682c      	ldr	r4, [r5, #0]
 80068de:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80068e0:	07db      	lsls	r3, r3, #31
 80068e2:	d5f5      	bpl.n	80068d0 <DSI_ShortWrite+0x14>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80068e4:	ea47 2109 	orr.w	r1, r7, r9, lsl #8
 80068e8:	9b08      	ldr	r3, [sp, #32]

  return HAL_OK;
 80068ea:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80068ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80068f0:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 80068f4:	66e1      	str	r1, [r4, #108]	; 0x6c
}
 80068f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 80068fa:	2003      	movs	r0, #3
}
 80068fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006900 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop

08006904 <HAL_DSI_Init>:
  if (hdsi == NULL)
 8006904:	2800      	cmp	r0, #0
 8006906:	f000 80b3 	beq.w	8006a70 <HAL_DSI_Init+0x16c>
{
 800690a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800690c:	7c43      	ldrb	r3, [r0, #17]
{
 800690e:	b083      	sub	sp, #12
 8006910:	460d      	mov	r5, r1
 8006912:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 80a8 	beq.w	8006a6a <HAL_DSI_Init+0x166>
  __HAL_DSI_REG_ENABLE(hdsi);
 800691a:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 800691c:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 800691e:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006920:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8006922:	9200      	str	r2, [sp, #0]
 8006924:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8006928:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800692c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8006930:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8006934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800693c:	f7fe ffb0 	bl	80058a0 <HAL_GetTick>
 8006940:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006942:	e006      	b.n	8006952 <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006944:	f7fe ffac 	bl	80058a0 <HAL_GetTick>
 8006948:	1b83      	subs	r3, r0, r6
 800694a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800694e:	f200 8089 	bhi.w	8006a64 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006958:	04d1      	lsls	r1, r2, #19
 800695a:	d5f3      	bpl.n	8006944 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800695c:	686a      	ldr	r2, [r5, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 800695e:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006960:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8006964:	682e      	ldr	r6, [r5, #0]
 8006966:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006968:	4942      	ldr	r1, [pc, #264]	; (8006a74 <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800696a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 800696e:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006970:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8006972:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006976:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800697a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800697e:	430a      	orrs	r2, r1
 8006980:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8006984:	9001      	str	r0, [sp, #4]
 8006986:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800698a:	f042 0201 	orr.w	r2, r2, #1
 800698e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8006992:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 800699e:	f7fe ff7f 	bl	80058a0 <HAL_GetTick>
 80069a2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80069a4:	e005      	b.n	80069b2 <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80069a6:	f7fe ff7b 	bl	80058a0 <HAL_GetTick>
 80069aa:	1b80      	subs	r0, r0, r6
 80069ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80069b0:	d858      	bhi.n	8006a64 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80069b8:	05d2      	lsls	r2, r2, #23
 80069ba:	d5f4      	bpl.n	80069a6 <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80069bc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80069c0:	f246 1ca8 	movw	ip, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80069c4:	6867      	ldr	r7, [r4, #4]
  hdsi->Instance->IER[0U] = 0U;
 80069c6:	2100      	movs	r1, #0
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80069c8:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80069cc:	68e6      	ldr	r6, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80069ce:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80069d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80069d6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80069da:	f022 0203 	bic.w	r2, r2, #3
 80069de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80069e2:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80069e6:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80069e8:	4338      	orrs	r0, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80069ea:	2a01      	cmp	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80069ec:	f040 0001 	orr.w	r0, r0, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80069f0:	bf38      	it	cc
 80069f2:	2201      	movcc	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80069f4:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80069f8:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80069fc:	4617      	mov	r7, r2
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80069fe:	f020 0003 	bic.w	r0, r0, #3
 8006a02:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006a06:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006a0a:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006a0c:	4332      	orrs	r2, r6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006a0e:	682d      	ldr	r5, [r5, #0]
 8006a10:	f000 0003 	and.w	r0, r0, #3
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006a14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006a18:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006a1a:	fb0c f505 	mul.w	r5, ip, r5
 8006a1e:	4a16      	ldr	r2, [pc, #88]	; (8006a78 <HAL_DSI_Init+0x174>)
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006a20:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006a24:	fb02 f207 	mul.w	r2, r2, r7
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006a28:	609e      	str	r6, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006a2a:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006a2c:	4082      	lsls	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006a2e:	ea46 060e 	orr.w	r6, r6, lr
 8006a32:	609e      	str	r6, [r3, #8]
  hdsi->State = HAL_DSI_STATE_READY;
 8006a34:	2601      	movs	r6, #1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8006a36:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006a3a:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8006a3e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8006a42:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 8006a46:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8006a48:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 8006a4c:	432a      	orrs	r2, r5
 8006a4e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8006a52:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006a56:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8006a5a:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8006a5c:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8006a5e:	7466      	strb	r6, [r4, #17]
}
 8006a60:	b003      	add	sp, #12
 8006a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8006a64:	2003      	movs	r0, #3
}
 8006a66:	b003      	add	sp, #12
 8006a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 8006a6a:	f7ff ff49 	bl	8006900 <HAL_DSI_MspInit>
 8006a6e:	e754      	b.n	800691a <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 8006a70:	2001      	movs	r0, #1
}
 8006a72:	4770      	bx	lr
 8006a74:	fffc8603 	.word	0xfffc8603
 8006a78:	003d0900 	.word	0x003d0900

08006a7c <HAL_DSI_TearingEffectCallback>:
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop

08006a80 <HAL_DSI_EndOfRefreshCallback>:
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop

08006a84 <HAL_DSI_ErrorCallback>:
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop

08006a88 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006a88:	6803      	ldr	r3, [r0, #0]
 8006a8a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006a8e:	07d1      	lsls	r1, r2, #31
{
 8006a90:	b510      	push	{r4, lr}
 8006a92:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006a94:	d503      	bpl.n	8006a9e <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8006a96:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006a9a:	07d2      	lsls	r2, r2, #31
 8006a9c:	d462      	bmi.n	8006b64 <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8006a9e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006aa2:	0791      	lsls	r1, r2, #30
 8006aa4:	d503      	bpl.n	8006aae <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8006aa6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006aaa:	0792      	lsls	r2, r2, #30
 8006aac:	d44f      	bmi.n	8006b4e <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8006aae:	69a3      	ldr	r3, [r4, #24]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d04b      	beq.n	8006b4c <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8006ab4:	6821      	ldr	r1, [r4, #0]
 8006ab6:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006aba:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8006abe:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006ac2:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006ac4:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006ac8:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006aca:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006acc:	b119      	cbz	r1, 8006ad6 <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8006ace:	6961      	ldr	r1, [r4, #20]
 8006ad0:	f041 0101 	orr.w	r1, r1, #1
 8006ad4:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8006ad6:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8006ada:	d003      	beq.n	8006ae4 <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8006adc:	6962      	ldr	r2, [r4, #20]
 8006ade:	f042 0202 	orr.w	r2, r2, #2
 8006ae2:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8006ae4:	07d8      	lsls	r0, r3, #31
 8006ae6:	d503      	bpl.n	8006af0 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8006ae8:	6962      	ldr	r2, [r4, #20]
 8006aea:	f042 0204 	orr.w	r2, r2, #4
 8006aee:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8006af0:	0799      	lsls	r1, r3, #30
 8006af2:	d503      	bpl.n	8006afc <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8006af4:	6962      	ldr	r2, [r4, #20]
 8006af6:	f042 0208 	orr.w	r2, r2, #8
 8006afa:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8006afc:	f013 0f0c 	tst.w	r3, #12
 8006b00:	d003      	beq.n	8006b0a <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8006b02:	6962      	ldr	r2, [r4, #20]
 8006b04:	f042 0210 	orr.w	r2, r2, #16
 8006b08:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8006b0a:	06da      	lsls	r2, r3, #27
 8006b0c:	d503      	bpl.n	8006b16 <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8006b0e:	6962      	ldr	r2, [r4, #20]
 8006b10:	f042 0220 	orr.w	r2, r2, #32
 8006b14:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8006b16:	0698      	lsls	r0, r3, #26
 8006b18:	d503      	bpl.n	8006b22 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006b1a:	6962      	ldr	r2, [r4, #20]
 8006b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b20:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8006b22:	0659      	lsls	r1, r3, #25
 8006b24:	d503      	bpl.n	8006b2e <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8006b26:	6962      	ldr	r2, [r4, #20]
 8006b28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b2c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8006b2e:	061a      	lsls	r2, r3, #24
 8006b30:	d503      	bpl.n	8006b3a <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8006b32:	6962      	ldr	r2, [r4, #20]
 8006b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b38:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8006b3a:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8006b3e:	d003      	beq.n	8006b48 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8006b40:	6963      	ldr	r3, [r4, #20]
 8006b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b46:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8006b48:	6963      	ldr	r3, [r4, #20]
 8006b4a:	b93b      	cbnz	r3, 8006b5c <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8006b4c:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006b4e:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006b50:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006b52:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006b56:	f7ff ff93 	bl	8006a80 <HAL_DSI_EndOfRefreshCallback>
 8006b5a:	e7a8      	b.n	8006aae <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f7ff ff91 	bl	8006a84 <HAL_DSI_ErrorCallback>
}
 8006b62:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8006b64:	2201      	movs	r2, #1
 8006b66:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8006b6a:	f7ff ff87 	bl	8006a7c <HAL_DSI_TearingEffectCallback>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	e795      	b.n	8006a9e <HAL_DSI_IRQHandler+0x16>
 8006b72:	bf00      	nop

08006b74 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006b74:	7c03      	ldrb	r3, [r0, #16]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	f000 8113 	beq.w	8006da2 <HAL_DSI_ConfigVideoMode+0x22e>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8006b7c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 8006b7e:	2201      	movs	r2, #1
{
 8006b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 8006b84:	7402      	strb	r2, [r0, #16]
  if (VidCfg->ColorCoding == DSI_RGB666)
 8006b86:	4604      	mov	r4, r0
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8006b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 8006b8a:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8006b8c:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8006b90:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8006b94:	4e84      	ldr	r6, [pc, #528]	; (8006da8 <HAL_DSI_ConfigVideoMode+0x234>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8006b96:	2803      	cmp	r0, #3
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8006b98:	4d84      	ldr	r5, [pc, #528]	; (8006dac <HAL_DSI_ConfigVideoMode+0x238>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8006b9a:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8006b9e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8006ba0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006ba4:	f022 0201 	bic.w	r2, r2, #1
 8006ba8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8006bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bae:	f022 0203 	bic.w	r2, r2, #3
 8006bb2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8006bb4:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8006bb6:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8006bba:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8006bbe:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8006bc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bc2:	ea06 0602 	and.w	r6, r6, r2
 8006bc6:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8006bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bca:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8006bce:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8006bd2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8006bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bd6:	ea02 0205 	and.w	r2, r2, r5
 8006bda:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8006bdc:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8006bde:	ea47 0708 	orr.w	r7, r7, r8
 8006be2:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8006be4:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 8006be6:	ea06 0605 	and.w	r6, r6, r5
 8006bea:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8006bec:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8006bee:	ea45 050e 	orr.w	r5, r5, lr
 8006bf2:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8006bf4:	68dd      	ldr	r5, [r3, #12]
 8006bf6:	f025 0503 	bic.w	r5, r5, #3
 8006bfa:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	ea42 020c 	orr.w	r2, r2, ip
 8006c02:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006c04:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8006c06:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006c08:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8006c0c:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006c10:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8006c12:	ea42 0206 	orr.w	r2, r2, r6
 8006c16:	695d      	ldr	r5, [r3, #20]
 8006c18:	ea42 0207 	orr.w	r2, r2, r7
 8006c1c:	ea42 0205 	orr.w	r2, r2, r5
 8006c20:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	f022 020f 	bic.w	r2, r2, #15
 8006c28:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	ea42 0200 	orr.w	r2, r2, r0
 8006c30:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006c32:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006c36:	f022 020e 	bic.w	r2, r2, #14
 8006c3a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8006c3e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006c42:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8006c46:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 8006c4a:	d107      	bne.n	8006c5c <HAL_DSI_ConfigVideoMode+0xe8>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8006c4c:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8006c4e:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8006c50:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8006c54:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	432a      	orrs	r2, r5
 8006c5a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8006c5c:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006c5e:	2600      	movs	r6, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8006c60:	4a53      	ldr	r2, [pc, #332]	; (8006db0 <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8006c62:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8006c64:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8006c66:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8006c6a:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8006c6e:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8006c70:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8006c72:	4f50      	ldr	r7, [pc, #320]	; (8006db4 <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8006c74:	4305      	orrs	r5, r0
 8006c76:	649d      	str	r5, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8006c78:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006c7a:	4010      	ands	r0, r2
 8006c7c:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8006c7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8006c80:	484d      	ldr	r0, [pc, #308]	; (8006db8 <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8006c82:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8006c86:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8006c8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8006c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c8e:	4017      	ands	r7, r2
 8006c90:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8006c92:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8006c94:	ea45 050e 	orr.w	r5, r5, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8006c98:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8006c9c:	651d      	str	r5, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8006c9e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8006ca0:	4005      	ands	r5, r0
 8006ca2:	655d      	str	r5, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8006ca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ca6:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8006caa:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8006cae:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8006cb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006cb2:	4002      	ands	r2, r0
 8006cb4:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8006cb6:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8006cb8:	4a3b      	ldr	r2, [pc, #236]	; (8006da8 <HAL_DSI_ConfigVideoMode+0x234>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8006cba:	ea47 070e 	orr.w	r7, r7, lr
 8006cbe:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8006cc0:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8006cc2:	4007      	ands	r7, r0

  return HAL_OK;
 8006cc4:	4630      	mov	r0, r6
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8006cc6:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8006cc8:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8006cca:	ea45 050c 	orr.w	r5, r5, ip
 8006cce:	65dd      	str	r5, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8006cd0:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8006cd2:	402a      	ands	r2, r5
 8006cd4:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8006cd6:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8006cd8:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8006cda:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8006cde:	4315      	orrs	r5, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8006ce0:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8006ce4:	661d      	str	r5, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8006ce6:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8006ce8:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 8006cec:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8006cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cf0:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8006cf4:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8006cf8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8006cfa:	699f      	ldr	r7, [r3, #24]
 8006cfc:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 8006d00:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8006d02:	699d      	ldr	r5, [r3, #24]
 8006d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8006d08:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8006d0c:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8006d0e:	699d      	ldr	r5, [r3, #24]
 8006d10:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8006d14:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8006d16:	699a      	ldr	r2, [r3, #24]
 8006d18:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8006d1c:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8006d20:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8006d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d28:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8006d2a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8006d2c:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8006d30:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8006d34:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8006d36:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8006d38:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 8006d3c:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8006d3e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8006d40:	ea45 050e 	orr.w	r5, r5, lr
 8006d44:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8006d46:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8006d48:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8006d4c:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8006d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d50:	ea42 020c 	orr.w	r2, r2, ip
 8006d54:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8006d56:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8006d58:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8006d5a:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8006d5e:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8006d62:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8006d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d66:	432a      	orrs	r2, r5
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8006d68:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8006d6c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8006d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d74:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8006d76:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8006d78:	ea45 050e 	orr.w	r5, r5, lr
 8006d7c:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8006d7e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8006d80:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8006d84:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8006d86:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006d88:	ea41 010c 	orr.w	r1, r1, ip
 8006d8c:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8006d8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006d90:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8006d94:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8006d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d98:	433a      	orrs	r2, r7
 8006d9a:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 8006d9c:	7426      	strb	r6, [r4, #16]
}
 8006d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 8006da2:	2002      	movs	r0, #2
}
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	ffffc000 	.word	0xffffc000
 8006dac:	ffffe000 	.word	0xffffe000
 8006db0:	fffff000 	.word	0xfffff000
 8006db4:	ffff8000 	.word	0xffff8000
 8006db8:	fffffc00 	.word	0xfffffc00

08006dbc <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006dbc:	7c02      	ldrb	r2, [r0, #16]
 8006dbe:	2a01      	cmp	r2, #1
 8006dc0:	d00e      	beq.n	8006de0 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006dc2:	6802      	ldr	r2, [r0, #0]
 8006dc4:	4603      	mov	r3, r0
{
 8006dc6:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006dc8:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006dca:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006dcc:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 8006dd0:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006dd2:	62d4      	str	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006dd4:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8006dd6:	4321      	orrs	r1, r4
 8006dd8:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 8006dda:	741d      	strb	r5, [r3, #16]
}
 8006ddc:	bc30      	pop	{r4, r5}
 8006dde:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006de0:	2002      	movs	r0, #2
}
 8006de2:	4770      	bx	lr

08006de4 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006de4:	7c03      	ldrb	r3, [r0, #16]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d021      	beq.n	8006e2e <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8006dea:	6803      	ldr	r3, [r0, #0]
 8006dec:	2100      	movs	r1, #0
 8006dee:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8006df0:	4608      	mov	r0, r1
{
 8006df2:	b410      	push	{r4}
 8006df4:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 8006df6:	9100      	str	r1, [sp, #0]
 8006df8:	685c      	ldr	r4, [r3, #4]
 8006dfa:	f044 0401 	orr.w	r4, r4, #1
 8006dfe:	605c      	str	r4, [r3, #4]
 8006e00:	685c      	ldr	r4, [r3, #4]
 8006e02:	f004 0401 	and.w	r4, r4, #1
 8006e06:	9400      	str	r4, [sp, #0]
 8006e08:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006e0a:	9101      	str	r1, [sp, #4]
 8006e0c:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8006e10:	f044 0408 	orr.w	r4, r4, #8
 8006e14:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 8006e18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 8006e1c:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	9301      	str	r3, [sp, #4]
 8006e24:	9b01      	ldr	r3, [sp, #4]
}
 8006e26:	b003      	add	sp, #12
 8006e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e2c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006e2e:	2002      	movs	r0, #2
}
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop

08006e34 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8006e34:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006e36:	7c05      	ldrb	r5, [r0, #16]
{
 8006e38:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8006e3a:	2d01      	cmp	r5, #1
 8006e3c:	d00a      	beq.n	8006e54 <HAL_DSI_ShortWrite+0x20>

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006e3e:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdsi);
 8006e40:	2501      	movs	r5, #1
 8006e42:	4604      	mov	r4, r0
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006e44:	9600      	str	r6, [sp, #0]
  __HAL_LOCK(hdsi);
 8006e46:	7405      	strb	r5, [r0, #16]
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006e48:	f7ff fd38 	bl	80068bc <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	7423      	strb	r3, [r4, #16]

  return status;
}
 8006e50:	b002      	add	sp, #8
 8006e52:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 8006e54:	2002      	movs	r0, #2
}
 8006e56:	b002      	add	sp, #8
 8006e58:	bd70      	pop	{r4, r5, r6, pc}
 8006e5a:	bf00      	nop

08006e5c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8006e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e60:	4698      	mov	r8, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006e62:	7c03      	ldrb	r3, [r0, #16]
{
 8006e64:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hdsi);
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d05e      	beq.n	8006f28 <HAL_DSI_LongWrite+0xcc>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	4607      	mov	r7, r0
 8006e6e:	4689      	mov	r9, r1
 8006e70:	4692      	mov	sl, r2
 8006e72:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e74:	f7fe fd14 	bl	80058a0 <HAL_GetTick>
 8006e78:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006e7a:	e005      	b.n	8006e88 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006e7c:	f7fe fd10 	bl	80058a0 <HAL_GetTick>
 8006e80:	1b40      	subs	r0, r0, r5
 8006e82:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006e86:	d84b      	bhi.n	8006f20 <HAL_DSI_LongWrite+0xc4>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 8006e8c:	f014 0401 	ands.w	r4, r4, #1
 8006e90:	d0f4      	beq.n	8006e7c <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006e92:	4640      	mov	r0, r8
 8006e94:	2803      	cmp	r0, #3
 8006e96:	bf28      	it	cs
 8006e98:	2003      	movcs	r0, #3

  for (count = 0U; count < nbBytes; count++)
 8006e9a:	f1b8 0f00 	cmp.w	r8, #0
 8006e9e:	d046      	beq.n	8006f2e <HAL_DSI_LongWrite+0xd2>
 8006ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea2:	1e5c      	subs	r4, r3, #1
 8006ea4:	2300      	movs	r3, #0
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8006eac:	00dd      	lsls	r5, r3, #3
  for (count = 0U; count < nbBytes; count++)
 8006eae:	4283      	cmp	r3, r0
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006eb0:	fa02 f205 	lsl.w	r2, r2, r5
 8006eb4:	ea46 0602 	orr.w	r6, r6, r2
  for (count = 0U; count < nbBytes; count++)
 8006eb8:	d3f5      	bcc.n	8006ea6 <HAL_DSI_LongWrite+0x4a>
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 8006eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hdsi->Instance->GPDR = fifoword;
 8006ebc:	670e      	str	r6, [r1, #112]	; 0x70
  pparams += nbBytes;
 8006ebe:	181e      	adds	r6, r3, r0
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8006ec0:	ebb8 0000 	subs.w	r0, r8, r0
 8006ec4:	d017      	beq.n	8006ef6 <HAL_DSI_LongWrite+0x9a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006ec6:	2804      	cmp	r0, #4
 8006ec8:	4684      	mov	ip, r0
 8006eca:	f04f 0500 	mov.w	r5, #0
 8006ece:	bf28      	it	cs
 8006ed0:	f04f 0c04 	movcs.w	ip, #4
    fifoword = 0U;
 8006ed4:	462b      	mov	r3, r5
 8006ed6:	eb06 020c 	add.w	r2, r6, ip
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006eda:	f816 4b01 	ldrb.w	r4, [r6], #1
 8006ede:	40ac      	lsls	r4, r5
    for (count = 0U; count < nbBytes; count++)
 8006ee0:	42b2      	cmp	r2, r6
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006ee2:	f105 0508 	add.w	r5, r5, #8
 8006ee6:	ea43 0304 	orr.w	r3, r3, r4
    for (count = 0U; count < nbBytes; count++)
 8006eea:	d1f6      	bne.n	8006eda <HAL_DSI_LongWrite+0x7e>
  while (uicounter != 0U)
 8006eec:	ebb0 000c 	subs.w	r0, r0, ip
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 8006ef0:	4616      	mov	r6, r2
    hdsi->Instance->GPDR = fifoword;
 8006ef2:	670b      	str	r3, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8006ef4:	d1e7      	bne.n	8006ec6 <HAL_DSI_LongWrite+0x6a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8006ef6:	f108 0801 	add.w	r8, r8, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006efa:	ea4a 1389 	orr.w	r3, sl, r9, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006efe:	2200      	movs	r2, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006f00:	ea4f 2908 	mov.w	r9, r8, lsl #8

  return HAL_OK;
 8006f04:	4610      	mov	r0, r2
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006f06:	46c8      	mov	r8, r9
 8006f08:	fa1f f989 	uxth.w	r9, r9
 8006f0c:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 8006f10:	ea43 0309 	orr.w	r3, r3, r9
 8006f14:	ea43 0308 	orr.w	r3, r3, r8
 8006f18:	66cb      	str	r3, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8006f1a:	743a      	strb	r2, [r7, #16]
}
 8006f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_TIMEOUT;
 8006f20:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006f22:	743c      	strb	r4, [r7, #16]
}
 8006f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8006f28:	2002      	movs	r0, #2
}
 8006f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdsi->Instance->GPDR = fifoword;
 8006f2e:	670e      	str	r6, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8006f30:	e7e1      	b.n	8006ef6 <HAL_DSI_LongWrite+0x9a>
 8006f32:	bf00      	nop

08006f34 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8006f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f38:	4615      	mov	r5, r2
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006f3a:	7c02      	ldrb	r2, [r0, #16]
{
 8006f3c:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8006f3e:	2a01      	cmp	r2, #1
{
 8006f40:	9c08      	ldr	r4, [sp, #32]
  __HAL_LOCK(hdsi);
 8006f42:	d070      	beq.n	8007026 <HAL_DSI_Read+0xf2>
 8006f44:	461e      	mov	r6, r3
 8006f46:	2301      	movs	r3, #1
 8006f48:	4607      	mov	r7, r0
 8006f4a:	4688      	mov	r8, r1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8006f4c:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8006f4e:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8006f50:	d80d      	bhi.n	8006f6e <HAL_DSI_Read+0x3a>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8006f52:	2c06      	cmp	r4, #6
 8006f54:	d017      	beq.n	8006f86 <HAL_DSI_Read+0x52>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8006f56:	2c04      	cmp	r4, #4
 8006f58:	d04f      	beq.n	8006ffa <HAL_DSI_Read+0xc6>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8006f5a:	2c14      	cmp	r4, #20
 8006f5c:	d067      	beq.n	800702e <HAL_DSI_Read+0xfa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8006f5e:	2c24      	cmp	r4, #36	; 0x24
 8006f60:	d052      	beq.n	8007008 <HAL_DSI_Read+0xd4>
      __HAL_UNLOCK(hdsi);
 8006f62:	2300      	movs	r3, #0
      return HAL_ERROR;
 8006f64:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8006f66:	743b      	strb	r3, [r7, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8006f68:	b002      	add	sp, #8
 8006f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8006f6e:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8006f72:	b2f3      	uxtb	r3, r6
 8006f74:	2237      	movs	r2, #55	; 0x37
 8006f76:	f8cd c000 	str.w	ip, [sp]
 8006f7a:	f7ff fc9f 	bl	80068bc <DSI_ShortWrite>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d1ef      	bne.n	8006f62 <HAL_DSI_Read+0x2e>
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8006f82:	2c06      	cmp	r4, #6
 8006f84:	d1e7      	bne.n	8006f56 <HAL_DSI_Read+0x22>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8006f88:	6839      	ldr	r1, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006f8a:	021a      	lsls	r2, r3, #8
 8006f8c:	ea42 1388 	orr.w	r3, r2, r8, lsl #6
 8006f90:	f043 0306 	orr.w	r3, r3, #6
 8006f94:	66cb      	str	r3, [r1, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8006f96:	f7fe fc83 	bl	80058a0 <HAL_GetTick>
 8006f9a:	4680      	mov	r8, r0
  while (((int32_t)(datasize)) > 0)
 8006f9c:	e006      	b.n	8006fac <HAL_DSI_Read+0x78>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006f9e:	f7fe fc7f 	bl	80058a0 <HAL_GetTick>
 8006fa2:	eba0 0008 	sub.w	r0, r0, r8
 8006fa6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006faa:	d81b      	bhi.n	8006fe4 <HAL_DSI_Read+0xb0>
  while (((int32_t)(datasize)) > 0)
 8006fac:	2e00      	cmp	r6, #0
 8006fae:	dd1f      	ble.n	8006ff0 <HAL_DSI_Read+0xbc>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8006fb4:	f011 0110 	ands.w	r1, r1, #16
 8006fb8:	d1f1      	bne.n	8006f9e <HAL_DSI_Read+0x6a>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006fba:	2e04      	cmp	r6, #4
 8006fbc:	4630      	mov	r0, r6
      fifoword = hdsi->Instance->GPDR;
 8006fbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006fc0:	bf28      	it	cs
 8006fc2:	2004      	movcs	r0, #4
      for (count = 0U; count < nbbytes; count++)
 8006fc4:	182b      	adds	r3, r5, r0
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8006fc6:	fa22 f401 	lsr.w	r4, r2, r1
 8006fca:	3108      	adds	r1, #8
 8006fcc:	f805 4b01 	strb.w	r4, [r5], #1
      for (count = 0U; count < nbbytes; count++)
 8006fd0:	429d      	cmp	r5, r3
 8006fd2:	d1f8      	bne.n	8006fc6 <HAL_DSI_Read+0x92>
 8006fd4:	1a36      	subs	r6, r6, r0
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006fd6:	f7fe fc63 	bl	80058a0 <HAL_GetTick>
 8006fda:	eba0 0008 	sub.w	r0, r0, r8
 8006fde:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006fe2:	d9e3      	bls.n	8006fac <HAL_DSI_Read+0x78>
      __HAL_UNLOCK(hdsi);
 8006fe4:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8006fe6:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006fe8:	743b      	strb	r3, [r7, #16]
}
 8006fea:	b002      	add	sp, #8
 8006fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_UNLOCK(hdsi);
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	7438      	strb	r0, [r7, #16]
}
 8006ff4:	b002      	add	sp, #8
 8006ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006ffa:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8006ffe:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007000:	f043 0304 	orr.w	r3, r3, #4
 8007004:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8007006:	e7c6      	b.n	8006f96 <HAL_DSI_Read+0x62>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800700a:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800700e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007010:	7852      	ldrb	r2, [r2, #1]
 8007012:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007014:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007018:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800701a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800701e:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8007022:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8007024:	e7b7      	b.n	8006f96 <HAL_DSI_Read+0x62>
  __HAL_LOCK(hdsi);
 8007026:	2002      	movs	r0, #2
}
 8007028:	b002      	add	sp, #8
 800702a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800702e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007030:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007034:	7811      	ldrb	r1, [r2, #0]
 8007036:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007038:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800703c:	f043 0314 	orr.w	r3, r3, #20
 8007040:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8007042:	e7a8      	b.n	8006f96 <HAL_DSI_Read+0x62>

08007044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007048:	680e      	ldr	r6, [r1, #0]
{
 800704a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800704c:	2e00      	cmp	r6, #0
 800704e:	f000 80d3 	beq.w	80071f8 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 8007052:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007054:	f8df a220 	ldr.w	sl, [pc, #544]	; 8007278 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007058:	f8df b220 	ldr.w	fp, [pc, #544]	; 800727c <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800705c:	46b1      	mov	r9, r6
 800705e:	e020      	b.n	80070a2 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 8007060:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007062:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007066:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800706a:	f04f 0e0f 	mov.w	lr, #15
 800706e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007072:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007074:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007078:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 800707c:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800707e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007082:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007086:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800708a:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 800708e:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8007090:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007092:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007094:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 8007096:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 8007098:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800709a:	fa39 f203 	lsrs.w	r2, r9, r3
 800709e:	f000 80ab 	beq.w	80071f8 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80070a2:	2201      	movs	r2, #1
 80070a4:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 80070a6:	ea12 0809 	ands.w	r8, r2, r9
 80070aa:	d0f5      	beq.n	8007098 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80070ac:	684c      	ldr	r4, [r1, #4]
 80070ae:	005f      	lsls	r7, r3, #1
 80070b0:	f024 0c10 	bic.w	ip, r4, #16
 80070b4:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80070b8:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80070ba:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80070be:	f200 809e 	bhi.w	80071fe <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80070c2:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 80070c6:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80070ca:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80070cc:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80070ce:	ea2e 0e05 	bic.w	lr, lr, r5
 80070d2:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80070d4:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80070d6:	68ce      	ldr	r6, [r1, #12]
 80070d8:	40be      	lsls	r6, r7
 80070da:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80070de:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 80070e0:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80070e4:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80070e8:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80070ec:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 80070ee:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80070f0:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80070f2:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070f6:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070f8:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070fc:	fa02 f207 	lsl.w	r2, r2, r7
 8007100:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8007104:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007106:	d0ab      	beq.n	8007060 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 8007108:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800710a:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800710e:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007110:	fa02 f707 	lsl.w	r7, r2, r7
 8007114:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8007116:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007118:	00e6      	lsls	r6, r4, #3
 800711a:	d5bd      	bpl.n	8007098 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800711c:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 8007120:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007124:	f003 0203 	and.w	r2, r3, #3
 8007128:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800712a:	f046 0602 	orr.w	r6, r6, #2
 800712e:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007132:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007134:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 8007138:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800713c:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007140:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007144:	f006 0602 	and.w	r6, r6, #2
 8007148:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800714a:	4e42      	ldr	r6, [pc, #264]	; (8007254 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800714c:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800714e:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 8007150:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007152:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007156:	d020      	beq.n	800719a <HAL_GPIO_Init+0x156>
 8007158:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800715c:	42b0      	cmp	r0, r6
 800715e:	d056      	beq.n	800720e <HAL_GPIO_Init+0x1ca>
 8007160:	4e3d      	ldr	r6, [pc, #244]	; (8007258 <HAL_GPIO_Init+0x214>)
 8007162:	42b0      	cmp	r0, r6
 8007164:	d058      	beq.n	8007218 <HAL_GPIO_Init+0x1d4>
 8007166:	4e3d      	ldr	r6, [pc, #244]	; (800725c <HAL_GPIO_Init+0x218>)
 8007168:	42b0      	cmp	r0, r6
 800716a:	d04b      	beq.n	8007204 <HAL_GPIO_Init+0x1c0>
 800716c:	4e3c      	ldr	r6, [pc, #240]	; (8007260 <HAL_GPIO_Init+0x21c>)
 800716e:	42b0      	cmp	r0, r6
 8007170:	d05c      	beq.n	800722c <HAL_GPIO_Init+0x1e8>
 8007172:	4e3c      	ldr	r6, [pc, #240]	; (8007264 <HAL_GPIO_Init+0x220>)
 8007174:	42b0      	cmp	r0, r6
 8007176:	d05e      	beq.n	8007236 <HAL_GPIO_Init+0x1f2>
 8007178:	4e3b      	ldr	r6, [pc, #236]	; (8007268 <HAL_GPIO_Init+0x224>)
 800717a:	42b0      	cmp	r0, r6
 800717c:	d051      	beq.n	8007222 <HAL_GPIO_Init+0x1de>
 800717e:	4e3b      	ldr	r6, [pc, #236]	; (800726c <HAL_GPIO_Init+0x228>)
 8007180:	42b0      	cmp	r0, r6
 8007182:	d05d      	beq.n	8007240 <HAL_GPIO_Init+0x1fc>
 8007184:	4e3a      	ldr	r6, [pc, #232]	; (8007270 <HAL_GPIO_Init+0x22c>)
 8007186:	42b0      	cmp	r0, r6
 8007188:	d05f      	beq.n	800724a <HAL_GPIO_Init+0x206>
 800718a:	4e3a      	ldr	r6, [pc, #232]	; (8007274 <HAL_GPIO_Init+0x230>)
 800718c:	42b0      	cmp	r0, r6
 800718e:	bf0c      	ite	eq
 8007190:	2609      	moveq	r6, #9
 8007192:	260a      	movne	r6, #10
 8007194:	fa06 f202 	lsl.w	r2, r6, r2
 8007198:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 800719a:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800719c:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 80071a0:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80071a4:	03e5      	lsls	r5, r4, #15
    position++;
 80071a6:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 80071aa:	bf54      	ite	pl
 80071ac:	4032      	andpl	r2, r6
          temp |= iocurrent;
 80071ae:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80071b2:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80071b6:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 80071b8:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 80071bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80071c0:	bf54      	ite	pl
 80071c2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80071c4:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80071c8:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 80071ca:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 80071ce:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 80071d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80071d4:	bf54      	ite	pl
 80071d6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80071d8:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80071dc:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 80071de:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 80071e2:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 80071e4:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 80071e6:	bf54      	ite	pl
 80071e8:	4032      	andpl	r2, r6
          temp |= iocurrent;
 80071ea:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 80071ee:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80071f0:	fa39 f203 	lsrs.w	r2, r9, r3
 80071f4:	f47f af55 	bne.w	80070a2 <HAL_GPIO_Init+0x5e>
  }
}
 80071f8:	b005      	add	sp, #20
 80071fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fe:	40bd      	lsls	r5, r7
 8007200:	43ed      	mvns	r5, r5
 8007202:	e775      	b.n	80070f0 <HAL_GPIO_Init+0xac>
 8007204:	2603      	movs	r6, #3
 8007206:	fa06 f202 	lsl.w	r2, r6, r2
 800720a:	4315      	orrs	r5, r2
 800720c:	e7c5      	b.n	800719a <HAL_GPIO_Init+0x156>
 800720e:	2601      	movs	r6, #1
 8007210:	fa06 f202 	lsl.w	r2, r6, r2
 8007214:	4315      	orrs	r5, r2
 8007216:	e7c0      	b.n	800719a <HAL_GPIO_Init+0x156>
 8007218:	2602      	movs	r6, #2
 800721a:	fa06 f202 	lsl.w	r2, r6, r2
 800721e:	4315      	orrs	r5, r2
 8007220:	e7bb      	b.n	800719a <HAL_GPIO_Init+0x156>
 8007222:	2606      	movs	r6, #6
 8007224:	fa06 f202 	lsl.w	r2, r6, r2
 8007228:	4315      	orrs	r5, r2
 800722a:	e7b6      	b.n	800719a <HAL_GPIO_Init+0x156>
 800722c:	2604      	movs	r6, #4
 800722e:	fa06 f202 	lsl.w	r2, r6, r2
 8007232:	4315      	orrs	r5, r2
 8007234:	e7b1      	b.n	800719a <HAL_GPIO_Init+0x156>
 8007236:	2605      	movs	r6, #5
 8007238:	fa06 f202 	lsl.w	r2, r6, r2
 800723c:	4315      	orrs	r5, r2
 800723e:	e7ac      	b.n	800719a <HAL_GPIO_Init+0x156>
 8007240:	2607      	movs	r6, #7
 8007242:	fa06 f202 	lsl.w	r2, r6, r2
 8007246:	4315      	orrs	r5, r2
 8007248:	e7a7      	b.n	800719a <HAL_GPIO_Init+0x156>
 800724a:	2608      	movs	r6, #8
 800724c:	fa06 f202 	lsl.w	r2, r6, r2
 8007250:	4315      	orrs	r5, r2
 8007252:	e7a2      	b.n	800719a <HAL_GPIO_Init+0x156>
 8007254:	58020000 	.word	0x58020000
 8007258:	58020800 	.word	0x58020800
 800725c:	58020c00 	.word	0x58020c00
 8007260:	58021000 	.word	0x58021000
 8007264:	58021400 	.word	0x58021400
 8007268:	58021800 	.word	0x58021800
 800726c:	58021c00 	.word	0x58021c00
 8007270:	58022000 	.word	0x58022000
 8007274:	58022400 	.word	0x58022400
 8007278:	58024400 	.word	0x58024400
 800727c:	58000080 	.word	0x58000080

08007280 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007280:	b902      	cbnz	r2, 8007284 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007282:	0409      	lsls	r1, r1, #16
 8007284:	6181      	str	r1, [r0, #24]
  }
}
 8007286:	4770      	bx	lr

08007288 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007288:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800728a:	ea01 0203 	and.w	r2, r1, r3
 800728e:	ea21 0103 	bic.w	r1, r1, r3
 8007292:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007296:	6181      	str	r1, [r0, #24]
}
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop

0800729c <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800729c:	4a04      	ldr	r2, [pc, #16]	; (80072b0 <HAL_HSEM_FastTake+0x14>)
 800729e:	3020      	adds	r0, #32
 80072a0:	4b04      	ldr	r3, [pc, #16]	; (80072b4 <HAL_HSEM_FastTake+0x18>)
 80072a2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 80072a6:	1ac0      	subs	r0, r0, r3
 80072a8:	bf18      	it	ne
 80072aa:	2001      	movne	r0, #1
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	58026400 	.word	0x58026400
 80072b4:	80000300 	.word	0x80000300

080072b8 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80072b8:	4b02      	ldr	r3, [pc, #8]	; (80072c4 <HAL_HSEM_Release+0xc>)
 80072ba:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 80072be:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 80072c2:	4770      	bx	lr
 80072c4:	58026400 	.word	0x58026400

080072c8 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072c8:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80072ca:	f04f 0c00 	mov.w	ip, #0
{
 80072ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072d2:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072d4:	6804      	ldr	r4, [r0, #0]
 80072d6:	6848      	ldr	r0, [r1, #4]
{
 80072d8:	b083      	sub	sp, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072da:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072dc:	68e5      	ldr	r5, [r4, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80072de:	f8d1 800c 	ldr.w	r8, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072e2:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072e6:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072ea:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072ec:	eb05 0a00 	add.w	sl, r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072f0:	f40e 4570 	and.w	r5, lr, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072f4:	9001      	str	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072f6:	f106 0b01 	add.w	fp, r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80072fa:	6888      	ldr	r0, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072fc:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072fe:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007300:	f100 0901 	add.w	r9, r0, #1
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007304:	f8d1 e010 	ldr.w	lr, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007308:	f3c5 450b 	ubfx	r5, r5, #16, #12
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800730c:	4f38      	ldr	r7, [pc, #224]	; (80073f0 <LTDC_SetConfig+0x128>)
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800730e:	445d      	add	r5, fp
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007310:	f8d1 b018 	ldr.w	fp, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007314:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8007318:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800731a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800731e:	689d      	ldr	r5, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007320:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007324:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007328:	44c2      	add	sl, r8
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800732a:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800732e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007330:	68e5      	ldr	r5, [r4, #12]
 8007332:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8007336:	444d      	add	r5, r9
 8007338:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800733c:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800733e:	691d      	ldr	r5, [r3, #16]
 8007340:	f025 0507 	bic.w	r5, r5, #7
 8007344:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007346:	f8c3 e010 	str.w	lr, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800734a:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800734c:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007350:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007354:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007358:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800735c:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 8007360:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 8007364:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8007368:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800736a:	695d      	ldr	r5, [r3, #20]
 800736c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007370:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007372:	f8c3 8014 	str.w	r8, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007376:	69dd      	ldr	r5, [r3, #28]
 8007378:	402f      	ands	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800737a:	69cd      	ldr	r5, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800737c:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800737e:	e9d1 0708 	ldrd	r0, r7, [r1, #32]
 8007382:	4305      	orrs	r5, r0
 8007384:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007386:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8007388:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800738c:	629f      	str	r7, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800738e:	f1be 0f00 	cmp.w	lr, #0
 8007392:	d00b      	beq.n	80073ac <LTDC_SetConfig+0xe4>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007394:	f1be 0f01 	cmp.w	lr, #1
 8007398:	d026      	beq.n	80073e8 <LTDC_SetConfig+0x120>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800739a:	f1ae 0502 	sub.w	r5, lr, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800739e:	2d02      	cmp	r5, #2
 80073a0:	d902      	bls.n	80073a8 <LTDC_SetConfig+0xe0>
 80073a2:	f1be 0f07 	cmp.w	lr, #7
 80073a6:	d121      	bne.n	80073ec <LTDC_SetConfig+0x124>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 80073a8:	2702      	movs	r7, #2
 80073aa:	e000      	b.n	80073ae <LTDC_SetConfig+0xe6>
    tmp = 4U;
 80073ac:	2704      	movs	r7, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80073ae:	9801      	ldr	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80073b0:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80073b2:	1b80      	subs	r0, r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80073b4:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80073b8:	fb07 f000 	mul.w	r0, r7, r0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80073bc:	e9d1 6c0a 	ldrd	r6, ip, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80073c0:	3007      	adds	r0, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80073c2:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80073c4:	fb06 f607 	mul.w	r6, r6, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80073c8:	490a      	ldr	r1, [pc, #40]	; (80073f4 <LTDC_SetConfig+0x12c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80073ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80073ce:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80073d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80073d2:	4001      	ands	r1, r0
 80073d4:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80073d6:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80073da:	58a3      	ldr	r3, [r4, r2]
 80073dc:	f043 0301 	orr.w	r3, r3, #1
 80073e0:	50a3      	str	r3, [r4, r2]
}
 80073e2:	b003      	add	sp, #12
 80073e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3U;
 80073e8:	2703      	movs	r7, #3
 80073ea:	e7e0      	b.n	80073ae <LTDC_SetConfig+0xe6>
    tmp = 1U;
 80073ec:	2701      	movs	r7, #1
 80073ee:	e7de      	b.n	80073ae <LTDC_SetConfig+0xe6>
 80073f0:	fffff8f8 	.word	0xfffff8f8
 80073f4:	fffff800 	.word	0xfffff800

080073f8 <HAL_LTDC_MspInit>:
}
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop

080073fc <HAL_LTDC_Init>:
  if (hltdc == NULL)
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d06d      	beq.n	80074dc <HAL_LTDC_Init+0xe0>
{
 8007400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007402:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8007406:	4604      	mov	r4, r0
 8007408:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800740c:	2b00      	cmp	r3, #0
 800740e:	d060      	beq.n	80074d2 <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007410:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007412:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007414:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007416:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007418:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800741c:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800741e:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007420:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007424:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007428:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800742a:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800742c:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800742e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007432:	4e2b      	ldr	r6, [pc, #172]	; (80074e0 <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007434:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007436:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007438:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800743a:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800743c:	4302      	orrs	r2, r0
 800743e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	4032      	ands	r2, r6
 8007444:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007446:	6898      	ldr	r0, [r3, #8]
 8007448:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800744c:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800744e:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007452:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007456:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007458:	68d8      	ldr	r0, [r3, #12]
 800745a:	4030      	ands	r0, r6
 800745c:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800745e:	68da      	ldr	r2, [r3, #12]
 8007460:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007464:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007466:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800746a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800746e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007470:	691a      	ldr	r2, [r3, #16]
 8007472:	4032      	ands	r2, r6
 8007474:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007476:	6918      	ldr	r0, [r3, #16]
 8007478:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 800747c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800747e:	ea40 000c 	orr.w	r0, r0, ip
 8007482:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007484:	6958      	ldr	r0, [r3, #20]
 8007486:	4006      	ands	r6, r0
 8007488:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800748a:	695a      	ldr	r2, [r3, #20]
 800748c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800748e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8007492:	4302      	orrs	r2, r0
 8007494:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007496:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007498:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800749c:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80074a0:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80074a4:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80074a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80074a8:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80074ac:	4302      	orrs	r2, r0
  return HAL_OK;
 80074ae:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80074b0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80074b4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80074b8:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80074ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074bc:	f042 0206 	orr.w	r2, r2, #6
 80074c0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80074c2:	699a      	ldr	r2, [r3, #24]
 80074c4:	432a      	orrs	r2, r5
 80074c6:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80074c8:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80074cc:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 80074d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80074d2:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80074d6:	f7ff ff8f 	bl	80073f8 <HAL_LTDC_MspInit>
 80074da:	e799      	b.n	8007410 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 80074dc:	2001      	movs	r0, #1
}
 80074de:	4770      	bx	lr
 80074e0:	f000f800 	.word	0xf000f800

080074e4 <HAL_LTDC_ErrorCallback>:
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop

080074e8 <HAL_LTDC_ReloadEventCallback>:
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop

080074ec <HAL_LTDC_IRQHandler>:
{
 80074ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80074ee:	6803      	ldr	r3, [r0, #0]
{
 80074f0:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80074f2:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80074f4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80074f6:	0769      	lsls	r1, r5, #29
 80074f8:	d501      	bpl.n	80074fe <HAL_LTDC_IRQHandler+0x12>
 80074fa:	0772      	lsls	r2, r6, #29
 80074fc:	d41d      	bmi.n	800753a <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80074fe:	07ab      	lsls	r3, r5, #30
 8007500:	d501      	bpl.n	8007506 <HAL_LTDC_IRQHandler+0x1a>
 8007502:	07b7      	lsls	r7, r6, #30
 8007504:	d42d      	bmi.n	8007562 <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007506:	07e8      	lsls	r0, r5, #31
 8007508:	d501      	bpl.n	800750e <HAL_LTDC_IRQHandler+0x22>
 800750a:	07f1      	lsls	r1, r6, #31
 800750c:	d440      	bmi.n	8007590 <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800750e:	072a      	lsls	r2, r5, #28
 8007510:	d501      	bpl.n	8007516 <HAL_LTDC_IRQHandler+0x2a>
 8007512:	0733      	lsls	r3, r6, #28
 8007514:	d400      	bmi.n	8007518 <HAL_LTDC_IRQHandler+0x2c>
}
 8007516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007518:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800751a:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 800751c:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 800751e:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007522:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007524:	f022 0208 	bic.w	r2, r2, #8
 8007528:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800752a:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800752c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007530:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007534:	f7ff ffd8 	bl	80074e8 <HAL_LTDC_ReloadEventCallback>
}
 8007538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800753a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800753c:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 800753e:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007540:	f022 0204 	bic.w	r2, r2, #4
 8007544:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007546:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007548:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800754c:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007550:	f043 0301 	orr.w	r3, r3, #1
 8007554:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007558:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 800755c:	f7ff ffc2 	bl	80074e4 <HAL_LTDC_ErrorCallback>
 8007560:	e7cd      	b.n	80074fe <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007562:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007564:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007566:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800756a:	f022 0202 	bic.w	r2, r2, #2
 800756e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 8007570:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007572:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 8007574:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007576:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800757a:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800757e:	f043 0302 	orr.w	r3, r3, #2
 8007582:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007586:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 800758a:	f7ff ffab 	bl	80074e4 <HAL_LTDC_ErrorCallback>
 800758e:	e7ba      	b.n	8007506 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007590:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007592:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 8007594:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 8007596:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800759a:	f022 0201 	bic.w	r2, r2, #1
 800759e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80075a0:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80075a2:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80075a6:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80075aa:	f7fc fbd1 	bl	8003d50 <HAL_LTDC_LineEventCallback>
 80075ae:	e7ae      	b.n	800750e <HAL_LTDC_IRQHandler+0x22>

080075b0 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 80075b0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d028      	beq.n	800760a <HAL_LTDC_ConfigLayer+0x5a>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075b8:	2302      	movs	r3, #2
 80075ba:	4694      	mov	ip, r2
{
 80075bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80075c0:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80075c2:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80075c6:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075c8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80075cc:	fb04 0402 	mla	r4, r4, r2, r0
 80075d0:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 80075d2:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80075d6:	460f      	mov	r7, r1
 80075d8:	3438      	adds	r4, #56	; 0x38
 80075da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075e6:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80075e8:	4662      	mov	r2, ip
 80075ea:	4630      	mov	r0, r6
 80075ec:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80075ee:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80075f0:	f7ff fe6a 	bl	80072c8 <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 80075f4:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80075f6:	6832      	ldr	r2, [r6, #0]
  return HAL_OK;
 80075f8:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80075fa:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80075fe:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007602:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
}
 8007606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 800760a:	2002      	movs	r0, #2
}
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop

08007610 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8007610:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 8007614:	2a01      	cmp	r2, #1
 8007616:	d017      	beq.n	8007648 <HAL_LTDC_ProgramLineEvent+0x38>
 8007618:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800761a:	2002      	movs	r0, #2
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800761c:	681a      	ldr	r2, [r3, #0]
{
 800761e:	b470      	push	{r4, r5, r6}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007620:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  hltdc->State = HAL_LTDC_STATE_READY;
 8007624:	2501      	movs	r5, #1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007626:	6b50      	ldr	r0, [r2, #52]	; 0x34
  __HAL_UNLOCK(hltdc);
 8007628:	2400      	movs	r4, #0
  LTDC->LIPCR = (uint32_t)Line;
 800762a:	4e08      	ldr	r6, [pc, #32]	; (800764c <HAL_LTDC_ProgramLineEvent+0x3c>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800762c:	f020 0001 	bic.w	r0, r0, #1
 8007630:	6350      	str	r0, [r2, #52]	; 0x34
  return HAL_OK;
 8007632:	4620      	mov	r0, r4
  LTDC->LIPCR = (uint32_t)Line;
 8007634:	6431      	str	r1, [r6, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8007636:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8007638:	4329      	orrs	r1, r5
 800763a:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800763c:	f883 50a1 	strb.w	r5, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007640:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
}
 8007644:	bc70      	pop	{r4, r5, r6}
 8007646:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8007648:	2002      	movs	r0, #2
}
 800764a:	4770      	bx	lr
 800764c:	50001000 	.word	0x50001000

08007650 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007654:	f7fe f924 	bl	80058a0 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007658:	2c00      	cmp	r4, #0
 800765a:	d05a      	beq.n	8007712 <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800765c:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800765e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8007660:	2100      	movs	r1, #0
 8007662:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007664:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 8007668:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	f022 0201 	bic.w	r2, r2, #1
 8007672:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007674:	e005      	b.n	8007682 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8007676:	f7fe f913 	bl	80058a0 <HAL_GetTick>
 800767a:	1b43      	subs	r3, r0, r5
 800767c:	2b05      	cmp	r3, #5
 800767e:	d841      	bhi.n	8007704 <HAL_MDMA_Init+0xb4>
 8007680:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007682:	68da      	ldr	r2, [r3, #12]
 8007684:	07d2      	lsls	r2, r2, #31
 8007686:	d4f6      	bmi.n	8007676 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007688:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 800768c:	69e1      	ldr	r1, [r4, #28]
 800768e:	4302      	orrs	r2, r0
 8007690:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 8007694:	430a      	orrs	r2, r1
 8007696:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007698:	432a      	orrs	r2, r5
 800769a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800769c:	4302      	orrs	r2, r0
 800769e:	68a0      	ldr	r0, [r4, #8]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80076a4:	432a      	orrs	r2, r5
 80076a6:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80076a8:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80076aa:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80076ac:	6920      	ldr	r0, [r4, #16]
 80076ae:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80076b0:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80076b2:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80076b6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80076ba:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80076bc:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80076be:	d103      	bne.n	80076c8 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80076c0:	691a      	ldr	r2, [r3, #16]
 80076c2:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80076c6:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80076c8:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80076ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80076cc:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 80076ce:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80076d0:	db30      	blt.n	8007734 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80076d2:	b292      	uxth	r2, r2
 80076d4:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80076d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80076d8:	2a00      	cmp	r2, #0
 80076da:	db1c      	blt.n	8007716 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80076dc:	6a18      	ldr	r0, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80076de:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80076e2:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 80076e6:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80076e8:	d021      	beq.n	800772e <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80076ea:	b2c9      	uxtb	r1, r1
 80076ec:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80076ee:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 80076f0:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 80076f2:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 80076f4:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80076f6:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 80076f8:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 80076fa:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 80076fe:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8007702:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007704:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007706:	2303      	movs	r3, #3
      return HAL_ERROR;
 8007708:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800770a:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800770c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007710:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007712:	2001      	movs	r0, #1
}
 8007714:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007716:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007718:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800771a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800771e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8007722:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007724:	6a18      	ldr	r0, [r3, #32]
 8007726:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800772a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800772c:	d1dd      	bne.n	80076ea <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 800772e:	2200      	movs	r2, #0
 8007730:	629a      	str	r2, [r3, #40]	; 0x28
 8007732:	e7dc      	b.n	80076ee <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007734:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8007736:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007738:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800773c:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800773e:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8007740:	621a      	str	r2, [r3, #32]
 8007742:	e7c8      	b.n	80076d6 <HAL_MDMA_Init+0x86>

08007744 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8007744:	b1f0      	cbz	r0, 8007784 <HAL_MDMA_DeInit+0x40>
  __HAL_MDMA_DISABLE(hmdma);
 8007746:	6802      	ldr	r2, [r0, #0]
  hmdma->Instance->CCR  = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	4601      	mov	r1, r0
  return HAL_OK;
 800774c:	4618      	mov	r0, r3
{
 800774e:	b430      	push	{r4, r5}
  __HAL_MDMA_DISABLE(hmdma);
 8007750:	68d4      	ldr	r4, [r2, #12]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007752:	251f      	movs	r5, #31
  __HAL_MDMA_DISABLE(hmdma);
 8007754:	f024 0401 	bic.w	r4, r4, #1
 8007758:	60d4      	str	r4, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800775a:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800775c:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800775e:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8007760:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8007762:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8007764:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8007766:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8007768:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800776a:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800776c:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800776e:	6055      	str	r5, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007770:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
 8007772:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 8007776:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
  hmdma->LinkedListNodeCounter  = 0;
 800777a:	664b      	str	r3, [r1, #100]	; 0x64
}
 800777c:	bc30      	pop	{r4, r5}
  hmdma->LastLinkedListNodeAddress   = 0;
 800777e:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
 8007782:	4770      	bx	lr
    return HAL_ERROR;
 8007784:	2001      	movs	r0, #1
}
 8007786:	4770      	bx	lr

08007788 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007788:	4a1c      	ldr	r2, [pc, #112]	; (80077fc <HAL_PWREx_ConfigSupply+0x74>)
 800778a:	68d3      	ldr	r3, [r2, #12]
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007792:	68d3      	ldr	r3, [r2, #12]
{
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007798:	d005      	beq.n	80077a6 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800779a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800779e:	1a18      	subs	r0, r3, r0
 80077a0:	bf18      	it	ne
 80077a2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80077a4:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80077a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80077aa:	4616      	mov	r6, r2
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80077ac:	4303      	orrs	r3, r0
 80077ae:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 80077b0:	f7fe f876 	bl	80058a0 <HAL_GetTick>
 80077b4:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80077b6:	e005      	b.n	80077c4 <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80077b8:	f7fe f872 	bl	80058a0 <HAL_GetTick>
 80077bc:	1b43      	subs	r3, r0, r5
 80077be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077c2:	d819      	bhi.n	80077f8 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80077c4:	6873      	ldr	r3, [r6, #4]
 80077c6:	049a      	lsls	r2, r3, #18
 80077c8:	d5f6      	bpl.n	80077b8 <HAL_PWREx_ConfigSupply+0x30>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80077ca:	f1a4 031d 	sub.w	r3, r4, #29
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d905      	bls.n	80077de <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 80077d2:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80077d6:	2801      	cmp	r0, #1
 80077d8:	d901      	bls.n	80077de <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 80077da:	2000      	movs	r0, #0
}
 80077dc:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 80077de:	f7fe f85f 	bl	80058a0 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80077e2:	4d06      	ldr	r5, [pc, #24]	; (80077fc <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 80077e4:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80077e6:	68eb      	ldr	r3, [r5, #12]
 80077e8:	03db      	lsls	r3, r3, #15
 80077ea:	d4f6      	bmi.n	80077da <HAL_PWREx_ConfigSupply+0x52>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80077ec:	f7fe f858 	bl	80058a0 <HAL_GetTick>
 80077f0:	1b00      	subs	r0, r0, r4
 80077f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80077f6:	d9f6      	bls.n	80077e6 <HAL_PWREx_ConfigSupply+0x5e>
      return HAL_ERROR;
 80077f8:	2001      	movs	r0, #1
}
 80077fa:	bd70      	pop	{r4, r5, r6, pc}
 80077fc:	58024800 	.word	0x58024800

08007800 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007800:	2800      	cmp	r0, #0
 8007802:	f000 81f7 	beq.w	8007bf4 <HAL_RCC_OscConfig+0x3f4>
{
 8007806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007808:	6803      	ldr	r3, [r0, #0]
 800780a:	4604      	mov	r4, r0
 800780c:	07d9      	lsls	r1, r3, #31
 800780e:	d52e      	bpl.n	800786e <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007810:	49b4      	ldr	r1, [pc, #720]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
 8007812:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007814:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007816:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800781a:	2a10      	cmp	r2, #16
 800781c:	f000 812c 	beq.w	8007a78 <HAL_RCC_OscConfig+0x278>
 8007820:	2a18      	cmp	r2, #24
 8007822:	f000 8124 	beq.w	8007a6e <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007826:	6863      	ldr	r3, [r4, #4]
 8007828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800782c:	f000 8167 	beq.w	8007afe <HAL_RCC_OscConfig+0x2fe>
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 817f 	beq.w	8007b34 <HAL_RCC_OscConfig+0x334>
 8007836:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800783a:	4baa      	ldr	r3, [pc, #680]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	f000 8278 	beq.w	8007d32 <HAL_RCC_OscConfig+0x532>
 8007842:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800784e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007850:	f7fe f826 	bl	80058a0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007854:	4ea3      	ldr	r6, [pc, #652]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 8007856:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007858:	e005      	b.n	8007866 <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800785a:	f7fe f821 	bl	80058a0 <HAL_GetTick>
 800785e:	1b40      	subs	r0, r0, r5
 8007860:	2864      	cmp	r0, #100	; 0x64
 8007862:	f200 8165 	bhi.w	8007b30 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007866:	6833      	ldr	r3, [r6, #0]
 8007868:	039f      	lsls	r7, r3, #14
 800786a:	d5f6      	bpl.n	800785a <HAL_RCC_OscConfig+0x5a>
 800786c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800786e:	0799      	lsls	r1, r3, #30
 8007870:	d521      	bpl.n	80078b6 <HAL_RCC_OscConfig+0xb6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007872:	4a9c      	ldr	r2, [pc, #624]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
 8007874:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007876:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007878:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800787c:	f040 80a8 	bne.w	80079d0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007880:	4b98      	ldr	r3, [pc, #608]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	075b      	lsls	r3, r3, #29
 8007886:	d503      	bpl.n	8007890 <HAL_RCC_OscConfig+0x90>
 8007888:	68e3      	ldr	r3, [r4, #12]
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 80ed 	beq.w	8007a6a <HAL_RCC_OscConfig+0x26a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007890:	f7fe f81e 	bl	80058d0 <HAL_GetREVID>
 8007894:	f241 0303 	movw	r3, #4099	; 0x1003
 8007898:	4298      	cmp	r0, r3
 800789a:	f200 8189 	bhi.w	8007bb0 <HAL_RCC_OscConfig+0x3b0>
 800789e:	6922      	ldr	r2, [r4, #16]
 80078a0:	2a40      	cmp	r2, #64	; 0x40
 80078a2:	f000 824e 	beq.w	8007d42 <HAL_RCC_OscConfig+0x542>
 80078a6:	498f      	ldr	r1, [pc, #572]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
 80078a8:	684b      	ldr	r3, [r1, #4]
 80078aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80078ae:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80078b2:	604b      	str	r3, [r1, #4]
 80078b4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80078b6:	06d9      	lsls	r1, r3, #27
 80078b8:	d456      	bmi.n	8007968 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078ba:	071d      	lsls	r5, r3, #28
 80078bc:	d517      	bpl.n	80078ee <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078be:	6963      	ldr	r3, [r4, #20]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 80b4 	beq.w	8007a2e <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078c6:	4b87      	ldr	r3, [pc, #540]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
 80078c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078ca:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 80078cc:	f042 0201 	orr.w	r2, r2, #1
 80078d0:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80078d2:	f7fd ffe5 	bl	80058a0 <HAL_GetTick>
 80078d6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078d8:	e005      	b.n	80078e6 <HAL_RCC_OscConfig+0xe6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078da:	f7fd ffe1 	bl	80058a0 <HAL_GetTick>
 80078de:	1b40      	subs	r0, r0, r5
 80078e0:	2802      	cmp	r0, #2
 80078e2:	f200 8125 	bhi.w	8007b30 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078e6:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80078e8:	0798      	lsls	r0, r3, #30
 80078ea:	d5f6      	bpl.n	80078da <HAL_RCC_OscConfig+0xda>
 80078ec:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80078ee:	069a      	lsls	r2, r3, #26
 80078f0:	d517      	bpl.n	8007922 <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80078f2:	69a3      	ldr	r3, [r4, #24]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 8134 	beq.w	8007b62 <HAL_RCC_OscConfig+0x362>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078fa:	4b7a      	ldr	r3, [pc, #488]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
 80078fc:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078fe:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8007900:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007904:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007906:	f7fd ffcb 	bl	80058a0 <HAL_GetTick>
 800790a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800790c:	e005      	b.n	800791a <HAL_RCC_OscConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800790e:	f7fd ffc7 	bl	80058a0 <HAL_GetTick>
 8007912:	1b40      	subs	r0, r0, r5
 8007914:	2802      	cmp	r0, #2
 8007916:	f200 810b 	bhi.w	8007b30 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800791a:	6833      	ldr	r3, [r6, #0]
 800791c:	049f      	lsls	r7, r3, #18
 800791e:	d5f6      	bpl.n	800790e <HAL_RCC_OscConfig+0x10e>
 8007920:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007922:	0759      	lsls	r1, r3, #29
 8007924:	f100 80b2 	bmi.w	8007a8c <HAL_RCC_OscConfig+0x28c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007928:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800792a:	b1d8      	cbz	r0, 8007964 <HAL_RCC_OscConfig+0x164>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800792c:	4b6d      	ldr	r3, [pc, #436]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
 800792e:	691a      	ldr	r2, [r3, #16]
 8007930:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8007934:	2a18      	cmp	r2, #24
 8007936:	f000 81ce 	beq.w	8007cd6 <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800793a:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800793c:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800793e:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8007940:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007944:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007946:	f000 8161 	beq.w	8007c0c <HAL_RCC_OscConfig+0x40c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800794a:	f7fd ffa9 	bl	80058a0 <HAL_GetTick>
 800794e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007950:	e005      	b.n	800795e <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007952:	f7fd ffa5 	bl	80058a0 <HAL_GetTick>
 8007956:	1b00      	subs	r0, r0, r4
 8007958:	2802      	cmp	r0, #2
 800795a:	f200 80e9 	bhi.w	8007b30 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800795e:	682b      	ldr	r3, [r5, #0]
 8007960:	019b      	lsls	r3, r3, #6
 8007962:	d4f6      	bmi.n	8007952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8007964:	2000      	movs	r0, #0
}
 8007966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007968:	4a5e      	ldr	r2, [pc, #376]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
 800796a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800796c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800796e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007972:	2b08      	cmp	r3, #8
 8007974:	d072      	beq.n	8007a5c <HAL_RCC_OscConfig+0x25c>
 8007976:	2b18      	cmp	r3, #24
 8007978:	d06c      	beq.n	8007a54 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800797a:	69e3      	ldr	r3, [r4, #28]
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 8103 	beq.w	8007b88 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 8007982:	4b58      	ldr	r3, [pc, #352]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
 8007984:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007986:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8007988:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800798c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800798e:	f7fd ff87 	bl	80058a0 <HAL_GetTick>
 8007992:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007994:	e005      	b.n	80079a2 <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007996:	f7fd ff83 	bl	80058a0 <HAL_GetTick>
 800799a:	1b40      	subs	r0, r0, r5
 800799c:	2802      	cmp	r0, #2
 800799e:	f200 80c7 	bhi.w	8007b30 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079a2:	6833      	ldr	r3, [r6, #0]
 80079a4:	05db      	lsls	r3, r3, #23
 80079a6:	d5f6      	bpl.n	8007996 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079a8:	f7fd ff92 	bl	80058d0 <HAL_GetREVID>
 80079ac:	f241 0303 	movw	r3, #4099	; 0x1003
 80079b0:	4298      	cmp	r0, r3
 80079b2:	f200 81e9 	bhi.w	8007d88 <HAL_RCC_OscConfig+0x588>
 80079b6:	6a22      	ldr	r2, [r4, #32]
 80079b8:	6873      	ldr	r3, [r6, #4]
 80079ba:	2a20      	cmp	r2, #32
 80079bc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80079c0:	bf0c      	ite	eq
 80079c2:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80079c6:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80079ca:	6073      	str	r3, [r6, #4]
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	e774      	b.n	80078ba <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80079d0:	2b18      	cmp	r3, #24
 80079d2:	f000 810b 	beq.w	8007bec <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80079d6:	68e2      	ldr	r2, [r4, #12]
 80079d8:	2a00      	cmp	r2, #0
 80079da:	f000 80f3 	beq.w	8007bc4 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079de:	4941      	ldr	r1, [pc, #260]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
 80079e0:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079e2:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079e4:	f023 0319 	bic.w	r3, r3, #25
 80079e8:	4313      	orrs	r3, r2
 80079ea:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80079ec:	f7fd ff58 	bl	80058a0 <HAL_GetTick>
 80079f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079f2:	e005      	b.n	8007a00 <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079f4:	f7fd ff54 	bl	80058a0 <HAL_GetTick>
 80079f8:	1b40      	subs	r0, r0, r5
 80079fa:	2802      	cmp	r0, #2
 80079fc:	f200 8098 	bhi.w	8007b30 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a00:	6833      	ldr	r3, [r6, #0]
 8007a02:	075f      	lsls	r7, r3, #29
 8007a04:	d5f6      	bpl.n	80079f4 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a06:	f7fd ff63 	bl	80058d0 <HAL_GetREVID>
 8007a0a:	f241 0303 	movw	r3, #4099	; 0x1003
 8007a0e:	4298      	cmp	r0, r3
 8007a10:	f200 81c3 	bhi.w	8007d9a <HAL_RCC_OscConfig+0x59a>
 8007a14:	6922      	ldr	r2, [r4, #16]
 8007a16:	6873      	ldr	r3, [r6, #4]
 8007a18:	2a40      	cmp	r2, #64	; 0x40
 8007a1a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007a1e:	bf0c      	ite	eq
 8007a20:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8007a24:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8007a28:	6073      	str	r3, [r6, #4]
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	e743      	b.n	80078b6 <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 8007a2e:	4b2d      	ldr	r3, [pc, #180]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
 8007a30:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a32:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8007a34:	f022 0201 	bic.w	r2, r2, #1
 8007a38:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007a3a:	f7fd ff31 	bl	80058a0 <HAL_GetTick>
 8007a3e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a40:	e004      	b.n	8007a4c <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a42:	f7fd ff2d 	bl	80058a0 <HAL_GetTick>
 8007a46:	1b40      	subs	r0, r0, r5
 8007a48:	2802      	cmp	r0, #2
 8007a4a:	d871      	bhi.n	8007b30 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a4c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8007a4e:	0799      	lsls	r1, r3, #30
 8007a50:	d4f7      	bmi.n	8007a42 <HAL_RCC_OscConfig+0x242>
 8007a52:	e74b      	b.n	80078ec <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007a54:	f002 0203 	and.w	r2, r2, #3
 8007a58:	2a01      	cmp	r2, #1
 8007a5a:	d18e      	bne.n	800797a <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a5c:	4b21      	ldr	r3, [pc, #132]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	05da      	lsls	r2, r3, #23
 8007a62:	d552      	bpl.n	8007b0a <HAL_RCC_OscConfig+0x30a>
 8007a64:	69e3      	ldr	r3, [r4, #28]
 8007a66:	2b80      	cmp	r3, #128	; 0x80
 8007a68:	d04f      	beq.n	8007b0a <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8007a6a:	2001      	movs	r0, #1
}
 8007a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007a6e:	f001 0103 	and.w	r1, r1, #3
 8007a72:	2902      	cmp	r1, #2
 8007a74:	f47f aed7 	bne.w	8007826 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a78:	4a1a      	ldr	r2, [pc, #104]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
 8007a7a:	6812      	ldr	r2, [r2, #0]
 8007a7c:	0392      	lsls	r2, r2, #14
 8007a7e:	f57f aef6 	bpl.w	800786e <HAL_RCC_OscConfig+0x6e>
 8007a82:	6862      	ldr	r2, [r4, #4]
 8007a84:	2a00      	cmp	r2, #0
 8007a86:	f47f aef2 	bne.w	800786e <HAL_RCC_OscConfig+0x6e>
 8007a8a:	e7ee      	b.n	8007a6a <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 8007a8c:	4b16      	ldr	r3, [pc, #88]	; (8007ae8 <HAL_RCC_OscConfig+0x2e8>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a90:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8007a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a96:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8007a98:	f7fd ff02 	bl	80058a0 <HAL_GetTick>
 8007a9c:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a9e:	e004      	b.n	8007aaa <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007aa0:	f7fd fefe 	bl	80058a0 <HAL_GetTick>
 8007aa4:	1b40      	subs	r0, r0, r5
 8007aa6:	2864      	cmp	r0, #100	; 0x64
 8007aa8:	d842      	bhi.n	8007b30 <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aaa:	6833      	ldr	r3, [r6, #0]
 8007aac:	05da      	lsls	r2, r3, #23
 8007aae:	d5f7      	bpl.n	8007aa0 <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ab0:	68a3      	ldr	r3, [r4, #8]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	f000 817a 	beq.w	8007dac <HAL_RCC_OscConfig+0x5ac>
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 814b 	beq.w	8007d54 <HAL_RCC_OscConfig+0x554>
 8007abe:	2b05      	cmp	r3, #5
 8007ac0:	4b08      	ldr	r3, [pc, #32]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
 8007ac2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ac4:	f000 8187 	beq.w	8007dd6 <HAL_RCC_OscConfig+0x5d6>
 8007ac8:	f022 0201 	bic.w	r2, r2, #1
 8007acc:	671a      	str	r2, [r3, #112]	; 0x70
 8007ace:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ad0:	f022 0204 	bic.w	r2, r2, #4
 8007ad4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8007ad6:	f7fd fee3 	bl	80058a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ada:	4e02      	ldr	r6, [pc, #8]	; (8007ae4 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007adc:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007ae0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ae2:	e008      	b.n	8007af6 <HAL_RCC_OscConfig+0x2f6>
 8007ae4:	58024400 	.word	0x58024400
 8007ae8:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007aec:	f7fd fed8 	bl	80058a0 <HAL_GetTick>
 8007af0:	1b40      	subs	r0, r0, r5
 8007af2:	42b8      	cmp	r0, r7
 8007af4:	d81c      	bhi.n	8007b30 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007af6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8007af8:	079b      	lsls	r3, r3, #30
 8007afa:	d5f7      	bpl.n	8007aec <HAL_RCC_OscConfig+0x2ec>
 8007afc:	e714      	b.n	8007928 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007afe:	4aae      	ldr	r2, [pc, #696]	; (8007db8 <HAL_RCC_OscConfig+0x5b8>)
 8007b00:	6813      	ldr	r3, [r2, #0]
 8007b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b06:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b08:	e6a2      	b.n	8007850 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b0a:	f7fd fee1 	bl	80058d0 <HAL_GetREVID>
 8007b0e:	f241 0303 	movw	r3, #4099	; 0x1003
 8007b12:	4298      	cmp	r0, r3
 8007b14:	d870      	bhi.n	8007bf8 <HAL_RCC_OscConfig+0x3f8>
 8007b16:	6a22      	ldr	r2, [r4, #32]
 8007b18:	2a20      	cmp	r2, #32
 8007b1a:	f000 8153 	beq.w	8007dc4 <HAL_RCC_OscConfig+0x5c4>
 8007b1e:	49a6      	ldr	r1, [pc, #664]	; (8007db8 <HAL_RCC_OscConfig+0x5b8>)
 8007b20:	684b      	ldr	r3, [r1, #4]
 8007b22:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007b26:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8007b2a:	604b      	str	r3, [r1, #4]
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	e6c4      	b.n	80078ba <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8007b30:	2003      	movs	r0, #3
}
 8007b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b34:	4ba0      	ldr	r3, [pc, #640]	; (8007db8 <HAL_RCC_OscConfig+0x5b8>)
 8007b36:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b38:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b46:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007b48:	f7fd feaa 	bl	80058a0 <HAL_GetTick>
 8007b4c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b4e:	e004      	b.n	8007b5a <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b50:	f7fd fea6 	bl	80058a0 <HAL_GetTick>
 8007b54:	1b40      	subs	r0, r0, r5
 8007b56:	2864      	cmp	r0, #100	; 0x64
 8007b58:	d8ea      	bhi.n	8007b30 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b5a:	6833      	ldr	r3, [r6, #0]
 8007b5c:	0398      	lsls	r0, r3, #14
 8007b5e:	d4f7      	bmi.n	8007b50 <HAL_RCC_OscConfig+0x350>
 8007b60:	e684      	b.n	800786c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 8007b62:	4b95      	ldr	r3, [pc, #596]	; (8007db8 <HAL_RCC_OscConfig+0x5b8>)
 8007b64:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b66:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 8007b68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b6c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007b6e:	f7fd fe97 	bl	80058a0 <HAL_GetTick>
 8007b72:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b74:	e004      	b.n	8007b80 <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007b76:	f7fd fe93 	bl	80058a0 <HAL_GetTick>
 8007b7a:	1b40      	subs	r0, r0, r5
 8007b7c:	2802      	cmp	r0, #2
 8007b7e:	d8d7      	bhi.n	8007b30 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b80:	6833      	ldr	r3, [r6, #0]
 8007b82:	0498      	lsls	r0, r3, #18
 8007b84:	d4f7      	bmi.n	8007b76 <HAL_RCC_OscConfig+0x376>
 8007b86:	e6cb      	b.n	8007920 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 8007b88:	4b8b      	ldr	r3, [pc, #556]	; (8007db8 <HAL_RCC_OscConfig+0x5b8>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b8c:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 8007b8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b92:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007b94:	f7fd fe84 	bl	80058a0 <HAL_GetTick>
 8007b98:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b9a:	e004      	b.n	8007ba6 <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007b9c:	f7fd fe80 	bl	80058a0 <HAL_GetTick>
 8007ba0:	1b40      	subs	r0, r0, r5
 8007ba2:	2802      	cmp	r0, #2
 8007ba4:	d8c4      	bhi.n	8007b30 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ba6:	6833      	ldr	r3, [r6, #0]
 8007ba8:	05df      	lsls	r7, r3, #23
 8007baa:	d4f7      	bmi.n	8007b9c <HAL_RCC_OscConfig+0x39c>
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	e684      	b.n	80078ba <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bb0:	4a81      	ldr	r2, [pc, #516]	; (8007db8 <HAL_RCC_OscConfig+0x5b8>)
 8007bb2:	6921      	ldr	r1, [r4, #16]
 8007bb4:	6853      	ldr	r3, [r2, #4]
 8007bb6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007bba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007bbe:	6053      	str	r3, [r2, #4]
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	e678      	b.n	80078b6 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 8007bc4:	4b7c      	ldr	r3, [pc, #496]	; (8007db8 <HAL_RCC_OscConfig+0x5b8>)
 8007bc6:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bc8:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8007bca:	f022 0201 	bic.w	r2, r2, #1
 8007bce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007bd0:	f7fd fe66 	bl	80058a0 <HAL_GetTick>
 8007bd4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bd6:	e004      	b.n	8007be2 <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bd8:	f7fd fe62 	bl	80058a0 <HAL_GetTick>
 8007bdc:	1b40      	subs	r0, r0, r5
 8007bde:	2802      	cmp	r0, #2
 8007be0:	d8a6      	bhi.n	8007b30 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007be2:	6833      	ldr	r3, [r6, #0]
 8007be4:	0758      	lsls	r0, r3, #29
 8007be6:	d4f7      	bmi.n	8007bd8 <HAL_RCC_OscConfig+0x3d8>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	e664      	b.n	80078b6 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007bec:	0792      	lsls	r2, r2, #30
 8007bee:	f47f aef2 	bne.w	80079d6 <HAL_RCC_OscConfig+0x1d6>
 8007bf2:	e645      	b.n	8007880 <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8007bf4:	2001      	movs	r0, #1
}
 8007bf6:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007bf8:	4a6f      	ldr	r2, [pc, #444]	; (8007db8 <HAL_RCC_OscConfig+0x5b8>)
 8007bfa:	6a21      	ldr	r1, [r4, #32]
 8007bfc:	68d3      	ldr	r3, [r2, #12]
 8007bfe:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8007c02:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007c06:	60d3      	str	r3, [r2, #12]
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	e656      	b.n	80078ba <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8007c0c:	f7fd fe48 	bl	80058a0 <HAL_GetTick>
 8007c10:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c12:	e004      	b.n	8007c1e <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c14:	f7fd fe44 	bl	80058a0 <HAL_GetTick>
 8007c18:	1b80      	subs	r0, r0, r6
 8007c1a:	2802      	cmp	r0, #2
 8007c1c:	d888      	bhi.n	8007b30 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c1e:	682b      	ldr	r3, [r5, #0]
 8007c20:	0199      	lsls	r1, r3, #6
 8007c22:	d4f7      	bmi.n	8007c14 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c24:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007c26:	4b65      	ldr	r3, [pc, #404]	; (8007dbc <HAL_RCC_OscConfig+0x5bc>)
 8007c28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c2e:	4964      	ldr	r1, [pc, #400]	; (8007dc0 <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c30:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c32:	4e61      	ldr	r6, [pc, #388]	; (8007db8 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c34:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8007c38:	62ab      	str	r3, [r5, #40]	; 0x28
 8007c3a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8007c3c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8007c40:	3f01      	subs	r7, #1
 8007c42:	1e50      	subs	r0, r2, #1
 8007c44:	3b01      	subs	r3, #1
 8007c46:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007c48:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8007c4c:	025b      	lsls	r3, r3, #9
 8007c4e:	0400      	lsls	r0, r0, #16
 8007c50:	3a01      	subs	r2, #1
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8007c58:	0612      	lsls	r2, r2, #24
 8007c5a:	4303      	orrs	r3, r0
 8007c5c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007c60:	433b      	orrs	r3, r7
 8007c62:	4313      	orrs	r3, r2
 8007c64:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8007c66:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007c68:	f023 0301 	bic.w	r3, r3, #1
 8007c6c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c6e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8007c70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007c72:	4011      	ands	r1, r2
 8007c74:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8007c78:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007c7a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007c7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007c7e:	f023 030c 	bic.w	r3, r3, #12
 8007c82:	4313      	orrs	r3, r2
 8007c84:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007c86:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007c88:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007c8a:	f023 0302 	bic.w	r3, r3, #2
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c92:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c98:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ca0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ca2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ca8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8007caa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007cac:	f043 0301 	orr.w	r3, r3, #1
 8007cb0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8007cb2:	682b      	ldr	r3, [r5, #0]
 8007cb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cb8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007cba:	f7fd fdf1 	bl	80058a0 <HAL_GetTick>
 8007cbe:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007cc0:	e005      	b.n	8007cce <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cc2:	f7fd fded 	bl	80058a0 <HAL_GetTick>
 8007cc6:	1b00      	subs	r0, r0, r4
 8007cc8:	2802      	cmp	r0, #2
 8007cca:	f63f af31 	bhi.w	8007b30 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007cce:	6833      	ldr	r3, [r6, #0]
 8007cd0:	019a      	lsls	r2, r3, #6
 8007cd2:	d5f6      	bpl.n	8007cc2 <HAL_RCC_OscConfig+0x4c2>
 8007cd4:	e646      	b.n	8007964 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cd6:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007cda:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cdc:	f43f ae43 	beq.w	8007966 <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ce0:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ce4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007ce6:	428b      	cmp	r3, r1
 8007ce8:	f47f aebf 	bne.w	8007a6a <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cec:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cf0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	f47f aeb9 	bne.w	8007a6a <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007cf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007cfa:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8007cfe:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d00:	429a      	cmp	r2, r3
 8007d02:	f47f aeb2 	bne.w	8007a6a <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d08:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8007d0c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	f47f aeab 	bne.w	8007a6a <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007d16:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8007d1a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	f47f aea4 	bne.w	8007a6a <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007d22:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007d24:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8007d28:	3801      	subs	r0, #1
  return HAL_OK;
 8007d2a:	1a28      	subs	r0, r5, r0
 8007d2c:	bf18      	it	ne
 8007d2e:	2001      	movne	r0, #1
}
 8007d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d32:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	e586      	b.n	8007850 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d42:	4a1d      	ldr	r2, [pc, #116]	; (8007db8 <HAL_RCC_OscConfig+0x5b8>)
 8007d44:	6853      	ldr	r3, [r2, #4]
 8007d46:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d4e:	6053      	str	r3, [r2, #4]
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	e5b0      	b.n	80078b6 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d54:	4b18      	ldr	r3, [pc, #96]	; (8007db8 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d56:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d5c:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d5e:	f022 0201 	bic.w	r2, r2, #1
 8007d62:	671a      	str	r2, [r3, #112]	; 0x70
 8007d64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d66:	f022 0204 	bic.w	r2, r2, #4
 8007d6a:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8007d6c:	f7fd fd98 	bl	80058a0 <HAL_GetTick>
 8007d70:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d72:	e005      	b.n	8007d80 <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d74:	f7fd fd94 	bl	80058a0 <HAL_GetTick>
 8007d78:	1b40      	subs	r0, r0, r5
 8007d7a:	42b8      	cmp	r0, r7
 8007d7c:	f63f aed8 	bhi.w	8007b30 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d80:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8007d82:	0798      	lsls	r0, r3, #30
 8007d84:	d4f6      	bmi.n	8007d74 <HAL_RCC_OscConfig+0x574>
 8007d86:	e5cf      	b.n	8007928 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d88:	68f3      	ldr	r3, [r6, #12]
 8007d8a:	6a22      	ldr	r2, [r4, #32]
 8007d8c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8007d90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007d94:	60f3      	str	r3, [r6, #12]
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	e58f      	b.n	80078ba <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d9a:	6873      	ldr	r3, [r6, #4]
 8007d9c:	6922      	ldr	r2, [r4, #16]
 8007d9e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007da2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007da6:	6073      	str	r3, [r6, #4]
 8007da8:	6823      	ldr	r3, [r4, #0]
 8007daa:	e584      	b.n	80078b6 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dac:	4a02      	ldr	r2, [pc, #8]	; (8007db8 <HAL_RCC_OscConfig+0x5b8>)
 8007dae:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8007db0:	f043 0301 	orr.w	r3, r3, #1
 8007db4:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007db6:	e68e      	b.n	8007ad6 <HAL_RCC_OscConfig+0x2d6>
 8007db8:	58024400 	.word	0x58024400
 8007dbc:	fffffc0c 	.word	0xfffffc0c
 8007dc0:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dc4:	4a08      	ldr	r2, [pc, #32]	; (8007de8 <HAL_RCC_OscConfig+0x5e8>)
 8007dc6:	6853      	ldr	r3, [r2, #4]
 8007dc8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007dcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dd0:	6053      	str	r3, [r2, #4]
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	e571      	b.n	80078ba <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dd6:	f042 0204 	orr.w	r2, r2, #4
 8007dda:	671a      	str	r2, [r3, #112]	; 0x70
 8007ddc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007dde:	f042 0201 	orr.w	r2, r2, #1
 8007de2:	671a      	str	r2, [r3, #112]	; 0x70
 8007de4:	e677      	b.n	8007ad6 <HAL_RCC_OscConfig+0x2d6>
 8007de6:	bf00      	nop
 8007de8:	58024400 	.word	0x58024400

08007dec <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dec:	4a47      	ldr	r2, [pc, #284]	; (8007f0c <HAL_RCC_GetSysClockFreq+0x120>)
 8007dee:	6913      	ldr	r3, [r2, #16]
 8007df0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007df4:	2b10      	cmp	r3, #16
 8007df6:	d004      	beq.n	8007e02 <HAL_RCC_GetSysClockFreq+0x16>
 8007df8:	2b18      	cmp	r3, #24
 8007dfa:	d00d      	beq.n	8007e18 <HAL_RCC_GetSysClockFreq+0x2c>
 8007dfc:	b11b      	cbz	r3, 8007e06 <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007dfe:	4844      	ldr	r0, [pc, #272]	; (8007f10 <HAL_RCC_GetSysClockFreq+0x124>)
 8007e00:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e02:	4844      	ldr	r0, [pc, #272]	; (8007f14 <HAL_RCC_GetSysClockFreq+0x128>)
 8007e04:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e06:	6813      	ldr	r3, [r2, #0]
 8007e08:	0699      	lsls	r1, r3, #26
 8007e0a:	d54a      	bpl.n	8007ea2 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e0c:	6813      	ldr	r3, [r2, #0]
 8007e0e:	4842      	ldr	r0, [pc, #264]	; (8007f18 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007e10:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007e14:	40d8      	lsrs	r0, r3
 8007e16:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e18:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8007e1a:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007e1c:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007e1e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8007e20:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007e24:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007e28:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8007e2a:	d038      	beq.n	8007e9e <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007e2c:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007e30:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e34:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007e38:	fb01 f105 	mul.w	r1, r1, r5
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	ee07 1a90 	vmov	s15, r1
 8007e42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8007e46:	d002      	beq.n	8007e4e <HAL_RCC_GetSysClockFreq+0x62>
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d02c      	beq.n	8007ea6 <HAL_RCC_GetSysClockFreq+0xba>
 8007e4c:	b393      	cbz	r3, 8007eb4 <HAL_RCC_GetSysClockFreq+0xc8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e4e:	ee07 0a90 	vmov	s15, r0
 8007e52:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8007f1c <HAL_RCC_GetSysClockFreq+0x130>
 8007e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007e5c:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8007e60:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8007f20 <HAL_RCC_GetSysClockFreq+0x134>
 8007e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e68:	ee07 3a90 	vmov	s15, r3
 8007e6c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e74:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007e78:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007e7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007e80:	4b22      	ldr	r3, [pc, #136]	; (8007f0c <HAL_RCC_GetSysClockFreq+0x120>)
 8007e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e84:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007e88:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007e8a:	ee07 3a90 	vmov	s15, r3
 8007e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e9a:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8007e9e:	bc30      	pop	{r4, r5}
 8007ea0:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007ea2:	481d      	ldr	r0, [pc, #116]	; (8007f18 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8007ea4:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ea6:	ee07 0a90 	vmov	s15, r0
 8007eaa:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8007f24 <HAL_RCC_GetSysClockFreq+0x138>
 8007eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007eb2:	e7d2      	b.n	8007e5a <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eb4:	6813      	ldr	r3, [r2, #0]
 8007eb6:	069b      	lsls	r3, r3, #26
 8007eb8:	d520      	bpl.n	8007efc <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007eba:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ebc:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ec0:	4915      	ldr	r1, [pc, #84]	; (8007f18 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ec2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ec6:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ece:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ed0:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ed2:	eddf 4a13 	vldr	s9, [pc, #76]	; 8007f20 <HAL_RCC_GetSysClockFreq+0x134>
 8007ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eda:	ee06 1a10 	vmov	s12, r1
 8007ede:	ee06 3a90 	vmov	s13, r3
 8007ee2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007ee6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007eea:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8007eee:	eee7 6a24 	vfma.f32	s13, s14, s9
 8007ef2:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007ef6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8007efa:	e7c1      	b.n	8007e80 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007efc:	ee07 0a90 	vmov	s15, r0
 8007f00:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8007f28 <HAL_RCC_GetSysClockFreq+0x13c>
 8007f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f08:	e7a7      	b.n	8007e5a <HAL_RCC_GetSysClockFreq+0x6e>
 8007f0a:	bf00      	nop
 8007f0c:	58024400 	.word	0x58024400
 8007f10:	003d0900 	.word	0x003d0900
 8007f14:	017d7840 	.word	0x017d7840
 8007f18:	03d09000 	.word	0x03d09000
 8007f1c:	4a742400 	.word	0x4a742400
 8007f20:	39000000 	.word	0x39000000
 8007f24:	4bbebc20 	.word	0x4bbebc20
 8007f28:	4c742400 	.word	0x4c742400

08007f2c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	f000 810e 	beq.w	800814e <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f32:	4a8d      	ldr	r2, [pc, #564]	; (8008168 <HAL_RCC_ClockConfig+0x23c>)
 8007f34:	6813      	ldr	r3, [r2, #0]
 8007f36:	f003 030f 	and.w	r3, r3, #15
 8007f3a:	428b      	cmp	r3, r1
{
 8007f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f40:	4604      	mov	r4, r0
 8007f42:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f44:	d20c      	bcs.n	8007f60 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f46:	6813      	ldr	r3, [r2, #0]
 8007f48:	f023 030f 	bic.w	r3, r3, #15
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f50:	6813      	ldr	r3, [r2, #0]
 8007f52:	f003 030f 	and.w	r3, r3, #15
 8007f56:	428b      	cmp	r3, r1
 8007f58:	d002      	beq.n	8007f60 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8007f5a:	2001      	movs	r0, #1
}
 8007f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	075f      	lsls	r7, r3, #29
 8007f64:	d50b      	bpl.n	8007f7e <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f66:	4981      	ldr	r1, [pc, #516]	; (800816c <HAL_RCC_ClockConfig+0x240>)
 8007f68:	6920      	ldr	r0, [r4, #16]
 8007f6a:	698a      	ldr	r2, [r1, #24]
 8007f6c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007f70:	4290      	cmp	r0, r2
 8007f72:	d904      	bls.n	8007f7e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f74:	698a      	ldr	r2, [r1, #24]
 8007f76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007f7a:	4302      	orrs	r2, r0
 8007f7c:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f7e:	071e      	lsls	r6, r3, #28
 8007f80:	d50b      	bpl.n	8007f9a <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f82:	497a      	ldr	r1, [pc, #488]	; (800816c <HAL_RCC_ClockConfig+0x240>)
 8007f84:	6960      	ldr	r0, [r4, #20]
 8007f86:	69ca      	ldr	r2, [r1, #28]
 8007f88:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007f8c:	4290      	cmp	r0, r2
 8007f8e:	d904      	bls.n	8007f9a <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f90:	69ca      	ldr	r2, [r1, #28]
 8007f92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007f96:	4302      	orrs	r2, r0
 8007f98:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f9a:	06d8      	lsls	r0, r3, #27
 8007f9c:	d50b      	bpl.n	8007fb6 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f9e:	4973      	ldr	r1, [pc, #460]	; (800816c <HAL_RCC_ClockConfig+0x240>)
 8007fa0:	69a0      	ldr	r0, [r4, #24]
 8007fa2:	69ca      	ldr	r2, [r1, #28]
 8007fa4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007fa8:	4290      	cmp	r0, r2
 8007faa:	d904      	bls.n	8007fb6 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007fac:	69ca      	ldr	r2, [r1, #28]
 8007fae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fb2:	4302      	orrs	r2, r0
 8007fb4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007fb6:	0699      	lsls	r1, r3, #26
 8007fb8:	d50b      	bpl.n	8007fd2 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007fba:	496c      	ldr	r1, [pc, #432]	; (800816c <HAL_RCC_ClockConfig+0x240>)
 8007fbc:	69e0      	ldr	r0, [r4, #28]
 8007fbe:	6a0a      	ldr	r2, [r1, #32]
 8007fc0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007fc4:	4290      	cmp	r0, r2
 8007fc6:	d904      	bls.n	8007fd2 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007fc8:	6a0a      	ldr	r2, [r1, #32]
 8007fca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007fce:	4302      	orrs	r2, r0
 8007fd0:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fd2:	079a      	lsls	r2, r3, #30
 8007fd4:	f140 80ad 	bpl.w	8008132 <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007fd8:	4864      	ldr	r0, [pc, #400]	; (800816c <HAL_RCC_ClockConfig+0x240>)
 8007fda:	68e1      	ldr	r1, [r4, #12]
 8007fdc:	6982      	ldr	r2, [r0, #24]
 8007fde:	f002 020f 	and.w	r2, r2, #15
 8007fe2:	4291      	cmp	r1, r2
 8007fe4:	d904      	bls.n	8007ff0 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fe6:	6982      	ldr	r2, [r0, #24]
 8007fe8:	f022 020f 	bic.w	r2, r2, #15
 8007fec:	430a      	orrs	r2, r1
 8007fee:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ff0:	07d8      	lsls	r0, r3, #31
 8007ff2:	d531      	bpl.n	8008058 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007ff4:	4a5d      	ldr	r2, [pc, #372]	; (800816c <HAL_RCC_ClockConfig+0x240>)
 8007ff6:	68a1      	ldr	r1, [r4, #8]
 8007ff8:	6993      	ldr	r3, [r2, #24]
 8007ffa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007ffe:	430b      	orrs	r3, r1
 8008000:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008002:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008004:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008006:	2902      	cmp	r1, #2
 8008008:	f000 80a3 	beq.w	8008152 <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800800c:	2903      	cmp	r1, #3
 800800e:	f000 809a 	beq.w	8008146 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008012:	2901      	cmp	r1, #1
 8008014:	f000 80a3 	beq.w	800815e <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008018:	0758      	lsls	r0, r3, #29
 800801a:	d59e      	bpl.n	8007f5a <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800801c:	4a53      	ldr	r2, [pc, #332]	; (800816c <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800801e:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008022:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008024:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008026:	f023 0307 	bic.w	r3, r3, #7
 800802a:	430b      	orrs	r3, r1
 800802c:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 800802e:	f7fd fc37 	bl	80058a0 <HAL_GetTick>
 8008032:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008034:	e005      	b.n	8008042 <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008036:	f7fd fc33 	bl	80058a0 <HAL_GetTick>
 800803a:	1b80      	subs	r0, r0, r6
 800803c:	4540      	cmp	r0, r8
 800803e:	f200 808c 	bhi.w	800815a <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	6862      	ldr	r2, [r4, #4]
 8008046:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800804a:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800804e:	d1f2      	bne.n	8008036 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	0799      	lsls	r1, r3, #30
 8008054:	d506      	bpl.n	8008064 <HAL_RCC_ClockConfig+0x138>
 8008056:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008058:	4844      	ldr	r0, [pc, #272]	; (800816c <HAL_RCC_ClockConfig+0x240>)
 800805a:	6982      	ldr	r2, [r0, #24]
 800805c:	f002 020f 	and.w	r2, r2, #15
 8008060:	428a      	cmp	r2, r1
 8008062:	d86a      	bhi.n	800813a <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008064:	4940      	ldr	r1, [pc, #256]	; (8008168 <HAL_RCC_ClockConfig+0x23c>)
 8008066:	680a      	ldr	r2, [r1, #0]
 8008068:	f002 020f 	and.w	r2, r2, #15
 800806c:	42aa      	cmp	r2, r5
 800806e:	d90a      	bls.n	8008086 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008070:	680a      	ldr	r2, [r1, #0]
 8008072:	f022 020f 	bic.w	r2, r2, #15
 8008076:	432a      	orrs	r2, r5
 8008078:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800807a:	680a      	ldr	r2, [r1, #0]
 800807c:	f002 020f 	and.w	r2, r2, #15
 8008080:	42aa      	cmp	r2, r5
 8008082:	f47f af6a 	bne.w	8007f5a <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008086:	075a      	lsls	r2, r3, #29
 8008088:	d50b      	bpl.n	80080a2 <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800808a:	4938      	ldr	r1, [pc, #224]	; (800816c <HAL_RCC_ClockConfig+0x240>)
 800808c:	6920      	ldr	r0, [r4, #16]
 800808e:	698a      	ldr	r2, [r1, #24]
 8008090:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008094:	4290      	cmp	r0, r2
 8008096:	d204      	bcs.n	80080a2 <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008098:	698a      	ldr	r2, [r1, #24]
 800809a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800809e:	4302      	orrs	r2, r0
 80080a0:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080a2:	071f      	lsls	r7, r3, #28
 80080a4:	d50b      	bpl.n	80080be <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80080a6:	4931      	ldr	r1, [pc, #196]	; (800816c <HAL_RCC_ClockConfig+0x240>)
 80080a8:	6960      	ldr	r0, [r4, #20]
 80080aa:	69ca      	ldr	r2, [r1, #28]
 80080ac:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80080b0:	4290      	cmp	r0, r2
 80080b2:	d204      	bcs.n	80080be <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80080b4:	69ca      	ldr	r2, [r1, #28]
 80080b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80080ba:	4302      	orrs	r2, r0
 80080bc:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080be:	06de      	lsls	r6, r3, #27
 80080c0:	d50b      	bpl.n	80080da <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80080c2:	492a      	ldr	r1, [pc, #168]	; (800816c <HAL_RCC_ClockConfig+0x240>)
 80080c4:	69a0      	ldr	r0, [r4, #24]
 80080c6:	69ca      	ldr	r2, [r1, #28]
 80080c8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80080cc:	4290      	cmp	r0, r2
 80080ce:	d204      	bcs.n	80080da <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80080d0:	69ca      	ldr	r2, [r1, #28]
 80080d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80080d6:	4302      	orrs	r2, r0
 80080d8:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80080da:	069d      	lsls	r5, r3, #26
 80080dc:	d50b      	bpl.n	80080f6 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80080de:	4a23      	ldr	r2, [pc, #140]	; (800816c <HAL_RCC_ClockConfig+0x240>)
 80080e0:	69e1      	ldr	r1, [r4, #28]
 80080e2:	6a13      	ldr	r3, [r2, #32]
 80080e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080e8:	4299      	cmp	r1, r3
 80080ea:	d204      	bcs.n	80080f6 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80080ec:	6a13      	ldr	r3, [r2, #32]
 80080ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f2:	430b      	orrs	r3, r1
 80080f4:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80080f6:	f7ff fe79 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 80080fa:	4b1c      	ldr	r3, [pc, #112]	; (800816c <HAL_RCC_ClockConfig+0x240>)
 80080fc:	4602      	mov	r2, r0
 80080fe:	481c      	ldr	r0, [pc, #112]	; (8008170 <HAL_RCC_ClockConfig+0x244>)
 8008100:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008102:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008104:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8008108:	4d1a      	ldr	r5, [pc, #104]	; (8008174 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800810a:	f003 030f 	and.w	r3, r3, #15
 800810e:	4c1a      	ldr	r4, [pc, #104]	; (8008178 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008110:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008112:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008114:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8008118:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800811a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 800811e:	4d17      	ldr	r5, [pc, #92]	; (800817c <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008120:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008122:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8008126:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008128:	6023      	str	r3, [r4, #0]
}
 800812a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800812e:	f7fd bb55 	b.w	80057dc <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008132:	07da      	lsls	r2, r3, #31
 8008134:	f53f af5e 	bmi.w	8007ff4 <HAL_RCC_ClockConfig+0xc8>
 8008138:	e794      	b.n	8008064 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800813a:	6982      	ldr	r2, [r0, #24]
 800813c:	f022 020f 	bic.w	r2, r2, #15
 8008140:	4311      	orrs	r1, r2
 8008142:	6181      	str	r1, [r0, #24]
 8008144:	e78e      	b.n	8008064 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008146:	019f      	lsls	r7, r3, #6
 8008148:	f53f af68 	bmi.w	800801c <HAL_RCC_ClockConfig+0xf0>
 800814c:	e705      	b.n	8007f5a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800814e:	2001      	movs	r0, #1
}
 8008150:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008152:	039b      	lsls	r3, r3, #14
 8008154:	f53f af62 	bmi.w	800801c <HAL_RCC_ClockConfig+0xf0>
 8008158:	e6ff      	b.n	8007f5a <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 800815a:	2003      	movs	r0, #3
 800815c:	e6fe      	b.n	8007f5c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800815e:	05de      	lsls	r6, r3, #23
 8008160:	f53f af5c 	bmi.w	800801c <HAL_RCC_ClockConfig+0xf0>
 8008164:	e6f9      	b.n	8007f5a <HAL_RCC_ClockConfig+0x2e>
 8008166:	bf00      	nop
 8008168:	52002000 	.word	0x52002000
 800816c:	58024400 	.word	0x58024400
 8008170:	08009a84 	.word	0x08009a84
 8008174:	24009060 	.word	0x24009060
 8008178:	24000004 	.word	0x24000004
 800817c:	24000000 	.word	0x24000000

08008180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008180:	b538      	push	{r3, r4, r5, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008182:	f7ff fe33 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 8008186:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <HAL_RCC_GetHCLKFreq+0x34>)
 8008188:	490b      	ldr	r1, [pc, #44]	; (80081b8 <HAL_RCC_GetHCLKFreq+0x38>)
 800818a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800818c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800818e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008192:	4c0a      	ldr	r4, [pc, #40]	; (80081bc <HAL_RCC_GetHCLKFreq+0x3c>)
 8008194:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008198:	4d09      	ldr	r5, [pc, #36]	; (80081c0 <HAL_RCC_GetHCLKFreq+0x40>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800819a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800819c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800819e:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80081a2:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80081a6:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80081aa:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 80081ae:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80081b0:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	58024400 	.word	0x58024400
 80081b8:	08009a84 	.word	0x08009a84
 80081bc:	24000004 	.word	0x24000004
 80081c0:	24000000 	.word	0x24000000

080081c4 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081c4:	4a3b      	ldr	r2, [pc, #236]	; (80082b4 <RCCEx_PLL2_Config+0xf0>)
{
 80081c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80081ca:	f003 0303 	and.w	r3, r3, #3
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d069      	beq.n	80082a6 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80081d2:	6813      	ldr	r3, [r2, #0]
 80081d4:	4606      	mov	r6, r0
 80081d6:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081d8:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 80081da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081de:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80081e0:	f7fd fb5e 	bl	80058a0 <HAL_GetTick>
 80081e4:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081e6:	e004      	b.n	80081f2 <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80081e8:	f7fd fb5a 	bl	80058a0 <HAL_GetTick>
 80081ec:	1b43      	subs	r3, r0, r5
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d857      	bhi.n	80082a2 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	011a      	lsls	r2, r3, #4
 80081f6:	d4f7      	bmi.n	80081e8 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80081f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80081fa:	6832      	ldr	r2, [r6, #0]
 80081fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008200:	492d      	ldr	r1, [pc, #180]	; (80082b8 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008202:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008206:	62a3      	str	r3, [r4, #40]	; 0x28
 8008208:	6875      	ldr	r5, [r6, #4]
 800820a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800820e:	3d01      	subs	r5, #1
 8008210:	1e50      	subs	r0, r2, #1
 8008212:	3b01      	subs	r3, #1
 8008214:	6932      	ldr	r2, [r6, #16]
 8008216:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800821a:	025b      	lsls	r3, r3, #9
 800821c:	0400      	lsls	r0, r0, #16
 800821e:	3a01      	subs	r2, #1
 8008220:	b29b      	uxth	r3, r3
 8008222:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008226:	0612      	lsls	r2, r2, #24
 8008228:	4303      	orrs	r3, r0
 800822a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800822e:	432b      	orrs	r3, r5
 8008230:	4313      	orrs	r3, r2
 8008232:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008234:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008236:	6972      	ldr	r2, [r6, #20]
 8008238:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800823c:	4313      	orrs	r3, r2
 800823e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008240:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008242:	69b2      	ldr	r2, [r6, #24]
 8008244:	f023 0320 	bic.w	r3, r3, #32
 8008248:	4313      	orrs	r3, r2
 800824a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800824c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800824e:	f023 0310 	bic.w	r3, r3, #16
 8008252:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008254:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008256:	69f3      	ldr	r3, [r6, #28]
 8008258:	4011      	ands	r1, r2
 800825a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800825e:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008260:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008262:	f043 0310 	orr.w	r3, r3, #16
 8008266:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008268:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800826a:	b1f7      	cbz	r7, 80082aa <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800826c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800826e:	bf0c      	ite	eq
 8008270:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008274:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008278:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800827a:	4b0e      	ldr	r3, [pc, #56]	; (80082b4 <RCCEx_PLL2_Config+0xf0>)
 800827c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800827e:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 8008280:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008284:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008286:	f7fd fb0b 	bl	80058a0 <HAL_GetTick>
 800828a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800828c:	e004      	b.n	8008298 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800828e:	f7fd fb07 	bl	80058a0 <HAL_GetTick>
 8008292:	1b00      	subs	r0, r0, r4
 8008294:	2802      	cmp	r0, #2
 8008296:	d804      	bhi.n	80082a2 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008298:	682b      	ldr	r3, [r5, #0]
 800829a:	011b      	lsls	r3, r3, #4
 800829c:	d5f7      	bpl.n	800828e <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 800829e:	2000      	movs	r0, #0
}
 80082a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80082a2:	2003      	movs	r0, #3
}
 80082a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80082a6:	2001      	movs	r0, #1
}
 80082a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80082aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082b0:	e7e3      	b.n	800827a <RCCEx_PLL2_Config+0xb6>
 80082b2:	bf00      	nop
 80082b4:	58024400 	.word	0x58024400
 80082b8:	ffff0007 	.word	0xffff0007

080082bc <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082bc:	4a3b      	ldr	r2, [pc, #236]	; (80083ac <RCCEx_PLL3_Config+0xf0>)
{
 80082be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d069      	beq.n	800839e <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082ca:	6813      	ldr	r3, [r2, #0]
 80082cc:	4606      	mov	r6, r0
 80082ce:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082d0:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 80082d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082d6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80082d8:	f7fd fae2 	bl	80058a0 <HAL_GetTick>
 80082dc:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082de:	e004      	b.n	80082ea <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80082e0:	f7fd fade 	bl	80058a0 <HAL_GetTick>
 80082e4:	1b43      	subs	r3, r0, r5
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d857      	bhi.n	800839a <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	009a      	lsls	r2, r3, #2
 80082ee:	d4f7      	bmi.n	80082e0 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80082f2:	6832      	ldr	r2, [r6, #0]
 80082f4:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80082f8:	492d      	ldr	r1, [pc, #180]	; (80083b0 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082fa:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80082fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8008300:	6875      	ldr	r5, [r6, #4]
 8008302:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008306:	3d01      	subs	r5, #1
 8008308:	1e50      	subs	r0, r2, #1
 800830a:	3b01      	subs	r3, #1
 800830c:	6932      	ldr	r2, [r6, #16]
 800830e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008312:	025b      	lsls	r3, r3, #9
 8008314:	0400      	lsls	r0, r0, #16
 8008316:	3a01      	subs	r2, #1
 8008318:	b29b      	uxth	r3, r3
 800831a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800831e:	0612      	lsls	r2, r2, #24
 8008320:	4303      	orrs	r3, r0
 8008322:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008326:	432b      	orrs	r3, r5
 8008328:	4313      	orrs	r3, r2
 800832a:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800832c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800832e:	6972      	ldr	r2, [r6, #20]
 8008330:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008334:	4313      	orrs	r3, r2
 8008336:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008338:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800833a:	69b2      	ldr	r2, [r6, #24]
 800833c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008340:	4313      	orrs	r3, r2
 8008342:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008344:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800834a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800834c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800834e:	69f3      	ldr	r3, [r6, #28]
 8008350:	4011      	ands	r1, r2
 8008352:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008356:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008358:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800835a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800835e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008360:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008362:	b1f7      	cbz	r7, 80083a2 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008364:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008366:	bf0c      	ite	eq
 8008368:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800836c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008370:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008372:	4b0e      	ldr	r3, [pc, #56]	; (80083ac <RCCEx_PLL3_Config+0xf0>)
 8008374:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008376:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 8008378:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800837c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800837e:	f7fd fa8f 	bl	80058a0 <HAL_GetTick>
 8008382:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008384:	e004      	b.n	8008390 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008386:	f7fd fa8b 	bl	80058a0 <HAL_GetTick>
 800838a:	1b00      	subs	r0, r0, r4
 800838c:	2802      	cmp	r0, #2
 800838e:	d804      	bhi.n	800839a <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	d5f7      	bpl.n	8008386 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8008396:	2000      	movs	r0, #0
}
 8008398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800839a:	2003      	movs	r0, #3
}
 800839c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800839e:	2001      	movs	r0, #1
}
 80083a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80083a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083a8:	e7e3      	b.n	8008372 <RCCEx_PLL3_Config+0xb6>
 80083aa:	bf00      	nop
 80083ac:	58024400 	.word	0x58024400
 80083b0:	ffff0007 	.word	0xffff0007

080083b4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80083b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80083b8:	6803      	ldr	r3, [r0, #0]
{
 80083ba:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80083bc:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 80083c0:	d01c      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80083c2:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80083c4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80083c8:	f000 84c7 	beq.w	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 80083cc:	d823      	bhi.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80083ce:	2a00      	cmp	r2, #0
 80083d0:	f000 842c 	beq.w	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x878>
 80083d4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80083d8:	d120      	bne.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80083da:	2102      	movs	r1, #2
 80083dc:	3004      	adds	r0, #4
 80083de:	f7ff fef1 	bl	80081c4 <RCCEx_PLL2_Config>
 80083e2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80083e4:	2e00      	cmp	r6, #0
 80083e6:	f040 84c0 	bne.w	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
 80083ea:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80083ec:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80083ee:	48b0      	ldr	r0, [pc, #704]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80083f0:	2600      	movs	r6, #0
 80083f2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80083f4:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80083f8:	430a      	orrs	r2, r1
 80083fa:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80083fc:	05da      	lsls	r2, r3, #23
 80083fe:	d511      	bpl.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008400:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008402:	2a04      	cmp	r2, #4
 8008404:	f200 8580 	bhi.w	8008f08 <HAL_RCCEx_PeriphCLKConfig+0xb54>
 8008408:	e8df f012 	tbh	[pc, r2, lsl #1]
 800840c:	04c104ba 	.word	0x04c104ba
 8008410:	033b04b2 	.word	0x033b04b2
 8008414:	033b      	.short	0x033b
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008416:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800841a:	d0e8      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800841c:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 800841e:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008422:	d4ed      	bmi.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008424:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008426:	059f      	lsls	r7, r3, #22
 8008428:	d51b      	bpl.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 800842a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800842c:	2a80      	cmp	r2, #128	; 0x80
 800842e:	f000 84b7 	beq.w	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 8008432:	f200 8127 	bhi.w	8008684 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008436:	2a00      	cmp	r2, #0
 8008438:	f000 83e6 	beq.w	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x854>
 800843c:	2a40      	cmp	r2, #64	; 0x40
 800843e:	f040 8128 	bne.w	8008692 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008442:	2100      	movs	r1, #0
 8008444:	1d20      	adds	r0, r4, #4
 8008446:	f7ff febd 	bl	80081c4 <RCCEx_PLL2_Config>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800844e:	2d00      	cmp	r5, #0
 8008450:	f040 83cc 	bne.w	8008bec <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008454:	4996      	ldr	r1, [pc, #600]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008456:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8008458:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800845a:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 800845e:	4302      	orrs	r2, r0
 8008460:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008462:	0558      	lsls	r0, r3, #21
 8008464:	d51f      	bpl.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008466:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800846a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800846e:	f000 8462 	beq.w	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008472:	f200 8111 	bhi.w	8008698 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8008476:	2a00      	cmp	r2, #0
 8008478:	f000 83c0 	beq.w	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x848>
 800847c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008480:	f040 8112 	bne.w	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008484:	2100      	movs	r1, #0
 8008486:	1d20      	adds	r0, r4, #4
 8008488:	f7ff fe9c 	bl	80081c4 <RCCEx_PLL2_Config>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008490:	2d00      	cmp	r5, #0
 8008492:	f040 83b1 	bne.w	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008496:	4986      	ldr	r1, [pc, #536]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008498:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800849c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800849e:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 80084a2:	4302      	orrs	r2, r0
 80084a4:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80084a6:	0519      	lsls	r1, r3, #20
 80084a8:	d51f      	bpl.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 80084aa:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80084ae:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80084b2:	f000 8437 	beq.w	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x970>
 80084b6:	f200 80fd 	bhi.w	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80084ba:	2a00      	cmp	r2, #0
 80084bc:	f000 83aa 	beq.w	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80084c0:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80084c4:	f040 80fe 	bne.w	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084c8:	2100      	movs	r1, #0
 80084ca:	1d20      	adds	r0, r4, #4
 80084cc:	f7ff fe7a 	bl	80081c4 <RCCEx_PLL2_Config>
 80084d0:	6823      	ldr	r3, [r4, #0]
 80084d2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80084d4:	2d00      	cmp	r5, #0
 80084d6:	f040 8387 	bne.w	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80084da:	4975      	ldr	r1, [pc, #468]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80084dc:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80084e0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80084e2:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80084e6:	4302      	orrs	r2, r0
 80084e8:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80084ea:	019a      	lsls	r2, r3, #6
 80084ec:	d518      	bpl.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 80084ee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80084f0:	2a20      	cmp	r2, #32
 80084f2:	f000 840d 	beq.w	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80084f6:	f200 80e8 	bhi.w	80086ca <HAL_RCCEx_PeriphCLKConfig+0x316>
 80084fa:	b13a      	cbz	r2, 800850c <HAL_RCCEx_PeriphCLKConfig+0x158>
 80084fc:	2a10      	cmp	r2, #16
 80084fe:	f040 80e7 	bne.w	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008502:	496b      	ldr	r1, [pc, #428]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008504:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008506:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800850a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800850c:	2d00      	cmp	r5, #0
 800850e:	f040 83ba 	bne.w	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008512:	4967      	ldr	r1, [pc, #412]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008514:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008516:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8008518:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800851c:	4302      	orrs	r2, r0
 800851e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008520:	04df      	lsls	r7, r3, #19
 8008522:	d51d      	bpl.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008524:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008526:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800852a:	f000 840d 	beq.w	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800852e:	f200 80d2 	bhi.w	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8008532:	2a00      	cmp	r2, #0
 8008534:	f000 8374 	beq.w	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8008538:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800853c:	f040 80d3 	bne.w	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x332>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008540:	2100      	movs	r1, #0
 8008542:	1d20      	adds	r0, r4, #4
 8008544:	f7ff fe3e 	bl	80081c4 <RCCEx_PLL2_Config>
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800854c:	2d00      	cmp	r5, #0
 800854e:	f040 834f 	bne.w	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008552:	4957      	ldr	r1, [pc, #348]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008554:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008556:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008558:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800855c:	4302      	orrs	r2, r0
 800855e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008560:	0498      	lsls	r0, r3, #18
 8008562:	d51b      	bpl.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008564:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008566:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800856a:	f000 83bd 	beq.w	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800856e:	f200 80bd 	bhi.w	80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>
 8008572:	b14a      	cbz	r2, 8008588 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008574:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008578:	f040 80c2 	bne.w	8008700 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800857c:	2101      	movs	r1, #1
 800857e:	1d20      	adds	r0, r4, #4
 8008580:	f7ff fe20 	bl	80081c4 <RCCEx_PLL2_Config>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008588:	2d00      	cmp	r5, #0
 800858a:	f040 837e 	bne.w	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x8d6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800858e:	4948      	ldr	r1, [pc, #288]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008590:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8008592:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008594:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008598:	4302      	orrs	r2, r0
 800859a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800859c:	0459      	lsls	r1, r3, #17
 800859e:	d51d      	bpl.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 80085a0:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80085a4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80085a8:	f000 83a8 	beq.w	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x948>
 80085ac:	f200 80ab 	bhi.w	8008706 <HAL_RCCEx_PeriphCLKConfig+0x352>
 80085b0:	b14a      	cbz	r2, 80085c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80085b2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80085b6:	f040 80b0 	bne.w	800871a <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085ba:	2101      	movs	r1, #1
 80085bc:	1d20      	adds	r0, r4, #4
 80085be:	f7ff fe01 	bl	80081c4 <RCCEx_PLL2_Config>
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80085c6:	2d00      	cmp	r5, #0
 80085c8:	f040 8363 	bne.w	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80085cc:	4938      	ldr	r1, [pc, #224]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80085ce:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80085d2:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80085d4:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80085d8:	4302      	orrs	r2, r0
 80085da:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80085dc:	015a      	lsls	r2, r3, #5
 80085de:	d509      	bpl.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->DsiClockSelection)
 80085e0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80085e2:	2a00      	cmp	r2, #0
 80085e4:	f000 8264 	beq.w	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 80085e8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80085ec:	f000 825a 	beq.w	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 80085f0:	2601      	movs	r6, #1
 80085f2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80085f4:	041f      	lsls	r7, r3, #16
 80085f6:	d50d      	bpl.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch(PeriphClkInit->FdcanClockSelection)
 80085f8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80085fa:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80085fe:	f000 8420 	beq.w	8008e42 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 8008602:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8008606:	f000 82ce 	beq.w	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800860a:	2a00      	cmp	r2, #0
 800860c:	f000 82d1 	beq.w	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8008610:	2601      	movs	r6, #1
 8008612:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008614:	01d8      	lsls	r0, r3, #7
 8008616:	f100 81cf 	bmi.w	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800861a:	0259      	lsls	r1, r3, #9
 800861c:	f100 81ef 	bmi.w	80089fe <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008620:	07df      	lsls	r7, r3, #31
 8008622:	f140 8088 	bpl.w	8008736 <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch(PeriphClkInit->Usart16ClockSelection)
 8008626:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8008628:	2a28      	cmp	r2, #40	; 0x28
 800862a:	f200 81cf 	bhi.w	80089cc <HAL_RCCEx_PeriphCLKConfig+0x618>
 800862e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008632:	007e      	.short	0x007e
 8008634:	01cd01cd 	.word	0x01cd01cd
 8008638:	01cd01cd 	.word	0x01cd01cd
 800863c:	01cd01cd 	.word	0x01cd01cd
 8008640:	03d401cd 	.word	0x03d401cd
 8008644:	01cd01cd 	.word	0x01cd01cd
 8008648:	01cd01cd 	.word	0x01cd01cd
 800864c:	01cd01cd 	.word	0x01cd01cd
 8008650:	007701cd 	.word	0x007701cd
 8008654:	01cd01cd 	.word	0x01cd01cd
 8008658:	01cd01cd 	.word	0x01cd01cd
 800865c:	01cd01cd 	.word	0x01cd01cd
 8008660:	007e01cd 	.word	0x007e01cd
 8008664:	01cd01cd 	.word	0x01cd01cd
 8008668:	01cd01cd 	.word	0x01cd01cd
 800866c:	01cd01cd 	.word	0x01cd01cd
 8008670:	007e01cd 	.word	0x007e01cd
 8008674:	01cd01cd 	.word	0x01cd01cd
 8008678:	01cd01cd 	.word	0x01cd01cd
 800867c:	01cd01cd 	.word	0x01cd01cd
 8008680:	007e01cd 	.word	0x007e01cd
    switch(PeriphClkInit->Sai23ClockSelection)
 8008684:	2ac0      	cmp	r2, #192	; 0xc0
 8008686:	f43f aee2 	beq.w	800844e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800868a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800868e:	f43f aede 	beq.w	800844e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8008692:	2601      	movs	r6, #1
 8008694:	4635      	mov	r5, r6
 8008696:	e6e4      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008698:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800869c:	f43f aef8 	beq.w	8008490 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80086a0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80086a4:	f43f aef4 	beq.w	8008490 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80086a8:	2601      	movs	r6, #1
 80086aa:	4635      	mov	r5, r6
 80086ac:	e6fb      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 80086ae:	bf00      	nop
 80086b0:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 80086b4:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 80086b8:	f43f af0c 	beq.w	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80086bc:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80086c0:	f43f af08 	beq.w	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80086c4:	2601      	movs	r6, #1
 80086c6:	4635      	mov	r5, r6
 80086c8:	e70f      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 80086ca:	2a30      	cmp	r2, #48	; 0x30
 80086cc:	f43f af1e 	beq.w	800850c <HAL_RCCEx_PeriphCLKConfig+0x158>
 80086d0:	2601      	movs	r6, #1
 80086d2:	4635      	mov	r5, r6
 80086d4:	e724      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80086d6:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80086da:	f43f af37 	beq.w	800854c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80086de:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80086e2:	f43f af33 	beq.w	800854c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80086e6:	2601      	movs	r6, #1
 80086e8:	4635      	mov	r5, r6
 80086ea:	e739      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 80086ec:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80086f0:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80086f4:	f43f af48 	beq.w	8008588 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80086f8:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80086fc:	f43f af44 	beq.w	8008588 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008700:	2601      	movs	r6, #1
 8008702:	4635      	mov	r5, r6
 8008704:	e74a      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008706:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800870a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800870e:	f43f af5a 	beq.w	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8008712:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8008716:	f43f af56 	beq.w	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800871a:	2601      	movs	r6, #1
 800871c:	4635      	mov	r5, r6
 800871e:	e75d      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008720:	2101      	movs	r1, #1
 8008722:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008726:	f7ff fdc9 	bl	80082bc <RCCEx_PLL3_Config>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800872e:	2d00      	cmp	r5, #0
 8008730:	f000 82c0 	beq.w	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8008734:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008736:	0798      	lsls	r0, r3, #30
 8008738:	d516      	bpl.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800873a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800873c:	2a05      	cmp	r2, #5
 800873e:	f200 83e6 	bhi.w	8008f0e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 8008742:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008746:	000d      	.short	0x000d
 8008748:	00060336 	.word	0x00060336
 800874c:	000d000d 	.word	0x000d000d
 8008750:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008752:	2101      	movs	r1, #1
 8008754:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008758:	f7ff fdb0 	bl	80082bc <RCCEx_PLL3_Config>
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008760:	2d00      	cmp	r5, #0
 8008762:	f000 8279 	beq.w	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8008766:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008768:	0759      	lsls	r1, r3, #29
 800876a:	d517      	bpl.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800876c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8008770:	2a05      	cmp	r2, #5
 8008772:	f200 83c6 	bhi.w	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 8008776:	e8df f012 	tbh	[pc, r2, lsl #1]
 800877a:	000d      	.short	0x000d
 800877c:	00060326 	.word	0x00060326
 8008780:	000d000d 	.word	0x000d000d
 8008784:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008786:	2101      	movs	r1, #1
 8008788:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800878c:	f7ff fd96 	bl	80082bc <RCCEx_PLL3_Config>
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008794:	2d00      	cmp	r5, #0
 8008796:	f000 826a 	beq.w	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800879a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800879c:	069a      	lsls	r2, r3, #26
 800879e:	d51d      	bpl.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80087a0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80087a4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80087a8:	f000 8340 	beq.w	8008e2c <HAL_RCCEx_PeriphCLKConfig+0xa78>
 80087ac:	f200 81af 	bhi.w	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80087b0:	b14a      	cbz	r2, 80087c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
 80087b2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80087b6:	f040 81b4 	bne.w	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x76e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087ba:	2100      	movs	r1, #0
 80087bc:	1d20      	adds	r0, r4, #4
 80087be:	f7ff fd01 	bl	80081c4 <RCCEx_PLL2_Config>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80087c6:	2d00      	cmp	r5, #0
 80087c8:	f040 823c 	bne.w	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087cc:	49b3      	ldr	r1, [pc, #716]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80087ce:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80087d2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80087d4:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80087d8:	4302      	orrs	r2, r0
 80087da:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80087dc:	065f      	lsls	r7, r3, #25
 80087de:	d51d      	bpl.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80087e0:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80087e4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80087e8:	f000 8334 	beq.w	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 80087ec:	f200 817f 	bhi.w	8008aee <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80087f0:	b14a      	cbz	r2, 8008806 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80087f2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80087f6:	f040 8184 	bne.w	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087fa:	2100      	movs	r1, #0
 80087fc:	1d20      	adds	r0, r4, #4
 80087fe:	f7ff fce1 	bl	80081c4 <RCCEx_PLL2_Config>
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008806:	2d00      	cmp	r5, #0
 8008808:	f040 8221 	bne.w	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800880c:	49a3      	ldr	r1, [pc, #652]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800880e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8008812:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008814:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8008818:	4302      	orrs	r2, r0
 800881a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800881c:	0618      	lsls	r0, r3, #24
 800881e:	d51d      	bpl.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008820:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8008824:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8008828:	f000 831f 	beq.w	8008e6a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800882c:	f200 814f 	bhi.w	8008ace <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8008830:	b14a      	cbz	r2, 8008846 <HAL_RCCEx_PeriphCLKConfig+0x492>
 8008832:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008836:	f040 8154 	bne.w	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x72e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800883a:	2100      	movs	r1, #0
 800883c:	1d20      	adds	r0, r4, #4
 800883e:	f7ff fcc1 	bl	80081c4 <RCCEx_PLL2_Config>
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008846:	2d00      	cmp	r5, #0
 8008848:	f040 81f7 	bne.w	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800884c:	4993      	ldr	r1, [pc, #588]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800884e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8008852:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008854:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008858:	4302      	orrs	r2, r0
 800885a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800885c:	0719      	lsls	r1, r3, #28
 800885e:	d50b      	bpl.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008860:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8008864:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8008868:	f000 831e 	beq.w	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800886c:	488b      	ldr	r0, [pc, #556]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800886e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8008870:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008874:	430a      	orrs	r2, r1
 8008876:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008878:	06da      	lsls	r2, r3, #27
 800887a:	d50b      	bpl.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800887c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8008880:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008884:	f000 8305 	beq.w	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xade>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008888:	4884      	ldr	r0, [pc, #528]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800888a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800888c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008890:	430a      	orrs	r2, r1
 8008892:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008894:	031f      	lsls	r7, r3, #12
 8008896:	d50e      	bpl.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->AdcClockSelection)
 8008898:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800889c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80088a0:	f000 816b 	beq.w	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 80088a4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80088a8:	f000 816e 	beq.w	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 80088ac:	2900      	cmp	r1, #0
 80088ae:	f000 82e7 	beq.w	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80088b2:	2601      	movs	r6, #1
 80088b4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80088b6:	0358      	lsls	r0, r3, #13
 80088b8:	d50f      	bpl.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->UsbClockSelection)
 80088ba:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80088be:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80088c2:	f000 8144 	beq.w	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80088c6:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80088ca:	f000 8147 	beq.w	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 80088ce:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80088d2:	f000 82a2 	beq.w	8008e1a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 80088d6:	2601      	movs	r6, #1
 80088d8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80088da:	03d9      	lsls	r1, r3, #15
 80088dc:	d517      	bpl.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->SdmmcClockSelection)
 80088de:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80088e0:	2a00      	cmp	r2, #0
 80088e2:	f000 8288 	beq.w	8008df6 <HAL_RCCEx_PeriphCLKConfig+0xa42>
 80088e6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80088ea:	f040 817a 	bne.w	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80088ee:	2102      	movs	r1, #2
 80088f0:	1d20      	adds	r0, r4, #4
 80088f2:	f7ff fc67 	bl	80081c4 <RCCEx_PLL2_Config>
 80088f6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	2d00      	cmp	r5, #0
 80088fc:	f040 81e5 	bne.w	8008cca <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008900:	4966      	ldr	r1, [pc, #408]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008902:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008904:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8008906:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800890a:	4302      	orrs	r2, r0
 800890c:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800890e:	009a      	lsls	r2, r3, #2
 8008910:	f100 815c 	bmi.w	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x818>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008914:	039f      	lsls	r7, r3, #14
 8008916:	d43f      	bmi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8008918:	1e30      	subs	r0, r6, #0
 800891a:	bf18      	it	ne
 800891c:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800891e:	02de      	lsls	r6, r3, #11
 8008920:	d506      	bpl.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008922:	495e      	ldr	r1, [pc, #376]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008924:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8008926:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008928:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800892c:	432a      	orrs	r2, r5
 800892e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008930:	00dd      	lsls	r5, r3, #3
 8008932:	d507      	bpl.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008934:	4959      	ldr	r1, [pc, #356]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008936:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800893a:	690a      	ldr	r2, [r1, #16]
 800893c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008940:	432a      	orrs	r2, r5
 8008942:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008944:	0299      	lsls	r1, r3, #10
 8008946:	d506      	bpl.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008948:	4954      	ldr	r1, [pc, #336]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800894a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800894c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800894e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008952:	432a      	orrs	r2, r5
 8008954:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008956:	005a      	lsls	r2, r3, #1
 8008958:	d509      	bpl.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800895a:	4a50      	ldr	r2, [pc, #320]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800895c:	6911      	ldr	r1, [r2, #16]
 800895e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8008962:	6111      	str	r1, [r2, #16]
 8008964:	6911      	ldr	r1, [r2, #16]
 8008966:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 800896a:	4329      	orrs	r1, r5
 800896c:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800896e:	2b00      	cmp	r3, #0
 8008970:	da06      	bge.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008972:	494a      	ldr	r1, [pc, #296]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008974:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8008976:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8008978:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800897c:	432a      	orrs	r2, r5
 800897e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008980:	021b      	lsls	r3, r3, #8
 8008982:	d507      	bpl.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008984:	4a45      	ldr	r2, [pc, #276]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008986:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800898a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800898c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008990:	430b      	orrs	r3, r1
 8008992:	6553      	str	r3, [r2, #84]	; 0x54
}
 8008994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8008998:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800899c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80089a0:	f000 8232 	beq.w	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80089a4:	f240 80c3 	bls.w	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x77a>
 80089a8:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 80089ac:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80089b0:	f000 80c0 	beq.w	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x780>
 80089b4:	2001      	movs	r0, #1
 80089b6:	e7b2      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->FmcClockSelection)
 80089b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80089ba:	2a03      	cmp	r2, #3
 80089bc:	f200 82aa 	bhi.w	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 80089c0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80089c4:	018a0010 	.word	0x018a0010
 80089c8:	0010000a 	.word	0x0010000a
    switch(PeriphClkInit->Usart16ClockSelection)
 80089cc:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80089ce:	0798      	lsls	r0, r3, #30
    switch(PeriphClkInit->Usart16ClockSelection)
 80089d0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80089d2:	f57f aec9 	bpl.w	8008768 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80089d6:	e6b0      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80089d8:	2102      	movs	r1, #2
 80089da:	1d20      	adds	r0, r4, #4
 80089dc:	f7ff fbf2 	bl	80081c4 <RCCEx_PLL2_Config>
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80089e4:	2d00      	cmp	r5, #0
 80089e6:	f040 8152 	bne.w	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80089ea:	492c      	ldr	r1, [pc, #176]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80089ec:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80089ee:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80089f0:	f022 0203 	bic.w	r2, r2, #3
 80089f4:	4302      	orrs	r2, r0
 80089f6:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80089f8:	0259      	lsls	r1, r3, #9
 80089fa:	f57f ae11 	bpl.w	8008620 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089fe:	4b28      	ldr	r3, [pc, #160]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8008a00:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a02:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a08:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008a0a:	f7fc ff49 	bl	80058a0 <HAL_GetTick>
 8008a0e:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a10:	e005      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a12:	f7fc ff45 	bl	80058a0 <HAL_GetTick>
 8008a16:	1bc0      	subs	r0, r0, r7
 8008a18:	2864      	cmp	r0, #100	; 0x64
 8008a1a:	f200 81e8 	bhi.w	8008dee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a22:	05da      	lsls	r2, r3, #23
 8008a24:	d5f5      	bpl.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x65e>
    if(ret == HAL_OK)
 8008a26:	2d00      	cmp	r5, #0
 8008a28:	f040 8267 	bne.w	8008efa <HAL_RCCEx_PeriphCLKConfig+0xb46>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008a2c:	4a1b      	ldr	r2, [pc, #108]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008a2e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8008a32:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8008a34:	4059      	eors	r1, r3
 8008a36:	f411 7f40 	tst.w	r1, #768	; 0x300
 8008a3a:	d00b      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a3c:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8008a3e:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a40:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8008a44:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8008a48:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008a4a:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8008a4c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8008a50:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8008a52:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a58:	f000 8231 	beq.w	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a5c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008a60:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8008a64:	f000 823f 	beq.w	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0xb32>
 8008a68:	490c      	ldr	r1, [pc, #48]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008a6a:	690a      	ldr	r2, [r1, #16]
 8008a6c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8008a70:	610a      	str	r2, [r1, #16]
 8008a72:	4a0a      	ldr	r2, [pc, #40]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a78:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8008a7a:	430b      	orrs	r3, r1
 8008a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	e5ce      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008a82:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8008a84:	2d00      	cmp	r5, #0
 8008a86:	f040 80b5 	bne.w	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a8a:	4904      	ldr	r1, [pc, #16]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8008a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a8e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008a90:	f022 0207 	bic.w	r2, r2, #7
 8008a94:	4302      	orrs	r2, r0
 8008a96:	650a      	str	r2, [r1, #80]	; 0x50
 8008a98:	e4c5      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8008a9a:	bf00      	nop
 8008a9c:	58024400 	.word	0x58024400
 8008aa0:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008aa4:	2101      	movs	r1, #1
 8008aa6:	1d20      	adds	r0, r4, #4
 8008aa8:	f7ff fb8c 	bl	80081c4 <RCCEx_PLL2_Config>
 8008aac:	6823      	ldr	r3, [r4, #0]
 8008aae:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008ab0:	2d00      	cmp	r5, #0
 8008ab2:	f040 810c 	bne.w	8008cce <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8008ab6:	49b9      	ldr	r1, [pc, #740]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008ab8:	041f      	lsls	r7, r3, #16
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8008aba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008abc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8008abe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ac2:	ea42 0200 	orr.w	r2, r2, r0
 8008ac6:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008ac8:	f57f ada4 	bpl.w	8008614 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8008acc:	e594      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008ace:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8008ad2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008ad6:	f43f aeb6 	beq.w	8008846 <HAL_RCCEx_PeriphCLKConfig+0x492>
 8008ada:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8008ade:	f43f aeb2 	beq.w	8008846 <HAL_RCCEx_PeriphCLKConfig+0x492>
 8008ae2:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008ae4:	0719      	lsls	r1, r3, #28
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008ae6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008ae8:	f57f aec6 	bpl.w	8008878 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8008aec:	e6b8      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008aee:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8008af2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8008af6:	f43f ae86 	beq.w	8008806 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008afa:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8008afe:	f43f ae82 	beq.w	8008806 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008b02:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008b04:	0618      	lsls	r0, r3, #24
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008b06:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008b08:	f57f aea8 	bpl.w	800885c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008b0c:	e688      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008b0e:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8008b12:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8008b16:	f43f ae56 	beq.w	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8008b1a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8008b1e:	f43f ae52 	beq.w	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8008b22:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b24:	065f      	lsls	r7, r3, #25
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008b26:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b28:	f57f ae78 	bpl.w	800881c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8008b2c:	e658      	b.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->RngClockSelection)
 8008b2e:	2a00      	cmp	r2, #0
 8008b30:	f47f af40 	bne.w	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x600>
    if(ret == HAL_OK)
 8008b34:	2d00      	cmp	r5, #0
 8008b36:	f47f af3d 	bne.w	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x600>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b3a:	4d98      	ldr	r5, [pc, #608]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008b3c:	1e30      	subs	r0, r6, #0
 8008b3e:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8008b40:	bf18      	it	ne
 8008b42:	2001      	movne	r0, #1
 8008b44:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	656a      	str	r2, [r5, #84]	; 0x54
 8008b4c:	e6e7      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x56a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b4e:	2101      	movs	r1, #1
 8008b50:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b54:	f7ff fbb2 	bl	80082bc <RCCEx_PLL3_Config>
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008b5c:	2d00      	cmp	r5, #0
 8008b5e:	f040 80a4 	bne.w	8008caa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b62:	498e      	ldr	r1, [pc, #568]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008b64:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8008b68:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8008b6a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8008b6e:	4302      	orrs	r2, r0
 8008b70:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008b72:	03d9      	lsls	r1, r3, #15
 8008b74:	f57f aecb 	bpl.w	800890e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8008b78:	e6b1      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b7a:	2102      	movs	r1, #2
 8008b7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b80:	f7ff fb9c 	bl	80082bc <RCCEx_PLL3_Config>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008b88:	2d00      	cmp	r5, #0
 8008b8a:	f040 8089 	bne.w	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b8e:	4983      	ldr	r1, [pc, #524]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008b90:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8008b94:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008b96:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8008b9a:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b9c:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b9e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008ba0:	f57f ae9b 	bpl.w	80088da <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008ba4:	e689      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	1d20      	adds	r0, r4, #4
 8008baa:	f7ff fb0b 	bl	80081c4 <RCCEx_PLL2_Config>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008bb2:	2d00      	cmp	r5, #0
 8008bb4:	d16f      	bne.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008bb6:	4979      	ldr	r1, [pc, #484]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008bb8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008bba:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008bbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008bc0:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008bc2:	01d8      	lsls	r0, r3, #7
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008bc4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008bc6:	f57f ad28 	bpl.w	800861a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8008bca:	e6f5      	b.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008bcc:	2102      	movs	r1, #2
 8008bce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008bd2:	f7ff fb73 	bl	80082bc <RCCEx_PLL3_Config>
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	f43f ae9b 	beq.w	8008914 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status=HAL_ERROR;
 8008bde:	2601      	movs	r6, #1
 8008be0:	e698      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->SdmmcClockSelection)
 8008be2:	2601      	movs	r6, #1
 8008be4:	4635      	mov	r5, r6
 8008be6:	e692      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8008be8:	462e      	mov	r6, r5
 8008bea:	e47e      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008bec:	462e      	mov	r6, r5
 8008bee:	e438      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xae>
 8008bf0:	462e      	mov	r6, r5
 8008bf2:	e4b5      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8008bf4:	462e      	mov	r6, r5
 8008bf6:	e416      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8008bf8:	462e      	mov	r6, r5
 8008bfa:	e454      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bfc:	4967      	ldr	r1, [pc, #412]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008bfe:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008c00:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008c04:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008c06:	e443      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c08:	4964      	ldr	r1, [pc, #400]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008c0a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008c0c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008c10:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008c12:	e41c      	b.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c14:	4961      	ldr	r1, [pc, #388]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008c16:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008c18:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008c1c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008c1e:	e459      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c20:	495e      	ldr	r1, [pc, #376]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008c22:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008c24:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008c28:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008c2a:	e48f      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c2c:	485b      	ldr	r0, [pc, #364]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008c2e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008c30:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008c34:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8008c36:	f7ff bbda 	b.w	80083ee <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008c3a:	0719      	lsls	r1, r3, #28
 8008c3c:	462e      	mov	r6, r5
 8008c3e:	f57f ae1b 	bpl.w	8008878 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8008c42:	e60d      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008c44:	065f      	lsls	r7, r3, #25
 8008c46:	462e      	mov	r6, r5
 8008c48:	f57f ade8 	bpl.w	800881c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8008c4c:	e5c8      	b.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008c4e:	0618      	lsls	r0, r3, #24
 8008c50:	462e      	mov	r6, r5
 8008c52:	f57f ae03 	bpl.w	800885c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008c56:	e5e3      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008c58:	4950      	ldr	r1, [pc, #320]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008c5a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8008c5c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8008c5e:	f022 0207 	bic.w	r2, r2, #7
 8008c62:	4302      	orrs	r2, r0
 8008c64:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c66:	0759      	lsls	r1, r3, #29
 8008c68:	f57f ad98 	bpl.w	800879c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008c6c:	e57e      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c6e:	494b      	ldr	r1, [pc, #300]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008c70:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8008c74:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008c76:	f022 0207 	bic.w	r2, r2, #7
 8008c7a:	4302      	orrs	r2, r0
 8008c7c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c7e:	069a      	lsls	r2, r3, #26
 8008c80:	f57f adac 	bpl.w	80087dc <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008c84:	e58c      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008c86:	462e      	mov	r6, r5
 8008c88:	e44a      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008c8a:	462e      	mov	r6, r5
 8008c8c:	e486      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008c8e:	462e      	mov	r6, r5
 8008c90:	e4c3      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8008c92:	462e      	mov	r6, r5
 8008c94:	e4a2      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008c96:	01d8      	lsls	r0, r3, #7
 8008c98:	462e      	mov	r6, r5
 8008c9a:	f57f acbe 	bpl.w	800861a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8008c9e:	e68b      	b.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008ca0:	0358      	lsls	r0, r3, #13
 8008ca2:	462e      	mov	r6, r5
 8008ca4:	f57f ae19 	bpl.w	80088da <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008ca8:	e607      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008caa:	03d9      	lsls	r1, r3, #15
 8008cac:	462e      	mov	r6, r5
 8008cae:	f57f ae2e 	bpl.w	800890e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8008cb2:	e614      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008cb4:	4939      	ldr	r1, [pc, #228]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008cb6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008cb8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8008cba:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8008cbe:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008cc0:	0798      	lsls	r0, r3, #30
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008cc2:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008cc4:	f57f ad50 	bpl.w	8008768 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8008cc8:	e537      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8008cca:	462e      	mov	r6, r5
 8008ccc:	e61f      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008cce:	041f      	lsls	r7, r3, #16
 8008cd0:	462e      	mov	r6, r5
 8008cd2:	f57f ac9f 	bpl.w	8008614 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8008cd6:	e48f      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cd8:	4930      	ldr	r1, [pc, #192]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8008cda:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008cdc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008ce0:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008ce2:	2d00      	cmp	r5, #0
 8008ce4:	d1d3      	bne.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8008ce6:	e680      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ce8:	2101      	movs	r1, #1
 8008cea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008cee:	f7ff fae5 	bl	80082bc <RCCEx_PLL3_Config>
 8008cf2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	d1c7      	bne.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8008cfa:	e448      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008cfc:	2101      	movs	r1, #1
 8008cfe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d02:	f7ff fadb 	bl	80082bc <RCCEx_PLL3_Config>
 8008d06:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	2d00      	cmp	r5, #0
 8008d0c:	d1c1      	bne.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8008d0e:	e45d      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d10:	2102      	movs	r1, #2
 8008d12:	1d20      	adds	r0, r4, #4
 8008d14:	f7ff fa56 	bl	80081c4 <RCCEx_PLL2_Config>
 8008d18:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	2d00      	cmp	r5, #0
 8008d1e:	d1b2      	bne.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8008d20:	f7ff bbf7 	b.w	8008512 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d24:	2100      	movs	r1, #0
 8008d26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d2a:	f7ff fac7 	bl	80082bc <RCCEx_PLL3_Config>
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	4605      	mov	r5, r0
      break;
 8008d32:	f7ff bbcf 	b.w	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d36:	2100      	movs	r1, #0
 8008d38:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d3c:	f7ff fabe 	bl	80082bc <RCCEx_PLL3_Config>
 8008d40:	6823      	ldr	r3, [r4, #0]
 8008d42:	4605      	mov	r5, r0
      break;
 8008d44:	f7ff bba4 	b.w	8008490 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d48:	2100      	movs	r1, #0
 8008d4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d4e:	f7ff fab5 	bl	80082bc <RCCEx_PLL3_Config>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	4605      	mov	r5, r0
      break;
 8008d56:	f7ff bbf9 	b.w	800854c <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d5a:	2102      	movs	r1, #2
 8008d5c:	3024      	adds	r0, #36	; 0x24
 8008d5e:	f7ff faad 	bl	80082bc <RCCEx_PLL3_Config>
 8008d62:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008d64:	2e00      	cmp	r6, #0
 8008d66:	f43f ab40 	beq.w	80083ea <HAL_RCCEx_PeriphCLKConfig+0x36>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	f7ff bb46 	b.w	80083fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d70:	2100      	movs	r1, #0
 8008d72:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d76:	f7ff faa1 	bl	80082bc <RCCEx_PLL3_Config>
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	4605      	mov	r5, r0
      break;
 8008d7e:	e681      	b.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d80:	4906      	ldr	r1, [pc, #24]	; (8008d9c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 8008d82:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d84:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008d86:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008d8a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8008d8c:	e67a      	b.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d8e:	2100      	movs	r1, #0
 8008d90:	1d20      	adds	r0, r4, #4
 8008d92:	f7ff fa17 	bl	80081c4 <RCCEx_PLL2_Config>
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	4605      	mov	r5, r0
      break;
 8008d9a:	e673      	b.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8008d9c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008da0:	2100      	movs	r1, #0
 8008da2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008da6:	f7ff fa89 	bl	80082bc <RCCEx_PLL3_Config>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	4605      	mov	r5, r0
      break;
 8008dae:	f7ff bb4e 	b.w	800844e <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008db2:	2101      	movs	r1, #1
 8008db4:	1d20      	adds	r0, r4, #4
 8008db6:	f7ff fa05 	bl	80081c4 <RCCEx_PLL2_Config>
 8008dba:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	2d00      	cmp	r5, #0
 8008dc0:	f47f acd1 	bne.w	8008766 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8008dc4:	e748      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008dc6:	2101      	movs	r1, #1
 8008dc8:	1d20      	adds	r0, r4, #4
 8008dca:	f7ff f9fb 	bl	80081c4 <RCCEx_PLL2_Config>
 8008dce:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	2d00      	cmp	r5, #0
 8008dd4:	f47f ace1 	bne.w	800879a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008dd8:	e749      	b.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008dda:	2101      	movs	r1, #1
 8008ddc:	1d20      	adds	r0, r4, #4
 8008dde:	f7ff f9f1 	bl	80081c4 <RCCEx_PLL2_Config>
 8008de2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	2d00      	cmp	r5, #0
 8008de8:	f47f aca4 	bne.w	8008734 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8008dec:	e762      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x900>
            ret = HAL_TIMEOUT;
 8008dee:	2603      	movs	r6, #3
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	4635      	mov	r5, r6
 8008df4:	e414      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008df6:	4949      	ldr	r1, [pc, #292]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8008df8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008dfa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008dfe:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008e00:	2d00      	cmp	r5, #0
 8008e02:	f47f af62 	bne.w	8008cca <HAL_RCCEx_PeriphCLKConfig+0x916>
 8008e06:	e57b      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e08:	4844      	ldr	r0, [pc, #272]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8008e0a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008e0c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008e10:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8008e12:	2d00      	cmp	r5, #0
 8008e14:	f47f adce 	bne.w	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8008e18:	e68f      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e1a:	4940      	ldr	r1, [pc, #256]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8008e1c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008e1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008e22:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008e24:	2d00      	cmp	r5, #0
 8008e26:	f47f af40 	bne.w	8008caa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8008e2a:	e69a      	b.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e2c:	2102      	movs	r1, #2
 8008e2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008e32:	f7ff fa43 	bl	80082bc <RCCEx_PLL3_Config>
 8008e36:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	2d00      	cmp	r5, #0
 8008e3c:	f47f af02 	bne.w	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8008e40:	e4c4      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e42:	4936      	ldr	r1, [pc, #216]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8008e44:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008e46:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008e4a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008e4c:	2d00      	cmp	r5, #0
 8008e4e:	f47f af22 	bne.w	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008e52:	e6b0      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x802>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e54:	2102      	movs	r1, #2
 8008e56:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008e5a:	f7ff fa2f 	bl	80082bc <RCCEx_PLL3_Config>
 8008e5e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	2d00      	cmp	r5, #0
 8008e64:	f47f aef3 	bne.w	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8008e68:	e4d0      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x458>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e6a:	2102      	movs	r1, #2
 8008e6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008e70:	f7ff fa24 	bl	80082bc <RCCEx_PLL3_Config>
 8008e74:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	2d00      	cmp	r5, #0
 8008e7a:	f47f aede 	bne.w	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x886>
 8008e7e:	e4e5      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e80:	1d20      	adds	r0, r4, #4
 8008e82:	f7ff f99f 	bl	80081c4 <RCCEx_PLL2_Config>
 8008e86:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	2d00      	cmp	r5, #0
 8008e8c:	f47f af08 	bne.w	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008e90:	e67d      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x7da>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008e92:	2102      	movs	r1, #2
 8008e94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008e98:	f7ff fa10 	bl	80082bc <RCCEx_PLL3_Config>
 8008e9c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8008ea0:	b100      	cbz	r0, 8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
        status = HAL_ERROR;
 8008ea2:	2601      	movs	r6, #1
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	e4ef      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008ea8:	2102      	movs	r1, #2
 8008eaa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008eae:	f7ff fa05 	bl	80082bc <RCCEx_PLL3_Config>
 8008eb2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8008eb6:	b100      	cbz	r0, 8008eba <HAL_RCCEx_PeriphCLKConfig+0xb06>
          status = HAL_ERROR;
 8008eb8:	2601      	movs	r6, #1
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	e4d6      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        tickstart = HAL_GetTick();
 8008ebe:	f7fc fcef 	bl	80058a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ec2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8008f1c <HAL_RCCEx_PeriphCLKConfig+0xb68>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ec6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8008eca:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ecc:	e004      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0xb24>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ece:	f7fc fce7 	bl	80058a0 <HAL_GetTick>
 8008ed2:	1bc0      	subs	r0, r0, r7
 8008ed4:	4548      	cmp	r0, r9
 8008ed6:	d88a      	bhi.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ed8:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8008edc:	079b      	lsls	r3, r3, #30
 8008ede:	d5f6      	bpl.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008ee0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8008ee4:	e5ba      	b.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ee6:	480d      	ldr	r0, [pc, #52]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8008ee8:	4a0d      	ldr	r2, [pc, #52]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
 8008eea:	6901      	ldr	r1, [r0, #16]
 8008eec:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8008ef0:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	6102      	str	r2, [r0, #16]
 8008ef8:	e5bb      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8008efa:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008efc:	462e      	mov	r6, r5
 8008efe:	f7ff bb8f 	b.w	8008620 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008f02:	2601      	movs	r6, #1
 8008f04:	4635      	mov	r5, r6
 8008f06:	e449      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008f08:	2601      	movs	r6, #1
 8008f0a:	f7ff ba8b 	b.w	8008424 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008f0e:	2601      	movs	r6, #1
 8008f10:	4635      	mov	r5, r6
 8008f12:	e429      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 8008f14:	2601      	movs	r6, #1
 8008f16:	4635      	mov	r5, r6
 8008f18:	f7ff bb7f 	b.w	800861a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8008f1c:	58024400 	.word	0x58024400
 8008f20:	00ffffcf 	.word	0x00ffffcf

08008f24 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f24:	4b58      	ldr	r3, [pc, #352]	; (8009088 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
{
 8008f26:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f28:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008f2a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008f2c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8008f2e:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008f32:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008f36:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8008f38:	d05c      	beq.n	8008ff4 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008f3a:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008f3e:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f42:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008f46:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8008f4a:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008f4c:	ee07 4a90 	vmov	s15, r4
 8008f50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008f54:	d003      	beq.n	8008f5e <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8008f56:	2902      	cmp	r1, #2
 8008f58:	d075      	beq.n	8009046 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8008f5a:	2900      	cmp	r1, #0
 8008f5c:	d04f      	beq.n	8008ffe <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f5e:	ee07 2a90 	vmov	s15, r2
 8008f62:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800908c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8008f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8008f70:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8009090 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 8008f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f78:	ee06 3a90 	vmov	s13, r3
 8008f7c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008f80:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008f84:	eee7 6a05 	vfma.f32	s13, s14, s10
 8008f88:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8008f8c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008f90:	4a3d      	ldr	r2, [pc, #244]	; (8009088 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
 8008f92:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008f96:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008f98:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008f9c:	ee07 3a10 	vmov	s14, r3
 8008fa0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8008fa4:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008fa6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fb2:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008fb6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008fb8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008fbc:	ee07 3a10 	vmov	s14, r3
 8008fc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008fc4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fd0:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008fd4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008fd6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008fda:	ee07 3a90 	vmov	s15, r3
 8008fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fe2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fea:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008fee:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8008ff2:	4770      	bx	lr
 8008ff4:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ff6:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ffa:	6082      	str	r2, [r0, #8]
}
 8008ffc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ffe:	6819      	ldr	r1, [r3, #0]
 8009000:	0689      	lsls	r1, r1, #26
 8009002:	d527      	bpl.n	8009054 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009004:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009006:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800900a:	4a22      	ldr	r2, [pc, #136]	; (8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x170>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800900c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009010:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800901a:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800901c:	eddf 4a1c 	vldr	s9, [pc, #112]	; 8009090 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 8009020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009024:	ee06 2a10 	vmov	s12, r2
 8009028:	ee06 3a90 	vmov	s13, r3
 800902c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009030:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009034:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8009038:	eee7 6a24 	vfma.f32	s13, s14, s9
 800903c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009040:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009044:	e7a4      	b.n	8008f90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009046:	ee07 2a90 	vmov	s15, r2
 800904a:	eddf 6a13 	vldr	s13, [pc, #76]	; 8009098 <HAL_RCCEx_GetPLL2ClockFreq+0x174>
 800904e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009052:	e78a      	b.n	8008f6a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009054:	ee07 2a90 	vmov	s15, r2
 8009058:	ed9f 5a10 	vldr	s10, [pc, #64]	; 800909c <HAL_RCCEx_GetPLL2ClockFreq+0x178>
 800905c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009066:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8009090 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 800906a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906e:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800907a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800907e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009082:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009086:	e783      	b.n	8008f90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009088:	58024400 	.word	0x58024400
 800908c:	4a742400 	.word	0x4a742400
 8009090:	39000000 	.word	0x39000000
 8009094:	03d09000 	.word	0x03d09000
 8009098:	4bbebc20 	.word	0x4bbebc20
 800909c:	4c742400 	.word	0x4c742400

080090a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090a0:	4b58      	ldr	r3, [pc, #352]	; (8009204 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
{
 80090a2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090a4:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80090a6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80090a8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 80090aa:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80090ae:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80090b2:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 80090b4:	d05c      	beq.n	8009170 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80090b6:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80090ba:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090be:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80090c2:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 80090c6:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80090c8:	ee07 4a90 	vmov	s15, r4
 80090cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80090d0:	d003      	beq.n	80090da <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 80090d2:	2902      	cmp	r1, #2
 80090d4:	d075      	beq.n	80091c2 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 80090d6:	2900      	cmp	r1, #0
 80090d8:	d04f      	beq.n	800917a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090da:	ee07 2a90 	vmov	s15, r2
 80090de:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 80090e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80090ec:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800920c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 80090f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f4:	ee06 3a90 	vmov	s13, r3
 80090f8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80090fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009100:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009104:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009108:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800910c:	4a3d      	ldr	r2, [pc, #244]	; (8009204 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
 800910e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009112:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009114:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009118:	ee07 3a10 	vmov	s14, r3
 800911c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009120:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009122:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800912a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800912e:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009132:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009134:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009138:	ee07 3a10 	vmov	s14, r3
 800913c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009140:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800914c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009150:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009152:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009156:	ee07 3a90 	vmov	s15, r3
 800915a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800915e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009166:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800916a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800916e:	4770      	bx	lr
 8009170:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009172:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009176:	6082      	str	r2, [r0, #8]
}
 8009178:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800917a:	6819      	ldr	r1, [r3, #0]
 800917c:	0689      	lsls	r1, r1, #26
 800917e:	d527      	bpl.n	80091d0 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009180:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009182:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009186:	4a22      	ldr	r2, [pc, #136]	; (8009210 <HAL_RCCEx_GetPLL3ClockFreq+0x170>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009188:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800918c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009196:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009198:	eddf 4a1c 	vldr	s9, [pc, #112]	; 800920c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 800919c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091a0:	ee06 2a10 	vmov	s12, r2
 80091a4:	ee06 3a90 	vmov	s13, r3
 80091a8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80091ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80091b0:	eec6 5a27 	vdiv.f32	s11, s12, s15
 80091b4:	eee7 6a24 	vfma.f32	s13, s14, s9
 80091b8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80091bc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80091c0:	e7a4      	b.n	800910c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80091c2:	ee07 2a90 	vmov	s15, r2
 80091c6:	eddf 6a13 	vldr	s13, [pc, #76]	; 8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x174>
 80091ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091ce:	e78a      	b.n	80090e6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80091d0:	ee07 2a90 	vmov	s15, r2
 80091d4:	ed9f 5a10 	vldr	s10, [pc, #64]	; 8009218 <HAL_RCCEx_GetPLL3ClockFreq+0x178>
 80091d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091da:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80091de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091e2:	eddf 5a0a 	vldr	s11, [pc, #40]	; 800920c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 80091e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ea:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80091ee:	ee07 3a90 	vmov	s15, r3
 80091f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091f6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80091fa:	ee77 7a86 	vadd.f32	s15, s15, s12
 80091fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009202:	e783      	b.n	800910c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009204:	58024400 	.word	0x58024400
 8009208:	4a742400 	.word	0x4a742400
 800920c:	39000000 	.word	0x39000000
 8009210:	03d09000 	.word	0x03d09000
 8009214:	4bbebc20 	.word	0x4bbebc20
 8009218:	4c742400 	.word	0x4c742400

0800921c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800921c:	4b5c      	ldr	r3, [pc, #368]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
{
 800921e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009220:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009222:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009224:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8009226:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800922a:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800922e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8009230:	d05c      	beq.n	80092ec <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009232:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009236:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800923a:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800923e:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8009242:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009244:	ee07 4a90 	vmov	s15, r4
 8009248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800924c:	d07e      	beq.n	800934c <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800924e:	2902      	cmp	r1, #2
 8009250:	d075      	beq.n	800933e <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8009252:	2900      	cmp	r1, #0
 8009254:	d04f      	beq.n	80092f6 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009256:	ee07 2a90 	vmov	s15, r2
 800925a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009394 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 800925e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009264:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009268:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 8009398 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 800926c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009270:	ee06 3a90 	vmov	s13, r3
 8009274:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009278:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800927c:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009280:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009284:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009288:	4a41      	ldr	r2, [pc, #260]	; (8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
 800928a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800928e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009290:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009294:	ee07 3a10 	vmov	s14, r3
 8009298:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800929c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800929e:	ee37 7a06 	vadd.f32	s14, s14, s12
 80092a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092aa:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80092ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80092b0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80092b4:	ee07 3a10 	vmov	s14, r3
 80092b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80092bc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80092c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092c8:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80092cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80092ce:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80092d2:	ee07 3a90 	vmov	s15, r3
 80092d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092da:	ee77 7a86 	vadd.f32	s15, s15, s12
 80092de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092e2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80092e6:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80092ea:	4770      	bx	lr
 80092ec:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80092ee:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80092f2:	6082      	str	r2, [r0, #8]
}
 80092f4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092f6:	6819      	ldr	r1, [r3, #0]
 80092f8:	0689      	lsls	r1, r1, #26
 80092fa:	d52e      	bpl.n	800935a <HAL_RCCEx_GetPLL1ClockFreq+0x13e>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092fc:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092fe:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009302:	4a26      	ldr	r2, [pc, #152]	; (800939c <HAL_RCCEx_GetPLL1ClockFreq+0x180>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009304:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009308:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800930c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009312:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009314:	eddf 4a20 	vldr	s9, [pc, #128]	; 8009398 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 8009318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800931c:	ee06 2a10 	vmov	s12, r2
 8009320:	ee06 3a90 	vmov	s13, r3
 8009324:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009328:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800932c:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8009330:	eee7 6a24 	vfma.f32	s13, s14, s9
 8009334:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009338:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800933c:	e7a4      	b.n	8009288 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800933e:	ee07 2a90 	vmov	s15, r2
 8009342:	eddf 6a17 	vldr	s13, [pc, #92]	; 80093a0 <HAL_RCCEx_GetPLL1ClockFreq+0x184>
 8009346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800934a:	e78a      	b.n	8009262 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800934c:	ee07 2a90 	vmov	s15, r2
 8009350:	eddf 6a14 	vldr	s13, [pc, #80]	; 80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8009354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009358:	e783      	b.n	8009262 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800935a:	ee07 2a90 	vmov	s15, r2
 800935e:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 8009394 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 8009362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009364:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800936c:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8009398 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 8009370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009374:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8009378:	ee07 3a90 	vmov	s15, r3
 800937c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009380:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009384:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009388:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800938c:	e77c      	b.n	8009288 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
 800938e:	bf00      	nop
 8009390:	58024400 	.word	0x58024400
 8009394:	4c742400 	.word	0x4c742400
 8009398:	39000000 	.word	0x39000000
 800939c:	03d09000 	.word	0x03d09000
 80093a0:	4bbebc20 	.word	0x4bbebc20
 80093a4:	4a742400 	.word	0x4a742400

080093a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80093a8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 80093ac:	b500      	push	{lr}
 80093ae:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80093b0:	d077      	beq.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80093b2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80093b6:	d02e      	beq.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80093b8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80093bc:	f000 80cf 	beq.w	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80093c0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80093c4:	f000 8080 	beq.w	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80093c8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80093cc:	d05a      	beq.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80093ce:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80093d2:	f000 8105 	beq.w	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80093d6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80093da:	f000 8110 	beq.w	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80093de:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80093e2:	f000 80e2 	beq.w	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80093e6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80093ea:	d13a      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80093ec:	4ba9      	ldr	r3, [pc, #676]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80093ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 80093f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093f8:	f000 808e 	beq.w	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80093fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009400:	f000 812e 	beq.w	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009404:	bb6b      	cbnz	r3, 8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009406:	4aa3      	ldr	r2, [pc, #652]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = HSE_VALUE;
 8009408:	4ba3      	ldr	r3, [pc, #652]	; (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800940a:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 800940c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009410:	bf18      	it	ne
 8009412:	4618      	movne	r0, r3
 8009414:	e042      	b.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009416:	4a9f      	ldr	r2, [pc, #636]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009418:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800941a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800941e:	2b80      	cmp	r3, #128	; 0x80
 8009420:	f000 8098 	beq.w	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009424:	d921      	bls.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8009426:	2bc0      	cmp	r3, #192	; 0xc0
 8009428:	d037      	beq.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800942a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800942e:	d118      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009430:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009432:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009434:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009438:	0749      	lsls	r1, r1, #29
 800943a:	d502      	bpl.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 80ae 	beq.w	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009442:	4a94      	ldr	r2, [pc, #592]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009444:	6812      	ldr	r2, [r2, #0]
 8009446:	05d0      	lsls	r0, r2, #23
 8009448:	d503      	bpl.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800944a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800944e:	f000 80fb 	beq.w	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009452:	4a90      	ldr	r2, [pc, #576]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009454:	6812      	ldr	r2, [r2, #0]
 8009456:	0391      	lsls	r1, r2, #14
 8009458:	d503      	bpl.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800945a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800945e:	f000 80bd 	beq.w	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      switch (srcclk)
 8009462:	2000      	movs	r0, #0
}
 8009464:	b005      	add	sp, #20
 8009466:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 800946a:	2b00      	cmp	r3, #0
 800946c:	d04b      	beq.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800946e:	2b40      	cmp	r3, #64	; 0x40
 8009470:	d1f7      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009472:	6810      	ldr	r0, [r2, #0]
 8009474:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009478:	d010      	beq.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800947a:	a801      	add	r0, sp, #4
 800947c:	f7ff fd52 	bl	8008f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009480:	9801      	ldr	r0, [sp, #4]
 8009482:	e00b      	b.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009484:	4a83      	ldr	r2, [pc, #524]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009486:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009488:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800948c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009490:	d060      	beq.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009492:	d936      	bls.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8009494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009498:	d178      	bne.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = EXTERNAL_CLOCK_VALUE;
 800949a:	4880      	ldr	r0, [pc, #512]	; (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
}
 800949c:	b005      	add	sp, #20
 800949e:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80094a2:	4b7c      	ldr	r3, [pc, #496]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80094a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094a6:	f003 0307 	and.w	r3, r3, #7
 80094aa:	2b04      	cmp	r3, #4
 80094ac:	d8d9      	bhi.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80094ae:	a201      	add	r2, pc, #4	; (adr r2, 80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 80094b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b4:	08009519 	.word	0x08009519
 80094b8:	0800953d 	.word	0x0800953d
 80094bc:	08009529 	.word	0x08009529
 80094c0:	0800949b 	.word	0x0800949b
 80094c4:	08009525 	.word	0x08009525
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80094c8:	4a72      	ldr	r2, [pc, #456]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80094ca:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80094cc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 80094d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094d4:	d03e      	beq.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80094d6:	d937      	bls.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 80094d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80094dc:	d0dd      	beq.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80094de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80094e2:	d1be      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80094e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094e6:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80094e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094ec:	0752      	lsls	r2, r2, #29
 80094ee:	d5a8      	bpl.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1a6      	bne.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094f4:	4b67      	ldr	r3, [pc, #412]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80094f6:	486a      	ldr	r0, [pc, #424]	; (80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80094fe:	40d8      	lsrs	r0, r3
 8009500:	e7cc      	b.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8009502:	2b00      	cmp	r3, #0
 8009504:	d146      	bne.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009506:	6810      	ldr	r0, [r2, #0]
 8009508:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800950c:	d0c6      	beq.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800950e:	a801      	add	r0, sp, #4
 8009510:	f7ff fe84 	bl	800921c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009514:	9802      	ldr	r0, [sp, #8]
 8009516:	e7c1      	b.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009518:	4b5e      	ldr	r3, [pc, #376]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800951a:	6818      	ldr	r0, [r3, #0]
 800951c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009520:	d0bc      	beq.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009522:	e7f4      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009524:	4a5b      	ldr	r2, [pc, #364]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009526:	e783      	b.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009528:	4b5a      	ldr	r3, [pc, #360]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800952a:	6818      	ldr	r0, [r3, #0]
 800952c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009530:	d0b4      	beq.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009532:	a801      	add	r0, sp, #4
 8009534:	f7ff fdb4 	bl	80090a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009538:	9801      	ldr	r0, [sp, #4]
 800953a:	e7af      	b.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800953c:	4b55      	ldr	r3, [pc, #340]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800953e:	6818      	ldr	r0, [r3, #0]
 8009540:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009544:	d0aa      	beq.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009546:	e798      	b.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      switch (saiclocksource)
 8009548:	2b00      	cmp	r3, #0
 800954a:	d0dc      	beq.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800954c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009550:	d08f      	beq.n	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009552:	e786      	b.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009554:	6810      	ldr	r0, [r2, #0]
 8009556:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800955a:	d09f      	beq.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800955c:	e7e9      	b.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800955e:	4a4d      	ldr	r2, [pc, #308]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009560:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009562:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8009566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800956a:	d0f3      	beq.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800956c:	d806      	bhi.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 800956e:	2b00      	cmp	r3, #0
 8009570:	d0c9      	beq.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009576:	f43f af7c 	beq.w	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800957a:	e772      	b.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800957c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009580:	d08b      	beq.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009582:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009586:	f43f af53 	beq.w	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 800958a:	e76a      	b.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      switch (srcclk)
 800958c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009590:	d0a8      	beq.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009592:	e766      	b.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009598:	f43f af6b 	beq.w	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800959c:	e761      	b.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800959e:	6813      	ldr	r3, [r2, #0]
 80095a0:	483f      	ldr	r0, [pc, #252]	; (80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80095a2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80095a6:	40d8      	lsrs	r0, r3
 80095a8:	e778      	b.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80095aa:	4a3a      	ldr	r2, [pc, #232]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80095ac:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80095ae:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 80095b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095b6:	d066      	beq.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80095b8:	d82f      	bhi.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80095ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095be:	d04f      	beq.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80095c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095c4:	d131      	bne.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095c6:	4b33      	ldr	r3, [pc, #204]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80095c8:	6818      	ldr	r0, [r3, #0]
 80095ca:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80095ce:	f43f af65 	beq.w	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095d2:	a801      	add	r0, sp, #4
 80095d4:	f7ff fd64 	bl	80090a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80095d8:	9802      	ldr	r0, [sp, #8]
 80095da:	e75f      	b.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = HSE_VALUE;
 80095dc:	482e      	ldr	r0, [pc, #184]	; (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80095de:	e75d      	b.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80095e0:	4a2c      	ldr	r2, [pc, #176]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80095e2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80095e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 80095e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ec:	d02e      	beq.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 80095ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095f2:	f43f af77 	beq.w	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f47f af33 	bne.w	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80095fc:	e739      	b.n	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80095fe:	4b25      	ldr	r3, [pc, #148]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009600:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 8009602:	03d2      	lsls	r2, r2, #15
 8009604:	d589      	bpl.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x172>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009606:	6818      	ldr	r0, [r3, #0]
 8009608:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800960c:	f43f af46 	beq.w	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009610:	a801      	add	r0, sp, #4
 8009612:	f7ff fc87 	bl	8008f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009616:	9803      	ldr	r0, [sp, #12]
 8009618:	e740      	b.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 800961a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800961e:	d02a      	beq.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 8009620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009624:	f43f aeef 	beq.w	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8009628:	e71b      	b.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800962a:	2b00      	cmp	r3, #0
 800962c:	f47f af19 	bne.w	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009630:	f7fe fda6 	bl	8008180 <HAL_RCC_GetHCLKFreq>
 8009634:	4b17      	ldr	r3, [pc, #92]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009636:	4a1b      	ldr	r2, [pc, #108]	; (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800963e:	5cd3      	ldrb	r3, [r2, r3]
 8009640:	f003 031f 	and.w	r3, r3, #31
 8009644:	40d8      	lsrs	r0, r3
          break;
 8009646:	e729      	b.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = CSI_VALUE;
 8009648:	4817      	ldr	r0, [pc, #92]	; (80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800964a:	e727      	b.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800964c:	6810      	ldr	r0, [r2, #0]
 800964e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009652:	f43f af23 	beq.w	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009656:	a801      	add	r0, sp, #4
 8009658:	f7ff fd22 	bl	80090a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800965c:	9803      	ldr	r0, [sp, #12]
 800965e:	e71d      	b.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009660:	4b0c      	ldr	r3, [pc, #48]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009662:	6818      	ldr	r0, [r3, #0]
 8009664:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009668:	f43f af18 	beq.w	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800966c:	a801      	add	r0, sp, #4
 800966e:	f7ff fc59 	bl	8008f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009672:	9802      	ldr	r0, [sp, #8]
 8009674:	e712      	b.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009676:	4a07      	ldr	r2, [pc, #28]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = CSI_VALUE;
 8009678:	4b0b      	ldr	r3, [pc, #44]	; (80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800967a:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 800967c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8009680:	bf18      	it	ne
 8009682:	4618      	movne	r0, r3
 8009684:	e70a      	b.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009686:	6810      	ldr	r0, [r2, #0]
 8009688:	f010 0004 	ands.w	r0, r0, #4
 800968c:	f43f af06 	beq.w	800949c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009690:	e730      	b.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8009692:	bf00      	nop
 8009694:	58024400 	.word	0x58024400
 8009698:	017d7840 	.word	0x017d7840
 800969c:	00bb8000 	.word	0x00bb8000
 80096a0:	03d09000 	.word	0x03d09000
 80096a4:	08009a84 	.word	0x08009a84
 80096a8:	003d0900 	.word	0x003d0900

080096ac <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop

080096b0 <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 80096b0:	b318      	cbz	r0, 80096fa <HAL_SDRAM_Init+0x4a>
{
 80096b2:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80096b4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80096b8:	460d      	mov	r5, r1
 80096ba:	4604      	mov	r4, r0
 80096bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80096c0:	b1b3      	cbz	r3, 80096f0 <HAL_SDRAM_Init+0x40>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80096c2:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80096c4:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80096c6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80096ca:	f851 0b04 	ldr.w	r0, [r1], #4
 80096ce:	f000 f851 	bl	8009774 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80096d2:	4629      	mov	r1, r5
 80096d4:	e9d4 0200 	ldrd	r0, r2, [r4]
 80096d8:	f000 f888 	bl	80097ec <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 80096dc:	4a08      	ldr	r2, [pc, #32]	; (8009700 <HAL_SDRAM_Init+0x50>)
  hsdram->State = HAL_SDRAM_STATE_READY;
 80096de:	2101      	movs	r1, #1
  return HAL_OK;
 80096e0:	2000      	movs	r0, #0
  __FMC_ENABLE();
 80096e2:	6813      	ldr	r3, [r2, #0]
 80096e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096e8:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 80096ea:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 80096f0:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80096f4:	f7ff ffda 	bl	80096ac <HAL_SDRAM_MspInit>
 80096f8:	e7e3      	b.n	80096c2 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 80096fa:	2001      	movs	r0, #1
}
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	52004000 	.word	0x52004000

08009704 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009704:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009706:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800970a:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800970c:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800970e:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8009710:	d004      	beq.n	800971c <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009712:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8009716:	2c01      	cmp	r4, #1
 8009718:	d001      	beq.n	800971e <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800971a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800971c:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800971e:	2302      	movs	r3, #2
 8009720:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009722:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009724:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009728:	f000 f8ac 	bl	8009884 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800972c:	6833      	ldr	r3, [r6, #0]
 800972e:	2b02      	cmp	r3, #2
 8009730:	d003      	beq.n	800973a <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 8009732:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009734:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
 8009738:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800973a:	2305      	movs	r3, #5
  return HAL_OK;
 800973c:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800973e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 8009742:	bd70      	pop	{r4, r5, r6, pc}

08009744 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009744:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009746:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800974a:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800974c:	2b02      	cmp	r3, #2
 800974e:	b2d8      	uxtb	r0, r3
 8009750:	d005      	beq.n	800975e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009752:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8009756:	2b01      	cmp	r3, #1
 8009758:	b2dd      	uxtb	r5, r3
 800975a:	d001      	beq.n	8009760 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800975c:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800975e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009760:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009762:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009764:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009768:	f000 f8a2 	bl	80098b0 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 800976c:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800976e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8009772:	bd38      	pop	{r3, r4, r5, pc}

08009774 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009774:	680b      	ldr	r3, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009776:	6802      	ldr	r2, [r0, #0]
{
 8009778:	b470      	push	{r4, r5, r6}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800977a:	b9c3      	cbnz	r3, 80097ae <FMC_SDRAM_Init+0x3a>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800977c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009780:	684c      	ldr	r4, [r1, #4]
 8009782:	698e      	ldr	r6, [r1, #24]
 8009784:	4013      	ands	r3, r2
 8009786:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800978a:	4323      	orrs	r3, r4
 800978c:	690c      	ldr	r4, [r1, #16]
 800978e:	4313      	orrs	r3, r2
 8009790:	694a      	ldr	r2, [r1, #20]
 8009792:	432b      	orrs	r3, r5
 8009794:	69cd      	ldr	r5, [r1, #28]
 8009796:	4323      	orrs	r3, r4
 8009798:	4313      	orrs	r3, r2
 800979a:	4333      	orrs	r3, r6
 800979c:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 80097a0:	432b      	orrs	r3, r5
 80097a2:	4323      	orrs	r3, r4
 80097a4:	4313      	orrs	r3, r2
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80097a6:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80097a8:	6003      	str	r3, [r0, #0]
}
 80097aa:	2000      	movs	r0, #0
 80097ac:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80097ae:	69cb      	ldr	r3, [r1, #28]
 80097b0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80097b4:	68ce      	ldr	r6, [r1, #12]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80097b6:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80097b8:	4b0b      	ldr	r3, [pc, #44]	; (80097e8 <FMC_SDRAM_Init+0x74>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80097ba:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
 80097be:	432a      	orrs	r2, r5
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80097c0:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80097c2:	4322      	orrs	r2, r4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80097c4:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80097c6:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80097c8:	6842      	ldr	r2, [r0, #4]
 80097ca:	4013      	ands	r3, r2
 80097cc:	432b      	orrs	r3, r5
 80097ce:	690d      	ldr	r5, [r1, #16]
 80097d0:	4323      	orrs	r3, r4
 80097d2:	4333      	orrs	r3, r6
 80097d4:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 80097d8:	432b      	orrs	r3, r5
 80097da:	4323      	orrs	r3, r4
 80097dc:	4313      	orrs	r3, r2
}
 80097de:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80097e0:	6043      	str	r3, [r0, #4]
}
 80097e2:	2000      	movs	r0, #0
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	ffff8000 	.word	0xffff8000

080097ec <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80097ec:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80097ee:	bb0a      	cbnz	r2, 8009834 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80097f0:	684c      	ldr	r4, [r1, #4]
 80097f2:	6882      	ldr	r2, [r0, #8]
 80097f4:	680d      	ldr	r5, [r1, #0]
 80097f6:	1e63      	subs	r3, r4, #1
 80097f8:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80097fc:	688c      	ldr	r4, [r1, #8]
 80097fe:	1e6e      	subs	r6, r5, #1
 8009800:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8009804:	1e65      	subs	r5, r4, #1
 8009806:	68cc      	ldr	r4, [r1, #12]
 8009808:	4333      	orrs	r3, r6
 800980a:	690a      	ldr	r2, [r1, #16]
 800980c:	1e66      	subs	r6, r4, #1
 800980e:	694c      	ldr	r4, [r1, #20]
 8009810:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8009814:	1e55      	subs	r5, r2, #1
 8009816:	698a      	ldr	r2, [r1, #24]
 8009818:	1e61      	subs	r1, r4, #1
 800981a:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 800981e:	3a01      	subs	r2, #1
 8009820:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8009824:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8009828:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800982c:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800982e:	6083      	str	r3, [r0, #8]
}
 8009830:	2000      	movs	r0, #0
 8009832:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009834:	6882      	ldr	r2, [r0, #8]
 8009836:	68cb      	ldr	r3, [r1, #12]
 8009838:	4c11      	ldr	r4, [pc, #68]	; (8009880 <FMC_SDRAM_Timing_Init+0x94>)
 800983a:	1e5d      	subs	r5, r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800983c:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800983e:	4014      	ands	r4, r2
 8009840:	694a      	ldr	r2, [r1, #20]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009842:	1e5e      	subs	r6, r3, #1
 8009844:	680b      	ldr	r3, [r1, #0]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009846:	3a01      	subs	r2, #1
 8009848:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800984c:	688d      	ldr	r5, [r1, #8]
 800984e:	3b01      	subs	r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009850:	ea44 5402 	orr.w	r4, r4, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009854:	3d01      	subs	r5, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009856:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009858:	68c2      	ldr	r2, [r0, #12]
 800985a:	690c      	ldr	r4, [r1, #16]
 800985c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8009860:	6989      	ldr	r1, [r1, #24]
 8009862:	3c01      	subs	r4, #1
 8009864:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 8009868:	3901      	subs	r1, #1
 800986a:	4313      	orrs	r3, r2
 800986c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8009870:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009874:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
 8009878:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800987a:	60c3      	str	r3, [r0, #12]
}
 800987c:	2000      	movs	r0, #0
 800987e:	4770      	bx	lr
 8009880:	ff0f0fff 	.word	0xff0f0fff

08009884 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009884:	b470      	push	{r4, r5, r6}
 8009886:	4602      	mov	r2, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8009888:	68ce      	ldr	r6, [r1, #12]
 800988a:	4c08      	ldr	r4, [pc, #32]	; (80098ac <FMC_SDRAM_SendCommand+0x28>)
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800988c:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800988e:	e9d1 3500 	ldrd	r3, r5, [r1]
 8009892:	6889      	ldr	r1, [r1, #8]
 8009894:	432b      	orrs	r3, r5
 8009896:	6915      	ldr	r5, [r2, #16]
 8009898:	3901      	subs	r1, #1
 800989a:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 800989e:	402c      	ands	r4, r5
 80098a0:	4323      	orrs	r3, r4
 80098a2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
}
 80098a6:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80098a8:	6113      	str	r3, [r2, #16]
}
 80098aa:	4770      	bx	lr
 80098ac:	ffc00000 	.word	0xffc00000

080098b0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80098b0:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80098b2:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 80098b4:	2000      	movs	r0, #0
{
 80098b6:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80098b8:	6954      	ldr	r4, [r2, #20]
 80098ba:	4023      	ands	r3, r4
}
 80098bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80098c0:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80098c4:	6151      	str	r1, [r2, #20]
}
 80098c6:	4770      	bx	lr
 80098c8:	ffffc001 	.word	0xffffc001

080098cc <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 80098cc:	4603      	mov	r3, r0
 80098ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 80098d2:	4c15      	ldr	r4, [pc, #84]	; (8009928 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 80098d4:	2500      	movs	r5, #0
 80098d6:	4e15      	ldr	r6, [pc, #84]	; (800992c <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80098d8:	4628      	mov	r0, r5
 80098da:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 80098de:	e9d3 7200 	ldrd	r7, r2, [r3]
 80098e2:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80098e6:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  DrawProp->LcdLayer = 0;
 80098ea:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80098ec:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 80098f0:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 80098f2:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 80098f4:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 80098f6:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 80098fa:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80098fe:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 8009902:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8009906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8009908:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800990a:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800990c:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800990e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8009910:	6a23      	ldr	r3, [r4, #32]
 8009912:	f106 0118 	add.w	r1, r6, #24
 8009916:	4628      	mov	r0, r5
 8009918:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800991a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800991c:	f106 011c 	add.w	r1, r6, #28
 8009920:	4628      	mov	r0, r5
}
 8009922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8009926:	4718      	bx	r3
 8009928:	24009218 	.word	0x24009218
 800992c:	240091d8 	.word	0x240091d8

08009930 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 8009930:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 8009932:	4b05      	ldr	r3, [pc, #20]	; (8009948 <UTIL_LCD_SetLayer+0x18>)
 8009934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009936:	b133      	cbz	r3, 8009946 <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 8009938:	4d04      	ldr	r5, [pc, #16]	; (800994c <UTIL_LCD_SetLayer+0x1c>)
 800993a:	4604      	mov	r4, r0
 800993c:	4601      	mov	r1, r0
 800993e:	6928      	ldr	r0, [r5, #16]
 8009940:	4798      	blx	r3
 8009942:	b900      	cbnz	r0, 8009946 <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 8009944:	60ec      	str	r4, [r5, #12]
    }
  }
}
 8009946:	bd38      	pop	{r3, r4, r5, pc}
 8009948:	24009218 	.word	0x24009218
 800994c:	240091d8 	.word	0x240091d8

08009950 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8009950:	4a02      	ldr	r2, [pc, #8]	; (800995c <UTIL_LCD_SetTextColor+0xc>)
 8009952:	68d3      	ldr	r3, [r2, #12]
 8009954:	015b      	lsls	r3, r3, #5
 8009956:	50d0      	str	r0, [r2, r3]
}
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	240091d8 	.word	0x240091d8

08009960 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8009960:	4b02      	ldr	r3, [pc, #8]	; (800996c <UTIL_LCD_SetBackColor+0xc>)
 8009962:	68da      	ldr	r2, [r3, #12]
 8009964:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8009968:	6058      	str	r0, [r3, #4]
}
 800996a:	4770      	bx	lr
 800996c:	240091d8 	.word	0x240091d8

08009970 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8009970:	4b02      	ldr	r3, [pc, #8]	; (800997c <UTIL_LCD_SetFont+0xc>)
 8009972:	68da      	ldr	r2, [r3, #12]
 8009974:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8009978:	6098      	str	r0, [r3, #8]
}
 800997a:	4770      	bx	lr
 800997c:	240091d8 	.word	0x240091d8

08009980 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8009980:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8009982:	4e13      	ldr	r6, [pc, #76]	; (80099d0 <UTIL_LCD_FillRect+0x50>)
{
 8009984:	4615      	mov	r5, r2
 8009986:	b083      	sub	sp, #12
 8009988:	461c      	mov	r4, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800998a:	69f7      	ldr	r7, [r6, #28]
{
 800998c:	462b      	mov	r3, r5
 800998e:	460a      	mov	r2, r1
 8009990:	9d08      	ldr	r5, [sp, #32]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8009992:	2f02      	cmp	r7, #2
 8009994:	d008      	beq.n	80099a8 <UTIL_LCD_FillRect+0x28>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8009996:	4f0f      	ldr	r7, [pc, #60]	; (80099d4 <UTIL_LCD_FillRect+0x54>)
 8009998:	4601      	mov	r1, r0
 800999a:	e9cd 4500 	strd	r4, r5, [sp]
 800999e:	693c      	ldr	r4, [r7, #16]
 80099a0:	6930      	ldr	r0, [r6, #16]
 80099a2:	47a0      	blx	r4
  }
}
 80099a4:	b003      	add	sp, #12
 80099a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 80099a8:	096f      	lsrs	r7, r5, #5
 80099aa:	9400      	str	r4, [sp, #0]
 80099ac:	0a29      	lsrs	r1, r5, #8
 80099ae:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80099b2:	f407 64fc 	and.w	r4, r7, #2016	; 0x7e0
 80099b6:	f401 4778 	and.w	r7, r1, #63488	; 0xf800
 80099ba:	4601      	mov	r1, r0
 80099bc:	6930      	ldr	r0, [r6, #16]
 80099be:	433c      	orrs	r4, r7
 80099c0:	4e04      	ldr	r6, [pc, #16]	; (80099d4 <UTIL_LCD_FillRect+0x54>)
 80099c2:	4325      	orrs	r5, r4
 80099c4:	6934      	ldr	r4, [r6, #16]
 80099c6:	9501      	str	r5, [sp, #4]
 80099c8:	47a0      	blx	r4
}
 80099ca:	b003      	add	sp, #12
 80099cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ce:	bf00      	nop
 80099d0:	240091d8 	.word	0x240091d8
 80099d4:	24009218 	.word	0x24009218

080099d8 <UTIL_LCD_Clear>:
{
 80099d8:	b500      	push	{lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 80099da:	2100      	movs	r1, #0
{
 80099dc:	b083      	sub	sp, #12
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 80099de:	4a05      	ldr	r2, [pc, #20]	; (80099f4 <UTIL_LCD_Clear+0x1c>)
 80099e0:	9000      	str	r0, [sp, #0]
 80099e2:	4608      	mov	r0, r1
 80099e4:	6993      	ldr	r3, [r2, #24]
 80099e6:	6952      	ldr	r2, [r2, #20]
 80099e8:	f7ff ffca 	bl	8009980 <UTIL_LCD_FillRect>
}
 80099ec:	b003      	add	sp, #12
 80099ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80099f2:	bf00      	nop
 80099f4:	240091d8 	.word	0x240091d8

080099f8 <__libc_init_array>:
 80099f8:	b570      	push	{r4, r5, r6, lr}
 80099fa:	4d0d      	ldr	r5, [pc, #52]	; (8009a30 <__libc_init_array+0x38>)
 80099fc:	4c0d      	ldr	r4, [pc, #52]	; (8009a34 <__libc_init_array+0x3c>)
 80099fe:	1b64      	subs	r4, r4, r5
 8009a00:	10a4      	asrs	r4, r4, #2
 8009a02:	2600      	movs	r6, #0
 8009a04:	42a6      	cmp	r6, r4
 8009a06:	d109      	bne.n	8009a1c <__libc_init_array+0x24>
 8009a08:	4d0b      	ldr	r5, [pc, #44]	; (8009a38 <__libc_init_array+0x40>)
 8009a0a:	4c0c      	ldr	r4, [pc, #48]	; (8009a3c <__libc_init_array+0x44>)
 8009a0c:	f000 f82e 	bl	8009a6c <_init>
 8009a10:	1b64      	subs	r4, r4, r5
 8009a12:	10a4      	asrs	r4, r4, #2
 8009a14:	2600      	movs	r6, #0
 8009a16:	42a6      	cmp	r6, r4
 8009a18:	d105      	bne.n	8009a26 <__libc_init_array+0x2e>
 8009a1a:	bd70      	pop	{r4, r5, r6, pc}
 8009a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a20:	4798      	blx	r3
 8009a22:	3601      	adds	r6, #1
 8009a24:	e7ee      	b.n	8009a04 <__libc_init_array+0xc>
 8009a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a2a:	4798      	blx	r3
 8009a2c:	3601      	adds	r6, #1
 8009a2e:	e7f2      	b.n	8009a16 <__libc_init_array+0x1e>
 8009a30:	0800b7ec 	.word	0x0800b7ec
 8009a34:	0800b7ec 	.word	0x0800b7ec
 8009a38:	0800b7ec 	.word	0x0800b7ec
 8009a3c:	0800b7f0 	.word	0x0800b7f0

08009a40 <memcpy>:
 8009a40:	440a      	add	r2, r1
 8009a42:	4291      	cmp	r1, r2
 8009a44:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a48:	d100      	bne.n	8009a4c <memcpy+0xc>
 8009a4a:	4770      	bx	lr
 8009a4c:	b510      	push	{r4, lr}
 8009a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a56:	4291      	cmp	r1, r2
 8009a58:	d1f9      	bne.n	8009a4e <memcpy+0xe>
 8009a5a:	bd10      	pop	{r4, pc}

08009a5c <memset>:
 8009a5c:	4402      	add	r2, r0
 8009a5e:	4603      	mov	r3, r0
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d100      	bne.n	8009a66 <memset+0xa>
 8009a64:	4770      	bx	lr
 8009a66:	f803 1b01 	strb.w	r1, [r3], #1
 8009a6a:	e7f9      	b.n	8009a60 <memset+0x4>

08009a6c <_init>:
 8009a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6e:	bf00      	nop
 8009a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a72:	bc08      	pop	{r3}
 8009a74:	469e      	mov	lr, r3
 8009a76:	4770      	bx	lr

08009a78 <_fini>:
 8009a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7a:	bf00      	nop
 8009a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a7e:	bc08      	pop	{r3}
 8009a80:	469e      	mov	lr, r3
 8009a82:	4770      	bx	lr
