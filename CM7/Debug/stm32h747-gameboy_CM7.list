
stm32h747-gameboy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a05c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009d68  0800a2f4  0800a2f4  0001a2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801405c  0801405c  00031074  2**0
                  CONTENTS
  4 .ARM          00000000  0801405c  0801405c  00031074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801405c  0801405c  00031074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801405c  0801405c  0002405c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014060  08014060  00024060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001074  24000000  08014064  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010990  24001078  080150d8  00031078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24011a08  080150d8  00031a08  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00031074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000bb3be  00000000  00000000  000310a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000071c3  00000000  00000000  000ec460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001b3cf  00000000  00000000  000f3623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025c0  00000000  00000000  0010e9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000048f0  00000000  00000000  00110fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00048761  00000000  00000000  001158a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031b28  00000000  00000000  0015e009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c8b28  00000000  00000000  0018fb31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00358659  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f98  00000000  00000000  003586ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24001078 	.word	0x24001078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a2dc 	.word	0x0800a2dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400107c 	.word	0x2400107c
 80002d4:	0800a2dc 	.word	0x0800a2dc

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002da:	492e      	ldr	r1, [pc, #184]	; (8000394 <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80002e4:	b430      	push	{r4, r5}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	f042 0210 	orr.w	r2, r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f2:	680b      	ldr	r3, [r1, #0]
 80002f4:	f003 030f 	and.w	r3, r3, #15
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	d805      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fc:	680b      	ldr	r3, [r1, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030c:	4a23      	ldr	r2, [pc, #140]	; (800039c <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800030e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000310:	4820      	ldr	r0, [pc, #128]	; (8000394 <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 8000312:	f041 0101 	orr.w	r1, r1, #1
 8000316:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000318:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000320:	6803      	ldr	r3, [r0, #0]
 8000322:	071b      	lsls	r3, r3, #28
 8000324:	d505      	bpl.n	8000332 <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000326:	6803      	ldr	r3, [r0, #0]
 8000328:	f023 030f 	bic.w	r3, r3, #15
 800032c:	f043 0307 	orr.w	r3, r3, #7
 8000330:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <SystemInit+0xc0>)
 8000334:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000336:	491a      	ldr	r1, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
  RCC->PLLCKSELR = 0x02020200;
 8000338:	4c1a      	ldr	r4, [pc, #104]	; (80003a4 <SystemInit+0xcc>)
  RCC->PLLCFGR = 0x01FF0000;
 800033a:	481b      	ldr	r0, [pc, #108]	; (80003a8 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 800033c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800033e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000340:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000342:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000346:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800034a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800034c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800034e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000350:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000352:	6818      	ldr	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000354:	4c15      	ldr	r4, [pc, #84]	; (80003ac <SystemInit+0xd4>)
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800035a:	4d15      	ldr	r5, [pc, #84]	; (80003b0 <SystemInit+0xd8>)
 800035c:	4915      	ldr	r1, [pc, #84]	; (80003b4 <SystemInit+0xdc>)
  RCC->CR &= 0xFFFBFFFFU;
 800035e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000360:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8000362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000368:	6263      	str	r3, [r4, #36]	; 0x24
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800036a:	682b      	ldr	r3, [r5, #0]
 800036c:	4019      	ands	r1, r3
 800036e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000372:	d202      	bcs.n	800037a <SystemInit+0xa2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <SystemInit+0xe0>)
 8000376:	2201      	movs	r2, #1
 8000378:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800037a:	4910      	ldr	r1, [pc, #64]	; (80003bc <SystemInit+0xe4>)
 800037c:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <SystemInit+0xb8>)
 8000382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000386:	6008      	str	r0, [r1, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000388:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800038a:	bc30      	pop	{r4, r5}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	01010280 	.word	0x01010280
 80003a4:	02020200 	.word	0x02020200
 80003a8:	01ff0000 	.word	0x01ff0000
 80003ac:	580000c0 	.word	0x580000c0
 80003b0:	5c001000 	.word	0x5c001000
 80003b4:	ffff0000 	.word	0xffff0000
 80003b8:	51008108 	.word	0x51008108
 80003bc:	52004000 	.word	0x52004000

080003c0 <vNOP>:
};

/* Implementation*/

/*********************0x0X*/
void vNOP(){          }
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop

080003c4 <vINCs_BC>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
void vINCs_BC(){      reg.BC++;}
 80003c4:	4a02      	ldr	r2, [pc, #8]	; (80003d0 <vINCs_BC+0xc>)
 80003c6:	8853      	ldrh	r3, [r2, #2]
 80003c8:	3301      	adds	r3, #1
 80003ca:	8053      	strh	r3, [r2, #2]
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	24001664 	.word	0x24001664

080003d4 <vDECs_BC>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
void vLDs_a16_SP(){   vGBMemoryWriteShort(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
void vDECs_BC(){      reg.BC--;}
 80003d4:	4a02      	ldr	r2, [pc, #8]	; (80003e0 <vDECs_BC+0xc>)
 80003d6:	8853      	ldrh	r3, [r2, #2]
 80003d8:	3b01      	subs	r3, #1
 80003da:	8053      	strh	r3, [r2, #2]
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	24001664 	.word	0x24001664

080003e4 <vSTOP>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}

/*********************0x1X*/
void vSTOP(){         ucSTOPPED = 1;}                                    // MORE NEEDED TO IMPLEMENT LATER
 80003e4:	4b01      	ldr	r3, [pc, #4]	; (80003ec <vSTOP+0x8>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
 80003ea:	4770      	bx	lr
 80003ec:	240010a1 	.word	0x240010a1

080003f0 <vINCs_DE>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
void vINCs_DE(){      reg.DE++;}
 80003f0:	4a02      	ldr	r2, [pc, #8]	; (80003fc <vINCs_DE+0xc>)
 80003f2:	8893      	ldrh	r3, [r2, #4]
 80003f4:	3301      	adds	r3, #1
 80003f6:	8093      	strh	r3, [r2, #4]
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	24001664 	.word	0x24001664

08000400 <vDECs_DE>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
void vDECs_DE(){      reg.DE--;}
 8000400:	4a02      	ldr	r2, [pc, #8]	; (800040c <vDECs_DE+0xc>)
 8000402:	8893      	ldrh	r3, [r2, #4]
 8000404:	3b01      	subs	r3, #1
 8000406:	8093      	strh	r3, [r2, #4]
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	24001664 	.word	0x24001664

08000410 <vINCs_HL>:

/*********************0x2X*/
void vJR_NZ_r8(){     customDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
void vINCs_HL(){      reg.HL++;}
 8000410:	4a02      	ldr	r2, [pc, #8]	; (800041c <vINCs_HL+0xc>)
 8000412:	88d3      	ldrh	r3, [r2, #6]
 8000414:	3301      	adds	r3, #1
 8000416:	80d3      	strh	r3, [r2, #6]
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	24001664 	.word	0x24001664

08000420 <vDECs_HL>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
void vJR_Z_r8(){      customDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
void vDECs_HL(){      reg.HL--;}
 8000420:	4a02      	ldr	r2, [pc, #8]	; (800042c <vDECs_HL+0xc>)
 8000422:	88d3      	ldrh	r3, [r2, #6]
 8000424:	3b01      	subs	r3, #1
 8000426:	80d3      	strh	r3, [r2, #6]
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	24001664 	.word	0x24001664

08000430 <vINCs_SP>:

/*********************0x3X*/
void vJR_NC_r8(){     customDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
void vINCs_SP(){      reg.SP++;}
 8000430:	4a02      	ldr	r2, [pc, #8]	; (800043c <vINCs_SP+0xc>)
 8000432:	8913      	ldrh	r3, [r2, #8]
 8000434:	3301      	adds	r3, #1
 8000436:	8113      	strh	r3, [r2, #8]
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	24001664 	.word	0x24001664

08000440 <vDECs_SP>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
void vSCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); setbit(&reg.F, C_FLAG);}
void vJR_C_r8(){      customDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
void vDECs_SP(){      reg.SP--;}
 8000440:	4a02      	ldr	r2, [pc, #8]	; (800044c <vDECs_SP+0xc>)
 8000442:	8913      	ldrh	r3, [r2, #8]
 8000444:	3b01      	subs	r3, #1
 8000446:	8113      	strh	r3, [r2, #8]
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	24001664 	.word	0x24001664

08000450 <vLD_B_C>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
void vCCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); (checkbit(reg.F, C_FLAG)) ? resetbit(&reg.F, C_FLAG) : setbit(&reg.F, C_FLAG);}

/*********************0x4X*/
void vLD_B_B(){       reg.B = reg.B;}
void vLD_B_C(){       reg.B = reg.C;}
 8000450:	4b01      	ldr	r3, [pc, #4]	; (8000458 <vLD_B_C+0x8>)
 8000452:	789a      	ldrb	r2, [r3, #2]
 8000454:	70da      	strb	r2, [r3, #3]
 8000456:	4770      	bx	lr
 8000458:	24001664 	.word	0x24001664

0800045c <vLD_B_D>:
void vLD_B_D(){       reg.B = reg.D;}
 800045c:	4b01      	ldr	r3, [pc, #4]	; (8000464 <vLD_B_D+0x8>)
 800045e:	795a      	ldrb	r2, [r3, #5]
 8000460:	70da      	strb	r2, [r3, #3]
 8000462:	4770      	bx	lr
 8000464:	24001664 	.word	0x24001664

08000468 <vLD_B_E>:
void vLD_B_E(){       reg.B = reg.E;}
 8000468:	4b01      	ldr	r3, [pc, #4]	; (8000470 <vLD_B_E+0x8>)
 800046a:	791a      	ldrb	r2, [r3, #4]
 800046c:	70da      	strb	r2, [r3, #3]
 800046e:	4770      	bx	lr
 8000470:	24001664 	.word	0x24001664

08000474 <vLD_B_H>:
void vLD_B_H(){       reg.B = reg.H;}
 8000474:	4b01      	ldr	r3, [pc, #4]	; (800047c <vLD_B_H+0x8>)
 8000476:	79da      	ldrb	r2, [r3, #7]
 8000478:	70da      	strb	r2, [r3, #3]
 800047a:	4770      	bx	lr
 800047c:	24001664 	.word	0x24001664

08000480 <vLD_B_L>:
void vLD_B_L(){       reg.B = reg.L;}
 8000480:	4b01      	ldr	r3, [pc, #4]	; (8000488 <vLD_B_L+0x8>)
 8000482:	799a      	ldrb	r2, [r3, #6]
 8000484:	70da      	strb	r2, [r3, #3]
 8000486:	4770      	bx	lr
 8000488:	24001664 	.word	0x24001664

0800048c <vLD_B_A>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
void vLD_B_A(){       reg.B = reg.A;}
 800048c:	4b01      	ldr	r3, [pc, #4]	; (8000494 <vLD_B_A+0x8>)
 800048e:	785a      	ldrb	r2, [r3, #1]
 8000490:	70da      	strb	r2, [r3, #3]
 8000492:	4770      	bx	lr
 8000494:	24001664 	.word	0x24001664

08000498 <vLD_C_B>:
void vLD_C_B(){       reg.C = reg.B;}
 8000498:	4b01      	ldr	r3, [pc, #4]	; (80004a0 <vLD_C_B+0x8>)
 800049a:	78da      	ldrb	r2, [r3, #3]
 800049c:	709a      	strb	r2, [r3, #2]
 800049e:	4770      	bx	lr
 80004a0:	24001664 	.word	0x24001664

080004a4 <vLD_C_D>:
void vLD_C_C(){       reg.C = reg.C;}
void vLD_C_D(){       reg.C = reg.D;}
 80004a4:	4b01      	ldr	r3, [pc, #4]	; (80004ac <vLD_C_D+0x8>)
 80004a6:	795a      	ldrb	r2, [r3, #5]
 80004a8:	709a      	strb	r2, [r3, #2]
 80004aa:	4770      	bx	lr
 80004ac:	24001664 	.word	0x24001664

080004b0 <vLD_C_E>:
void vLD_C_E(){       reg.C = reg.E;}
 80004b0:	4b01      	ldr	r3, [pc, #4]	; (80004b8 <vLD_C_E+0x8>)
 80004b2:	791a      	ldrb	r2, [r3, #4]
 80004b4:	709a      	strb	r2, [r3, #2]
 80004b6:	4770      	bx	lr
 80004b8:	24001664 	.word	0x24001664

080004bc <vLD_C_H>:
void vLD_C_H(){       reg.C = reg.H;}
 80004bc:	4b01      	ldr	r3, [pc, #4]	; (80004c4 <vLD_C_H+0x8>)
 80004be:	79da      	ldrb	r2, [r3, #7]
 80004c0:	709a      	strb	r2, [r3, #2]
 80004c2:	4770      	bx	lr
 80004c4:	24001664 	.word	0x24001664

080004c8 <vLD_C_L>:
void vLD_C_L(){       reg.C = reg.L;}
 80004c8:	4b01      	ldr	r3, [pc, #4]	; (80004d0 <vLD_C_L+0x8>)
 80004ca:	799a      	ldrb	r2, [r3, #6]
 80004cc:	709a      	strb	r2, [r3, #2]
 80004ce:	4770      	bx	lr
 80004d0:	24001664 	.word	0x24001664

080004d4 <vLD_C_A>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
void vLD_C_A(){       reg.C = reg.A;}
 80004d4:	4b01      	ldr	r3, [pc, #4]	; (80004dc <vLD_C_A+0x8>)
 80004d6:	785a      	ldrb	r2, [r3, #1]
 80004d8:	709a      	strb	r2, [r3, #2]
 80004da:	4770      	bx	lr
 80004dc:	24001664 	.word	0x24001664

080004e0 <vLD_D_B>:

/*********************0x5X*/
void vLD_D_B(){       reg.D = reg.B;}
 80004e0:	4b01      	ldr	r3, [pc, #4]	; (80004e8 <vLD_D_B+0x8>)
 80004e2:	78da      	ldrb	r2, [r3, #3]
 80004e4:	715a      	strb	r2, [r3, #5]
 80004e6:	4770      	bx	lr
 80004e8:	24001664 	.word	0x24001664

080004ec <vLD_D_C>:
void vLD_D_C(){       reg.D = reg.C;}
 80004ec:	4b01      	ldr	r3, [pc, #4]	; (80004f4 <vLD_D_C+0x8>)
 80004ee:	789a      	ldrb	r2, [r3, #2]
 80004f0:	715a      	strb	r2, [r3, #5]
 80004f2:	4770      	bx	lr
 80004f4:	24001664 	.word	0x24001664

080004f8 <vLD_D_E>:
void vLD_D_D(){       reg.D = reg.D;}
void vLD_D_E(){       reg.D = reg.E;}
 80004f8:	4b01      	ldr	r3, [pc, #4]	; (8000500 <vLD_D_E+0x8>)
 80004fa:	791a      	ldrb	r2, [r3, #4]
 80004fc:	715a      	strb	r2, [r3, #5]
 80004fe:	4770      	bx	lr
 8000500:	24001664 	.word	0x24001664

08000504 <vLD_D_H>:
void vLD_D_H(){       reg.D = reg.H;}
 8000504:	4b01      	ldr	r3, [pc, #4]	; (800050c <vLD_D_H+0x8>)
 8000506:	79da      	ldrb	r2, [r3, #7]
 8000508:	715a      	strb	r2, [r3, #5]
 800050a:	4770      	bx	lr
 800050c:	24001664 	.word	0x24001664

08000510 <vLD_D_L>:
void vLD_D_L(){       reg.D = reg.L;}
 8000510:	4b01      	ldr	r3, [pc, #4]	; (8000518 <vLD_D_L+0x8>)
 8000512:	799a      	ldrb	r2, [r3, #6]
 8000514:	715a      	strb	r2, [r3, #5]
 8000516:	4770      	bx	lr
 8000518:	24001664 	.word	0x24001664

0800051c <vLD_D_A>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
void vLD_D_A(){       reg.D = reg.A;}
 800051c:	4b01      	ldr	r3, [pc, #4]	; (8000524 <vLD_D_A+0x8>)
 800051e:	785a      	ldrb	r2, [r3, #1]
 8000520:	715a      	strb	r2, [r3, #5]
 8000522:	4770      	bx	lr
 8000524:	24001664 	.word	0x24001664

08000528 <vLD_E_B>:
void vLD_E_B(){       reg.E = reg.B;}
 8000528:	4b01      	ldr	r3, [pc, #4]	; (8000530 <vLD_E_B+0x8>)
 800052a:	78da      	ldrb	r2, [r3, #3]
 800052c:	711a      	strb	r2, [r3, #4]
 800052e:	4770      	bx	lr
 8000530:	24001664 	.word	0x24001664

08000534 <vLD_E_C>:
void vLD_E_C(){       reg.E = reg.C;}
 8000534:	4b01      	ldr	r3, [pc, #4]	; (800053c <vLD_E_C+0x8>)
 8000536:	789a      	ldrb	r2, [r3, #2]
 8000538:	711a      	strb	r2, [r3, #4]
 800053a:	4770      	bx	lr
 800053c:	24001664 	.word	0x24001664

08000540 <vLD_E_D>:
void vLD_E_D(){       reg.E = reg.D;}
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <vLD_E_D+0x8>)
 8000542:	795a      	ldrb	r2, [r3, #5]
 8000544:	711a      	strb	r2, [r3, #4]
 8000546:	4770      	bx	lr
 8000548:	24001664 	.word	0x24001664

0800054c <vLD_E_H>:
void vLD_E_E(){       reg.E = reg.E;}
void vLD_E_H(){       reg.E = reg.H;}
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <vLD_E_H+0x8>)
 800054e:	79da      	ldrb	r2, [r3, #7]
 8000550:	711a      	strb	r2, [r3, #4]
 8000552:	4770      	bx	lr
 8000554:	24001664 	.word	0x24001664

08000558 <vLD_E_L>:
void vLD_E_L(){       reg.E = reg.L;}
 8000558:	4b01      	ldr	r3, [pc, #4]	; (8000560 <vLD_E_L+0x8>)
 800055a:	799a      	ldrb	r2, [r3, #6]
 800055c:	711a      	strb	r2, [r3, #4]
 800055e:	4770      	bx	lr
 8000560:	24001664 	.word	0x24001664

08000564 <vLD_E_A>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
void vLD_E_A(){       reg.E = reg.A;}
 8000564:	4b01      	ldr	r3, [pc, #4]	; (800056c <vLD_E_A+0x8>)
 8000566:	785a      	ldrb	r2, [r3, #1]
 8000568:	711a      	strb	r2, [r3, #4]
 800056a:	4770      	bx	lr
 800056c:	24001664 	.word	0x24001664

08000570 <vLD_H_B>:

/*********************0x6X*/
void vLD_H_B(){       reg.H = reg.B;}
 8000570:	4b01      	ldr	r3, [pc, #4]	; (8000578 <vLD_H_B+0x8>)
 8000572:	78da      	ldrb	r2, [r3, #3]
 8000574:	71da      	strb	r2, [r3, #7]
 8000576:	4770      	bx	lr
 8000578:	24001664 	.word	0x24001664

0800057c <vLD_H_C>:
void vLD_H_C(){       reg.H = reg.C;}
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <vLD_H_C+0x8>)
 800057e:	789a      	ldrb	r2, [r3, #2]
 8000580:	71da      	strb	r2, [r3, #7]
 8000582:	4770      	bx	lr
 8000584:	24001664 	.word	0x24001664

08000588 <vLD_H_D>:
void vLD_H_D(){       reg.H = reg.D;}
 8000588:	4b01      	ldr	r3, [pc, #4]	; (8000590 <vLD_H_D+0x8>)
 800058a:	795a      	ldrb	r2, [r3, #5]
 800058c:	71da      	strb	r2, [r3, #7]
 800058e:	4770      	bx	lr
 8000590:	24001664 	.word	0x24001664

08000594 <vLD_H_E>:
void vLD_H_E(){       reg.H = reg.E;}
 8000594:	4b01      	ldr	r3, [pc, #4]	; (800059c <vLD_H_E+0x8>)
 8000596:	791a      	ldrb	r2, [r3, #4]
 8000598:	71da      	strb	r2, [r3, #7]
 800059a:	4770      	bx	lr
 800059c:	24001664 	.word	0x24001664

080005a0 <vLD_H_L>:
void vLD_H_H(){       reg.H = reg.H;}
void vLD_H_L(){       reg.H = reg.L;}
 80005a0:	4b01      	ldr	r3, [pc, #4]	; (80005a8 <vLD_H_L+0x8>)
 80005a2:	799a      	ldrb	r2, [r3, #6]
 80005a4:	71da      	strb	r2, [r3, #7]
 80005a6:	4770      	bx	lr
 80005a8:	24001664 	.word	0x24001664

080005ac <vLD_H_A>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
void vLD_H_A(){       reg.H = reg.A;}
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <vLD_H_A+0x8>)
 80005ae:	785a      	ldrb	r2, [r3, #1]
 80005b0:	71da      	strb	r2, [r3, #7]
 80005b2:	4770      	bx	lr
 80005b4:	24001664 	.word	0x24001664

080005b8 <vLD_L_B>:
void vLD_L_B(){       reg.L = reg.B;}
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <vLD_L_B+0x8>)
 80005ba:	78da      	ldrb	r2, [r3, #3]
 80005bc:	719a      	strb	r2, [r3, #6]
 80005be:	4770      	bx	lr
 80005c0:	24001664 	.word	0x24001664

080005c4 <vLD_L_C>:
void vLD_L_C(){       reg.L = reg.C;}
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <vLD_L_C+0x8>)
 80005c6:	789a      	ldrb	r2, [r3, #2]
 80005c8:	719a      	strb	r2, [r3, #6]
 80005ca:	4770      	bx	lr
 80005cc:	24001664 	.word	0x24001664

080005d0 <vLD_L_D>:
void vLD_L_D(){       reg.L = reg.D;}
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <vLD_L_D+0x8>)
 80005d2:	795a      	ldrb	r2, [r3, #5]
 80005d4:	719a      	strb	r2, [r3, #6]
 80005d6:	4770      	bx	lr
 80005d8:	24001664 	.word	0x24001664

080005dc <vLD_L_E>:
void vLD_L_E(){       reg.L = reg.E;}
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <vLD_L_E+0x8>)
 80005de:	791a      	ldrb	r2, [r3, #4]
 80005e0:	719a      	strb	r2, [r3, #6]
 80005e2:	4770      	bx	lr
 80005e4:	24001664 	.word	0x24001664

080005e8 <vLD_L_H>:
void vLD_L_H(){       reg.L = reg.H;}
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <vLD_L_H+0x8>)
 80005ea:	79da      	ldrb	r2, [r3, #7]
 80005ec:	719a      	strb	r2, [r3, #6]
 80005ee:	4770      	bx	lr
 80005f0:	24001664 	.word	0x24001664

080005f4 <vLD_L_A>:
void vLD_L_L(){       reg.L = reg.L;}
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
void vLD_L_A(){       reg.L = reg.A;}
 80005f4:	4b01      	ldr	r3, [pc, #4]	; (80005fc <vLD_L_A+0x8>)
 80005f6:	785a      	ldrb	r2, [r3, #1]
 80005f8:	719a      	strb	r2, [r3, #6]
 80005fa:	4770      	bx	lr
 80005fc:	24001664 	.word	0x24001664

08000600 <vHALT>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
void vHALT(){         ucHALTED = 1;}
 8000600:	4b01      	ldr	r3, [pc, #4]	; (8000608 <vHALT+0x8>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	4770      	bx	lr
 8000608:	2400109e 	.word	0x2400109e

0800060c <vLD_A_B>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
void vLD_A_B(){       reg.A = reg.B;}
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <vLD_A_B+0x8>)
 800060e:	78da      	ldrb	r2, [r3, #3]
 8000610:	705a      	strb	r2, [r3, #1]
 8000612:	4770      	bx	lr
 8000614:	24001664 	.word	0x24001664

08000618 <vLD_A_C>:
void vLD_A_C(){       reg.A = reg.C;}
 8000618:	4b01      	ldr	r3, [pc, #4]	; (8000620 <vLD_A_C+0x8>)
 800061a:	789a      	ldrb	r2, [r3, #2]
 800061c:	705a      	strb	r2, [r3, #1]
 800061e:	4770      	bx	lr
 8000620:	24001664 	.word	0x24001664

08000624 <vLD_A_D>:
void vLD_A_D(){       reg.A = reg.D;}
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <vLD_A_D+0x8>)
 8000626:	795a      	ldrb	r2, [r3, #5]
 8000628:	705a      	strb	r2, [r3, #1]
 800062a:	4770      	bx	lr
 800062c:	24001664 	.word	0x24001664

08000630 <vLD_A_E>:
void vLD_A_E(){       reg.A = reg.E;}
 8000630:	4b01      	ldr	r3, [pc, #4]	; (8000638 <vLD_A_E+0x8>)
 8000632:	791a      	ldrb	r2, [r3, #4]
 8000634:	705a      	strb	r2, [r3, #1]
 8000636:	4770      	bx	lr
 8000638:	24001664 	.word	0x24001664

0800063c <vLD_A_H>:
void vLD_A_H(){       reg.A = reg.H;}
 800063c:	4b01      	ldr	r3, [pc, #4]	; (8000644 <vLD_A_H+0x8>)
 800063e:	79da      	ldrb	r2, [r3, #7]
 8000640:	705a      	strb	r2, [r3, #1]
 8000642:	4770      	bx	lr
 8000644:	24001664 	.word	0x24001664

08000648 <vLD_A_L>:
void vLD_A_L(){       reg.A = reg.L;}
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <vLD_A_L+0x8>)
 800064a:	799a      	ldrb	r2, [r3, #6]
 800064c:	705a      	strb	r2, [r3, #1]
 800064e:	4770      	bx	lr
 8000650:	24001664 	.word	0x24001664

08000654 <vAND_B>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}

/*********************0xAX*/
void vAND_B(){        reg.A &= reg.B; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <vAND_B+0x18>)
 8000656:	785a      	ldrb	r2, [r3, #1]
 8000658:	78d9      	ldrb	r1, [r3, #3]
 800065a:	400a      	ands	r2, r1
 800065c:	2a00      	cmp	r2, #0
 800065e:	705a      	strb	r2, [r3, #1]
 8000660:	bf0c      	ite	eq
 8000662:	22a0      	moveq	r2, #160	; 0xa0
 8000664:	2220      	movne	r2, #32
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	24001664 	.word	0x24001664

08000670 <vAND_C>:
void vAND_C(){        reg.A &= reg.C; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <vAND_C+0x18>)
 8000672:	785a      	ldrb	r2, [r3, #1]
 8000674:	7899      	ldrb	r1, [r3, #2]
 8000676:	400a      	ands	r2, r1
 8000678:	2a00      	cmp	r2, #0
 800067a:	705a      	strb	r2, [r3, #1]
 800067c:	bf0c      	ite	eq
 800067e:	22a0      	moveq	r2, #160	; 0xa0
 8000680:	2220      	movne	r2, #32
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	24001664 	.word	0x24001664

0800068c <vAND_D>:
void vAND_D(){        reg.A &= reg.D; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <vAND_D+0x18>)
 800068e:	785a      	ldrb	r2, [r3, #1]
 8000690:	7959      	ldrb	r1, [r3, #5]
 8000692:	400a      	ands	r2, r1
 8000694:	2a00      	cmp	r2, #0
 8000696:	705a      	strb	r2, [r3, #1]
 8000698:	bf0c      	ite	eq
 800069a:	22a0      	moveq	r2, #160	; 0xa0
 800069c:	2220      	movne	r2, #32
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	24001664 	.word	0x24001664

080006a8 <vAND_E>:
void vAND_E(){        reg.A &= reg.E; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <vAND_E+0x18>)
 80006aa:	785a      	ldrb	r2, [r3, #1]
 80006ac:	7919      	ldrb	r1, [r3, #4]
 80006ae:	400a      	ands	r2, r1
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	705a      	strb	r2, [r3, #1]
 80006b4:	bf0c      	ite	eq
 80006b6:	22a0      	moveq	r2, #160	; 0xa0
 80006b8:	2220      	movne	r2, #32
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	24001664 	.word	0x24001664

080006c4 <vAND_H>:
void vAND_H(){        reg.A &= reg.H; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <vAND_H+0x18>)
 80006c6:	785a      	ldrb	r2, [r3, #1]
 80006c8:	79d9      	ldrb	r1, [r3, #7]
 80006ca:	400a      	ands	r2, r1
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	705a      	strb	r2, [r3, #1]
 80006d0:	bf0c      	ite	eq
 80006d2:	22a0      	moveq	r2, #160	; 0xa0
 80006d4:	2220      	movne	r2, #32
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	24001664 	.word	0x24001664

080006e0 <vAND_L>:
void vAND_L(){        reg.A &= reg.L; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <vAND_L+0x18>)
 80006e2:	785a      	ldrb	r2, [r3, #1]
 80006e4:	7999      	ldrb	r1, [r3, #6]
 80006e6:	400a      	ands	r2, r1
 80006e8:	2a00      	cmp	r2, #0
 80006ea:	705a      	strb	r2, [r3, #1]
 80006ec:	bf0c      	ite	eq
 80006ee:	22a0      	moveq	r2, #160	; 0xa0
 80006f0:	2220      	movne	r2, #32
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	24001664 	.word	0x24001664

080006fc <vAND_A>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vAND_A(){        reg.A &= reg.A; reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <vAND_A+0x10>)
 80006fe:	785a      	ldrb	r2, [r3, #1]
 8000700:	2a00      	cmp	r2, #0
 8000702:	bf0c      	ite	eq
 8000704:	22a0      	moveq	r2, #160	; 0xa0
 8000706:	2220      	movne	r2, #32
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	4770      	bx	lr
 800070c:	24001664 	.word	0x24001664

08000710 <vXOR_B>:
void vXOR_B(){        reg.A ^= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <vXOR_B+0x18>)
 8000712:	785a      	ldrb	r2, [r3, #1]
 8000714:	78d9      	ldrb	r1, [r3, #3]
 8000716:	ea82 0001 	eor.w	r0, r2, r1
 800071a:	428a      	cmp	r2, r1
 800071c:	bf0c      	ite	eq
 800071e:	2280      	moveq	r2, #128	; 0x80
 8000720:	2200      	movne	r2, #0
 8000722:	7058      	strb	r0, [r3, #1]
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	4770      	bx	lr
 8000728:	24001664 	.word	0x24001664

0800072c <vXOR_C>:
void vXOR_C(){        reg.A ^= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <vXOR_C+0x18>)
 800072e:	785a      	ldrb	r2, [r3, #1]
 8000730:	7899      	ldrb	r1, [r3, #2]
 8000732:	ea82 0001 	eor.w	r0, r2, r1
 8000736:	428a      	cmp	r2, r1
 8000738:	bf0c      	ite	eq
 800073a:	2280      	moveq	r2, #128	; 0x80
 800073c:	2200      	movne	r2, #0
 800073e:	7058      	strb	r0, [r3, #1]
 8000740:	701a      	strb	r2, [r3, #0]
 8000742:	4770      	bx	lr
 8000744:	24001664 	.word	0x24001664

08000748 <vXOR_D>:
void vXOR_D(){        reg.A ^= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <vXOR_D+0x18>)
 800074a:	785a      	ldrb	r2, [r3, #1]
 800074c:	7959      	ldrb	r1, [r3, #5]
 800074e:	ea82 0001 	eor.w	r0, r2, r1
 8000752:	428a      	cmp	r2, r1
 8000754:	bf0c      	ite	eq
 8000756:	2280      	moveq	r2, #128	; 0x80
 8000758:	2200      	movne	r2, #0
 800075a:	7058      	strb	r0, [r3, #1]
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	4770      	bx	lr
 8000760:	24001664 	.word	0x24001664

08000764 <vXOR_E>:
void vXOR_E(){        reg.A ^= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <vXOR_E+0x18>)
 8000766:	785a      	ldrb	r2, [r3, #1]
 8000768:	7919      	ldrb	r1, [r3, #4]
 800076a:	ea82 0001 	eor.w	r0, r2, r1
 800076e:	428a      	cmp	r2, r1
 8000770:	bf0c      	ite	eq
 8000772:	2280      	moveq	r2, #128	; 0x80
 8000774:	2200      	movne	r2, #0
 8000776:	7058      	strb	r0, [r3, #1]
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	4770      	bx	lr
 800077c:	24001664 	.word	0x24001664

08000780 <vXOR_H>:
void vXOR_H(){        reg.A ^= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <vXOR_H+0x18>)
 8000782:	785a      	ldrb	r2, [r3, #1]
 8000784:	79d9      	ldrb	r1, [r3, #7]
 8000786:	ea82 0001 	eor.w	r0, r2, r1
 800078a:	428a      	cmp	r2, r1
 800078c:	bf0c      	ite	eq
 800078e:	2280      	moveq	r2, #128	; 0x80
 8000790:	2200      	movne	r2, #0
 8000792:	7058      	strb	r0, [r3, #1]
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	4770      	bx	lr
 8000798:	24001664 	.word	0x24001664

0800079c <vXOR_L>:
void vXOR_L(){        reg.A ^= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <vXOR_L+0x18>)
 800079e:	785a      	ldrb	r2, [r3, #1]
 80007a0:	7999      	ldrb	r1, [r3, #6]
 80007a2:	ea82 0001 	eor.w	r0, r2, r1
 80007a6:	428a      	cmp	r2, r1
 80007a8:	bf0c      	ite	eq
 80007aa:	2280      	moveq	r2, #128	; 0x80
 80007ac:	2200      	movne	r2, #0
 80007ae:	7058      	strb	r0, [r3, #1]
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	4770      	bx	lr
 80007b4:	24001664 	.word	0x24001664

080007b8 <vXOR_A>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vXOR_A(){        reg.A ^= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007b8:	4b01      	ldr	r3, [pc, #4]	; (80007c0 <vXOR_A+0x8>)
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	801a      	strh	r2, [r3, #0]
 80007be:	4770      	bx	lr
 80007c0:	24001664 	.word	0x24001664

080007c4 <vOR_B>:

/*********************0xBX*/
void vOR_B(){         reg.A |= reg.B; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <vOR_B+0x18>)
 80007c6:	785a      	ldrb	r2, [r3, #1]
 80007c8:	78d9      	ldrb	r1, [r3, #3]
 80007ca:	430a      	orrs	r2, r1
 80007cc:	2a00      	cmp	r2, #0
 80007ce:	705a      	strb	r2, [r3, #1]
 80007d0:	bf0c      	ite	eq
 80007d2:	2280      	moveq	r2, #128	; 0x80
 80007d4:	2200      	movne	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	24001664 	.word	0x24001664

080007e0 <vOR_C>:
void vOR_C(){         reg.A |= reg.C; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <vOR_C+0x18>)
 80007e2:	785a      	ldrb	r2, [r3, #1]
 80007e4:	7899      	ldrb	r1, [r3, #2]
 80007e6:	430a      	orrs	r2, r1
 80007e8:	2a00      	cmp	r2, #0
 80007ea:	705a      	strb	r2, [r3, #1]
 80007ec:	bf0c      	ite	eq
 80007ee:	2280      	moveq	r2, #128	; 0x80
 80007f0:	2200      	movne	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	24001664 	.word	0x24001664

080007fc <vOR_D>:
void vOR_D(){         reg.A |= reg.D; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <vOR_D+0x18>)
 80007fe:	785a      	ldrb	r2, [r3, #1]
 8000800:	7959      	ldrb	r1, [r3, #5]
 8000802:	430a      	orrs	r2, r1
 8000804:	2a00      	cmp	r2, #0
 8000806:	705a      	strb	r2, [r3, #1]
 8000808:	bf0c      	ite	eq
 800080a:	2280      	moveq	r2, #128	; 0x80
 800080c:	2200      	movne	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	24001664 	.word	0x24001664

08000818 <vOR_E>:
void vOR_E(){         reg.A |= reg.E; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <vOR_E+0x18>)
 800081a:	785a      	ldrb	r2, [r3, #1]
 800081c:	7919      	ldrb	r1, [r3, #4]
 800081e:	430a      	orrs	r2, r1
 8000820:	2a00      	cmp	r2, #0
 8000822:	705a      	strb	r2, [r3, #1]
 8000824:	bf0c      	ite	eq
 8000826:	2280      	moveq	r2, #128	; 0x80
 8000828:	2200      	movne	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	24001664 	.word	0x24001664

08000834 <vOR_H>:
void vOR_H(){         reg.A |= reg.H; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <vOR_H+0x18>)
 8000836:	785a      	ldrb	r2, [r3, #1]
 8000838:	79d9      	ldrb	r1, [r3, #7]
 800083a:	430a      	orrs	r2, r1
 800083c:	2a00      	cmp	r2, #0
 800083e:	705a      	strb	r2, [r3, #1]
 8000840:	bf0c      	ite	eq
 8000842:	2280      	moveq	r2, #128	; 0x80
 8000844:	2200      	movne	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	24001664 	.word	0x24001664

08000850 <vOR_L>:
void vOR_L(){         reg.A |= reg.L; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <vOR_L+0x18>)
 8000852:	785a      	ldrb	r2, [r3, #1]
 8000854:	7999      	ldrb	r1, [r3, #6]
 8000856:	430a      	orrs	r2, r1
 8000858:	2a00      	cmp	r2, #0
 800085a:	705a      	strb	r2, [r3, #1]
 800085c:	bf0c      	ite	eq
 800085e:	2280      	moveq	r2, #128	; 0x80
 8000860:	2200      	movne	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	24001664 	.word	0x24001664

0800086c <vOR_A>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vOR_A(){         reg.A |= reg.A; reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <vOR_A+0x10>)
 800086e:	785a      	ldrb	r2, [r3, #1]
 8000870:	2a00      	cmp	r2, #0
 8000872:	bf0c      	ite	eq
 8000874:	2280      	moveq	r2, #128	; 0x80
 8000876:	2200      	movne	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	4770      	bx	lr
 800087c:	24001664 	.word	0x24001664

08000880 <vJP_HL>:
// -----------
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vJP_HL(){        reg.PC = reg.HL;}
 8000880:	4b01      	ldr	r3, [pc, #4]	; (8000888 <vJP_HL+0x8>)
 8000882:	88da      	ldrh	r2, [r3, #6]
 8000884:	815a      	strh	r2, [r3, #10]
 8000886:	4770      	bx	lr
 8000888:	24001664 	.word	0x24001664

0800088c <vDI>:

/*********************0xFX*/
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
void vDI(){           ucInterruptMasterEnable = 0;}
 800088c:	4b01      	ldr	r3, [pc, #4]	; (8000894 <vDI+0x8>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	4770      	bx	lr
 8000894:	2400109f 	.word	0x2400109f

08000898 <vLDs_SP_HL>:
// -----------
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
void vLDs_SP_HL(){    reg.SP = reg.HL;}
 8000898:	4b01      	ldr	r3, [pc, #4]	; (80008a0 <vLDs_SP_HL+0x8>)
 800089a:	88da      	ldrh	r2, [r3, #6]
 800089c:	811a      	strh	r2, [r3, #8]
 800089e:	4770      	bx	lr
 80008a0:	24001664 	.word	0x24001664

080008a4 <vEI>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
void vEI(){           ucInterruptMasterEnable = 1;}
 80008a4:	4b01      	ldr	r3, [pc, #4]	; (80008ac <vEI+0x8>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
 80008aa:	4770      	bx	lr
 80008ac:	2400109f 	.word	0x2400109f

080008b0 <vLD_B_d8>:
void vLD_B_d8(){      reg.B = ucGBMemoryRead(reg.PC - 1);}
 80008b0:	b510      	push	{r4, lr}
 80008b2:	4c04      	ldr	r4, [pc, #16]	; (80008c4 <vLD_B_d8+0x14>)
 80008b4:	8960      	ldrh	r0, [r4, #10]
 80008b6:	3801      	subs	r0, #1
 80008b8:	b280      	uxth	r0, r0
 80008ba:	f002 fed3 	bl	8003664 <ucGBMemoryRead>
 80008be:	70e0      	strb	r0, [r4, #3]
 80008c0:	bd10      	pop	{r4, pc}
 80008c2:	bf00      	nop
 80008c4:	24001664 	.word	0x24001664

080008c8 <vLD_A_BC>:
void vLD_A_BC(){      reg.A = ucGBMemoryRead(reg.BC);}
 80008c8:	b510      	push	{r4, lr}
 80008ca:	4c03      	ldr	r4, [pc, #12]	; (80008d8 <vLD_A_BC+0x10>)
 80008cc:	8860      	ldrh	r0, [r4, #2]
 80008ce:	f002 fec9 	bl	8003664 <ucGBMemoryRead>
 80008d2:	7060      	strb	r0, [r4, #1]
 80008d4:	bd10      	pop	{r4, pc}
 80008d6:	bf00      	nop
 80008d8:	24001664 	.word	0x24001664

080008dc <vLD_C_d8>:
void vLD_C_d8(){      reg.C = ucGBMemoryRead(reg.PC - 1);}
 80008dc:	b510      	push	{r4, lr}
 80008de:	4c04      	ldr	r4, [pc, #16]	; (80008f0 <vLD_C_d8+0x14>)
 80008e0:	8960      	ldrh	r0, [r4, #10]
 80008e2:	3801      	subs	r0, #1
 80008e4:	b280      	uxth	r0, r0
 80008e6:	f002 febd 	bl	8003664 <ucGBMemoryRead>
 80008ea:	70a0      	strb	r0, [r4, #2]
 80008ec:	bd10      	pop	{r4, pc}
 80008ee:	bf00      	nop
 80008f0:	24001664 	.word	0x24001664

080008f4 <vLD_D_d8>:
void vLD_D_d8(){      reg.D = ucGBMemoryRead(reg.PC - 1);}
 80008f4:	b510      	push	{r4, lr}
 80008f6:	4c04      	ldr	r4, [pc, #16]	; (8000908 <vLD_D_d8+0x14>)
 80008f8:	8960      	ldrh	r0, [r4, #10]
 80008fa:	3801      	subs	r0, #1
 80008fc:	b280      	uxth	r0, r0
 80008fe:	f002 feb1 	bl	8003664 <ucGBMemoryRead>
 8000902:	7160      	strb	r0, [r4, #5]
 8000904:	bd10      	pop	{r4, pc}
 8000906:	bf00      	nop
 8000908:	24001664 	.word	0x24001664

0800090c <vJR_r8>:
void vJR_r8(){        reg.PC += (int8_t) ucGBMemoryRead(reg.PC - 1);}
 800090c:	b510      	push	{r4, lr}
 800090e:	4c05      	ldr	r4, [pc, #20]	; (8000924 <vJR_r8+0x18>)
 8000910:	8960      	ldrh	r0, [r4, #10]
 8000912:	3801      	subs	r0, #1
 8000914:	b280      	uxth	r0, r0
 8000916:	f002 fea5 	bl	8003664 <ucGBMemoryRead>
 800091a:	8963      	ldrh	r3, [r4, #10]
 800091c:	fa43 f080 	sxtab	r0, r3, r0
 8000920:	8160      	strh	r0, [r4, #10]
 8000922:	bd10      	pop	{r4, pc}
 8000924:	24001664 	.word	0x24001664

08000928 <vLD_A_DE>:
void vLD_A_DE(){      reg.A = ucGBMemoryRead(reg.DE);}
 8000928:	b510      	push	{r4, lr}
 800092a:	4c03      	ldr	r4, [pc, #12]	; (8000938 <vLD_A_DE+0x10>)
 800092c:	88a0      	ldrh	r0, [r4, #4]
 800092e:	f002 fe99 	bl	8003664 <ucGBMemoryRead>
 8000932:	7060      	strb	r0, [r4, #1]
 8000934:	bd10      	pop	{r4, pc}
 8000936:	bf00      	nop
 8000938:	24001664 	.word	0x24001664

0800093c <vLD_E_d8>:
void vLD_E_d8(){      reg.E = ucGBMemoryRead(reg.PC - 1);}
 800093c:	b510      	push	{r4, lr}
 800093e:	4c04      	ldr	r4, [pc, #16]	; (8000950 <vLD_E_d8+0x14>)
 8000940:	8960      	ldrh	r0, [r4, #10]
 8000942:	3801      	subs	r0, #1
 8000944:	b280      	uxth	r0, r0
 8000946:	f002 fe8d 	bl	8003664 <ucGBMemoryRead>
 800094a:	7120      	strb	r0, [r4, #4]
 800094c:	bd10      	pop	{r4, pc}
 800094e:	bf00      	nop
 8000950:	24001664 	.word	0x24001664

08000954 <vLD_H_d8>:
void vLD_H_d8(){      reg.H = ucGBMemoryRead(reg.PC - 1);}
 8000954:	b510      	push	{r4, lr}
 8000956:	4c04      	ldr	r4, [pc, #16]	; (8000968 <vLD_H_d8+0x14>)
 8000958:	8960      	ldrh	r0, [r4, #10]
 800095a:	3801      	subs	r0, #1
 800095c:	b280      	uxth	r0, r0
 800095e:	f002 fe81 	bl	8003664 <ucGBMemoryRead>
 8000962:	71e0      	strb	r0, [r4, #7]
 8000964:	bd10      	pop	{r4, pc}
 8000966:	bf00      	nop
 8000968:	24001664 	.word	0x24001664

0800096c <vLD_A_HLI>:
void vLD_A_HLI(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL++;}
 800096c:	b510      	push	{r4, lr}
 800096e:	4c04      	ldr	r4, [pc, #16]	; (8000980 <vLD_A_HLI+0x14>)
 8000970:	88e0      	ldrh	r0, [r4, #6]
 8000972:	f002 fe77 	bl	8003664 <ucGBMemoryRead>
 8000976:	88e3      	ldrh	r3, [r4, #6]
 8000978:	7060      	strb	r0, [r4, #1]
 800097a:	3301      	adds	r3, #1
 800097c:	80e3      	strh	r3, [r4, #6]
 800097e:	bd10      	pop	{r4, pc}
 8000980:	24001664 	.word	0x24001664

08000984 <vLD_L_d8>:
void vLD_L_d8(){      reg.L = ucGBMemoryRead(reg.PC - 1);}
 8000984:	b510      	push	{r4, lr}
 8000986:	4c04      	ldr	r4, [pc, #16]	; (8000998 <vLD_L_d8+0x14>)
 8000988:	8960      	ldrh	r0, [r4, #10]
 800098a:	3801      	subs	r0, #1
 800098c:	b280      	uxth	r0, r0
 800098e:	f002 fe69 	bl	8003664 <ucGBMemoryRead>
 8000992:	71a0      	strb	r0, [r4, #6]
 8000994:	bd10      	pop	{r4, pc}
 8000996:	bf00      	nop
 8000998:	24001664 	.word	0x24001664

0800099c <vLD_A_HLD>:
void vLD_A_HLD(){     reg.A = ucGBMemoryRead(reg.HL); reg.HL--;}
 800099c:	b510      	push	{r4, lr}
 800099e:	4c04      	ldr	r4, [pc, #16]	; (80009b0 <vLD_A_HLD+0x14>)
 80009a0:	88e0      	ldrh	r0, [r4, #6]
 80009a2:	f002 fe5f 	bl	8003664 <ucGBMemoryRead>
 80009a6:	88e3      	ldrh	r3, [r4, #6]
 80009a8:	7060      	strb	r0, [r4, #1]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	80e3      	strh	r3, [r4, #6]
 80009ae:	bd10      	pop	{r4, pc}
 80009b0:	24001664 	.word	0x24001664

080009b4 <vLD_A_d8>:
void vLD_A_d8(){      reg.A = ucGBMemoryRead(reg.PC - 1);}
 80009b4:	b510      	push	{r4, lr}
 80009b6:	4c04      	ldr	r4, [pc, #16]	; (80009c8 <vLD_A_d8+0x14>)
 80009b8:	8960      	ldrh	r0, [r4, #10]
 80009ba:	3801      	subs	r0, #1
 80009bc:	b280      	uxth	r0, r0
 80009be:	f002 fe51 	bl	8003664 <ucGBMemoryRead>
 80009c2:	7060      	strb	r0, [r4, #1]
 80009c4:	bd10      	pop	{r4, pc}
 80009c6:	bf00      	nop
 80009c8:	24001664 	.word	0x24001664

080009cc <vLD_B_HL>:
void vLD_B_HL(){      reg.B = ucGBMemoryRead(reg.HL);}
 80009cc:	b510      	push	{r4, lr}
 80009ce:	4c03      	ldr	r4, [pc, #12]	; (80009dc <vLD_B_HL+0x10>)
 80009d0:	88e0      	ldrh	r0, [r4, #6]
 80009d2:	f002 fe47 	bl	8003664 <ucGBMemoryRead>
 80009d6:	70e0      	strb	r0, [r4, #3]
 80009d8:	bd10      	pop	{r4, pc}
 80009da:	bf00      	nop
 80009dc:	24001664 	.word	0x24001664

080009e0 <vLD_C_HL>:
void vLD_C_HL(){      reg.C = ucGBMemoryRead(reg.HL);}
 80009e0:	b510      	push	{r4, lr}
 80009e2:	4c03      	ldr	r4, [pc, #12]	; (80009f0 <vLD_C_HL+0x10>)
 80009e4:	88e0      	ldrh	r0, [r4, #6]
 80009e6:	f002 fe3d 	bl	8003664 <ucGBMemoryRead>
 80009ea:	70a0      	strb	r0, [r4, #2]
 80009ec:	bd10      	pop	{r4, pc}
 80009ee:	bf00      	nop
 80009f0:	24001664 	.word	0x24001664

080009f4 <vLD_D_HL>:
void vLD_D_HL(){      reg.D = ucGBMemoryRead(reg.HL);}
 80009f4:	b510      	push	{r4, lr}
 80009f6:	4c03      	ldr	r4, [pc, #12]	; (8000a04 <vLD_D_HL+0x10>)
 80009f8:	88e0      	ldrh	r0, [r4, #6]
 80009fa:	f002 fe33 	bl	8003664 <ucGBMemoryRead>
 80009fe:	7160      	strb	r0, [r4, #5]
 8000a00:	bd10      	pop	{r4, pc}
 8000a02:	bf00      	nop
 8000a04:	24001664 	.word	0x24001664

08000a08 <vLD_E_HL>:
void vLD_E_HL(){      reg.E = ucGBMemoryRead(reg.HL);}
 8000a08:	b510      	push	{r4, lr}
 8000a0a:	4c03      	ldr	r4, [pc, #12]	; (8000a18 <vLD_E_HL+0x10>)
 8000a0c:	88e0      	ldrh	r0, [r4, #6]
 8000a0e:	f002 fe29 	bl	8003664 <ucGBMemoryRead>
 8000a12:	7120      	strb	r0, [r4, #4]
 8000a14:	bd10      	pop	{r4, pc}
 8000a16:	bf00      	nop
 8000a18:	24001664 	.word	0x24001664

08000a1c <vLD_H_HL>:
void vLD_H_HL(){      reg.H = ucGBMemoryRead(reg.HL);}
 8000a1c:	b510      	push	{r4, lr}
 8000a1e:	4c03      	ldr	r4, [pc, #12]	; (8000a2c <vLD_H_HL+0x10>)
 8000a20:	88e0      	ldrh	r0, [r4, #6]
 8000a22:	f002 fe1f 	bl	8003664 <ucGBMemoryRead>
 8000a26:	71e0      	strb	r0, [r4, #7]
 8000a28:	bd10      	pop	{r4, pc}
 8000a2a:	bf00      	nop
 8000a2c:	24001664 	.word	0x24001664

08000a30 <vLD_L_HL>:
void vLD_L_HL(){      reg.L = ucGBMemoryRead(reg.HL);}
 8000a30:	b510      	push	{r4, lr}
 8000a32:	4c03      	ldr	r4, [pc, #12]	; (8000a40 <vLD_L_HL+0x10>)
 8000a34:	88e0      	ldrh	r0, [r4, #6]
 8000a36:	f002 fe15 	bl	8003664 <ucGBMemoryRead>
 8000a3a:	71a0      	strb	r0, [r4, #6]
 8000a3c:	bd10      	pop	{r4, pc}
 8000a3e:	bf00      	nop
 8000a40:	24001664 	.word	0x24001664

08000a44 <vLD_A_HL>:
void vLD_A_HL(){      reg.A = ucGBMemoryRead(reg.HL);}
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4c03      	ldr	r4, [pc, #12]	; (8000a54 <vLD_A_HL+0x10>)
 8000a48:	88e0      	ldrh	r0, [r4, #6]
 8000a4a:	f002 fe0b 	bl	8003664 <ucGBMemoryRead>
 8000a4e:	7060      	strb	r0, [r4, #1]
 8000a50:	bd10      	pop	{r4, pc}
 8000a52:	bf00      	nop
 8000a54:	24001664 	.word	0x24001664

08000a58 <vAND_HL>:
void vAND_HL(){       reg.A &= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000a58:	b510      	push	{r4, lr}
 8000a5a:	4c06      	ldr	r4, [pc, #24]	; (8000a74 <vAND_HL+0x1c>)
 8000a5c:	88e0      	ldrh	r0, [r4, #6]
 8000a5e:	f002 fe01 	bl	8003664 <ucGBMemoryRead>
 8000a62:	7863      	ldrb	r3, [r4, #1]
 8000a64:	4018      	ands	r0, r3
 8000a66:	2800      	cmp	r0, #0
 8000a68:	7060      	strb	r0, [r4, #1]
 8000a6a:	bf0c      	ite	eq
 8000a6c:	23a0      	moveq	r3, #160	; 0xa0
 8000a6e:	2320      	movne	r3, #32
 8000a70:	7023      	strb	r3, [r4, #0]
 8000a72:	bd10      	pop	{r4, pc}
 8000a74:	24001664 	.word	0x24001664

08000a78 <vXOR_HL>:
void vXOR_HL(){       reg.A ^= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000a78:	b510      	push	{r4, lr}
 8000a7a:	4c07      	ldr	r4, [pc, #28]	; (8000a98 <vXOR_HL+0x20>)
 8000a7c:	88e0      	ldrh	r0, [r4, #6]
 8000a7e:	f002 fdf1 	bl	8003664 <ucGBMemoryRead>
 8000a82:	7863      	ldrb	r3, [r4, #1]
 8000a84:	ea83 0200 	eor.w	r2, r3, r0
 8000a88:	4283      	cmp	r3, r0
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2080      	moveq	r0, #128	; 0x80
 8000a8e:	2000      	movne	r0, #0
 8000a90:	7062      	strb	r2, [r4, #1]
 8000a92:	7020      	strb	r0, [r4, #0]
 8000a94:	bd10      	pop	{r4, pc}
 8000a96:	bf00      	nop
 8000a98:	24001664 	.word	0x24001664

08000a9c <vOR_HL>:
void vOR_HL(){        reg.A |= ucGBMemoryRead(reg.HL); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000a9c:	b510      	push	{r4, lr}
 8000a9e:	4c07      	ldr	r4, [pc, #28]	; (8000abc <vOR_HL+0x20>)
 8000aa0:	88e0      	ldrh	r0, [r4, #6]
 8000aa2:	f002 fddf 	bl	8003664 <ucGBMemoryRead>
 8000aa6:	7863      	ldrb	r3, [r4, #1]
 8000aa8:	4318      	orrs	r0, r3
 8000aaa:	b2c0      	uxtb	r0, r0
 8000aac:	2800      	cmp	r0, #0
 8000aae:	7060      	strb	r0, [r4, #1]
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2380      	moveq	r3, #128	; 0x80
 8000ab4:	2300      	movne	r3, #0
 8000ab6:	7023      	strb	r3, [r4, #0]
 8000ab8:	bd10      	pop	{r4, pc}
 8000aba:	bf00      	nop
 8000abc:	24001664 	.word	0x24001664

08000ac0 <vPREFIX>:
void vPREFIX(){       ((void (*)(void))prefix_instructions[ucGBMemoryRead(reg.PC - 1)].instr)();}
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <vPREFIX+0x1c>)
 8000ac2:	8958      	ldrh	r0, [r3, #10]
 8000ac4:	3801      	subs	r0, #1
 8000ac6:	b510      	push	{r4, lr}
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	f002 fdcb 	bl	8003664 <ucGBMemoryRead>
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <vPREFIX+0x20>)
 8000ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ad4:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000ad8:	4718      	bx	r3
 8000ada:	bf00      	nop
 8000adc:	24001664 	.word	0x24001664
 8000ae0:	24000808 	.word	0x24000808

08000ae4 <vAND_d8>:
void vAND_d8(){       reg.A &= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0xA0 : 0x20;}
 8000ae4:	b510      	push	{r4, lr}
 8000ae6:	4c07      	ldr	r4, [pc, #28]	; (8000b04 <vAND_d8+0x20>)
 8000ae8:	8960      	ldrh	r0, [r4, #10]
 8000aea:	3801      	subs	r0, #1
 8000aec:	b280      	uxth	r0, r0
 8000aee:	f002 fdb9 	bl	8003664 <ucGBMemoryRead>
 8000af2:	7863      	ldrb	r3, [r4, #1]
 8000af4:	4018      	ands	r0, r3
 8000af6:	2800      	cmp	r0, #0
 8000af8:	7060      	strb	r0, [r4, #1]
 8000afa:	bf0c      	ite	eq
 8000afc:	23a0      	moveq	r3, #160	; 0xa0
 8000afe:	2320      	movne	r3, #32
 8000b00:	7023      	strb	r3, [r4, #0]
 8000b02:	bd10      	pop	{r4, pc}
 8000b04:	24001664 	.word	0x24001664

08000b08 <vXOR_d8>:
void vXOR_d8(){       reg.A ^= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	4c08      	ldr	r4, [pc, #32]	; (8000b2c <vXOR_d8+0x24>)
 8000b0c:	8960      	ldrh	r0, [r4, #10]
 8000b0e:	3801      	subs	r0, #1
 8000b10:	b280      	uxth	r0, r0
 8000b12:	f002 fda7 	bl	8003664 <ucGBMemoryRead>
 8000b16:	7863      	ldrb	r3, [r4, #1]
 8000b18:	ea83 0200 	eor.w	r2, r3, r0
 8000b1c:	4283      	cmp	r3, r0
 8000b1e:	bf0c      	ite	eq
 8000b20:	2080      	moveq	r0, #128	; 0x80
 8000b22:	2000      	movne	r0, #0
 8000b24:	7062      	strb	r2, [r4, #1]
 8000b26:	7020      	strb	r0, [r4, #0]
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	bf00      	nop
 8000b2c:	24001664 	.word	0x24001664

08000b30 <vLDH_A_a8>:
void vLDH_A_a8(){     reg.A = ucGBMemoryRead(0xFF00 + ucGBMemoryRead(reg.PC - 1));}
 8000b30:	b510      	push	{r4, lr}
 8000b32:	4c06      	ldr	r4, [pc, #24]	; (8000b4c <vLDH_A_a8+0x1c>)
 8000b34:	8960      	ldrh	r0, [r4, #10]
 8000b36:	3801      	subs	r0, #1
 8000b38:	b280      	uxth	r0, r0
 8000b3a:	f002 fd93 	bl	8003664 <ucGBMemoryRead>
 8000b3e:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000b42:	b280      	uxth	r0, r0
 8000b44:	f002 fd8e 	bl	8003664 <ucGBMemoryRead>
 8000b48:	7060      	strb	r0, [r4, #1]
 8000b4a:	bd10      	pop	{r4, pc}
 8000b4c:	24001664 	.word	0x24001664

08000b50 <vLD_A_fC>:
void vLD_A_fC(){      reg.A = ucGBMemoryRead(0xFF00 + reg.C);}
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4c04      	ldr	r4, [pc, #16]	; (8000b64 <vLD_A_fC+0x14>)
 8000b54:	78a0      	ldrb	r0, [r4, #2]
 8000b56:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000b5a:	b280      	uxth	r0, r0
 8000b5c:	f002 fd82 	bl	8003664 <ucGBMemoryRead>
 8000b60:	7060      	strb	r0, [r4, #1]
 8000b62:	bd10      	pop	{r4, pc}
 8000b64:	24001664 	.word	0x24001664

08000b68 <vOR_d8>:
void vOR_d8(){        reg.A |= ucGBMemoryRead(reg.PC - 1); reg.F = (reg.A == 0) ? 0x80 : 0x00;}
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	4c08      	ldr	r4, [pc, #32]	; (8000b8c <vOR_d8+0x24>)
 8000b6c:	8960      	ldrh	r0, [r4, #10]
 8000b6e:	3801      	subs	r0, #1
 8000b70:	b280      	uxth	r0, r0
 8000b72:	f002 fd77 	bl	8003664 <ucGBMemoryRead>
 8000b76:	7863      	ldrb	r3, [r4, #1]
 8000b78:	4318      	orrs	r0, r3
 8000b7a:	b2c0      	uxtb	r0, r0
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	7060      	strb	r0, [r4, #1]
 8000b80:	bf0c      	ite	eq
 8000b82:	2380      	moveq	r3, #128	; 0x80
 8000b84:	2300      	movne	r3, #0
 8000b86:	7023      	strb	r3, [r4, #0]
 8000b88:	bd10      	pop	{r4, pc}
 8000b8a:	bf00      	nop
 8000b8c:	24001664 	.word	0x24001664

08000b90 <vLDs_BC_d16>:
void vLDs_BC_d16(){   reg.BC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000b90:	b538      	push	{r3, r4, r5, lr}
 8000b92:	4c09      	ldr	r4, [pc, #36]	; (8000bb8 <vLDs_BC_d16+0x28>)
 8000b94:	8960      	ldrh	r0, [r4, #10]
 8000b96:	3802      	subs	r0, #2
 8000b98:	b280      	uxth	r0, r0
 8000b9a:	f002 fd63 	bl	8003664 <ucGBMemoryRead>
 8000b9e:	8963      	ldrh	r3, [r4, #10]
 8000ba0:	4605      	mov	r5, r0
 8000ba2:	1e58      	subs	r0, r3, #1
 8000ba4:	b280      	uxth	r0, r0
 8000ba6:	f002 fd5d 	bl	8003664 <ucGBMemoryRead>
 8000baa:	4601      	mov	r1, r0
 8000bac:	4628      	mov	r0, r5
 8000bae:	f002 f819 	bl	8002be4 <concat_16bit_bigEndian>
 8000bb2:	8060      	strh	r0, [r4, #2]
 8000bb4:	bd38      	pop	{r3, r4, r5, pc}
 8000bb6:	bf00      	nop
 8000bb8:	24001664 	.word	0x24001664

08000bbc <vLDs_DE_d16>:
void vLDs_DE_d16(){   reg.DE = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	4c09      	ldr	r4, [pc, #36]	; (8000be4 <vLDs_DE_d16+0x28>)
 8000bc0:	8960      	ldrh	r0, [r4, #10]
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	b280      	uxth	r0, r0
 8000bc6:	f002 fd4d 	bl	8003664 <ucGBMemoryRead>
 8000bca:	8963      	ldrh	r3, [r4, #10]
 8000bcc:	4605      	mov	r5, r0
 8000bce:	1e58      	subs	r0, r3, #1
 8000bd0:	b280      	uxth	r0, r0
 8000bd2:	f002 fd47 	bl	8003664 <ucGBMemoryRead>
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	4628      	mov	r0, r5
 8000bda:	f002 f803 	bl	8002be4 <concat_16bit_bigEndian>
 8000bde:	80a0      	strh	r0, [r4, #4]
 8000be0:	bd38      	pop	{r3, r4, r5, pc}
 8000be2:	bf00      	nop
 8000be4:	24001664 	.word	0x24001664

08000be8 <vLDs_HL_d16>:
void vLDs_HL_d16(){   reg.HL = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000be8:	b538      	push	{r3, r4, r5, lr}
 8000bea:	4c09      	ldr	r4, [pc, #36]	; (8000c10 <vLDs_HL_d16+0x28>)
 8000bec:	8960      	ldrh	r0, [r4, #10]
 8000bee:	3802      	subs	r0, #2
 8000bf0:	b280      	uxth	r0, r0
 8000bf2:	f002 fd37 	bl	8003664 <ucGBMemoryRead>
 8000bf6:	8963      	ldrh	r3, [r4, #10]
 8000bf8:	4605      	mov	r5, r0
 8000bfa:	1e58      	subs	r0, r3, #1
 8000bfc:	b280      	uxth	r0, r0
 8000bfe:	f002 fd31 	bl	8003664 <ucGBMemoryRead>
 8000c02:	4601      	mov	r1, r0
 8000c04:	4628      	mov	r0, r5
 8000c06:	f001 ffed 	bl	8002be4 <concat_16bit_bigEndian>
 8000c0a:	80e0      	strh	r0, [r4, #6]
 8000c0c:	bd38      	pop	{r3, r4, r5, pc}
 8000c0e:	bf00      	nop
 8000c10:	24001664 	.word	0x24001664

08000c14 <vLDs_SP_d16>:
void vLDs_SP_d16(){   reg.SP = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c14:	b538      	push	{r3, r4, r5, lr}
 8000c16:	4c09      	ldr	r4, [pc, #36]	; (8000c3c <vLDs_SP_d16+0x28>)
 8000c18:	8960      	ldrh	r0, [r4, #10]
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	b280      	uxth	r0, r0
 8000c1e:	f002 fd21 	bl	8003664 <ucGBMemoryRead>
 8000c22:	8963      	ldrh	r3, [r4, #10]
 8000c24:	4605      	mov	r5, r0
 8000c26:	1e58      	subs	r0, r3, #1
 8000c28:	b280      	uxth	r0, r0
 8000c2a:	f002 fd1b 	bl	8003664 <ucGBMemoryRead>
 8000c2e:	4601      	mov	r1, r0
 8000c30:	4628      	mov	r0, r5
 8000c32:	f001 ffd7 	bl	8002be4 <concat_16bit_bigEndian>
 8000c36:	8120      	strh	r0, [r4, #8]
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop
 8000c3c:	24001664 	.word	0x24001664

08000c40 <vJP_a16>:
void vJP_a16(){       reg.PC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4c09      	ldr	r4, [pc, #36]	; (8000c68 <vJP_a16+0x28>)
 8000c44:	8960      	ldrh	r0, [r4, #10]
 8000c46:	3802      	subs	r0, #2
 8000c48:	b280      	uxth	r0, r0
 8000c4a:	f002 fd0b 	bl	8003664 <ucGBMemoryRead>
 8000c4e:	8963      	ldrh	r3, [r4, #10]
 8000c50:	4605      	mov	r5, r0
 8000c52:	1e58      	subs	r0, r3, #1
 8000c54:	b280      	uxth	r0, r0
 8000c56:	f002 fd05 	bl	8003664 <ucGBMemoryRead>
 8000c5a:	4601      	mov	r1, r0
 8000c5c:	4628      	mov	r0, r5
 8000c5e:	f001 ffc1 	bl	8002be4 <concat_16bit_bigEndian>
 8000c62:	8160      	strh	r0, [r4, #10]
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop
 8000c68:	24001664 	.word	0x24001664

08000c6c <vLD_A_a16>:
void vLD_A_a16(){     reg.A = ucGBMemoryRead(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	4c0a      	ldr	r4, [pc, #40]	; (8000c98 <vLD_A_a16+0x2c>)
 8000c70:	8960      	ldrh	r0, [r4, #10]
 8000c72:	3802      	subs	r0, #2
 8000c74:	b280      	uxth	r0, r0
 8000c76:	f002 fcf5 	bl	8003664 <ucGBMemoryRead>
 8000c7a:	8963      	ldrh	r3, [r4, #10]
 8000c7c:	4605      	mov	r5, r0
 8000c7e:	1e58      	subs	r0, r3, #1
 8000c80:	b280      	uxth	r0, r0
 8000c82:	f002 fcef 	bl	8003664 <ucGBMemoryRead>
 8000c86:	4601      	mov	r1, r0
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f001 ffab 	bl	8002be4 <concat_16bit_bigEndian>
 8000c8e:	f002 fce9 	bl	8003664 <ucGBMemoryRead>
 8000c92:	7060      	strb	r0, [r4, #1]
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop
 8000c98:	24001664 	.word	0x24001664

08000c9c <vLD_BC_A>:
void vLD_BC_A(){      vGBMemoryWrite(reg.BC, reg.A);}
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <vLD_BC_A+0xc>)
 8000c9e:	7859      	ldrb	r1, [r3, #1]
 8000ca0:	8858      	ldrh	r0, [r3, #2]
 8000ca2:	f002 bcf3 	b.w	800368c <vGBMemoryWrite>
 8000ca6:	bf00      	nop
 8000ca8:	24001664 	.word	0x24001664

08000cac <vLD_DE_A>:
void vLD_DE_A(){      vGBMemoryWrite(reg.DE, reg.A);}
 8000cac:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <vLD_DE_A+0xc>)
 8000cae:	7859      	ldrb	r1, [r3, #1]
 8000cb0:	8898      	ldrh	r0, [r3, #4]
 8000cb2:	f002 bceb 	b.w	800368c <vGBMemoryWrite>
 8000cb6:	bf00      	nop
 8000cb8:	24001664 	.word	0x24001664

08000cbc <vLD_HLI_A>:
void vLD_HLI_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL++;}
 8000cbc:	b510      	push	{r4, lr}
 8000cbe:	4c04      	ldr	r4, [pc, #16]	; (8000cd0 <vLD_HLI_A+0x14>)
 8000cc0:	7861      	ldrb	r1, [r4, #1]
 8000cc2:	88e0      	ldrh	r0, [r4, #6]
 8000cc4:	f002 fce2 	bl	800368c <vGBMemoryWrite>
 8000cc8:	88e3      	ldrh	r3, [r4, #6]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	80e3      	strh	r3, [r4, #6]
 8000cce:	bd10      	pop	{r4, pc}
 8000cd0:	24001664 	.word	0x24001664

08000cd4 <vLD_HLD_A>:
void vLD_HLD_A(){     vGBMemoryWrite(reg.HL, reg.A); reg.HL--;}
 8000cd4:	b510      	push	{r4, lr}
 8000cd6:	4c04      	ldr	r4, [pc, #16]	; (8000ce8 <vLD_HLD_A+0x14>)
 8000cd8:	7861      	ldrb	r1, [r4, #1]
 8000cda:	88e0      	ldrh	r0, [r4, #6]
 8000cdc:	f002 fcd6 	bl	800368c <vGBMemoryWrite>
 8000ce0:	88e3      	ldrh	r3, [r4, #6]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	80e3      	strh	r3, [r4, #6]
 8000ce6:	bd10      	pop	{r4, pc}
 8000ce8:	24001664 	.word	0x24001664

08000cec <vLD_HL_d8>:
void vLD_HL_d8(){     vGBMemoryWrite(reg.HL, ucGBMemoryRead(reg.PC - 1));}
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <vLD_HL_d8+0x1c>)
 8000cee:	8958      	ldrh	r0, [r3, #10]
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	b510      	push	{r4, lr}
 8000cf4:	88dc      	ldrh	r4, [r3, #6]
 8000cf6:	b280      	uxth	r0, r0
 8000cf8:	f002 fcb4 	bl	8003664 <ucGBMemoryRead>
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	4620      	mov	r0, r4
 8000d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d04:	f002 bcc2 	b.w	800368c <vGBMemoryWrite>
 8000d08:	24001664 	.word	0x24001664

08000d0c <vLD_HL_B>:
void vLD_HL_B(){      vGBMemoryWrite(reg.HL, reg.B);}
 8000d0c:	4b02      	ldr	r3, [pc, #8]	; (8000d18 <vLD_HL_B+0xc>)
 8000d0e:	78d9      	ldrb	r1, [r3, #3]
 8000d10:	88d8      	ldrh	r0, [r3, #6]
 8000d12:	f002 bcbb 	b.w	800368c <vGBMemoryWrite>
 8000d16:	bf00      	nop
 8000d18:	24001664 	.word	0x24001664

08000d1c <vLD_HL_C>:
void vLD_HL_C(){      vGBMemoryWrite(reg.HL, reg.C);}
 8000d1c:	4b02      	ldr	r3, [pc, #8]	; (8000d28 <vLD_HL_C+0xc>)
 8000d1e:	7899      	ldrb	r1, [r3, #2]
 8000d20:	88d8      	ldrh	r0, [r3, #6]
 8000d22:	f002 bcb3 	b.w	800368c <vGBMemoryWrite>
 8000d26:	bf00      	nop
 8000d28:	24001664 	.word	0x24001664

08000d2c <vLD_HL_D>:
void vLD_HL_D(){      vGBMemoryWrite(reg.HL, reg.D);}
 8000d2c:	4b02      	ldr	r3, [pc, #8]	; (8000d38 <vLD_HL_D+0xc>)
 8000d2e:	7959      	ldrb	r1, [r3, #5]
 8000d30:	88d8      	ldrh	r0, [r3, #6]
 8000d32:	f002 bcab 	b.w	800368c <vGBMemoryWrite>
 8000d36:	bf00      	nop
 8000d38:	24001664 	.word	0x24001664

08000d3c <vLD_HL_E>:
void vLD_HL_E(){      vGBMemoryWrite(reg.HL, reg.E);}
 8000d3c:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <vLD_HL_E+0xc>)
 8000d3e:	7919      	ldrb	r1, [r3, #4]
 8000d40:	88d8      	ldrh	r0, [r3, #6]
 8000d42:	f002 bca3 	b.w	800368c <vGBMemoryWrite>
 8000d46:	bf00      	nop
 8000d48:	24001664 	.word	0x24001664

08000d4c <vLD_HL_H>:
void vLD_HL_H(){      vGBMemoryWrite(reg.HL, reg.H);}
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <vLD_HL_H+0xc>)
 8000d4e:	79d9      	ldrb	r1, [r3, #7]
 8000d50:	88d8      	ldrh	r0, [r3, #6]
 8000d52:	f002 bc9b 	b.w	800368c <vGBMemoryWrite>
 8000d56:	bf00      	nop
 8000d58:	24001664 	.word	0x24001664

08000d5c <vLD_HL_L>:
void vLD_HL_L(){      vGBMemoryWrite(reg.HL, reg.L);}
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <vLD_HL_L+0xc>)
 8000d5e:	7999      	ldrb	r1, [r3, #6]
 8000d60:	88d8      	ldrh	r0, [r3, #6]
 8000d62:	f002 bc93 	b.w	800368c <vGBMemoryWrite>
 8000d66:	bf00      	nop
 8000d68:	24001664 	.word	0x24001664

08000d6c <vLD_HL_A>:
void vLD_HL_A(){      vGBMemoryWrite(reg.HL, reg.A);}
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <vLD_HL_A+0xc>)
 8000d6e:	7859      	ldrb	r1, [r3, #1]
 8000d70:	88d8      	ldrh	r0, [r3, #6]
 8000d72:	f002 bc8b 	b.w	800368c <vGBMemoryWrite>
 8000d76:	bf00      	nop
 8000d78:	24001664 	.word	0x24001664

08000d7c <vLDH_a8_A>:
void vLDH_a8_A(){     vGBMemoryWrite(0xFF00 + ucGBMemoryRead(reg.PC - 1), reg.A);}
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	4c07      	ldr	r4, [pc, #28]	; (8000d9c <vLDH_a8_A+0x20>)
 8000d80:	8960      	ldrh	r0, [r4, #10]
 8000d82:	3801      	subs	r0, #1
 8000d84:	b280      	uxth	r0, r0
 8000d86:	f002 fc6d 	bl	8003664 <ucGBMemoryRead>
 8000d8a:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000d8e:	7861      	ldrb	r1, [r4, #1]
 8000d90:	b280      	uxth	r0, r0
 8000d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d96:	f002 bc79 	b.w	800368c <vGBMemoryWrite>
 8000d9a:	bf00      	nop
 8000d9c:	24001664 	.word	0x24001664

08000da0 <vLD_fC_A>:
void vLD_fC_A(){      vGBMemoryWrite(0xFF00 + reg.C, reg.A);}
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <vLD_fC_A+0x10>)
 8000da2:	7898      	ldrb	r0, [r3, #2]
 8000da4:	7859      	ldrb	r1, [r3, #1]
 8000da6:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8000daa:	b280      	uxth	r0, r0
 8000dac:	f002 bc6e 	b.w	800368c <vGBMemoryWrite>
 8000db0:	24001664 	.word	0x24001664

08000db4 <vLD_a16_A>:
void vLD_a16_A(){     vGBMemoryWrite(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)), reg.A);}
 8000db4:	b538      	push	{r3, r4, r5, lr}
 8000db6:	4c0a      	ldr	r4, [pc, #40]	; (8000de0 <vLD_a16_A+0x2c>)
 8000db8:	8960      	ldrh	r0, [r4, #10]
 8000dba:	3802      	subs	r0, #2
 8000dbc:	b280      	uxth	r0, r0
 8000dbe:	f002 fc51 	bl	8003664 <ucGBMemoryRead>
 8000dc2:	8963      	ldrh	r3, [r4, #10]
 8000dc4:	4605      	mov	r5, r0
 8000dc6:	1e58      	subs	r0, r3, #1
 8000dc8:	b280      	uxth	r0, r0
 8000dca:	f002 fc4b 	bl	8003664 <ucGBMemoryRead>
 8000dce:	4601      	mov	r1, r0
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	f001 ff07 	bl	8002be4 <concat_16bit_bigEndian>
 8000dd6:	7861      	ldrb	r1, [r4, #1]
 8000dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ddc:	f002 bc56 	b.w	800368c <vGBMemoryWrite>
 8000de0:	24001664 	.word	0x24001664

08000de4 <vINC_B>:
void vINC_B(){        v8bitRegisterINC(&reg.B, &reg.F);}
 8000de4:	4901      	ldr	r1, [pc, #4]	; (8000dec <vINC_B+0x8>)
 8000de6:	1cc8      	adds	r0, r1, #3
 8000de8:	f001 bf14 	b.w	8002c14 <v8bitRegisterINC>
 8000dec:	24001664 	.word	0x24001664

08000df0 <vINC_C>:
void vINC_C(){        v8bitRegisterINC(&reg.C, &reg.F);}
 8000df0:	4901      	ldr	r1, [pc, #4]	; (8000df8 <vINC_C+0x8>)
 8000df2:	1c88      	adds	r0, r1, #2
 8000df4:	f001 bf0e 	b.w	8002c14 <v8bitRegisterINC>
 8000df8:	24001664 	.word	0x24001664

08000dfc <vINC_D>:
void vINC_D(){        v8bitRegisterINC(&reg.D, &reg.F);}
 8000dfc:	4901      	ldr	r1, [pc, #4]	; (8000e04 <vINC_D+0x8>)
 8000dfe:	1d48      	adds	r0, r1, #5
 8000e00:	f001 bf08 	b.w	8002c14 <v8bitRegisterINC>
 8000e04:	24001664 	.word	0x24001664

08000e08 <vINC_E>:
void vINC_E(){        v8bitRegisterINC(&reg.E, &reg.F);}
 8000e08:	4901      	ldr	r1, [pc, #4]	; (8000e10 <vINC_E+0x8>)
 8000e0a:	1d08      	adds	r0, r1, #4
 8000e0c:	f001 bf02 	b.w	8002c14 <v8bitRegisterINC>
 8000e10:	24001664 	.word	0x24001664

08000e14 <vINC_H>:
void vINC_H(){        v8bitRegisterINC(&reg.H, &reg.F);}
 8000e14:	4901      	ldr	r1, [pc, #4]	; (8000e1c <vINC_H+0x8>)
 8000e16:	1dc8      	adds	r0, r1, #7
 8000e18:	f001 befc 	b.w	8002c14 <v8bitRegisterINC>
 8000e1c:	24001664 	.word	0x24001664

08000e20 <vINC_L>:
void vINC_L(){        v8bitRegisterINC(&reg.L, &reg.F);}
 8000e20:	4901      	ldr	r1, [pc, #4]	; (8000e28 <vINC_L+0x8>)
 8000e22:	1d88      	adds	r0, r1, #6
 8000e24:	f001 bef6 	b.w	8002c14 <v8bitRegisterINC>
 8000e28:	24001664 	.word	0x24001664

08000e2c <vINC_A>:
void vINC_A(){        v8bitRegisterINC(&reg.A, &reg.F);}
 8000e2c:	4901      	ldr	r1, [pc, #4]	; (8000e34 <vINC_A+0x8>)
 8000e2e:	1c48      	adds	r0, r1, #1
 8000e30:	f001 bef0 	b.w	8002c14 <v8bitRegisterINC>
 8000e34:	24001664 	.word	0x24001664

08000e38 <vDEC_B>:
void vDEC_B(){        v8bitRegisterDEC(&reg.B, &reg.F);}
 8000e38:	4901      	ldr	r1, [pc, #4]	; (8000e40 <vDEC_B+0x8>)
 8000e3a:	1cc8      	adds	r0, r1, #3
 8000e3c:	f001 bf08 	b.w	8002c50 <v8bitRegisterDEC>
 8000e40:	24001664 	.word	0x24001664

08000e44 <vDEC_C>:
void vDEC_C(){        v8bitRegisterDEC(&reg.C, &reg.F);}
 8000e44:	4901      	ldr	r1, [pc, #4]	; (8000e4c <vDEC_C+0x8>)
 8000e46:	1c88      	adds	r0, r1, #2
 8000e48:	f001 bf02 	b.w	8002c50 <v8bitRegisterDEC>
 8000e4c:	24001664 	.word	0x24001664

08000e50 <vDEC_D>:
void vDEC_D(){        v8bitRegisterDEC(&reg.D, &reg.F);}
 8000e50:	4901      	ldr	r1, [pc, #4]	; (8000e58 <vDEC_D+0x8>)
 8000e52:	1d48      	adds	r0, r1, #5
 8000e54:	f001 befc 	b.w	8002c50 <v8bitRegisterDEC>
 8000e58:	24001664 	.word	0x24001664

08000e5c <vDEC_E>:
void vDEC_E(){        v8bitRegisterDEC(&reg.E, &reg.F);}
 8000e5c:	4901      	ldr	r1, [pc, #4]	; (8000e64 <vDEC_E+0x8>)
 8000e5e:	1d08      	adds	r0, r1, #4
 8000e60:	f001 bef6 	b.w	8002c50 <v8bitRegisterDEC>
 8000e64:	24001664 	.word	0x24001664

08000e68 <vDEC_H>:
void vDEC_H(){        v8bitRegisterDEC(&reg.H, &reg.F);}
 8000e68:	4901      	ldr	r1, [pc, #4]	; (8000e70 <vDEC_H+0x8>)
 8000e6a:	1dc8      	adds	r0, r1, #7
 8000e6c:	f001 bef0 	b.w	8002c50 <v8bitRegisterDEC>
 8000e70:	24001664 	.word	0x24001664

08000e74 <vDEC_L>:
void vDEC_L(){        v8bitRegisterDEC(&reg.L, &reg.F);}
 8000e74:	4901      	ldr	r1, [pc, #4]	; (8000e7c <vDEC_L+0x8>)
 8000e76:	1d88      	adds	r0, r1, #6
 8000e78:	f001 beea 	b.w	8002c50 <v8bitRegisterDEC>
 8000e7c:	24001664 	.word	0x24001664

08000e80 <vDEC_A>:
void vDEC_A(){        v8bitRegisterDEC(&reg.A, &reg.F);}
 8000e80:	4901      	ldr	r1, [pc, #4]	; (8000e88 <vDEC_A+0x8>)
 8000e82:	1c48      	adds	r0, r1, #1
 8000e84:	f001 bee4 	b.w	8002c50 <v8bitRegisterDEC>
 8000e88:	24001664 	.word	0x24001664

08000e8c <vRLCA>:
void vRLCA(){         vGBFunctionRLCA(&reg.A, &reg.F);}
 8000e8c:	4901      	ldr	r1, [pc, #4]	; (8000e94 <vRLCA+0x8>)
 8000e8e:	1c48      	adds	r0, r1, #1
 8000e90:	f001 befe 	b.w	8002c90 <vGBFunctionRLCA>
 8000e94:	24001664 	.word	0x24001664

08000e98 <vLDs_a16_SP>:
void vLDs_a16_SP(){   vGBMemoryWriteShort(concat_16bit_bigEndian(ucGBMemoryRead(reg.PC -2), ucGBMemoryRead(reg.PC - 1)), reg.SP);}
 8000e98:	b538      	push	{r3, r4, r5, lr}
 8000e9a:	4c0a      	ldr	r4, [pc, #40]	; (8000ec4 <vLDs_a16_SP+0x2c>)
 8000e9c:	8960      	ldrh	r0, [r4, #10]
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	b280      	uxth	r0, r0
 8000ea2:	f002 fbdf 	bl	8003664 <ucGBMemoryRead>
 8000ea6:	8963      	ldrh	r3, [r4, #10]
 8000ea8:	4605      	mov	r5, r0
 8000eaa:	1e58      	subs	r0, r3, #1
 8000eac:	b280      	uxth	r0, r0
 8000eae:	f002 fbd9 	bl	8003664 <ucGBMemoryRead>
 8000eb2:	4601      	mov	r1, r0
 8000eb4:	4628      	mov	r0, r5
 8000eb6:	f001 fe95 	bl	8002be4 <concat_16bit_bigEndian>
 8000eba:	8921      	ldrh	r1, [r4, #8]
 8000ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ec0:	f002 bc30 	b.w	8003724 <vGBMemoryWriteShort>
 8000ec4:	24001664 	.word	0x24001664

08000ec8 <vADDs_HL_BC>:
void vADDs_HL_BC(){   vGBFunction16bitADD(&reg.HL, reg.BC, &reg.F);}
 8000ec8:	4a02      	ldr	r2, [pc, #8]	; (8000ed4 <vADDs_HL_BC+0xc>)
 8000eca:	8851      	ldrh	r1, [r2, #2]
 8000ecc:	1d90      	adds	r0, r2, #6
 8000ece:	f001 befd 	b.w	8002ccc <vGBFunction16bitADD>
 8000ed2:	bf00      	nop
 8000ed4:	24001664 	.word	0x24001664

08000ed8 <vADDs_HL_DE>:
void vADDs_HL_DE(){   vGBFunction16bitADD(&reg.HL, reg.DE, &reg.F);}
 8000ed8:	4a02      	ldr	r2, [pc, #8]	; (8000ee4 <vADDs_HL_DE+0xc>)
 8000eda:	8891      	ldrh	r1, [r2, #4]
 8000edc:	1d90      	adds	r0, r2, #6
 8000ede:	f001 bef5 	b.w	8002ccc <vGBFunction16bitADD>
 8000ee2:	bf00      	nop
 8000ee4:	24001664 	.word	0x24001664

08000ee8 <vADDs_HL_HL>:
void vADDs_HL_HL(){   vGBFunction16bitADD(&reg.HL, reg.HL, &reg.F);}
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <vADDs_HL_HL+0xc>)
 8000eea:	4602      	mov	r2, r0
 8000eec:	f830 1f06 	ldrh.w	r1, [r0, #6]!
 8000ef0:	f001 beec 	b.w	8002ccc <vGBFunction16bitADD>
 8000ef4:	24001664 	.word	0x24001664

08000ef8 <vADDs_HL_SP>:
void vADDs_HL_SP(){   vGBFunction16bitADD(&reg.HL, reg.SP, &reg.F);}
 8000ef8:	4a02      	ldr	r2, [pc, #8]	; (8000f04 <vADDs_HL_SP+0xc>)
 8000efa:	8911      	ldrh	r1, [r2, #8]
 8000efc:	1d90      	adds	r0, r2, #6
 8000efe:	f001 bee5 	b.w	8002ccc <vGBFunction16bitADD>
 8000f02:	bf00      	nop
 8000f04:	24001664 	.word	0x24001664

08000f08 <vRRCA>:
void vRRCA(){         vGBFunctionRRCA(&reg.A, &reg.F);}
 8000f08:	4901      	ldr	r1, [pc, #4]	; (8000f10 <vRRCA+0x8>)
 8000f0a:	1c48      	adds	r0, r1, #1
 8000f0c:	f001 becc 	b.w	8002ca8 <vGBFunctionRRCA>
 8000f10:	24001664 	.word	0x24001664

08000f14 <vRLA>:
void vRLA(){          vGBFunctionRLA(&reg.A, &reg.F);}
 8000f14:	4901      	ldr	r1, [pc, #4]	; (8000f1c <vRLA+0x8>)
 8000f16:	1c48      	adds	r0, r1, #1
 8000f18:	f001 bf00 	b.w	8002d1c <vGBFunctionRLA>
 8000f1c:	24001664 	.word	0x24001664

08000f20 <vRRA>:
void vRRA(){          vGBFunctionRRA(&reg.A, &reg.F);}
 8000f20:	4901      	ldr	r1, [pc, #4]	; (8000f28 <vRRA+0x8>)
 8000f22:	1c48      	adds	r0, r1, #1
 8000f24:	f001 bf08 	b.w	8002d38 <vGBFunctionRRA>
 8000f28:	24001664 	.word	0x24001664

08000f2c <vJR_NZ_r8>:
void vJR_NZ_r8(){     customDuration = vGBFunctionJR_NZ(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	4d08      	ldr	r5, [pc, #32]	; (8000f50 <vJR_NZ_r8+0x24>)
 8000f30:	462c      	mov	r4, r5
 8000f32:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000f36:	3801      	subs	r0, #1
 8000f38:	b280      	uxth	r0, r0
 8000f3a:	f002 fb93 	bl	8003664 <ucGBMemoryRead>
 8000f3e:	4629      	mov	r1, r5
 8000f40:	4602      	mov	r2, r0
 8000f42:	4620      	mov	r0, r4
 8000f44:	f001 ff06 	bl	8002d54 <vGBFunctionJR_NZ>
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <vJR_NZ_r8+0x28>)
 8000f4a:	7018      	strb	r0, [r3, #0]
 8000f4c:	bd38      	pop	{r3, r4, r5, pc}
 8000f4e:	bf00      	nop
 8000f50:	24001664 	.word	0x24001664
 8000f54:	24001094 	.word	0x24001094

08000f58 <vDAA>:
void vDAA(){          vGBFunctionDAA(&reg.A, &reg.F);}
 8000f58:	4901      	ldr	r1, [pc, #4]	; (8000f60 <vDAA+0x8>)
 8000f5a:	1c48      	adds	r0, r1, #1
 8000f5c:	f001 bf06 	b.w	8002d6c <vGBFunctionDAA>
 8000f60:	24001664 	.word	0x24001664

08000f64 <vJR_Z_r8>:
void vJR_Z_r8(){      customDuration = vGBFunctionJR_Z(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8000f64:	b538      	push	{r3, r4, r5, lr}
 8000f66:	4d08      	ldr	r5, [pc, #32]	; (8000f88 <vJR_Z_r8+0x24>)
 8000f68:	462c      	mov	r4, r5
 8000f6a:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8000f6e:	3801      	subs	r0, #1
 8000f70:	b280      	uxth	r0, r0
 8000f72:	f002 fb77 	bl	8003664 <ucGBMemoryRead>
 8000f76:	4629      	mov	r1, r5
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f001 ff34 	bl	8002de8 <vGBFunctionJR_Z>
 8000f80:	4b02      	ldr	r3, [pc, #8]	; (8000f8c <vJR_Z_r8+0x28>)
 8000f82:	7018      	strb	r0, [r3, #0]
 8000f84:	bd38      	pop	{r3, r4, r5, pc}
 8000f86:	bf00      	nop
 8000f88:	24001664 	.word	0x24001664
 8000f8c:	24001094 	.word	0x24001094

08000f90 <vCPL>:
void vCPL(){          reg.A = ~(reg.A); setbit(&reg.F, N_FLAG); setbit(&reg.F, H_FLAG);}
 8000f90:	b510      	push	{r4, lr}
 8000f92:	4c07      	ldr	r4, [pc, #28]	; (8000fb0 <vCPL+0x20>)
 8000f94:	2106      	movs	r1, #6
 8000f96:	7863      	ldrb	r3, [r4, #1]
 8000f98:	4620      	mov	r0, r4
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	7063      	strb	r3, [r4, #1]
 8000f9e:	f001 fe25 	bl	8002bec <setbit>
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000faa:	f001 be1f 	b.w	8002bec <setbit>
 8000fae:	bf00      	nop
 8000fb0:	24001664 	.word	0x24001664

08000fb4 <vSET_0_B>:
void vRES_7_L(){      resetbit(&reg.L, 7);}
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
void vRES_7_A(){      resetbit(&reg.A, 7);}

/*********************0xCX*/
void vSET_0_B(){      setbit(&reg.B, 0);}
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4801      	ldr	r0, [pc, #4]	; (8000fbc <vSET_0_B+0x8>)
 8000fb8:	f001 be18 	b.w	8002bec <setbit>
 8000fbc:	24001667 	.word	0x24001667

08000fc0 <vSET_0_C>:
void vSET_0_C(){      setbit(&reg.C, 0);}
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4801      	ldr	r0, [pc, #4]	; (8000fc8 <vSET_0_C+0x8>)
 8000fc4:	f001 be12 	b.w	8002bec <setbit>
 8000fc8:	24001666 	.word	0x24001666

08000fcc <vSET_0_D>:
void vSET_0_D(){      setbit(&reg.D, 0);}
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4801      	ldr	r0, [pc, #4]	; (8000fd4 <vSET_0_D+0x8>)
 8000fd0:	f001 be0c 	b.w	8002bec <setbit>
 8000fd4:	24001669 	.word	0x24001669

08000fd8 <vSET_0_E>:
void vSET_0_E(){      setbit(&reg.E, 0);}
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4801      	ldr	r0, [pc, #4]	; (8000fe0 <vSET_0_E+0x8>)
 8000fdc:	f001 be06 	b.w	8002bec <setbit>
 8000fe0:	24001668 	.word	0x24001668

08000fe4 <vSET_0_H>:
void vSET_0_H(){      setbit(&reg.H, 0);}
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4801      	ldr	r0, [pc, #4]	; (8000fec <vSET_0_H+0x8>)
 8000fe8:	f001 be00 	b.w	8002bec <setbit>
 8000fec:	2400166b 	.word	0x2400166b

08000ff0 <vSET_0_L>:
void vSET_0_L(){      setbit(&reg.L, 0);}
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4801      	ldr	r0, [pc, #4]	; (8000ff8 <vSET_0_L+0x8>)
 8000ff4:	f001 bdfa 	b.w	8002bec <setbit>
 8000ff8:	2400166a 	.word	0x2400166a

08000ffc <vSET_0_A>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
void vSET_0_A(){      setbit(&reg.A, 0);}
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4801      	ldr	r0, [pc, #4]	; (8001004 <vSET_0_A+0x8>)
 8001000:	f001 bdf4 	b.w	8002bec <setbit>
 8001004:	24001665 	.word	0x24001665

08001008 <vSET_1_B>:
void vSET_1_B(){      setbit(&reg.B, 1);}
 8001008:	2101      	movs	r1, #1
 800100a:	4801      	ldr	r0, [pc, #4]	; (8001010 <vSET_1_B+0x8>)
 800100c:	f001 bdee 	b.w	8002bec <setbit>
 8001010:	24001667 	.word	0x24001667

08001014 <vSET_1_C>:
void vSET_1_C(){      setbit(&reg.C, 1);}
 8001014:	2101      	movs	r1, #1
 8001016:	4801      	ldr	r0, [pc, #4]	; (800101c <vSET_1_C+0x8>)
 8001018:	f001 bde8 	b.w	8002bec <setbit>
 800101c:	24001666 	.word	0x24001666

08001020 <vSET_1_D>:
void vSET_1_D(){      setbit(&reg.D, 1);}
 8001020:	2101      	movs	r1, #1
 8001022:	4801      	ldr	r0, [pc, #4]	; (8001028 <vSET_1_D+0x8>)
 8001024:	f001 bde2 	b.w	8002bec <setbit>
 8001028:	24001669 	.word	0x24001669

0800102c <vSET_1_E>:
void vSET_1_E(){      setbit(&reg.E, 1);}
 800102c:	2101      	movs	r1, #1
 800102e:	4801      	ldr	r0, [pc, #4]	; (8001034 <vSET_1_E+0x8>)
 8001030:	f001 bddc 	b.w	8002bec <setbit>
 8001034:	24001668 	.word	0x24001668

08001038 <vSET_1_H>:
void vSET_1_H(){      setbit(&reg.H, 1);}
 8001038:	2101      	movs	r1, #1
 800103a:	4801      	ldr	r0, [pc, #4]	; (8001040 <vSET_1_H+0x8>)
 800103c:	f001 bdd6 	b.w	8002bec <setbit>
 8001040:	2400166b 	.word	0x2400166b

08001044 <vSET_1_L>:
void vSET_1_L(){      setbit(&reg.L, 1);}
 8001044:	2101      	movs	r1, #1
 8001046:	4801      	ldr	r0, [pc, #4]	; (800104c <vSET_1_L+0x8>)
 8001048:	f001 bdd0 	b.w	8002bec <setbit>
 800104c:	2400166a 	.word	0x2400166a

08001050 <vSET_1_A>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
void vSET_1_A(){      setbit(&reg.A, 1);}
 8001050:	2101      	movs	r1, #1
 8001052:	4801      	ldr	r0, [pc, #4]	; (8001058 <vSET_1_A+0x8>)
 8001054:	f001 bdca 	b.w	8002bec <setbit>
 8001058:	24001665 	.word	0x24001665

0800105c <vSET_2_B>:

/*********************0xDX*/
void vSET_2_B(){      setbit(&reg.B, 2);}
 800105c:	2102      	movs	r1, #2
 800105e:	4801      	ldr	r0, [pc, #4]	; (8001064 <vSET_2_B+0x8>)
 8001060:	f001 bdc4 	b.w	8002bec <setbit>
 8001064:	24001667 	.word	0x24001667

08001068 <vSET_2_C>:
void vSET_2_C(){      setbit(&reg.C, 2);}
 8001068:	2102      	movs	r1, #2
 800106a:	4801      	ldr	r0, [pc, #4]	; (8001070 <vSET_2_C+0x8>)
 800106c:	f001 bdbe 	b.w	8002bec <setbit>
 8001070:	24001666 	.word	0x24001666

08001074 <vSET_2_D>:
void vSET_2_D(){      setbit(&reg.D, 2);}
 8001074:	2102      	movs	r1, #2
 8001076:	4801      	ldr	r0, [pc, #4]	; (800107c <vSET_2_D+0x8>)
 8001078:	f001 bdb8 	b.w	8002bec <setbit>
 800107c:	24001669 	.word	0x24001669

08001080 <vSET_2_E>:
void vSET_2_E(){      setbit(&reg.E, 2);}
 8001080:	2102      	movs	r1, #2
 8001082:	4801      	ldr	r0, [pc, #4]	; (8001088 <vSET_2_E+0x8>)
 8001084:	f001 bdb2 	b.w	8002bec <setbit>
 8001088:	24001668 	.word	0x24001668

0800108c <vSET_2_H>:
void vSET_2_H(){      setbit(&reg.H, 2);}
 800108c:	2102      	movs	r1, #2
 800108e:	4801      	ldr	r0, [pc, #4]	; (8001094 <vSET_2_H+0x8>)
 8001090:	f001 bdac 	b.w	8002bec <setbit>
 8001094:	2400166b 	.word	0x2400166b

08001098 <vSET_2_L>:
void vSET_2_L(){      setbit(&reg.L, 2);}
 8001098:	2102      	movs	r1, #2
 800109a:	4801      	ldr	r0, [pc, #4]	; (80010a0 <vSET_2_L+0x8>)
 800109c:	f001 bda6 	b.w	8002bec <setbit>
 80010a0:	2400166a 	.word	0x2400166a

080010a4 <vSET_2_A>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
void vSET_2_A(){      setbit(&reg.A, 2);}
 80010a4:	2102      	movs	r1, #2
 80010a6:	4801      	ldr	r0, [pc, #4]	; (80010ac <vSET_2_A+0x8>)
 80010a8:	f001 bda0 	b.w	8002bec <setbit>
 80010ac:	24001665 	.word	0x24001665

080010b0 <vSET_3_B>:
void vSET_3_B(){      setbit(&reg.B, 3);}
 80010b0:	2103      	movs	r1, #3
 80010b2:	4801      	ldr	r0, [pc, #4]	; (80010b8 <vSET_3_B+0x8>)
 80010b4:	f001 bd9a 	b.w	8002bec <setbit>
 80010b8:	24001667 	.word	0x24001667

080010bc <vSET_3_C>:
void vSET_3_C(){      setbit(&reg.C, 3);}
 80010bc:	2103      	movs	r1, #3
 80010be:	4801      	ldr	r0, [pc, #4]	; (80010c4 <vSET_3_C+0x8>)
 80010c0:	f001 bd94 	b.w	8002bec <setbit>
 80010c4:	24001666 	.word	0x24001666

080010c8 <vSET_3_D>:
void vSET_3_D(){      setbit(&reg.D, 3);}
 80010c8:	2103      	movs	r1, #3
 80010ca:	4801      	ldr	r0, [pc, #4]	; (80010d0 <vSET_3_D+0x8>)
 80010cc:	f001 bd8e 	b.w	8002bec <setbit>
 80010d0:	24001669 	.word	0x24001669

080010d4 <vSET_3_E>:
void vSET_3_E(){      setbit(&reg.E, 3);}
 80010d4:	2103      	movs	r1, #3
 80010d6:	4801      	ldr	r0, [pc, #4]	; (80010dc <vSET_3_E+0x8>)
 80010d8:	f001 bd88 	b.w	8002bec <setbit>
 80010dc:	24001668 	.word	0x24001668

080010e0 <vSET_3_H>:
void vSET_3_H(){      setbit(&reg.H, 3);}
 80010e0:	2103      	movs	r1, #3
 80010e2:	4801      	ldr	r0, [pc, #4]	; (80010e8 <vSET_3_H+0x8>)
 80010e4:	f001 bd82 	b.w	8002bec <setbit>
 80010e8:	2400166b 	.word	0x2400166b

080010ec <vSET_3_L>:
void vSET_3_L(){      setbit(&reg.L, 3);}
 80010ec:	2103      	movs	r1, #3
 80010ee:	4801      	ldr	r0, [pc, #4]	; (80010f4 <vSET_3_L+0x8>)
 80010f0:	f001 bd7c 	b.w	8002bec <setbit>
 80010f4:	2400166a 	.word	0x2400166a

080010f8 <vSET_3_A>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
void vSET_3_A(){      setbit(&reg.A, 3);}
 80010f8:	2103      	movs	r1, #3
 80010fa:	4801      	ldr	r0, [pc, #4]	; (8001100 <vSET_3_A+0x8>)
 80010fc:	f001 bd76 	b.w	8002bec <setbit>
 8001100:	24001665 	.word	0x24001665

08001104 <vSET_4_B>:

/*********************0xEX*/
void vSET_4_B(){      setbit(&reg.B, 4);}
 8001104:	2104      	movs	r1, #4
 8001106:	4801      	ldr	r0, [pc, #4]	; (800110c <vSET_4_B+0x8>)
 8001108:	f001 bd70 	b.w	8002bec <setbit>
 800110c:	24001667 	.word	0x24001667

08001110 <vSET_4_C>:
void vSET_4_C(){      setbit(&reg.C, 4);}
 8001110:	2104      	movs	r1, #4
 8001112:	4801      	ldr	r0, [pc, #4]	; (8001118 <vSET_4_C+0x8>)
 8001114:	f001 bd6a 	b.w	8002bec <setbit>
 8001118:	24001666 	.word	0x24001666

0800111c <vSET_4_D>:
void vSET_4_D(){      setbit(&reg.D, 4);}
 800111c:	2104      	movs	r1, #4
 800111e:	4801      	ldr	r0, [pc, #4]	; (8001124 <vSET_4_D+0x8>)
 8001120:	f001 bd64 	b.w	8002bec <setbit>
 8001124:	24001669 	.word	0x24001669

08001128 <vSET_4_E>:
void vSET_4_E(){      setbit(&reg.E, 4);}
 8001128:	2104      	movs	r1, #4
 800112a:	4801      	ldr	r0, [pc, #4]	; (8001130 <vSET_4_E+0x8>)
 800112c:	f001 bd5e 	b.w	8002bec <setbit>
 8001130:	24001668 	.word	0x24001668

08001134 <vSET_4_H>:
void vSET_4_H(){      setbit(&reg.H, 4);}
 8001134:	2104      	movs	r1, #4
 8001136:	4801      	ldr	r0, [pc, #4]	; (800113c <vSET_4_H+0x8>)
 8001138:	f001 bd58 	b.w	8002bec <setbit>
 800113c:	2400166b 	.word	0x2400166b

08001140 <vSET_4_L>:
void vSET_4_L(){      setbit(&reg.L, 4);}
 8001140:	2104      	movs	r1, #4
 8001142:	4801      	ldr	r0, [pc, #4]	; (8001148 <vSET_4_L+0x8>)
 8001144:	f001 bd52 	b.w	8002bec <setbit>
 8001148:	2400166a 	.word	0x2400166a

0800114c <vSET_4_A>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
void vSET_4_A(){      setbit(&reg.A, 4);}
 800114c:	2104      	movs	r1, #4
 800114e:	4801      	ldr	r0, [pc, #4]	; (8001154 <vSET_4_A+0x8>)
 8001150:	f001 bd4c 	b.w	8002bec <setbit>
 8001154:	24001665 	.word	0x24001665

08001158 <vSET_5_B>:
void vSET_5_B(){      setbit(&reg.B, 5);}
 8001158:	2105      	movs	r1, #5
 800115a:	4801      	ldr	r0, [pc, #4]	; (8001160 <vSET_5_B+0x8>)
 800115c:	f001 bd46 	b.w	8002bec <setbit>
 8001160:	24001667 	.word	0x24001667

08001164 <vSET_5_C>:
void vSET_5_C(){      setbit(&reg.C, 5);}
 8001164:	2105      	movs	r1, #5
 8001166:	4801      	ldr	r0, [pc, #4]	; (800116c <vSET_5_C+0x8>)
 8001168:	f001 bd40 	b.w	8002bec <setbit>
 800116c:	24001666 	.word	0x24001666

08001170 <vSET_5_D>:
void vSET_5_D(){      setbit(&reg.D, 5);}
 8001170:	2105      	movs	r1, #5
 8001172:	4801      	ldr	r0, [pc, #4]	; (8001178 <vSET_5_D+0x8>)
 8001174:	f001 bd3a 	b.w	8002bec <setbit>
 8001178:	24001669 	.word	0x24001669

0800117c <vSET_5_E>:
void vSET_5_E(){      setbit(&reg.E, 5);}
 800117c:	2105      	movs	r1, #5
 800117e:	4801      	ldr	r0, [pc, #4]	; (8001184 <vSET_5_E+0x8>)
 8001180:	f001 bd34 	b.w	8002bec <setbit>
 8001184:	24001668 	.word	0x24001668

08001188 <vSET_5_H>:
void vSET_5_H(){      setbit(&reg.H, 5);}
 8001188:	2105      	movs	r1, #5
 800118a:	4801      	ldr	r0, [pc, #4]	; (8001190 <vSET_5_H+0x8>)
 800118c:	f001 bd2e 	b.w	8002bec <setbit>
 8001190:	2400166b 	.word	0x2400166b

08001194 <vSET_5_L>:
void vSET_5_L(){      setbit(&reg.L, 5);}
 8001194:	2105      	movs	r1, #5
 8001196:	4801      	ldr	r0, [pc, #4]	; (800119c <vSET_5_L+0x8>)
 8001198:	f001 bd28 	b.w	8002bec <setbit>
 800119c:	2400166a 	.word	0x2400166a

080011a0 <vSET_5_A>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
void vSET_5_A(){      setbit(&reg.A, 5);}
 80011a0:	2105      	movs	r1, #5
 80011a2:	4801      	ldr	r0, [pc, #4]	; (80011a8 <vSET_5_A+0x8>)
 80011a4:	f001 bd22 	b.w	8002bec <setbit>
 80011a8:	24001665 	.word	0x24001665

080011ac <vSET_6_B>:

/*********************0xFX*/
void vSET_6_B(){      setbit(&reg.B, 6);}
 80011ac:	2106      	movs	r1, #6
 80011ae:	4801      	ldr	r0, [pc, #4]	; (80011b4 <vSET_6_B+0x8>)
 80011b0:	f001 bd1c 	b.w	8002bec <setbit>
 80011b4:	24001667 	.word	0x24001667

080011b8 <vSET_6_C>:
void vSET_6_C(){      setbit(&reg.C, 6);}
 80011b8:	2106      	movs	r1, #6
 80011ba:	4801      	ldr	r0, [pc, #4]	; (80011c0 <vSET_6_C+0x8>)
 80011bc:	f001 bd16 	b.w	8002bec <setbit>
 80011c0:	24001666 	.word	0x24001666

080011c4 <vSET_6_D>:
void vSET_6_D(){      setbit(&reg.D, 6);}
 80011c4:	2106      	movs	r1, #6
 80011c6:	4801      	ldr	r0, [pc, #4]	; (80011cc <vSET_6_D+0x8>)
 80011c8:	f001 bd10 	b.w	8002bec <setbit>
 80011cc:	24001669 	.word	0x24001669

080011d0 <vSET_6_E>:
void vSET_6_E(){      setbit(&reg.E, 6);}
 80011d0:	2106      	movs	r1, #6
 80011d2:	4801      	ldr	r0, [pc, #4]	; (80011d8 <vSET_6_E+0x8>)
 80011d4:	f001 bd0a 	b.w	8002bec <setbit>
 80011d8:	24001668 	.word	0x24001668

080011dc <vSET_6_H>:
void vSET_6_H(){      setbit(&reg.H, 6);}
 80011dc:	2106      	movs	r1, #6
 80011de:	4801      	ldr	r0, [pc, #4]	; (80011e4 <vSET_6_H+0x8>)
 80011e0:	f001 bd04 	b.w	8002bec <setbit>
 80011e4:	2400166b 	.word	0x2400166b

080011e8 <vSET_6_L>:
void vSET_6_L(){      setbit(&reg.L, 6);}
 80011e8:	2106      	movs	r1, #6
 80011ea:	4801      	ldr	r0, [pc, #4]	; (80011f0 <vSET_6_L+0x8>)
 80011ec:	f001 bcfe 	b.w	8002bec <setbit>
 80011f0:	2400166a 	.word	0x2400166a

080011f4 <vSET_6_A>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
void vSET_6_A(){      setbit(&reg.A, 6);}
 80011f4:	2106      	movs	r1, #6
 80011f6:	4801      	ldr	r0, [pc, #4]	; (80011fc <vSET_6_A+0x8>)
 80011f8:	f001 bcf8 	b.w	8002bec <setbit>
 80011fc:	24001665 	.word	0x24001665

08001200 <vSET_7_B>:
void vSET_7_B(){      setbit(&reg.B, 7);}
 8001200:	2107      	movs	r1, #7
 8001202:	4801      	ldr	r0, [pc, #4]	; (8001208 <vSET_7_B+0x8>)
 8001204:	f001 bcf2 	b.w	8002bec <setbit>
 8001208:	24001667 	.word	0x24001667

0800120c <vSET_7_C>:
void vSET_7_C(){      setbit(&reg.C, 7);}
 800120c:	2107      	movs	r1, #7
 800120e:	4801      	ldr	r0, [pc, #4]	; (8001214 <vSET_7_C+0x8>)
 8001210:	f001 bcec 	b.w	8002bec <setbit>
 8001214:	24001666 	.word	0x24001666

08001218 <vSET_7_D>:
void vSET_7_D(){      setbit(&reg.D, 7);}
 8001218:	2107      	movs	r1, #7
 800121a:	4801      	ldr	r0, [pc, #4]	; (8001220 <vSET_7_D+0x8>)
 800121c:	f001 bce6 	b.w	8002bec <setbit>
 8001220:	24001669 	.word	0x24001669

08001224 <vSET_7_E>:
void vSET_7_E(){      setbit(&reg.E, 7);}
 8001224:	2107      	movs	r1, #7
 8001226:	4801      	ldr	r0, [pc, #4]	; (800122c <vSET_7_E+0x8>)
 8001228:	f001 bce0 	b.w	8002bec <setbit>
 800122c:	24001668 	.word	0x24001668

08001230 <vSET_7_H>:
void vSET_7_H(){      setbit(&reg.H, 7);}
 8001230:	2107      	movs	r1, #7
 8001232:	4801      	ldr	r0, [pc, #4]	; (8001238 <vSET_7_H+0x8>)
 8001234:	f001 bcda 	b.w	8002bec <setbit>
 8001238:	2400166b 	.word	0x2400166b

0800123c <vSET_7_L>:
void vSET_7_L(){      setbit(&reg.L, 7);}
 800123c:	2107      	movs	r1, #7
 800123e:	4801      	ldr	r0, [pc, #4]	; (8001244 <vSET_7_L+0x8>)
 8001240:	f001 bcd4 	b.w	8002bec <setbit>
 8001244:	2400166a 	.word	0x2400166a

08001248 <vSET_7_A>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
void vSET_7_A(){      setbit(&reg.A, 7);}
 8001248:	2107      	movs	r1, #7
 800124a:	4801      	ldr	r0, [pc, #4]	; (8001250 <vSET_7_A+0x8>)
 800124c:	f001 bcce 	b.w	8002bec <setbit>
 8001250:	24001665 	.word	0x24001665

08001254 <vJR_NC_r8>:
void vJR_NC_r8(){     customDuration = vGBFunctionJR_NC(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001254:	b538      	push	{r3, r4, r5, lr}
 8001256:	4d08      	ldr	r5, [pc, #32]	; (8001278 <vJR_NC_r8+0x24>)
 8001258:	462c      	mov	r4, r5
 800125a:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 800125e:	3801      	subs	r0, #1
 8001260:	b280      	uxth	r0, r0
 8001262:	f002 f9ff 	bl	8003664 <ucGBMemoryRead>
 8001266:	4629      	mov	r1, r5
 8001268:	4602      	mov	r2, r0
 800126a:	4620      	mov	r0, r4
 800126c:	f001 fdc8 	bl	8002e00 <vGBFunctionJR_NC>
 8001270:	4b02      	ldr	r3, [pc, #8]	; (800127c <vJR_NC_r8+0x28>)
 8001272:	7018      	strb	r0, [r3, #0]
 8001274:	bd38      	pop	{r3, r4, r5, pc}
 8001276:	bf00      	nop
 8001278:	24001664 	.word	0x24001664
 800127c:	24001094 	.word	0x24001094

08001280 <vINC_HL>:
void vINC_HL(){       vMemoryLocationINC(reg.HL, &reg.F);}
 8001280:	4901      	ldr	r1, [pc, #4]	; (8001288 <vINC_HL+0x8>)
 8001282:	88c8      	ldrh	r0, [r1, #6]
 8001284:	f001 bdc8 	b.w	8002e18 <vMemoryLocationINC>
 8001288:	24001664 	.word	0x24001664

0800128c <vDEC_HL>:
void vDEC_HL(){       vMemoryLocationDEC(reg.HL, &reg.F);}
 800128c:	4901      	ldr	r1, [pc, #4]	; (8001294 <vDEC_HL+0x8>)
 800128e:	88c8      	ldrh	r0, [r1, #6]
 8001290:	f001 bdec 	b.w	8002e6c <vMemoryLocationDEC>
 8001294:	24001664 	.word	0x24001664

08001298 <vSCF>:
void vSCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); setbit(&reg.F, C_FLAG);}
 8001298:	b508      	push	{r3, lr}
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <vSCF+0x20>)
 800129c:	2106      	movs	r1, #6
 800129e:	f001 fcad 	bl	8002bfc <resetbit>
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <vSCF+0x20>)
 80012a4:	2105      	movs	r1, #5
 80012a6:	f001 fca9 	bl	8002bfc <resetbit>
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <vSCF+0x20>)
 80012ac:	2104      	movs	r1, #4
 80012ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80012b2:	f001 bc9b 	b.w	8002bec <setbit>
 80012b6:	bf00      	nop
 80012b8:	24001664 	.word	0x24001664

080012bc <vRES_0_B>:
void vRES_0_B(){      resetbit(&reg.B, 0);}
 80012bc:	2100      	movs	r1, #0
 80012be:	4801      	ldr	r0, [pc, #4]	; (80012c4 <vRES_0_B+0x8>)
 80012c0:	f001 bc9c 	b.w	8002bfc <resetbit>
 80012c4:	24001667 	.word	0x24001667

080012c8 <vRES_0_C>:
void vRES_0_C(){      resetbit(&reg.C, 0);}
 80012c8:	2100      	movs	r1, #0
 80012ca:	4801      	ldr	r0, [pc, #4]	; (80012d0 <vRES_0_C+0x8>)
 80012cc:	f001 bc96 	b.w	8002bfc <resetbit>
 80012d0:	24001666 	.word	0x24001666

080012d4 <vRES_0_D>:
void vRES_0_D(){      resetbit(&reg.D, 0);}
 80012d4:	2100      	movs	r1, #0
 80012d6:	4801      	ldr	r0, [pc, #4]	; (80012dc <vRES_0_D+0x8>)
 80012d8:	f001 bc90 	b.w	8002bfc <resetbit>
 80012dc:	24001669 	.word	0x24001669

080012e0 <vRES_0_E>:
void vRES_0_E(){      resetbit(&reg.E, 0);}
 80012e0:	2100      	movs	r1, #0
 80012e2:	4801      	ldr	r0, [pc, #4]	; (80012e8 <vRES_0_E+0x8>)
 80012e4:	f001 bc8a 	b.w	8002bfc <resetbit>
 80012e8:	24001668 	.word	0x24001668

080012ec <vRES_0_H>:
void vRES_0_H(){      resetbit(&reg.H, 0);}
 80012ec:	2100      	movs	r1, #0
 80012ee:	4801      	ldr	r0, [pc, #4]	; (80012f4 <vRES_0_H+0x8>)
 80012f0:	f001 bc84 	b.w	8002bfc <resetbit>
 80012f4:	2400166b 	.word	0x2400166b

080012f8 <vRES_0_L>:
void vRES_0_L(){      resetbit(&reg.L, 0);}
 80012f8:	2100      	movs	r1, #0
 80012fa:	4801      	ldr	r0, [pc, #4]	; (8001300 <vRES_0_L+0x8>)
 80012fc:	f001 bc7e 	b.w	8002bfc <resetbit>
 8001300:	2400166a 	.word	0x2400166a

08001304 <vRES_0_A>:
void vRES_0_A(){      resetbit(&reg.A, 0);}
 8001304:	2100      	movs	r1, #0
 8001306:	4801      	ldr	r0, [pc, #4]	; (800130c <vRES_0_A+0x8>)
 8001308:	f001 bc78 	b.w	8002bfc <resetbit>
 800130c:	24001665 	.word	0x24001665

08001310 <vRES_1_B>:
void vRES_1_B(){      resetbit(&reg.B, 1);}
 8001310:	2101      	movs	r1, #1
 8001312:	4801      	ldr	r0, [pc, #4]	; (8001318 <vRES_1_B+0x8>)
 8001314:	f001 bc72 	b.w	8002bfc <resetbit>
 8001318:	24001667 	.word	0x24001667

0800131c <vRES_1_C>:
void vRES_1_C(){      resetbit(&reg.C, 1);}
 800131c:	2101      	movs	r1, #1
 800131e:	4801      	ldr	r0, [pc, #4]	; (8001324 <vRES_1_C+0x8>)
 8001320:	f001 bc6c 	b.w	8002bfc <resetbit>
 8001324:	24001666 	.word	0x24001666

08001328 <vRES_1_D>:
void vRES_1_D(){      resetbit(&reg.D, 1);}
 8001328:	2101      	movs	r1, #1
 800132a:	4801      	ldr	r0, [pc, #4]	; (8001330 <vRES_1_D+0x8>)
 800132c:	f001 bc66 	b.w	8002bfc <resetbit>
 8001330:	24001669 	.word	0x24001669

08001334 <vRES_1_E>:
void vRES_1_E(){      resetbit(&reg.E, 1);}
 8001334:	2101      	movs	r1, #1
 8001336:	4801      	ldr	r0, [pc, #4]	; (800133c <vRES_1_E+0x8>)
 8001338:	f001 bc60 	b.w	8002bfc <resetbit>
 800133c:	24001668 	.word	0x24001668

08001340 <vRES_1_H>:
void vRES_1_H(){      resetbit(&reg.H, 1);}
 8001340:	2101      	movs	r1, #1
 8001342:	4801      	ldr	r0, [pc, #4]	; (8001348 <vRES_1_H+0x8>)
 8001344:	f001 bc5a 	b.w	8002bfc <resetbit>
 8001348:	2400166b 	.word	0x2400166b

0800134c <vRES_1_L>:
void vRES_1_L(){      resetbit(&reg.L, 1);}
 800134c:	2101      	movs	r1, #1
 800134e:	4801      	ldr	r0, [pc, #4]	; (8001354 <vRES_1_L+0x8>)
 8001350:	f001 bc54 	b.w	8002bfc <resetbit>
 8001354:	2400166a 	.word	0x2400166a

08001358 <vRES_1_A>:
void vRES_1_A(){      resetbit(&reg.A, 1);}
 8001358:	2101      	movs	r1, #1
 800135a:	4801      	ldr	r0, [pc, #4]	; (8001360 <vRES_1_A+0x8>)
 800135c:	f001 bc4e 	b.w	8002bfc <resetbit>
 8001360:	24001665 	.word	0x24001665

08001364 <vRES_2_B>:
void vRES_2_B(){      resetbit(&reg.B, 2);}
 8001364:	2102      	movs	r1, #2
 8001366:	4801      	ldr	r0, [pc, #4]	; (800136c <vRES_2_B+0x8>)
 8001368:	f001 bc48 	b.w	8002bfc <resetbit>
 800136c:	24001667 	.word	0x24001667

08001370 <vRES_2_C>:
void vRES_2_C(){      resetbit(&reg.C, 2);}
 8001370:	2102      	movs	r1, #2
 8001372:	4801      	ldr	r0, [pc, #4]	; (8001378 <vRES_2_C+0x8>)
 8001374:	f001 bc42 	b.w	8002bfc <resetbit>
 8001378:	24001666 	.word	0x24001666

0800137c <vRES_2_D>:
void vRES_2_D(){      resetbit(&reg.D, 2);}
 800137c:	2102      	movs	r1, #2
 800137e:	4801      	ldr	r0, [pc, #4]	; (8001384 <vRES_2_D+0x8>)
 8001380:	f001 bc3c 	b.w	8002bfc <resetbit>
 8001384:	24001669 	.word	0x24001669

08001388 <vRES_2_E>:
void vRES_2_E(){      resetbit(&reg.E, 2);}
 8001388:	2102      	movs	r1, #2
 800138a:	4801      	ldr	r0, [pc, #4]	; (8001390 <vRES_2_E+0x8>)
 800138c:	f001 bc36 	b.w	8002bfc <resetbit>
 8001390:	24001668 	.word	0x24001668

08001394 <vRES_2_H>:
void vRES_2_H(){      resetbit(&reg.H, 2);}
 8001394:	2102      	movs	r1, #2
 8001396:	4801      	ldr	r0, [pc, #4]	; (800139c <vRES_2_H+0x8>)
 8001398:	f001 bc30 	b.w	8002bfc <resetbit>
 800139c:	2400166b 	.word	0x2400166b

080013a0 <vRES_2_L>:
void vRES_2_L(){      resetbit(&reg.L, 2);}
 80013a0:	2102      	movs	r1, #2
 80013a2:	4801      	ldr	r0, [pc, #4]	; (80013a8 <vRES_2_L+0x8>)
 80013a4:	f001 bc2a 	b.w	8002bfc <resetbit>
 80013a8:	2400166a 	.word	0x2400166a

080013ac <vRES_2_A>:
void vRES_2_A(){      resetbit(&reg.A, 2);}
 80013ac:	2102      	movs	r1, #2
 80013ae:	4801      	ldr	r0, [pc, #4]	; (80013b4 <vRES_2_A+0x8>)
 80013b0:	f001 bc24 	b.w	8002bfc <resetbit>
 80013b4:	24001665 	.word	0x24001665

080013b8 <vRES_3_B>:
void vRES_3_B(){      resetbit(&reg.B, 3);}
 80013b8:	2103      	movs	r1, #3
 80013ba:	4801      	ldr	r0, [pc, #4]	; (80013c0 <vRES_3_B+0x8>)
 80013bc:	f001 bc1e 	b.w	8002bfc <resetbit>
 80013c0:	24001667 	.word	0x24001667

080013c4 <vRES_3_C>:
void vRES_3_C(){      resetbit(&reg.C, 3);}
 80013c4:	2103      	movs	r1, #3
 80013c6:	4801      	ldr	r0, [pc, #4]	; (80013cc <vRES_3_C+0x8>)
 80013c8:	f001 bc18 	b.w	8002bfc <resetbit>
 80013cc:	24001666 	.word	0x24001666

080013d0 <vRES_3_D>:
void vRES_3_D(){      resetbit(&reg.D, 3);}
 80013d0:	2103      	movs	r1, #3
 80013d2:	4801      	ldr	r0, [pc, #4]	; (80013d8 <vRES_3_D+0x8>)
 80013d4:	f001 bc12 	b.w	8002bfc <resetbit>
 80013d8:	24001669 	.word	0x24001669

080013dc <vRES_3_E>:
void vRES_3_E(){      resetbit(&reg.E, 3);}
 80013dc:	2103      	movs	r1, #3
 80013de:	4801      	ldr	r0, [pc, #4]	; (80013e4 <vRES_3_E+0x8>)
 80013e0:	f001 bc0c 	b.w	8002bfc <resetbit>
 80013e4:	24001668 	.word	0x24001668

080013e8 <vRES_3_H>:
void vRES_3_H(){      resetbit(&reg.H, 3);}
 80013e8:	2103      	movs	r1, #3
 80013ea:	4801      	ldr	r0, [pc, #4]	; (80013f0 <vRES_3_H+0x8>)
 80013ec:	f001 bc06 	b.w	8002bfc <resetbit>
 80013f0:	2400166b 	.word	0x2400166b

080013f4 <vRES_3_L>:
void vRES_3_L(){      resetbit(&reg.L, 3);}
 80013f4:	2103      	movs	r1, #3
 80013f6:	4801      	ldr	r0, [pc, #4]	; (80013fc <vRES_3_L+0x8>)
 80013f8:	f001 bc00 	b.w	8002bfc <resetbit>
 80013fc:	2400166a 	.word	0x2400166a

08001400 <vRES_3_A>:
void vRES_3_A(){      resetbit(&reg.A, 3);}
 8001400:	2103      	movs	r1, #3
 8001402:	4801      	ldr	r0, [pc, #4]	; (8001408 <vRES_3_A+0x8>)
 8001404:	f001 bbfa 	b.w	8002bfc <resetbit>
 8001408:	24001665 	.word	0x24001665

0800140c <vRES_4_B>:
void vRES_4_B(){      resetbit(&reg.B, 4);}
 800140c:	2104      	movs	r1, #4
 800140e:	4801      	ldr	r0, [pc, #4]	; (8001414 <vRES_4_B+0x8>)
 8001410:	f001 bbf4 	b.w	8002bfc <resetbit>
 8001414:	24001667 	.word	0x24001667

08001418 <vRES_4_C>:
void vRES_4_C(){      resetbit(&reg.C, 4);}
 8001418:	2104      	movs	r1, #4
 800141a:	4801      	ldr	r0, [pc, #4]	; (8001420 <vRES_4_C+0x8>)
 800141c:	f001 bbee 	b.w	8002bfc <resetbit>
 8001420:	24001666 	.word	0x24001666

08001424 <vRES_4_D>:
void vRES_4_D(){      resetbit(&reg.D, 4);}
 8001424:	2104      	movs	r1, #4
 8001426:	4801      	ldr	r0, [pc, #4]	; (800142c <vRES_4_D+0x8>)
 8001428:	f001 bbe8 	b.w	8002bfc <resetbit>
 800142c:	24001669 	.word	0x24001669

08001430 <vRES_4_E>:
void vRES_4_E(){      resetbit(&reg.E, 4);}
 8001430:	2104      	movs	r1, #4
 8001432:	4801      	ldr	r0, [pc, #4]	; (8001438 <vRES_4_E+0x8>)
 8001434:	f001 bbe2 	b.w	8002bfc <resetbit>
 8001438:	24001668 	.word	0x24001668

0800143c <vRES_4_H>:
void vRES_4_H(){      resetbit(&reg.H, 4);}
 800143c:	2104      	movs	r1, #4
 800143e:	4801      	ldr	r0, [pc, #4]	; (8001444 <vRES_4_H+0x8>)
 8001440:	f001 bbdc 	b.w	8002bfc <resetbit>
 8001444:	2400166b 	.word	0x2400166b

08001448 <vRES_4_L>:
void vRES_4_L(){      resetbit(&reg.L, 4);}
 8001448:	2104      	movs	r1, #4
 800144a:	4801      	ldr	r0, [pc, #4]	; (8001450 <vRES_4_L+0x8>)
 800144c:	f001 bbd6 	b.w	8002bfc <resetbit>
 8001450:	2400166a 	.word	0x2400166a

08001454 <vRES_4_A>:
void vRES_4_A(){      resetbit(&reg.A, 4);}
 8001454:	2104      	movs	r1, #4
 8001456:	4801      	ldr	r0, [pc, #4]	; (800145c <vRES_4_A+0x8>)
 8001458:	f001 bbd0 	b.w	8002bfc <resetbit>
 800145c:	24001665 	.word	0x24001665

08001460 <vRES_5_B>:
void vRES_5_B(){      resetbit(&reg.B, 5);}
 8001460:	2105      	movs	r1, #5
 8001462:	4801      	ldr	r0, [pc, #4]	; (8001468 <vRES_5_B+0x8>)
 8001464:	f001 bbca 	b.w	8002bfc <resetbit>
 8001468:	24001667 	.word	0x24001667

0800146c <vRES_5_C>:
void vRES_5_C(){      resetbit(&reg.C, 5);}
 800146c:	2105      	movs	r1, #5
 800146e:	4801      	ldr	r0, [pc, #4]	; (8001474 <vRES_5_C+0x8>)
 8001470:	f001 bbc4 	b.w	8002bfc <resetbit>
 8001474:	24001666 	.word	0x24001666

08001478 <vRES_5_D>:
void vRES_5_D(){      resetbit(&reg.D, 5);}
 8001478:	2105      	movs	r1, #5
 800147a:	4801      	ldr	r0, [pc, #4]	; (8001480 <vRES_5_D+0x8>)
 800147c:	f001 bbbe 	b.w	8002bfc <resetbit>
 8001480:	24001669 	.word	0x24001669

08001484 <vRES_5_E>:
void vRES_5_E(){      resetbit(&reg.E, 5);}
 8001484:	2105      	movs	r1, #5
 8001486:	4801      	ldr	r0, [pc, #4]	; (800148c <vRES_5_E+0x8>)
 8001488:	f001 bbb8 	b.w	8002bfc <resetbit>
 800148c:	24001668 	.word	0x24001668

08001490 <vRES_5_H>:
void vRES_5_H(){      resetbit(&reg.H, 5);}
 8001490:	2105      	movs	r1, #5
 8001492:	4801      	ldr	r0, [pc, #4]	; (8001498 <vRES_5_H+0x8>)
 8001494:	f001 bbb2 	b.w	8002bfc <resetbit>
 8001498:	2400166b 	.word	0x2400166b

0800149c <vRES_5_L>:
void vRES_5_L(){      resetbit(&reg.L, 5);}
 800149c:	2105      	movs	r1, #5
 800149e:	4801      	ldr	r0, [pc, #4]	; (80014a4 <vRES_5_L+0x8>)
 80014a0:	f001 bbac 	b.w	8002bfc <resetbit>
 80014a4:	2400166a 	.word	0x2400166a

080014a8 <vRES_5_A>:
void vRES_5_A(){      resetbit(&reg.A, 5);}
 80014a8:	2105      	movs	r1, #5
 80014aa:	4801      	ldr	r0, [pc, #4]	; (80014b0 <vRES_5_A+0x8>)
 80014ac:	f001 bba6 	b.w	8002bfc <resetbit>
 80014b0:	24001665 	.word	0x24001665

080014b4 <vRES_6_B>:
void vRES_6_B(){      resetbit(&reg.B, 6);}
 80014b4:	2106      	movs	r1, #6
 80014b6:	4801      	ldr	r0, [pc, #4]	; (80014bc <vRES_6_B+0x8>)
 80014b8:	f001 bba0 	b.w	8002bfc <resetbit>
 80014bc:	24001667 	.word	0x24001667

080014c0 <vRES_6_C>:
void vRES_6_C(){      resetbit(&reg.C, 6);}
 80014c0:	2106      	movs	r1, #6
 80014c2:	4801      	ldr	r0, [pc, #4]	; (80014c8 <vRES_6_C+0x8>)
 80014c4:	f001 bb9a 	b.w	8002bfc <resetbit>
 80014c8:	24001666 	.word	0x24001666

080014cc <vRES_6_D>:
void vRES_6_D(){      resetbit(&reg.D, 6);}
 80014cc:	2106      	movs	r1, #6
 80014ce:	4801      	ldr	r0, [pc, #4]	; (80014d4 <vRES_6_D+0x8>)
 80014d0:	f001 bb94 	b.w	8002bfc <resetbit>
 80014d4:	24001669 	.word	0x24001669

080014d8 <vRES_6_E>:
void vRES_6_E(){      resetbit(&reg.E, 6);}
 80014d8:	2106      	movs	r1, #6
 80014da:	4801      	ldr	r0, [pc, #4]	; (80014e0 <vRES_6_E+0x8>)
 80014dc:	f001 bb8e 	b.w	8002bfc <resetbit>
 80014e0:	24001668 	.word	0x24001668

080014e4 <vRES_6_H>:
void vRES_6_H(){      resetbit(&reg.H, 6);}
 80014e4:	2106      	movs	r1, #6
 80014e6:	4801      	ldr	r0, [pc, #4]	; (80014ec <vRES_6_H+0x8>)
 80014e8:	f001 bb88 	b.w	8002bfc <resetbit>
 80014ec:	2400166b 	.word	0x2400166b

080014f0 <vRES_6_L>:
void vRES_6_L(){      resetbit(&reg.L, 6);}
 80014f0:	2106      	movs	r1, #6
 80014f2:	4801      	ldr	r0, [pc, #4]	; (80014f8 <vRES_6_L+0x8>)
 80014f4:	f001 bb82 	b.w	8002bfc <resetbit>
 80014f8:	2400166a 	.word	0x2400166a

080014fc <vRES_6_A>:
void vRES_6_A(){      resetbit(&reg.A, 6);}
 80014fc:	2106      	movs	r1, #6
 80014fe:	4801      	ldr	r0, [pc, #4]	; (8001504 <vRES_6_A+0x8>)
 8001500:	f001 bb7c 	b.w	8002bfc <resetbit>
 8001504:	24001665 	.word	0x24001665

08001508 <vRES_7_B>:
void vRES_7_B(){      resetbit(&reg.B, 7);}
 8001508:	2107      	movs	r1, #7
 800150a:	4801      	ldr	r0, [pc, #4]	; (8001510 <vRES_7_B+0x8>)
 800150c:	f001 bb76 	b.w	8002bfc <resetbit>
 8001510:	24001667 	.word	0x24001667

08001514 <vRES_7_C>:
void vRES_7_C(){      resetbit(&reg.C, 7);}
 8001514:	2107      	movs	r1, #7
 8001516:	4801      	ldr	r0, [pc, #4]	; (800151c <vRES_7_C+0x8>)
 8001518:	f001 bb70 	b.w	8002bfc <resetbit>
 800151c:	24001666 	.word	0x24001666

08001520 <vRES_7_D>:
void vRES_7_D(){      resetbit(&reg.D, 7);}
 8001520:	2107      	movs	r1, #7
 8001522:	4801      	ldr	r0, [pc, #4]	; (8001528 <vRES_7_D+0x8>)
 8001524:	f001 bb6a 	b.w	8002bfc <resetbit>
 8001528:	24001669 	.word	0x24001669

0800152c <vRES_7_E>:
void vRES_7_E(){      resetbit(&reg.E, 7);}
 800152c:	2107      	movs	r1, #7
 800152e:	4801      	ldr	r0, [pc, #4]	; (8001534 <vRES_7_E+0x8>)
 8001530:	f001 bb64 	b.w	8002bfc <resetbit>
 8001534:	24001668 	.word	0x24001668

08001538 <vRES_7_H>:
void vRES_7_H(){      resetbit(&reg.H, 7);}
 8001538:	2107      	movs	r1, #7
 800153a:	4801      	ldr	r0, [pc, #4]	; (8001540 <vRES_7_H+0x8>)
 800153c:	f001 bb5e 	b.w	8002bfc <resetbit>
 8001540:	2400166b 	.word	0x2400166b

08001544 <vRES_7_L>:
void vRES_7_L(){      resetbit(&reg.L, 7);}
 8001544:	2107      	movs	r1, #7
 8001546:	4801      	ldr	r0, [pc, #4]	; (800154c <vRES_7_L+0x8>)
 8001548:	f001 bb58 	b.w	8002bfc <resetbit>
 800154c:	2400166a 	.word	0x2400166a

08001550 <vRES_7_A>:
void vRES_7_A(){      resetbit(&reg.A, 7);}
 8001550:	2107      	movs	r1, #7
 8001552:	4801      	ldr	r0, [pc, #4]	; (8001558 <vRES_7_A+0x8>)
 8001554:	f001 bb52 	b.w	8002bfc <resetbit>
 8001558:	24001665 	.word	0x24001665

0800155c <vJR_C_r8>:
void vJR_C_r8(){      customDuration = vGBFunctionJR_C(&reg.PC, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4d08      	ldr	r5, [pc, #32]	; (8001580 <vJR_C_r8+0x24>)
 8001560:	462c      	mov	r4, r5
 8001562:	f834 0f0a 	ldrh.w	r0, [r4, #10]!
 8001566:	3801      	subs	r0, #1
 8001568:	b280      	uxth	r0, r0
 800156a:	f002 f87b 	bl	8003664 <ucGBMemoryRead>
 800156e:	4629      	mov	r1, r5
 8001570:	4602      	mov	r2, r0
 8001572:	4620      	mov	r0, r4
 8001574:	f001 fca2 	bl	8002ebc <vGBFunctionJR_C>
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <vJR_C_r8+0x28>)
 800157a:	7018      	strb	r0, [r3, #0]
 800157c:	bd38      	pop	{r3, r4, r5, pc}
 800157e:	bf00      	nop
 8001580:	24001664 	.word	0x24001664
 8001584:	24001094 	.word	0x24001094

08001588 <vADD_A_B>:
void vADD_A_B(){      vGBFunctionADD(&reg.A, &reg.F, reg.B);}
 8001588:	4902      	ldr	r1, [pc, #8]	; (8001594 <vADD_A_B+0xc>)
 800158a:	78ca      	ldrb	r2, [r1, #3]
 800158c:	1c48      	adds	r0, r1, #1
 800158e:	f001 bca1 	b.w	8002ed4 <vGBFunctionADD>
 8001592:	bf00      	nop
 8001594:	24001664 	.word	0x24001664

08001598 <vADD_A_C>:
void vADD_A_C(){      vGBFunctionADD(&reg.A, &reg.F, reg.C);}
 8001598:	4902      	ldr	r1, [pc, #8]	; (80015a4 <vADD_A_C+0xc>)
 800159a:	788a      	ldrb	r2, [r1, #2]
 800159c:	1c48      	adds	r0, r1, #1
 800159e:	f001 bc99 	b.w	8002ed4 <vGBFunctionADD>
 80015a2:	bf00      	nop
 80015a4:	24001664 	.word	0x24001664

080015a8 <vADD_A_D>:
void vADD_A_D(){      vGBFunctionADD(&reg.A, &reg.F, reg.D);}
 80015a8:	4902      	ldr	r1, [pc, #8]	; (80015b4 <vADD_A_D+0xc>)
 80015aa:	794a      	ldrb	r2, [r1, #5]
 80015ac:	1c48      	adds	r0, r1, #1
 80015ae:	f001 bc91 	b.w	8002ed4 <vGBFunctionADD>
 80015b2:	bf00      	nop
 80015b4:	24001664 	.word	0x24001664

080015b8 <vADD_A_E>:
void vADD_A_E(){      vGBFunctionADD(&reg.A, &reg.F, reg.E);}
 80015b8:	4902      	ldr	r1, [pc, #8]	; (80015c4 <vADD_A_E+0xc>)
 80015ba:	790a      	ldrb	r2, [r1, #4]
 80015bc:	1c48      	adds	r0, r1, #1
 80015be:	f001 bc89 	b.w	8002ed4 <vGBFunctionADD>
 80015c2:	bf00      	nop
 80015c4:	24001664 	.word	0x24001664

080015c8 <vADD_A_H>:
void vADD_A_H(){      vGBFunctionADD(&reg.A, &reg.F, reg.H);}
 80015c8:	4902      	ldr	r1, [pc, #8]	; (80015d4 <vADD_A_H+0xc>)
 80015ca:	79ca      	ldrb	r2, [r1, #7]
 80015cc:	1c48      	adds	r0, r1, #1
 80015ce:	f001 bc81 	b.w	8002ed4 <vGBFunctionADD>
 80015d2:	bf00      	nop
 80015d4:	24001664 	.word	0x24001664

080015d8 <vADD_A_L>:
void vADD_A_L(){      vGBFunctionADD(&reg.A, &reg.F, reg.L);}
 80015d8:	4902      	ldr	r1, [pc, #8]	; (80015e4 <vADD_A_L+0xc>)
 80015da:	798a      	ldrb	r2, [r1, #6]
 80015dc:	1c48      	adds	r0, r1, #1
 80015de:	f001 bc79 	b.w	8002ed4 <vGBFunctionADD>
 80015e2:	bf00      	nop
 80015e4:	24001664 	.word	0x24001664

080015e8 <vADD_A_HL>:
void vADD_A_HL(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80015e8:	b510      	push	{r4, lr}
 80015ea:	4c05      	ldr	r4, [pc, #20]	; (8001600 <vADD_A_HL+0x18>)
 80015ec:	88e0      	ldrh	r0, [r4, #6]
 80015ee:	f002 f839 	bl	8003664 <ucGBMemoryRead>
 80015f2:	4621      	mov	r1, r4
 80015f4:	4602      	mov	r2, r0
 80015f6:	1c60      	adds	r0, r4, #1
 80015f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015fc:	f001 bc6a 	b.w	8002ed4 <vGBFunctionADD>
 8001600:	24001664 	.word	0x24001664

08001604 <vADD_A_A>:
void vADD_A_A(){      vGBFunctionADD(&reg.A, &reg.F, reg.A);}
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <vADD_A_A+0xc>)
 8001606:	4601      	mov	r1, r0
 8001608:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800160c:	f001 bc62 	b.w	8002ed4 <vGBFunctionADD>
 8001610:	24001664 	.word	0x24001664

08001614 <vADD_A_d8>:
void vADD_A_d8(){     vGBFunctionADD(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001614:	b510      	push	{r4, lr}
 8001616:	4c06      	ldr	r4, [pc, #24]	; (8001630 <vADD_A_d8+0x1c>)
 8001618:	8960      	ldrh	r0, [r4, #10]
 800161a:	3801      	subs	r0, #1
 800161c:	b280      	uxth	r0, r0
 800161e:	f002 f821 	bl	8003664 <ucGBMemoryRead>
 8001622:	4621      	mov	r1, r4
 8001624:	4602      	mov	r2, r0
 8001626:	1c60      	adds	r0, r4, #1
 8001628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800162c:	f001 bc52 	b.w	8002ed4 <vGBFunctionADD>
 8001630:	24001664 	.word	0x24001664

08001634 <vADC_A_B>:
void vADC_A_B(){      vGBFunctionADC(&reg.A, &reg.F, reg.B);}
 8001634:	4902      	ldr	r1, [pc, #8]	; (8001640 <vADC_A_B+0xc>)
 8001636:	78ca      	ldrb	r2, [r1, #3]
 8001638:	1c48      	adds	r0, r1, #1
 800163a:	f001 bc79 	b.w	8002f30 <vGBFunctionADC>
 800163e:	bf00      	nop
 8001640:	24001664 	.word	0x24001664

08001644 <vADC_A_C>:
void vADC_A_C(){      vGBFunctionADC(&reg.A, &reg.F, reg.C);}
 8001644:	4902      	ldr	r1, [pc, #8]	; (8001650 <vADC_A_C+0xc>)
 8001646:	788a      	ldrb	r2, [r1, #2]
 8001648:	1c48      	adds	r0, r1, #1
 800164a:	f001 bc71 	b.w	8002f30 <vGBFunctionADC>
 800164e:	bf00      	nop
 8001650:	24001664 	.word	0x24001664

08001654 <vADC_A_D>:
void vADC_A_D(){      vGBFunctionADC(&reg.A, &reg.F, reg.D);}
 8001654:	4902      	ldr	r1, [pc, #8]	; (8001660 <vADC_A_D+0xc>)
 8001656:	794a      	ldrb	r2, [r1, #5]
 8001658:	1c48      	adds	r0, r1, #1
 800165a:	f001 bc69 	b.w	8002f30 <vGBFunctionADC>
 800165e:	bf00      	nop
 8001660:	24001664 	.word	0x24001664

08001664 <vADC_A_E>:
void vADC_A_E(){      vGBFunctionADC(&reg.A, &reg.F, reg.E);}
 8001664:	4902      	ldr	r1, [pc, #8]	; (8001670 <vADC_A_E+0xc>)
 8001666:	790a      	ldrb	r2, [r1, #4]
 8001668:	1c48      	adds	r0, r1, #1
 800166a:	f001 bc61 	b.w	8002f30 <vGBFunctionADC>
 800166e:	bf00      	nop
 8001670:	24001664 	.word	0x24001664

08001674 <vADC_A_H>:
void vADC_A_H(){      vGBFunctionADC(&reg.A, &reg.F, reg.H);}
 8001674:	4902      	ldr	r1, [pc, #8]	; (8001680 <vADC_A_H+0xc>)
 8001676:	79ca      	ldrb	r2, [r1, #7]
 8001678:	1c48      	adds	r0, r1, #1
 800167a:	f001 bc59 	b.w	8002f30 <vGBFunctionADC>
 800167e:	bf00      	nop
 8001680:	24001664 	.word	0x24001664

08001684 <vADC_A_L>:
void vADC_A_L(){      vGBFunctionADC(&reg.A, &reg.F, reg.L);}
 8001684:	4902      	ldr	r1, [pc, #8]	; (8001690 <vADC_A_L+0xc>)
 8001686:	798a      	ldrb	r2, [r1, #6]
 8001688:	1c48      	adds	r0, r1, #1
 800168a:	f001 bc51 	b.w	8002f30 <vGBFunctionADC>
 800168e:	bf00      	nop
 8001690:	24001664 	.word	0x24001664

08001694 <vADC_A_HL>:
void vADC_A_HL(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001694:	b510      	push	{r4, lr}
 8001696:	4c05      	ldr	r4, [pc, #20]	; (80016ac <vADC_A_HL+0x18>)
 8001698:	88e0      	ldrh	r0, [r4, #6]
 800169a:	f001 ffe3 	bl	8003664 <ucGBMemoryRead>
 800169e:	4621      	mov	r1, r4
 80016a0:	4602      	mov	r2, r0
 80016a2:	1c60      	adds	r0, r4, #1
 80016a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016a8:	f001 bc42 	b.w	8002f30 <vGBFunctionADC>
 80016ac:	24001664 	.word	0x24001664

080016b0 <vADC_A_A>:
void vADC_A_A(){      vGBFunctionADC(&reg.A, &reg.F, reg.A);}
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <vADC_A_A+0xc>)
 80016b2:	4601      	mov	r1, r0
 80016b4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80016b8:	f001 bc3a 	b.w	8002f30 <vGBFunctionADC>
 80016bc:	24001664 	.word	0x24001664

080016c0 <vADC_A_d8>:
void vADC_A_d8(){     vGBFunctionADC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80016c0:	b510      	push	{r4, lr}
 80016c2:	4c06      	ldr	r4, [pc, #24]	; (80016dc <vADC_A_d8+0x1c>)
 80016c4:	8960      	ldrh	r0, [r4, #10]
 80016c6:	3801      	subs	r0, #1
 80016c8:	b280      	uxth	r0, r0
 80016ca:	f001 ffcb 	bl	8003664 <ucGBMemoryRead>
 80016ce:	4621      	mov	r1, r4
 80016d0:	4602      	mov	r2, r0
 80016d2:	1c60      	adds	r0, r4, #1
 80016d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016d8:	f001 bc2a 	b.w	8002f30 <vGBFunctionADC>
 80016dc:	24001664 	.word	0x24001664

080016e0 <vSUB_B>:
void vSUB_B(){        vGBFunctionSUB(&reg.A, &reg.F, reg.B);}
 80016e0:	4902      	ldr	r1, [pc, #8]	; (80016ec <vSUB_B+0xc>)
 80016e2:	78ca      	ldrb	r2, [r1, #3]
 80016e4:	1c48      	adds	r0, r1, #1
 80016e6:	f001 bc55 	b.w	8002f94 <vGBFunctionSUB>
 80016ea:	bf00      	nop
 80016ec:	24001664 	.word	0x24001664

080016f0 <vSUB_C>:
void vSUB_C(){        vGBFunctionSUB(&reg.A, &reg.F, reg.C);}
 80016f0:	4902      	ldr	r1, [pc, #8]	; (80016fc <vSUB_C+0xc>)
 80016f2:	788a      	ldrb	r2, [r1, #2]
 80016f4:	1c48      	adds	r0, r1, #1
 80016f6:	f001 bc4d 	b.w	8002f94 <vGBFunctionSUB>
 80016fa:	bf00      	nop
 80016fc:	24001664 	.word	0x24001664

08001700 <vSUB_D>:
void vSUB_D(){        vGBFunctionSUB(&reg.A, &reg.F, reg.D);}
 8001700:	4902      	ldr	r1, [pc, #8]	; (800170c <vSUB_D+0xc>)
 8001702:	794a      	ldrb	r2, [r1, #5]
 8001704:	1c48      	adds	r0, r1, #1
 8001706:	f001 bc45 	b.w	8002f94 <vGBFunctionSUB>
 800170a:	bf00      	nop
 800170c:	24001664 	.word	0x24001664

08001710 <vSUB_E>:
void vSUB_E(){        vGBFunctionSUB(&reg.A, &reg.F, reg.E);}
 8001710:	4902      	ldr	r1, [pc, #8]	; (800171c <vSUB_E+0xc>)
 8001712:	790a      	ldrb	r2, [r1, #4]
 8001714:	1c48      	adds	r0, r1, #1
 8001716:	f001 bc3d 	b.w	8002f94 <vGBFunctionSUB>
 800171a:	bf00      	nop
 800171c:	24001664 	.word	0x24001664

08001720 <vSUB_H>:
void vSUB_H(){        vGBFunctionSUB(&reg.A, &reg.F, reg.H);}
 8001720:	4902      	ldr	r1, [pc, #8]	; (800172c <vSUB_H+0xc>)
 8001722:	79ca      	ldrb	r2, [r1, #7]
 8001724:	1c48      	adds	r0, r1, #1
 8001726:	f001 bc35 	b.w	8002f94 <vGBFunctionSUB>
 800172a:	bf00      	nop
 800172c:	24001664 	.word	0x24001664

08001730 <vSUB_L>:
void vSUB_L(){        vGBFunctionSUB(&reg.A, &reg.F, reg.L);}
 8001730:	4902      	ldr	r1, [pc, #8]	; (800173c <vSUB_L+0xc>)
 8001732:	798a      	ldrb	r2, [r1, #6]
 8001734:	1c48      	adds	r0, r1, #1
 8001736:	f001 bc2d 	b.w	8002f94 <vGBFunctionSUB>
 800173a:	bf00      	nop
 800173c:	24001664 	.word	0x24001664

08001740 <vSUB_HL>:
void vSUB_HL(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001740:	b510      	push	{r4, lr}
 8001742:	4c05      	ldr	r4, [pc, #20]	; (8001758 <vSUB_HL+0x18>)
 8001744:	88e0      	ldrh	r0, [r4, #6]
 8001746:	f001 ff8d 	bl	8003664 <ucGBMemoryRead>
 800174a:	4621      	mov	r1, r4
 800174c:	4602      	mov	r2, r0
 800174e:	1c60      	adds	r0, r4, #1
 8001750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001754:	f001 bc1e 	b.w	8002f94 <vGBFunctionSUB>
 8001758:	24001664 	.word	0x24001664

0800175c <vSUB_A>:
void vSUB_A(){        vGBFunctionSUB(&reg.A, &reg.F, reg.A);}
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <vSUB_A+0xc>)
 800175e:	4601      	mov	r1, r0
 8001760:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001764:	f001 bc16 	b.w	8002f94 <vGBFunctionSUB>
 8001768:	24001664 	.word	0x24001664

0800176c <vSUB_d8>:
void vSUB_d8(){       vGBFunctionSUB(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 800176c:	b510      	push	{r4, lr}
 800176e:	4c06      	ldr	r4, [pc, #24]	; (8001788 <vSUB_d8+0x1c>)
 8001770:	8960      	ldrh	r0, [r4, #10]
 8001772:	3801      	subs	r0, #1
 8001774:	b280      	uxth	r0, r0
 8001776:	f001 ff75 	bl	8003664 <ucGBMemoryRead>
 800177a:	4621      	mov	r1, r4
 800177c:	4602      	mov	r2, r0
 800177e:	1c60      	adds	r0, r4, #1
 8001780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001784:	f001 bc06 	b.w	8002f94 <vGBFunctionSUB>
 8001788:	24001664 	.word	0x24001664

0800178c <vSBC_A_B>:
void vSBC_A_B(){      vGBFunctionSBC(&reg.A, &reg.F, reg.B);}
 800178c:	4902      	ldr	r1, [pc, #8]	; (8001798 <vSBC_A_B+0xc>)
 800178e:	78ca      	ldrb	r2, [r1, #3]
 8001790:	1c48      	adds	r0, r1, #1
 8001792:	f001 bc35 	b.w	8003000 <vGBFunctionSBC>
 8001796:	bf00      	nop
 8001798:	24001664 	.word	0x24001664

0800179c <vSBC_A_C>:
void vSBC_A_C(){      vGBFunctionSBC(&reg.A, &reg.F, reg.C);}
 800179c:	4902      	ldr	r1, [pc, #8]	; (80017a8 <vSBC_A_C+0xc>)
 800179e:	788a      	ldrb	r2, [r1, #2]
 80017a0:	1c48      	adds	r0, r1, #1
 80017a2:	f001 bc2d 	b.w	8003000 <vGBFunctionSBC>
 80017a6:	bf00      	nop
 80017a8:	24001664 	.word	0x24001664

080017ac <vSBC_A_D>:
void vSBC_A_D(){      vGBFunctionSBC(&reg.A, &reg.F, reg.D);}
 80017ac:	4902      	ldr	r1, [pc, #8]	; (80017b8 <vSBC_A_D+0xc>)
 80017ae:	794a      	ldrb	r2, [r1, #5]
 80017b0:	1c48      	adds	r0, r1, #1
 80017b2:	f001 bc25 	b.w	8003000 <vGBFunctionSBC>
 80017b6:	bf00      	nop
 80017b8:	24001664 	.word	0x24001664

080017bc <vSBC_A_E>:
void vSBC_A_E(){      vGBFunctionSBC(&reg.A, &reg.F, reg.E);}
 80017bc:	4902      	ldr	r1, [pc, #8]	; (80017c8 <vSBC_A_E+0xc>)
 80017be:	790a      	ldrb	r2, [r1, #4]
 80017c0:	1c48      	adds	r0, r1, #1
 80017c2:	f001 bc1d 	b.w	8003000 <vGBFunctionSBC>
 80017c6:	bf00      	nop
 80017c8:	24001664 	.word	0x24001664

080017cc <vSBC_A_H>:
void vSBC_A_H(){      vGBFunctionSBC(&reg.A, &reg.F, reg.H);}
 80017cc:	4902      	ldr	r1, [pc, #8]	; (80017d8 <vSBC_A_H+0xc>)
 80017ce:	79ca      	ldrb	r2, [r1, #7]
 80017d0:	1c48      	adds	r0, r1, #1
 80017d2:	f001 bc15 	b.w	8003000 <vGBFunctionSBC>
 80017d6:	bf00      	nop
 80017d8:	24001664 	.word	0x24001664

080017dc <vSBC_A_L>:
void vSBC_A_L(){      vGBFunctionSBC(&reg.A, &reg.F, reg.L);}
 80017dc:	4902      	ldr	r1, [pc, #8]	; (80017e8 <vSBC_A_L+0xc>)
 80017de:	798a      	ldrb	r2, [r1, #6]
 80017e0:	1c48      	adds	r0, r1, #1
 80017e2:	f001 bc0d 	b.w	8003000 <vGBFunctionSBC>
 80017e6:	bf00      	nop
 80017e8:	24001664 	.word	0x24001664

080017ec <vSBC_A_HL>:
void vSBC_A_HL(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 80017ec:	b510      	push	{r4, lr}
 80017ee:	4c05      	ldr	r4, [pc, #20]	; (8001804 <vSBC_A_HL+0x18>)
 80017f0:	88e0      	ldrh	r0, [r4, #6]
 80017f2:	f001 ff37 	bl	8003664 <ucGBMemoryRead>
 80017f6:	4621      	mov	r1, r4
 80017f8:	4602      	mov	r2, r0
 80017fa:	1c60      	adds	r0, r4, #1
 80017fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001800:	f001 bbfe 	b.w	8003000 <vGBFunctionSBC>
 8001804:	24001664 	.word	0x24001664

08001808 <vSBC_A_A>:
void vSBC_A_A(){      vGBFunctionSBC(&reg.A, &reg.F, reg.A);}
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <vSBC_A_A+0xc>)
 800180a:	4601      	mov	r1, r0
 800180c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001810:	f001 bbf6 	b.w	8003000 <vGBFunctionSBC>
 8001814:	24001664 	.word	0x24001664

08001818 <vSBC_A_d8>:
void vSBC_A_d8(){     vGBFunctionSBC(&reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001818:	b510      	push	{r4, lr}
 800181a:	4c06      	ldr	r4, [pc, #24]	; (8001834 <vSBC_A_d8+0x1c>)
 800181c:	8960      	ldrh	r0, [r4, #10]
 800181e:	3801      	subs	r0, #1
 8001820:	b280      	uxth	r0, r0
 8001822:	f001 ff1f 	bl	8003664 <ucGBMemoryRead>
 8001826:	4621      	mov	r1, r4
 8001828:	4602      	mov	r2, r0
 800182a:	1c60      	adds	r0, r4, #1
 800182c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001830:	f001 bbe6 	b.w	8003000 <vGBFunctionSBC>
 8001834:	24001664 	.word	0x24001664

08001838 <vCP_B>:
void vCP_B(){         vGBFunctionCP(reg.A, &reg.F, reg.B);}
 8001838:	4902      	ldr	r1, [pc, #8]	; (8001844 <vCP_B+0xc>)
 800183a:	78ca      	ldrb	r2, [r1, #3]
 800183c:	7848      	ldrb	r0, [r1, #1]
 800183e:	f001 bc17 	b.w	8003070 <vGBFunctionCP>
 8001842:	bf00      	nop
 8001844:	24001664 	.word	0x24001664

08001848 <vCP_C>:
void vCP_C(){         vGBFunctionCP(reg.A, &reg.F, reg.C);}
 8001848:	4902      	ldr	r1, [pc, #8]	; (8001854 <vCP_C+0xc>)
 800184a:	788a      	ldrb	r2, [r1, #2]
 800184c:	7848      	ldrb	r0, [r1, #1]
 800184e:	f001 bc0f 	b.w	8003070 <vGBFunctionCP>
 8001852:	bf00      	nop
 8001854:	24001664 	.word	0x24001664

08001858 <vCP_D>:
void vCP_D(){         vGBFunctionCP(reg.A, &reg.F, reg.D);}
 8001858:	4902      	ldr	r1, [pc, #8]	; (8001864 <vCP_D+0xc>)
 800185a:	794a      	ldrb	r2, [r1, #5]
 800185c:	7848      	ldrb	r0, [r1, #1]
 800185e:	f001 bc07 	b.w	8003070 <vGBFunctionCP>
 8001862:	bf00      	nop
 8001864:	24001664 	.word	0x24001664

08001868 <vCP_E>:
void vCP_E(){         vGBFunctionCP(reg.A, &reg.F, reg.E);}
 8001868:	4902      	ldr	r1, [pc, #8]	; (8001874 <vCP_E+0xc>)
 800186a:	790a      	ldrb	r2, [r1, #4]
 800186c:	7848      	ldrb	r0, [r1, #1]
 800186e:	f001 bbff 	b.w	8003070 <vGBFunctionCP>
 8001872:	bf00      	nop
 8001874:	24001664 	.word	0x24001664

08001878 <vCP_H>:
void vCP_H(){         vGBFunctionCP(reg.A, &reg.F, reg.H);}
 8001878:	4902      	ldr	r1, [pc, #8]	; (8001884 <vCP_H+0xc>)
 800187a:	79ca      	ldrb	r2, [r1, #7]
 800187c:	7848      	ldrb	r0, [r1, #1]
 800187e:	f001 bbf7 	b.w	8003070 <vGBFunctionCP>
 8001882:	bf00      	nop
 8001884:	24001664 	.word	0x24001664

08001888 <vCP_L>:
void vCP_L(){         vGBFunctionCP(reg.A, &reg.F, reg.L);}
 8001888:	4902      	ldr	r1, [pc, #8]	; (8001894 <vCP_L+0xc>)
 800188a:	798a      	ldrb	r2, [r1, #6]
 800188c:	7848      	ldrb	r0, [r1, #1]
 800188e:	f001 bbef 	b.w	8003070 <vGBFunctionCP>
 8001892:	bf00      	nop
 8001894:	24001664 	.word	0x24001664

08001898 <vCP_HL>:
void vCP_HL(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.HL));}
 8001898:	b538      	push	{r3, r4, r5, lr}
 800189a:	4c06      	ldr	r4, [pc, #24]	; (80018b4 <vCP_HL+0x1c>)
 800189c:	7865      	ldrb	r5, [r4, #1]
 800189e:	88e0      	ldrh	r0, [r4, #6]
 80018a0:	f001 fee0 	bl	8003664 <ucGBMemoryRead>
 80018a4:	4621      	mov	r1, r4
 80018a6:	4602      	mov	r2, r0
 80018a8:	4628      	mov	r0, r5
 80018aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018ae:	f001 bbdf 	b.w	8003070 <vGBFunctionCP>
 80018b2:	bf00      	nop
 80018b4:	24001664 	.word	0x24001664

080018b8 <vCP_A>:
void vCP_A(){         vGBFunctionCP(reg.A, &reg.F, reg.A);}
 80018b8:	4902      	ldr	r1, [pc, #8]	; (80018c4 <vCP_A+0xc>)
 80018ba:	784a      	ldrb	r2, [r1, #1]
 80018bc:	4610      	mov	r0, r2
 80018be:	f001 bbd7 	b.w	8003070 <vGBFunctionCP>
 80018c2:	bf00      	nop
 80018c4:	24001664 	.word	0x24001664

080018c8 <vCP_d8>:
void vCP_d8(){        vGBFunctionCP(reg.A, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 80018c8:	b538      	push	{r3, r4, r5, lr}
 80018ca:	4c07      	ldr	r4, [pc, #28]	; (80018e8 <vCP_d8+0x20>)
 80018cc:	8960      	ldrh	r0, [r4, #10]
 80018ce:	7865      	ldrb	r5, [r4, #1]
 80018d0:	3801      	subs	r0, #1
 80018d2:	b280      	uxth	r0, r0
 80018d4:	f001 fec6 	bl	8003664 <ucGBMemoryRead>
 80018d8:	4621      	mov	r1, r4
 80018da:	4602      	mov	r2, r0
 80018dc:	4628      	mov	r0, r5
 80018de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018e2:	f001 bbc5 	b.w	8003070 <vGBFunctionCP>
 80018e6:	bf00      	nop
 80018e8:	24001664 	.word	0x24001664

080018ec <vRET>:
void vRET(){          vGBFunctionRET(&reg.SP, &reg.PC);}
 80018ec:	4901      	ldr	r1, [pc, #4]	; (80018f4 <vRET+0x8>)
 80018ee:	1e88      	subs	r0, r1, #2
 80018f0:	f001 bbdc 	b.w	80030ac <vGBFunctionRET>
 80018f4:	2400166e 	.word	0x2400166e

080018f8 <vRETI>:
void vRETI(){         ucInterruptMasterEnable = 1; vGBFunctionRET(&reg.SP, &reg.PC);}
 80018f8:	4903      	ldr	r1, [pc, #12]	; (8001908 <vRETI+0x10>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <vRETI+0x14>)
 80018fe:	1e88      	subs	r0, r1, #2
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	f001 bbd3 	b.w	80030ac <vGBFunctionRET>
 8001906:	bf00      	nop
 8001908:	2400166e 	.word	0x2400166e
 800190c:	2400109f 	.word	0x2400109f

08001910 <vPOP_BC>:
void vPOP_BC(){       vGBFunctionPOP(&reg.SP, &reg.BC);}
 8001910:	4901      	ldr	r1, [pc, #4]	; (8001918 <vPOP_BC+0x8>)
 8001912:	1d88      	adds	r0, r1, #6
 8001914:	f001 bbde 	b.w	80030d4 <vGBFunctionPOP>
 8001918:	24001666 	.word	0x24001666

0800191c <vPOP_DE>:
void vPOP_DE(){       vGBFunctionPOP(&reg.SP, &reg.DE);}
 800191c:	4901      	ldr	r1, [pc, #4]	; (8001924 <vPOP_DE+0x8>)
 800191e:	1d08      	adds	r0, r1, #4
 8001920:	f001 bbd8 	b.w	80030d4 <vGBFunctionPOP>
 8001924:	24001668 	.word	0x24001668

08001928 <vPOP_HL>:
void vPOP_HL(){       vGBFunctionPOP(&reg.SP, &reg.HL);}
 8001928:	4901      	ldr	r1, [pc, #4]	; (8001930 <vPOP_HL+0x8>)
 800192a:	1c88      	adds	r0, r1, #2
 800192c:	f001 bbd2 	b.w	80030d4 <vGBFunctionPOP>
 8001930:	2400166a 	.word	0x2400166a

08001934 <vPOP_AF>:
void vPOP_AF(){       vGBFunctionPOP(&reg.SP, &reg.AF); reg.AF &= 0xFFF0;}
 8001934:	b510      	push	{r4, lr}
 8001936:	4c05      	ldr	r4, [pc, #20]	; (800194c <vPOP_AF+0x18>)
 8001938:	4621      	mov	r1, r4
 800193a:	f104 0008 	add.w	r0, r4, #8
 800193e:	f001 fbc9 	bl	80030d4 <vGBFunctionPOP>
 8001942:	8823      	ldrh	r3, [r4, #0]
 8001944:	f023 030f 	bic.w	r3, r3, #15
 8001948:	8023      	strh	r3, [r4, #0]
 800194a:	bd10      	pop	{r4, pc}
 800194c:	24001664 	.word	0x24001664

08001950 <vJP_NZ_a16>:
void vJP_NZ_a16(){    customDuration = vGBFunctionJP_NZ_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001950:	b570      	push	{r4, r5, r6, lr}
 8001952:	4d0d      	ldr	r5, [pc, #52]	; (8001988 <vJP_NZ_a16+0x38>)
 8001954:	8968      	ldrh	r0, [r5, #10]
 8001956:	462c      	mov	r4, r5
 8001958:	3802      	subs	r0, #2
 800195a:	b280      	uxth	r0, r0
 800195c:	f001 fe82 	bl	8003664 <ucGBMemoryRead>
 8001960:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001964:	4606      	mov	r6, r0
 8001966:	1e58      	subs	r0, r3, #1
 8001968:	b280      	uxth	r0, r0
 800196a:	f001 fe7b 	bl	8003664 <ucGBMemoryRead>
 800196e:	4601      	mov	r1, r0
 8001970:	4630      	mov	r0, r6
 8001972:	f001 f937 	bl	8002be4 <concat_16bit_bigEndian>
 8001976:	4629      	mov	r1, r5
 8001978:	4602      	mov	r2, r0
 800197a:	4620      	mov	r0, r4
 800197c:	f001 fbac 	bl	80030d8 <vGBFunctionJP_NZ_a16>
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <vJP_NZ_a16+0x3c>)
 8001982:	7018      	strb	r0, [r3, #0]
 8001984:	bd70      	pop	{r4, r5, r6, pc}
 8001986:	bf00      	nop
 8001988:	24001664 	.word	0x24001664
 800198c:	24001094 	.word	0x24001094

08001990 <vCALL_NZ_a16>:
void vCALL_NZ_a16(){  customDuration = vGBFunctionCALL_NZ_a16(&reg.PC, &reg.F, &reg.SP);}
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <vCALL_NZ_a16+0x14>)
 8001992:	b508      	push	{r3, lr}
 8001994:	f1a2 0108 	sub.w	r1, r2, #8
 8001998:	1c90      	adds	r0, r2, #2
 800199a:	f001 fbb9 	bl	8003110 <vGBFunctionCALL_NZ_a16>
 800199e:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <vCALL_NZ_a16+0x18>)
 80019a0:	7018      	strb	r0, [r3, #0]
 80019a2:	bd08      	pop	{r3, pc}
 80019a4:	2400166c 	.word	0x2400166c
 80019a8:	24001094 	.word	0x24001094

080019ac <vPUSH_BC>:
void vPUSH_BC(){      vGBFunctionPUSH(&reg.SP, &reg.BC);}
 80019ac:	4901      	ldr	r1, [pc, #4]	; (80019b4 <vPUSH_BC+0x8>)
 80019ae:	1d88      	adds	r0, r1, #6
 80019b0:	f001 bb9a 	b.w	80030e8 <vGBFunctionPUSH>
 80019b4:	24001666 	.word	0x24001666

080019b8 <vRST_00H>:
void vRST_00H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0000;}
 80019b8:	b510      	push	{r4, lr}
 80019ba:	4c04      	ldr	r4, [pc, #16]	; (80019cc <vRST_00H+0x14>)
 80019bc:	4621      	mov	r1, r4
 80019be:	1ea0      	subs	r0, r4, #2
 80019c0:	f001 fb92 	bl	80030e8 <vGBFunctionPUSH>
 80019c4:	3c0a      	subs	r4, #10
 80019c6:	2300      	movs	r3, #0
 80019c8:	8163      	strh	r3, [r4, #10]
 80019ca:	bd10      	pop	{r4, pc}
 80019cc:	2400166e 	.word	0x2400166e

080019d0 <vCALL_a16>:
void vCALL_a16(){     vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1));}
 80019d0:	490b      	ldr	r1, [pc, #44]	; (8001a00 <vCALL_a16+0x30>)
 80019d2:	b538      	push	{r3, r4, r5, lr}
 80019d4:	460c      	mov	r4, r1
 80019d6:	1e88      	subs	r0, r1, #2
 80019d8:	f001 fb86 	bl	80030e8 <vGBFunctionPUSH>
 80019dc:	f834 090a 	ldrh.w	r0, [r4], #-10
 80019e0:	3802      	subs	r0, #2
 80019e2:	b280      	uxth	r0, r0
 80019e4:	f001 fe3e 	bl	8003664 <ucGBMemoryRead>
 80019e8:	8963      	ldrh	r3, [r4, #10]
 80019ea:	4605      	mov	r5, r0
 80019ec:	1e58      	subs	r0, r3, #1
 80019ee:	b280      	uxth	r0, r0
 80019f0:	f001 fe38 	bl	8003664 <ucGBMemoryRead>
 80019f4:	4601      	mov	r1, r0
 80019f6:	4628      	mov	r0, r5
 80019f8:	f001 f8f4 	bl	8002be4 <concat_16bit_bigEndian>
 80019fc:	8160      	strh	r0, [r4, #10]
 80019fe:	bd38      	pop	{r3, r4, r5, pc}
 8001a00:	2400166e 	.word	0x2400166e

08001a04 <vRST_08H>:
void vRST_08H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0008;}
 8001a04:	b510      	push	{r4, lr}
 8001a06:	4c04      	ldr	r4, [pc, #16]	; (8001a18 <vRST_08H+0x14>)
 8001a08:	4621      	mov	r1, r4
 8001a0a:	1ea0      	subs	r0, r4, #2
 8001a0c:	f001 fb6c 	bl	80030e8 <vGBFunctionPUSH>
 8001a10:	2308      	movs	r3, #8
 8001a12:	8023      	strh	r3, [r4, #0]
 8001a14:	bd10      	pop	{r4, pc}
 8001a16:	bf00      	nop
 8001a18:	2400166e 	.word	0x2400166e

08001a1c <vPUSH_DE>:
void vPUSH_DE(){      vGBFunctionPUSH(&reg.SP, &reg.DE);}
 8001a1c:	4901      	ldr	r1, [pc, #4]	; (8001a24 <vPUSH_DE+0x8>)
 8001a1e:	1d08      	adds	r0, r1, #4
 8001a20:	f001 bb62 	b.w	80030e8 <vGBFunctionPUSH>
 8001a24:	24001668 	.word	0x24001668

08001a28 <vRST_10H>:
void vRST_10H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0010;}
 8001a28:	b510      	push	{r4, lr}
 8001a2a:	4c04      	ldr	r4, [pc, #16]	; (8001a3c <vRST_10H+0x14>)
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	1ea0      	subs	r0, r4, #2
 8001a30:	f001 fb5a 	bl	80030e8 <vGBFunctionPUSH>
 8001a34:	2310      	movs	r3, #16
 8001a36:	8023      	strh	r3, [r4, #0]
 8001a38:	bd10      	pop	{r4, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2400166e 	.word	0x2400166e

08001a40 <vRST_18H>:
void vRST_18H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0018;}
 8001a40:	b510      	push	{r4, lr}
 8001a42:	4c04      	ldr	r4, [pc, #16]	; (8001a54 <vRST_18H+0x14>)
 8001a44:	4621      	mov	r1, r4
 8001a46:	1ea0      	subs	r0, r4, #2
 8001a48:	f001 fb4e 	bl	80030e8 <vGBFunctionPUSH>
 8001a4c:	2318      	movs	r3, #24
 8001a4e:	8023      	strh	r3, [r4, #0]
 8001a50:	bd10      	pop	{r4, pc}
 8001a52:	bf00      	nop
 8001a54:	2400166e 	.word	0x2400166e

08001a58 <vPUSH_HL>:
void vPUSH_HL(){      vGBFunctionPUSH(&reg.SP, &reg.HL);}
 8001a58:	4901      	ldr	r1, [pc, #4]	; (8001a60 <vPUSH_HL+0x8>)
 8001a5a:	1c88      	adds	r0, r1, #2
 8001a5c:	f001 bb44 	b.w	80030e8 <vGBFunctionPUSH>
 8001a60:	2400166a 	.word	0x2400166a

08001a64 <vRST20H>:
void vRST20H(){       vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0020;}
 8001a64:	b510      	push	{r4, lr}
 8001a66:	4c04      	ldr	r4, [pc, #16]	; (8001a78 <vRST20H+0x14>)
 8001a68:	4621      	mov	r1, r4
 8001a6a:	1ea0      	subs	r0, r4, #2
 8001a6c:	f001 fb3c 	bl	80030e8 <vGBFunctionPUSH>
 8001a70:	2320      	movs	r3, #32
 8001a72:	8023      	strh	r3, [r4, #0]
 8001a74:	bd10      	pop	{r4, pc}
 8001a76:	bf00      	nop
 8001a78:	2400166e 	.word	0x2400166e

08001a7c <vRST_28H>:
void vRST_28H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0028;}
 8001a7c:	b510      	push	{r4, lr}
 8001a7e:	4c04      	ldr	r4, [pc, #16]	; (8001a90 <vRST_28H+0x14>)
 8001a80:	4621      	mov	r1, r4
 8001a82:	1ea0      	subs	r0, r4, #2
 8001a84:	f001 fb30 	bl	80030e8 <vGBFunctionPUSH>
 8001a88:	2328      	movs	r3, #40	; 0x28
 8001a8a:	8023      	strh	r3, [r4, #0]
 8001a8c:	bd10      	pop	{r4, pc}
 8001a8e:	bf00      	nop
 8001a90:	2400166e 	.word	0x2400166e

08001a94 <vPUSH_AF>:
void vPUSH_AF(){      vGBFunctionPUSH(&reg.SP, &reg.AF);}
 8001a94:	4902      	ldr	r1, [pc, #8]	; (8001aa0 <vPUSH_AF+0xc>)
 8001a96:	f101 0008 	add.w	r0, r1, #8
 8001a9a:	f001 bb25 	b.w	80030e8 <vGBFunctionPUSH>
 8001a9e:	bf00      	nop
 8001aa0:	24001664 	.word	0x24001664

08001aa4 <vRST_30H>:
void vRST_30H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0030;}
 8001aa4:	b510      	push	{r4, lr}
 8001aa6:	4c04      	ldr	r4, [pc, #16]	; (8001ab8 <vRST_30H+0x14>)
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	1ea0      	subs	r0, r4, #2
 8001aac:	f001 fb1c 	bl	80030e8 <vGBFunctionPUSH>
 8001ab0:	2330      	movs	r3, #48	; 0x30
 8001ab2:	8023      	strh	r3, [r4, #0]
 8001ab4:	bd10      	pop	{r4, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2400166e 	.word	0x2400166e

08001abc <vRST_38H>:
void vRST_38H(){      vGBFunctionPUSH(&reg.SP, &reg.PC); reg.PC = 0x0038;}
 8001abc:	b510      	push	{r4, lr}
 8001abe:	4c04      	ldr	r4, [pc, #16]	; (8001ad0 <vRST_38H+0x14>)
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	1ea0      	subs	r0, r4, #2
 8001ac4:	f001 fb10 	bl	80030e8 <vGBFunctionPUSH>
 8001ac8:	2338      	movs	r3, #56	; 0x38
 8001aca:	8023      	strh	r3, [r4, #0]
 8001acc:	bd10      	pop	{r4, pc}
 8001ace:	bf00      	nop
 8001ad0:	2400166e 	.word	0x2400166e

08001ad4 <vJP_Z_a16>:
void vJP_Z_a16(){     customDuration = vGBFunctionJP_Z_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001ad4:	b570      	push	{r4, r5, r6, lr}
 8001ad6:	4d0d      	ldr	r5, [pc, #52]	; (8001b0c <vJP_Z_a16+0x38>)
 8001ad8:	8968      	ldrh	r0, [r5, #10]
 8001ada:	462c      	mov	r4, r5
 8001adc:	3802      	subs	r0, #2
 8001ade:	b280      	uxth	r0, r0
 8001ae0:	f001 fdc0 	bl	8003664 <ucGBMemoryRead>
 8001ae4:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001ae8:	4606      	mov	r6, r0
 8001aea:	1e58      	subs	r0, r3, #1
 8001aec:	b280      	uxth	r0, r0
 8001aee:	f001 fdb9 	bl	8003664 <ucGBMemoryRead>
 8001af2:	4601      	mov	r1, r0
 8001af4:	4630      	mov	r0, r6
 8001af6:	f001 f875 	bl	8002be4 <concat_16bit_bigEndian>
 8001afa:	4629      	mov	r1, r5
 8001afc:	4602      	mov	r2, r0
 8001afe:	4620      	mov	r0, r4
 8001b00:	f001 fb22 	bl	8003148 <vGBFunctionJP_Z_a16>
 8001b04:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <vJP_Z_a16+0x3c>)
 8001b06:	7018      	strb	r0, [r3, #0]
 8001b08:	bd70      	pop	{r4, r5, r6, pc}
 8001b0a:	bf00      	nop
 8001b0c:	24001664 	.word	0x24001664
 8001b10:	24001094 	.word	0x24001094

08001b14 <vCALL_Z_a16>:
void vCALL_Z_a16(){   customDuration = vGBFunctionCALL_Z_a16(&reg.PC, &reg.F, &reg.SP);}
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <vCALL_Z_a16+0x14>)
 8001b16:	b508      	push	{r3, lr}
 8001b18:	f1a2 0108 	sub.w	r1, r2, #8
 8001b1c:	1c90      	adds	r0, r2, #2
 8001b1e:	f001 fb1b 	bl	8003158 <vGBFunctionCALL_Z_a16>
 8001b22:	4b02      	ldr	r3, [pc, #8]	; (8001b2c <vCALL_Z_a16+0x18>)
 8001b24:	7018      	strb	r0, [r3, #0]
 8001b26:	bd08      	pop	{r3, pc}
 8001b28:	2400166c 	.word	0x2400166c
 8001b2c:	24001094 	.word	0x24001094

08001b30 <vJP_NC_a16>:
void vJP_NC_a16(){    customDuration = vGBFunctionJP_NC_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b30:	b570      	push	{r4, r5, r6, lr}
 8001b32:	4d0d      	ldr	r5, [pc, #52]	; (8001b68 <vJP_NC_a16+0x38>)
 8001b34:	8968      	ldrh	r0, [r5, #10]
 8001b36:	462c      	mov	r4, r5
 8001b38:	3802      	subs	r0, #2
 8001b3a:	b280      	uxth	r0, r0
 8001b3c:	f001 fd92 	bl	8003664 <ucGBMemoryRead>
 8001b40:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001b44:	4606      	mov	r6, r0
 8001b46:	1e58      	subs	r0, r3, #1
 8001b48:	b280      	uxth	r0, r0
 8001b4a:	f001 fd8b 	bl	8003664 <ucGBMemoryRead>
 8001b4e:	4601      	mov	r1, r0
 8001b50:	4630      	mov	r0, r6
 8001b52:	f001 f847 	bl	8002be4 <concat_16bit_bigEndian>
 8001b56:	4629      	mov	r1, r5
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f001 fb18 	bl	8003190 <vGBFunctionJP_NC_a16>
 8001b60:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <vJP_NC_a16+0x3c>)
 8001b62:	7018      	strb	r0, [r3, #0]
 8001b64:	bd70      	pop	{r4, r5, r6, pc}
 8001b66:	bf00      	nop
 8001b68:	24001664 	.word	0x24001664
 8001b6c:	24001094 	.word	0x24001094

08001b70 <vCALL_NC_a16>:
void vCALL_NC_a16(){  customDuration = vGBFunctionCALL_NC_a16(&reg.PC, &reg.F, &reg.SP);}
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <vCALL_NC_a16+0x14>)
 8001b72:	b508      	push	{r3, lr}
 8001b74:	f1a2 0108 	sub.w	r1, r2, #8
 8001b78:	1c90      	adds	r0, r2, #2
 8001b7a:	f001 fb11 	bl	80031a0 <vGBFunctionCALL_NC_a16>
 8001b7e:	4b02      	ldr	r3, [pc, #8]	; (8001b88 <vCALL_NC_a16+0x18>)
 8001b80:	7018      	strb	r0, [r3, #0]
 8001b82:	bd08      	pop	{r3, pc}
 8001b84:	2400166c 	.word	0x2400166c
 8001b88:	24001094 	.word	0x24001094

08001b8c <vJP_C_a16>:
void vJP_C_a16(){     customDuration = vGBFunctionJP_C_a16(&reg.PC, &reg.F, concat_16bit_bigEndian(ucGBMemoryRead(reg.PC - 2), ucGBMemoryRead(reg.PC - 1)));}
 8001b8c:	b570      	push	{r4, r5, r6, lr}
 8001b8e:	4d0d      	ldr	r5, [pc, #52]	; (8001bc4 <vJP_C_a16+0x38>)
 8001b90:	8968      	ldrh	r0, [r5, #10]
 8001b92:	462c      	mov	r4, r5
 8001b94:	3802      	subs	r0, #2
 8001b96:	b280      	uxth	r0, r0
 8001b98:	f001 fd64 	bl	8003664 <ucGBMemoryRead>
 8001b9c:	f834 3f0a 	ldrh.w	r3, [r4, #10]!
 8001ba0:	4606      	mov	r6, r0
 8001ba2:	1e58      	subs	r0, r3, #1
 8001ba4:	b280      	uxth	r0, r0
 8001ba6:	f001 fd5d 	bl	8003664 <ucGBMemoryRead>
 8001baa:	4601      	mov	r1, r0
 8001bac:	4630      	mov	r0, r6
 8001bae:	f001 f819 	bl	8002be4 <concat_16bit_bigEndian>
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f001 fb0e 	bl	80031d8 <vGBFunctionJP_C_a16>
 8001bbc:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <vJP_C_a16+0x3c>)
 8001bbe:	7018      	strb	r0, [r3, #0]
 8001bc0:	bd70      	pop	{r4, r5, r6, pc}
 8001bc2:	bf00      	nop
 8001bc4:	24001664 	.word	0x24001664
 8001bc8:	24001094 	.word	0x24001094

08001bcc <vCALL_C_a16>:
void vCALL_C_a16(){   customDuration = vGBFunctionCALL_C_a16(&reg.PC, &reg.F, &reg.SP);}
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <vCALL_C_a16+0x14>)
 8001bce:	b508      	push	{r3, lr}
 8001bd0:	f1a2 0108 	sub.w	r1, r2, #8
 8001bd4:	1c90      	adds	r0, r2, #2
 8001bd6:	f001 fb07 	bl	80031e8 <vGBFunctionCALL_C_a16>
 8001bda:	4b02      	ldr	r3, [pc, #8]	; (8001be4 <vCALL_C_a16+0x18>)
 8001bdc:	7018      	strb	r0, [r3, #0]
 8001bde:	bd08      	pop	{r3, pc}
 8001be0:	2400166c 	.word	0x2400166c
 8001be4:	24001094 	.word	0x24001094

08001be8 <vADDs_SP_r8>:
void vADDs_SP_r8(){   vGBFunctionADD_SP_r8(&reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001be8:	b510      	push	{r4, lr}
 8001bea:	4c07      	ldr	r4, [pc, #28]	; (8001c08 <vADDs_SP_r8+0x20>)
 8001bec:	8960      	ldrh	r0, [r4, #10]
 8001bee:	3801      	subs	r0, #1
 8001bf0:	b280      	uxth	r0, r0
 8001bf2:	f001 fd37 	bl	8003664 <ucGBMemoryRead>
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f104 0008 	add.w	r0, r4, #8
 8001bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c02:	f001 bb0d 	b.w	8003220 <vGBFunctionADD_SP_r8>
 8001c06:	bf00      	nop
 8001c08:	24001664 	.word	0x24001664

08001c0c <vLDs_HL_SP_r8>:
void vLDs_HL_SP_r8(){ vGBFunctionLD_HL_SP_r8(&reg.HL, &reg.SP, &reg.F, ucGBMemoryRead(reg.PC - 1));}
 8001c0c:	b510      	push	{r4, lr}
 8001c0e:	4c07      	ldr	r4, [pc, #28]	; (8001c2c <vLDs_HL_SP_r8+0x20>)
 8001c10:	8960      	ldrh	r0, [r4, #10]
 8001c12:	3801      	subs	r0, #1
 8001c14:	b280      	uxth	r0, r0
 8001c16:	f001 fd25 	bl	8003664 <ucGBMemoryRead>
 8001c1a:	4622      	mov	r2, r4
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f104 0108 	add.w	r1, r4, #8
 8001c22:	1da0      	adds	r0, r4, #6
 8001c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c28:	f001 bb22 	b.w	8003270 <vGBFunctionLD_HL_SP_r8>
 8001c2c:	24001664 	.word	0x24001664

08001c30 <vRLC_B>:
void vRLC_B(){        reg.B = ucGBFunctionRLC(reg.B, &reg.F);}
 8001c30:	b510      	push	{r4, lr}
 8001c32:	4c03      	ldr	r4, [pc, #12]	; (8001c40 <vRLC_B+0x10>)
 8001c34:	4621      	mov	r1, r4
 8001c36:	78e0      	ldrb	r0, [r4, #3]
 8001c38:	f001 fb42 	bl	80032c0 <ucGBFunctionRLC>
 8001c3c:	70e0      	strb	r0, [r4, #3]
 8001c3e:	bd10      	pop	{r4, pc}
 8001c40:	24001664 	.word	0x24001664

08001c44 <vRLC_C>:
void vRLC_C(){        reg.C = ucGBFunctionRLC(reg.C, &reg.F);}
 8001c44:	b510      	push	{r4, lr}
 8001c46:	4c03      	ldr	r4, [pc, #12]	; (8001c54 <vRLC_C+0x10>)
 8001c48:	4621      	mov	r1, r4
 8001c4a:	78a0      	ldrb	r0, [r4, #2]
 8001c4c:	f001 fb38 	bl	80032c0 <ucGBFunctionRLC>
 8001c50:	70a0      	strb	r0, [r4, #2]
 8001c52:	bd10      	pop	{r4, pc}
 8001c54:	24001664 	.word	0x24001664

08001c58 <vRLC_D>:
void vRLC_D(){        reg.D = ucGBFunctionRLC(reg.D, &reg.F);}
 8001c58:	b510      	push	{r4, lr}
 8001c5a:	4c03      	ldr	r4, [pc, #12]	; (8001c68 <vRLC_D+0x10>)
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	7960      	ldrb	r0, [r4, #5]
 8001c60:	f001 fb2e 	bl	80032c0 <ucGBFunctionRLC>
 8001c64:	7160      	strb	r0, [r4, #5]
 8001c66:	bd10      	pop	{r4, pc}
 8001c68:	24001664 	.word	0x24001664

08001c6c <vRLC_E>:
void vRLC_E(){        reg.E = ucGBFunctionRLC(reg.E, &reg.F);}
 8001c6c:	b510      	push	{r4, lr}
 8001c6e:	4c03      	ldr	r4, [pc, #12]	; (8001c7c <vRLC_E+0x10>)
 8001c70:	4621      	mov	r1, r4
 8001c72:	7920      	ldrb	r0, [r4, #4]
 8001c74:	f001 fb24 	bl	80032c0 <ucGBFunctionRLC>
 8001c78:	7120      	strb	r0, [r4, #4]
 8001c7a:	bd10      	pop	{r4, pc}
 8001c7c:	24001664 	.word	0x24001664

08001c80 <vRLC_H>:
void vRLC_H(){        reg.H = ucGBFunctionRLC(reg.H, &reg.F);}
 8001c80:	b510      	push	{r4, lr}
 8001c82:	4c03      	ldr	r4, [pc, #12]	; (8001c90 <vRLC_H+0x10>)
 8001c84:	4621      	mov	r1, r4
 8001c86:	79e0      	ldrb	r0, [r4, #7]
 8001c88:	f001 fb1a 	bl	80032c0 <ucGBFunctionRLC>
 8001c8c:	71e0      	strb	r0, [r4, #7]
 8001c8e:	bd10      	pop	{r4, pc}
 8001c90:	24001664 	.word	0x24001664

08001c94 <vRLC_L>:
void vRLC_L(){        reg.L = ucGBFunctionRLC(reg.L, &reg.F);}
 8001c94:	b510      	push	{r4, lr}
 8001c96:	4c03      	ldr	r4, [pc, #12]	; (8001ca4 <vRLC_L+0x10>)
 8001c98:	4621      	mov	r1, r4
 8001c9a:	79a0      	ldrb	r0, [r4, #6]
 8001c9c:	f001 fb10 	bl	80032c0 <ucGBFunctionRLC>
 8001ca0:	71a0      	strb	r0, [r4, #6]
 8001ca2:	bd10      	pop	{r4, pc}
 8001ca4:	24001664 	.word	0x24001664

08001ca8 <vRLC_HL>:
void vRLC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRLC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001ca8:	b538      	push	{r3, r4, r5, lr}
 8001caa:	4d07      	ldr	r5, [pc, #28]	; (8001cc8 <vRLC_HL+0x20>)
 8001cac:	88ec      	ldrh	r4, [r5, #6]
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f001 fcd8 	bl	8003664 <ucGBMemoryRead>
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f001 fb03 	bl	80032c0 <ucGBFunctionRLC>
 8001cba:	4601      	mov	r1, r0
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cc2:	f001 bce3 	b.w	800368c <vGBMemoryWrite>
 8001cc6:	bf00      	nop
 8001cc8:	24001664 	.word	0x24001664

08001ccc <vRLC_A>:
void vRLC_A(){        reg.A = ucGBFunctionRLC(reg.A, &reg.F);}
 8001ccc:	b510      	push	{r4, lr}
 8001cce:	4c03      	ldr	r4, [pc, #12]	; (8001cdc <vRLC_A+0x10>)
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	7860      	ldrb	r0, [r4, #1]
 8001cd4:	f001 faf4 	bl	80032c0 <ucGBFunctionRLC>
 8001cd8:	7060      	strb	r0, [r4, #1]
 8001cda:	bd10      	pop	{r4, pc}
 8001cdc:	24001664 	.word	0x24001664

08001ce0 <vRRC_B>:
void vRRC_B(){        reg.B = ucGBFunctionRRC(reg.B, &reg.F);}
 8001ce0:	b510      	push	{r4, lr}
 8001ce2:	4c03      	ldr	r4, [pc, #12]	; (8001cf0 <vRRC_B+0x10>)
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	78e0      	ldrb	r0, [r4, #3]
 8001ce8:	f001 fb06 	bl	80032f8 <ucGBFunctionRRC>
 8001cec:	70e0      	strb	r0, [r4, #3]
 8001cee:	bd10      	pop	{r4, pc}
 8001cf0:	24001664 	.word	0x24001664

08001cf4 <vRRC_C>:
void vRRC_C(){        reg.C = ucGBFunctionRRC(reg.C, &reg.F);}
 8001cf4:	b510      	push	{r4, lr}
 8001cf6:	4c03      	ldr	r4, [pc, #12]	; (8001d04 <vRRC_C+0x10>)
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	78a0      	ldrb	r0, [r4, #2]
 8001cfc:	f001 fafc 	bl	80032f8 <ucGBFunctionRRC>
 8001d00:	70a0      	strb	r0, [r4, #2]
 8001d02:	bd10      	pop	{r4, pc}
 8001d04:	24001664 	.word	0x24001664

08001d08 <vRRC_D>:
void vRRC_D(){        reg.D = ucGBFunctionRRC(reg.D, &reg.F);}
 8001d08:	b510      	push	{r4, lr}
 8001d0a:	4c03      	ldr	r4, [pc, #12]	; (8001d18 <vRRC_D+0x10>)
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	7960      	ldrb	r0, [r4, #5]
 8001d10:	f001 faf2 	bl	80032f8 <ucGBFunctionRRC>
 8001d14:	7160      	strb	r0, [r4, #5]
 8001d16:	bd10      	pop	{r4, pc}
 8001d18:	24001664 	.word	0x24001664

08001d1c <vRRC_E>:
void vRRC_E(){        reg.E = ucGBFunctionRRC(reg.E, &reg.F);}
 8001d1c:	b510      	push	{r4, lr}
 8001d1e:	4c03      	ldr	r4, [pc, #12]	; (8001d2c <vRRC_E+0x10>)
 8001d20:	4621      	mov	r1, r4
 8001d22:	7920      	ldrb	r0, [r4, #4]
 8001d24:	f001 fae8 	bl	80032f8 <ucGBFunctionRRC>
 8001d28:	7120      	strb	r0, [r4, #4]
 8001d2a:	bd10      	pop	{r4, pc}
 8001d2c:	24001664 	.word	0x24001664

08001d30 <vRRC_H>:
void vRRC_H(){        reg.H = ucGBFunctionRRC(reg.H, &reg.F);}
 8001d30:	b510      	push	{r4, lr}
 8001d32:	4c03      	ldr	r4, [pc, #12]	; (8001d40 <vRRC_H+0x10>)
 8001d34:	4621      	mov	r1, r4
 8001d36:	79e0      	ldrb	r0, [r4, #7]
 8001d38:	f001 fade 	bl	80032f8 <ucGBFunctionRRC>
 8001d3c:	71e0      	strb	r0, [r4, #7]
 8001d3e:	bd10      	pop	{r4, pc}
 8001d40:	24001664 	.word	0x24001664

08001d44 <vRRC_L>:
void vRRC_L(){        reg.L = ucGBFunctionRRC(reg.L, &reg.F);}
 8001d44:	b510      	push	{r4, lr}
 8001d46:	4c03      	ldr	r4, [pc, #12]	; (8001d54 <vRRC_L+0x10>)
 8001d48:	4621      	mov	r1, r4
 8001d4a:	79a0      	ldrb	r0, [r4, #6]
 8001d4c:	f001 fad4 	bl	80032f8 <ucGBFunctionRRC>
 8001d50:	71a0      	strb	r0, [r4, #6]
 8001d52:	bd10      	pop	{r4, pc}
 8001d54:	24001664 	.word	0x24001664

08001d58 <vRRC_HL>:
void vRRC_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionRRC(ucGBMemoryRead(reg.HL), &reg.F));}
 8001d58:	b538      	push	{r3, r4, r5, lr}
 8001d5a:	4d07      	ldr	r5, [pc, #28]	; (8001d78 <vRRC_HL+0x20>)
 8001d5c:	88ec      	ldrh	r4, [r5, #6]
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f001 fc80 	bl	8003664 <ucGBMemoryRead>
 8001d64:	4629      	mov	r1, r5
 8001d66:	f001 fac7 	bl	80032f8 <ucGBFunctionRRC>
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d72:	f001 bc8b 	b.w	800368c <vGBMemoryWrite>
 8001d76:	bf00      	nop
 8001d78:	24001664 	.word	0x24001664

08001d7c <vRRC_A>:
void vRRC_A(){        reg.A = ucGBFunctionRRC(reg.A, &reg.F);}
 8001d7c:	b510      	push	{r4, lr}
 8001d7e:	4c03      	ldr	r4, [pc, #12]	; (8001d8c <vRRC_A+0x10>)
 8001d80:	4621      	mov	r1, r4
 8001d82:	7860      	ldrb	r0, [r4, #1]
 8001d84:	f001 fab8 	bl	80032f8 <ucGBFunctionRRC>
 8001d88:	7060      	strb	r0, [r4, #1]
 8001d8a:	bd10      	pop	{r4, pc}
 8001d8c:	24001664 	.word	0x24001664

08001d90 <vRL_B>:
void vRL_B(){         reg.B = ucGBFunctionRL(reg.B, &reg.F);}
 8001d90:	b510      	push	{r4, lr}
 8001d92:	4c03      	ldr	r4, [pc, #12]	; (8001da0 <vRL_B+0x10>)
 8001d94:	4621      	mov	r1, r4
 8001d96:	78e0      	ldrb	r0, [r4, #3]
 8001d98:	f001 faca 	bl	8003330 <ucGBFunctionRL>
 8001d9c:	70e0      	strb	r0, [r4, #3]
 8001d9e:	bd10      	pop	{r4, pc}
 8001da0:	24001664 	.word	0x24001664

08001da4 <vRL_C>:
void vRL_C(){         reg.C = ucGBFunctionRL(reg.C, &reg.F);}
 8001da4:	b510      	push	{r4, lr}
 8001da6:	4c03      	ldr	r4, [pc, #12]	; (8001db4 <vRL_C+0x10>)
 8001da8:	4621      	mov	r1, r4
 8001daa:	78a0      	ldrb	r0, [r4, #2]
 8001dac:	f001 fac0 	bl	8003330 <ucGBFunctionRL>
 8001db0:	70a0      	strb	r0, [r4, #2]
 8001db2:	bd10      	pop	{r4, pc}
 8001db4:	24001664 	.word	0x24001664

08001db8 <vRL_D>:
void vRL_D(){         reg.D = ucGBFunctionRL(reg.D, &reg.F);}
 8001db8:	b510      	push	{r4, lr}
 8001dba:	4c03      	ldr	r4, [pc, #12]	; (8001dc8 <vRL_D+0x10>)
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	7960      	ldrb	r0, [r4, #5]
 8001dc0:	f001 fab6 	bl	8003330 <ucGBFunctionRL>
 8001dc4:	7160      	strb	r0, [r4, #5]
 8001dc6:	bd10      	pop	{r4, pc}
 8001dc8:	24001664 	.word	0x24001664

08001dcc <vRL_E>:
void vRL_E(){         reg.E = ucGBFunctionRL(reg.E, &reg.F);}
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	4c03      	ldr	r4, [pc, #12]	; (8001ddc <vRL_E+0x10>)
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	7920      	ldrb	r0, [r4, #4]
 8001dd4:	f001 faac 	bl	8003330 <ucGBFunctionRL>
 8001dd8:	7120      	strb	r0, [r4, #4]
 8001dda:	bd10      	pop	{r4, pc}
 8001ddc:	24001664 	.word	0x24001664

08001de0 <vRL_H>:
void vRL_H(){         reg.H = ucGBFunctionRL(reg.H, &reg.F);}
 8001de0:	b510      	push	{r4, lr}
 8001de2:	4c03      	ldr	r4, [pc, #12]	; (8001df0 <vRL_H+0x10>)
 8001de4:	4621      	mov	r1, r4
 8001de6:	79e0      	ldrb	r0, [r4, #7]
 8001de8:	f001 faa2 	bl	8003330 <ucGBFunctionRL>
 8001dec:	71e0      	strb	r0, [r4, #7]
 8001dee:	bd10      	pop	{r4, pc}
 8001df0:	24001664 	.word	0x24001664

08001df4 <vRL_L>:
void vRL_L(){         reg.L = ucGBFunctionRL(reg.L, &reg.F);}
 8001df4:	b510      	push	{r4, lr}
 8001df6:	4c03      	ldr	r4, [pc, #12]	; (8001e04 <vRL_L+0x10>)
 8001df8:	4621      	mov	r1, r4
 8001dfa:	79a0      	ldrb	r0, [r4, #6]
 8001dfc:	f001 fa98 	bl	8003330 <ucGBFunctionRL>
 8001e00:	71a0      	strb	r0, [r4, #6]
 8001e02:	bd10      	pop	{r4, pc}
 8001e04:	24001664 	.word	0x24001664

08001e08 <vRL_HL>:
void vRL_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8001e08:	b538      	push	{r3, r4, r5, lr}
 8001e0a:	4d07      	ldr	r5, [pc, #28]	; (8001e28 <vRL_HL+0x20>)
 8001e0c:	88ec      	ldrh	r4, [r5, #6]
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f001 fc28 	bl	8003664 <ucGBMemoryRead>
 8001e14:	4629      	mov	r1, r5
 8001e16:	f001 fa8b 	bl	8003330 <ucGBFunctionRL>
 8001e1a:	4601      	mov	r1, r0
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e22:	f001 bc33 	b.w	800368c <vGBMemoryWrite>
 8001e26:	bf00      	nop
 8001e28:	24001664 	.word	0x24001664

08001e2c <vRL_A>:
void vRL_A(){         reg.A = ucGBFunctionRL(reg.A, &reg.F);}
 8001e2c:	b510      	push	{r4, lr}
 8001e2e:	4c03      	ldr	r4, [pc, #12]	; (8001e3c <vRL_A+0x10>)
 8001e30:	4621      	mov	r1, r4
 8001e32:	7860      	ldrb	r0, [r4, #1]
 8001e34:	f001 fa7c 	bl	8003330 <ucGBFunctionRL>
 8001e38:	7060      	strb	r0, [r4, #1]
 8001e3a:	bd10      	pop	{r4, pc}
 8001e3c:	24001664 	.word	0x24001664

08001e40 <vRR_B>:
void vRR_B(){         reg.B = ucGBFunctionRR(reg.B, &reg.F);}
 8001e40:	b510      	push	{r4, lr}
 8001e42:	4c03      	ldr	r4, [pc, #12]	; (8001e50 <vRR_B+0x10>)
 8001e44:	4621      	mov	r1, r4
 8001e46:	78e0      	ldrb	r0, [r4, #3]
 8001e48:	f001 fa8c 	bl	8003364 <ucGBFunctionRR>
 8001e4c:	70e0      	strb	r0, [r4, #3]
 8001e4e:	bd10      	pop	{r4, pc}
 8001e50:	24001664 	.word	0x24001664

08001e54 <vRR_C>:
void vRR_C(){         reg.C = ucGBFunctionRR(reg.C, &reg.F);}
 8001e54:	b510      	push	{r4, lr}
 8001e56:	4c03      	ldr	r4, [pc, #12]	; (8001e64 <vRR_C+0x10>)
 8001e58:	4621      	mov	r1, r4
 8001e5a:	78a0      	ldrb	r0, [r4, #2]
 8001e5c:	f001 fa82 	bl	8003364 <ucGBFunctionRR>
 8001e60:	70a0      	strb	r0, [r4, #2]
 8001e62:	bd10      	pop	{r4, pc}
 8001e64:	24001664 	.word	0x24001664

08001e68 <vRR_D>:
void vRR_D(){         reg.D = ucGBFunctionRR(reg.D, &reg.F);}
 8001e68:	b510      	push	{r4, lr}
 8001e6a:	4c03      	ldr	r4, [pc, #12]	; (8001e78 <vRR_D+0x10>)
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	7960      	ldrb	r0, [r4, #5]
 8001e70:	f001 fa78 	bl	8003364 <ucGBFunctionRR>
 8001e74:	7160      	strb	r0, [r4, #5]
 8001e76:	bd10      	pop	{r4, pc}
 8001e78:	24001664 	.word	0x24001664

08001e7c <vRR_E>:
void vRR_E(){         reg.E = ucGBFunctionRR(reg.E, &reg.F);}
 8001e7c:	b510      	push	{r4, lr}
 8001e7e:	4c03      	ldr	r4, [pc, #12]	; (8001e8c <vRR_E+0x10>)
 8001e80:	4621      	mov	r1, r4
 8001e82:	7920      	ldrb	r0, [r4, #4]
 8001e84:	f001 fa6e 	bl	8003364 <ucGBFunctionRR>
 8001e88:	7120      	strb	r0, [r4, #4]
 8001e8a:	bd10      	pop	{r4, pc}
 8001e8c:	24001664 	.word	0x24001664

08001e90 <vRR_H>:
void vRR_H(){         reg.H = ucGBFunctionRR(reg.H, &reg.F);}
 8001e90:	b510      	push	{r4, lr}
 8001e92:	4c03      	ldr	r4, [pc, #12]	; (8001ea0 <vRR_H+0x10>)
 8001e94:	4621      	mov	r1, r4
 8001e96:	79e0      	ldrb	r0, [r4, #7]
 8001e98:	f001 fa64 	bl	8003364 <ucGBFunctionRR>
 8001e9c:	71e0      	strb	r0, [r4, #7]
 8001e9e:	bd10      	pop	{r4, pc}
 8001ea0:	24001664 	.word	0x24001664

08001ea4 <vRR_L>:
void vRR_L(){         reg.L = ucGBFunctionRR(reg.L, &reg.F);}
 8001ea4:	b510      	push	{r4, lr}
 8001ea6:	4c03      	ldr	r4, [pc, #12]	; (8001eb4 <vRR_L+0x10>)
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	79a0      	ldrb	r0, [r4, #6]
 8001eac:	f001 fa5a 	bl	8003364 <ucGBFunctionRR>
 8001eb0:	71a0      	strb	r0, [r4, #6]
 8001eb2:	bd10      	pop	{r4, pc}
 8001eb4:	24001664 	.word	0x24001664

08001eb8 <vRR_HL>:
void vRR_HL(){        vGBMemoryWrite(reg.HL, ucGBFunctionRR(ucGBMemoryRead(reg.HL), &reg.F));}
 8001eb8:	b538      	push	{r3, r4, r5, lr}
 8001eba:	4d07      	ldr	r5, [pc, #28]	; (8001ed8 <vRR_HL+0x20>)
 8001ebc:	88ec      	ldrh	r4, [r5, #6]
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f001 fbd0 	bl	8003664 <ucGBMemoryRead>
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	f001 fa4d 	bl	8003364 <ucGBFunctionRR>
 8001eca:	4601      	mov	r1, r0
 8001ecc:	4620      	mov	r0, r4
 8001ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ed2:	f001 bbdb 	b.w	800368c <vGBMemoryWrite>
 8001ed6:	bf00      	nop
 8001ed8:	24001664 	.word	0x24001664

08001edc <vRR_A>:
void vRR_A(){         reg.A = ucGBFunctionRR(reg.A, &reg.F);}
 8001edc:	b510      	push	{r4, lr}
 8001ede:	4c03      	ldr	r4, [pc, #12]	; (8001eec <vRR_A+0x10>)
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	7860      	ldrb	r0, [r4, #1]
 8001ee4:	f001 fa3e 	bl	8003364 <ucGBFunctionRR>
 8001ee8:	7060      	strb	r0, [r4, #1]
 8001eea:	bd10      	pop	{r4, pc}
 8001eec:	24001664 	.word	0x24001664

08001ef0 <vSLA_B>:
void vSLA_B(){        reg.B = ucGBFunctionSLA(reg.B, &reg.F);}
 8001ef0:	b510      	push	{r4, lr}
 8001ef2:	4c03      	ldr	r4, [pc, #12]	; (8001f00 <vSLA_B+0x10>)
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	78e0      	ldrb	r0, [r4, #3]
 8001ef8:	f001 fa50 	bl	800339c <ucGBFunctionSLA>
 8001efc:	70e0      	strb	r0, [r4, #3]
 8001efe:	bd10      	pop	{r4, pc}
 8001f00:	24001664 	.word	0x24001664

08001f04 <vSLA_C>:
void vSLA_C(){        reg.C = ucGBFunctionSLA(reg.C, &reg.F);}
 8001f04:	b510      	push	{r4, lr}
 8001f06:	4c03      	ldr	r4, [pc, #12]	; (8001f14 <vSLA_C+0x10>)
 8001f08:	4621      	mov	r1, r4
 8001f0a:	78a0      	ldrb	r0, [r4, #2]
 8001f0c:	f001 fa46 	bl	800339c <ucGBFunctionSLA>
 8001f10:	70a0      	strb	r0, [r4, #2]
 8001f12:	bd10      	pop	{r4, pc}
 8001f14:	24001664 	.word	0x24001664

08001f18 <vSLA_D>:
void vSLA_D(){        reg.D = ucGBFunctionSLA(reg.D, &reg.F);}
 8001f18:	b510      	push	{r4, lr}
 8001f1a:	4c03      	ldr	r4, [pc, #12]	; (8001f28 <vSLA_D+0x10>)
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	7960      	ldrb	r0, [r4, #5]
 8001f20:	f001 fa3c 	bl	800339c <ucGBFunctionSLA>
 8001f24:	7160      	strb	r0, [r4, #5]
 8001f26:	bd10      	pop	{r4, pc}
 8001f28:	24001664 	.word	0x24001664

08001f2c <vSLA_E>:
void vSLA_E(){        reg.E = ucGBFunctionSLA(reg.E, &reg.F);}
 8001f2c:	b510      	push	{r4, lr}
 8001f2e:	4c03      	ldr	r4, [pc, #12]	; (8001f3c <vSLA_E+0x10>)
 8001f30:	4621      	mov	r1, r4
 8001f32:	7920      	ldrb	r0, [r4, #4]
 8001f34:	f001 fa32 	bl	800339c <ucGBFunctionSLA>
 8001f38:	7120      	strb	r0, [r4, #4]
 8001f3a:	bd10      	pop	{r4, pc}
 8001f3c:	24001664 	.word	0x24001664

08001f40 <vSLA_H>:
void vSLA_H(){        reg.H = ucGBFunctionSLA(reg.H, &reg.F);}
 8001f40:	b510      	push	{r4, lr}
 8001f42:	4c03      	ldr	r4, [pc, #12]	; (8001f50 <vSLA_H+0x10>)
 8001f44:	4621      	mov	r1, r4
 8001f46:	79e0      	ldrb	r0, [r4, #7]
 8001f48:	f001 fa28 	bl	800339c <ucGBFunctionSLA>
 8001f4c:	71e0      	strb	r0, [r4, #7]
 8001f4e:	bd10      	pop	{r4, pc}
 8001f50:	24001664 	.word	0x24001664

08001f54 <vSLA_L>:
void vSLA_L(){        reg.L = ucGBFunctionSLA(reg.L, &reg.F);}
 8001f54:	b510      	push	{r4, lr}
 8001f56:	4c03      	ldr	r4, [pc, #12]	; (8001f64 <vSLA_L+0x10>)
 8001f58:	4621      	mov	r1, r4
 8001f5a:	79a0      	ldrb	r0, [r4, #6]
 8001f5c:	f001 fa1e 	bl	800339c <ucGBFunctionSLA>
 8001f60:	71a0      	strb	r0, [r4, #6]
 8001f62:	bd10      	pop	{r4, pc}
 8001f64:	24001664 	.word	0x24001664

08001f68 <vSLA_HL>:
void vSLA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSLA(ucGBMemoryRead(reg.HL), &reg.F));}
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4d07      	ldr	r5, [pc, #28]	; (8001f88 <vSLA_HL+0x20>)
 8001f6c:	88ec      	ldrh	r4, [r5, #6]
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f001 fb78 	bl	8003664 <ucGBMemoryRead>
 8001f74:	4629      	mov	r1, r5
 8001f76:	f001 fa11 	bl	800339c <ucGBFunctionSLA>
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f82:	f001 bb83 	b.w	800368c <vGBMemoryWrite>
 8001f86:	bf00      	nop
 8001f88:	24001664 	.word	0x24001664

08001f8c <vSLA_A>:
void vSLA_A(){        reg.A = ucGBFunctionSLA(reg.A, &reg.F);}
 8001f8c:	b510      	push	{r4, lr}
 8001f8e:	4c03      	ldr	r4, [pc, #12]	; (8001f9c <vSLA_A+0x10>)
 8001f90:	4621      	mov	r1, r4
 8001f92:	7860      	ldrb	r0, [r4, #1]
 8001f94:	f001 fa02 	bl	800339c <ucGBFunctionSLA>
 8001f98:	7060      	strb	r0, [r4, #1]
 8001f9a:	bd10      	pop	{r4, pc}
 8001f9c:	24001664 	.word	0x24001664

08001fa0 <vSRA_B>:
void vSRA_B(){        reg.B = ucGBFunctionSRA(reg.B, &reg.F);}
 8001fa0:	b510      	push	{r4, lr}
 8001fa2:	4c03      	ldr	r4, [pc, #12]	; (8001fb0 <vSRA_B+0x10>)
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	78e0      	ldrb	r0, [r4, #3]
 8001fa8:	f001 fa10 	bl	80033cc <ucGBFunctionSRA>
 8001fac:	70e0      	strb	r0, [r4, #3]
 8001fae:	bd10      	pop	{r4, pc}
 8001fb0:	24001664 	.word	0x24001664

08001fb4 <vSRA_C>:
void vSRA_C(){        reg.C = ucGBFunctionSRA(reg.C, &reg.F);}
 8001fb4:	b510      	push	{r4, lr}
 8001fb6:	4c03      	ldr	r4, [pc, #12]	; (8001fc4 <vSRA_C+0x10>)
 8001fb8:	4621      	mov	r1, r4
 8001fba:	78a0      	ldrb	r0, [r4, #2]
 8001fbc:	f001 fa06 	bl	80033cc <ucGBFunctionSRA>
 8001fc0:	70a0      	strb	r0, [r4, #2]
 8001fc2:	bd10      	pop	{r4, pc}
 8001fc4:	24001664 	.word	0x24001664

08001fc8 <vSRA_D>:
void vSRA_D(){        reg.D = ucGBFunctionSRA(reg.D, &reg.F);}
 8001fc8:	b510      	push	{r4, lr}
 8001fca:	4c03      	ldr	r4, [pc, #12]	; (8001fd8 <vSRA_D+0x10>)
 8001fcc:	4621      	mov	r1, r4
 8001fce:	7960      	ldrb	r0, [r4, #5]
 8001fd0:	f001 f9fc 	bl	80033cc <ucGBFunctionSRA>
 8001fd4:	7160      	strb	r0, [r4, #5]
 8001fd6:	bd10      	pop	{r4, pc}
 8001fd8:	24001664 	.word	0x24001664

08001fdc <vSRA_E>:
void vSRA_E(){        reg.E = ucGBFunctionSRA(reg.E, &reg.F);}
 8001fdc:	b510      	push	{r4, lr}
 8001fde:	4c03      	ldr	r4, [pc, #12]	; (8001fec <vSRA_E+0x10>)
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	7920      	ldrb	r0, [r4, #4]
 8001fe4:	f001 f9f2 	bl	80033cc <ucGBFunctionSRA>
 8001fe8:	7120      	strb	r0, [r4, #4]
 8001fea:	bd10      	pop	{r4, pc}
 8001fec:	24001664 	.word	0x24001664

08001ff0 <vSRA_H>:
void vSRA_H(){        reg.H = ucGBFunctionSRA(reg.H, &reg.F);}
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	4c03      	ldr	r4, [pc, #12]	; (8002000 <vSRA_H+0x10>)
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	79e0      	ldrb	r0, [r4, #7]
 8001ff8:	f001 f9e8 	bl	80033cc <ucGBFunctionSRA>
 8001ffc:	71e0      	strb	r0, [r4, #7]
 8001ffe:	bd10      	pop	{r4, pc}
 8002000:	24001664 	.word	0x24001664

08002004 <vSRA_L>:
void vSRA_L(){        reg.L = ucGBFunctionSRA(reg.L, &reg.F);}
 8002004:	b510      	push	{r4, lr}
 8002006:	4c03      	ldr	r4, [pc, #12]	; (8002014 <vSRA_L+0x10>)
 8002008:	4621      	mov	r1, r4
 800200a:	79a0      	ldrb	r0, [r4, #6]
 800200c:	f001 f9de 	bl	80033cc <ucGBFunctionSRA>
 8002010:	71a0      	strb	r0, [r4, #6]
 8002012:	bd10      	pop	{r4, pc}
 8002014:	24001664 	.word	0x24001664

08002018 <vSRA_HL>:
void vSRA_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRA(ucGBMemoryRead(reg.HL), &reg.F));}
 8002018:	b538      	push	{r3, r4, r5, lr}
 800201a:	4d07      	ldr	r5, [pc, #28]	; (8002038 <vSRA_HL+0x20>)
 800201c:	88ec      	ldrh	r4, [r5, #6]
 800201e:	4620      	mov	r0, r4
 8002020:	f001 fb20 	bl	8003664 <ucGBMemoryRead>
 8002024:	4629      	mov	r1, r5
 8002026:	f001 f9d1 	bl	80033cc <ucGBFunctionSRA>
 800202a:	4601      	mov	r1, r0
 800202c:	4620      	mov	r0, r4
 800202e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002032:	f001 bb2b 	b.w	800368c <vGBMemoryWrite>
 8002036:	bf00      	nop
 8002038:	24001664 	.word	0x24001664

0800203c <vSRA_A>:
void vSRA_A(){        reg.A = ucGBFunctionSRA(reg.A, &reg.F);}
 800203c:	b510      	push	{r4, lr}
 800203e:	4c03      	ldr	r4, [pc, #12]	; (800204c <vSRA_A+0x10>)
 8002040:	4621      	mov	r1, r4
 8002042:	7860      	ldrb	r0, [r4, #1]
 8002044:	f001 f9c2 	bl	80033cc <ucGBFunctionSRA>
 8002048:	7060      	strb	r0, [r4, #1]
 800204a:	bd10      	pop	{r4, pc}
 800204c:	24001664 	.word	0x24001664

08002050 <vSWAP_B>:
void vSWAP_B(){       reg.B = ucGBFunctionSWAP(reg.B, &reg.F);}
 8002050:	b510      	push	{r4, lr}
 8002052:	4c03      	ldr	r4, [pc, #12]	; (8002060 <vSWAP_B+0x10>)
 8002054:	4621      	mov	r1, r4
 8002056:	78e0      	ldrb	r0, [r4, #3]
 8002058:	f001 f9d2 	bl	8003400 <ucGBFunctionSWAP>
 800205c:	70e0      	strb	r0, [r4, #3]
 800205e:	bd10      	pop	{r4, pc}
 8002060:	24001664 	.word	0x24001664

08002064 <vSWAP_C>:
void vSWAP_C(){       reg.C = ucGBFunctionSWAP(reg.C, &reg.F);}
 8002064:	b510      	push	{r4, lr}
 8002066:	4c03      	ldr	r4, [pc, #12]	; (8002074 <vSWAP_C+0x10>)
 8002068:	4621      	mov	r1, r4
 800206a:	78a0      	ldrb	r0, [r4, #2]
 800206c:	f001 f9c8 	bl	8003400 <ucGBFunctionSWAP>
 8002070:	70a0      	strb	r0, [r4, #2]
 8002072:	bd10      	pop	{r4, pc}
 8002074:	24001664 	.word	0x24001664

08002078 <vSWAP_D>:
void vSWAP_D(){       reg.D = ucGBFunctionSWAP(reg.D, &reg.F);}
 8002078:	b510      	push	{r4, lr}
 800207a:	4c03      	ldr	r4, [pc, #12]	; (8002088 <vSWAP_D+0x10>)
 800207c:	4621      	mov	r1, r4
 800207e:	7960      	ldrb	r0, [r4, #5]
 8002080:	f001 f9be 	bl	8003400 <ucGBFunctionSWAP>
 8002084:	7160      	strb	r0, [r4, #5]
 8002086:	bd10      	pop	{r4, pc}
 8002088:	24001664 	.word	0x24001664

0800208c <vSWAP_E>:
void vSWAP_E(){       reg.E = ucGBFunctionSWAP(reg.E, &reg.F);}
 800208c:	b510      	push	{r4, lr}
 800208e:	4c03      	ldr	r4, [pc, #12]	; (800209c <vSWAP_E+0x10>)
 8002090:	4621      	mov	r1, r4
 8002092:	7920      	ldrb	r0, [r4, #4]
 8002094:	f001 f9b4 	bl	8003400 <ucGBFunctionSWAP>
 8002098:	7120      	strb	r0, [r4, #4]
 800209a:	bd10      	pop	{r4, pc}
 800209c:	24001664 	.word	0x24001664

080020a0 <vSWAP_H>:
void vSWAP_H(){       reg.H = ucGBFunctionSWAP(reg.H, &reg.F);}
 80020a0:	b510      	push	{r4, lr}
 80020a2:	4c03      	ldr	r4, [pc, #12]	; (80020b0 <vSWAP_H+0x10>)
 80020a4:	4621      	mov	r1, r4
 80020a6:	79e0      	ldrb	r0, [r4, #7]
 80020a8:	f001 f9aa 	bl	8003400 <ucGBFunctionSWAP>
 80020ac:	71e0      	strb	r0, [r4, #7]
 80020ae:	bd10      	pop	{r4, pc}
 80020b0:	24001664 	.word	0x24001664

080020b4 <vSWAP_L>:
void vSWAP_L(){       reg.L = ucGBFunctionSWAP(reg.L, &reg.F);}
 80020b4:	b510      	push	{r4, lr}
 80020b6:	4c03      	ldr	r4, [pc, #12]	; (80020c4 <vSWAP_L+0x10>)
 80020b8:	4621      	mov	r1, r4
 80020ba:	79a0      	ldrb	r0, [r4, #6]
 80020bc:	f001 f9a0 	bl	8003400 <ucGBFunctionSWAP>
 80020c0:	71a0      	strb	r0, [r4, #6]
 80020c2:	bd10      	pop	{r4, pc}
 80020c4:	24001664 	.word	0x24001664

080020c8 <vSWAP_HL>:
void vSWAP_HL(){      vGBMemoryWrite(reg.HL, ucGBFunctionSWAP(ucGBMemoryRead(reg.HL), &reg.F));}
 80020c8:	b538      	push	{r3, r4, r5, lr}
 80020ca:	4d07      	ldr	r5, [pc, #28]	; (80020e8 <vSWAP_HL+0x20>)
 80020cc:	88ec      	ldrh	r4, [r5, #6]
 80020ce:	4620      	mov	r0, r4
 80020d0:	f001 fac8 	bl	8003664 <ucGBMemoryRead>
 80020d4:	4629      	mov	r1, r5
 80020d6:	f001 f993 	bl	8003400 <ucGBFunctionSWAP>
 80020da:	4601      	mov	r1, r0
 80020dc:	4620      	mov	r0, r4
 80020de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020e2:	f001 bad3 	b.w	800368c <vGBMemoryWrite>
 80020e6:	bf00      	nop
 80020e8:	24001664 	.word	0x24001664

080020ec <vSWAP_A>:
void vSWAP_A(){       reg.A = ucGBFunctionSWAP(reg.A, &reg.F);}
 80020ec:	b510      	push	{r4, lr}
 80020ee:	4c03      	ldr	r4, [pc, #12]	; (80020fc <vSWAP_A+0x10>)
 80020f0:	4621      	mov	r1, r4
 80020f2:	7860      	ldrb	r0, [r4, #1]
 80020f4:	f001 f984 	bl	8003400 <ucGBFunctionSWAP>
 80020f8:	7060      	strb	r0, [r4, #1]
 80020fa:	bd10      	pop	{r4, pc}
 80020fc:	24001664 	.word	0x24001664

08002100 <vSRL_B>:
void vSRL_B(){        reg.B = ucGBFunctionSRL(reg.B, &reg.F);}
 8002100:	b510      	push	{r4, lr}
 8002102:	4c03      	ldr	r4, [pc, #12]	; (8002110 <vSRL_B+0x10>)
 8002104:	4621      	mov	r1, r4
 8002106:	78e0      	ldrb	r0, [r4, #3]
 8002108:	f001 f990 	bl	800342c <ucGBFunctionSRL>
 800210c:	70e0      	strb	r0, [r4, #3]
 800210e:	bd10      	pop	{r4, pc}
 8002110:	24001664 	.word	0x24001664

08002114 <vSRL_C>:
void vSRL_C(){        reg.C = ucGBFunctionSRL(reg.C, &reg.F);}
 8002114:	b510      	push	{r4, lr}
 8002116:	4c03      	ldr	r4, [pc, #12]	; (8002124 <vSRL_C+0x10>)
 8002118:	4621      	mov	r1, r4
 800211a:	78a0      	ldrb	r0, [r4, #2]
 800211c:	f001 f986 	bl	800342c <ucGBFunctionSRL>
 8002120:	70a0      	strb	r0, [r4, #2]
 8002122:	bd10      	pop	{r4, pc}
 8002124:	24001664 	.word	0x24001664

08002128 <vSRL_D>:
void vSRL_D(){        reg.D = ucGBFunctionSRL(reg.D, &reg.F);}
 8002128:	b510      	push	{r4, lr}
 800212a:	4c03      	ldr	r4, [pc, #12]	; (8002138 <vSRL_D+0x10>)
 800212c:	4621      	mov	r1, r4
 800212e:	7960      	ldrb	r0, [r4, #5]
 8002130:	f001 f97c 	bl	800342c <ucGBFunctionSRL>
 8002134:	7160      	strb	r0, [r4, #5]
 8002136:	bd10      	pop	{r4, pc}
 8002138:	24001664 	.word	0x24001664

0800213c <vSRL_E>:
void vSRL_E(){        reg.E = ucGBFunctionSRL(reg.E, &reg.F);}
 800213c:	b510      	push	{r4, lr}
 800213e:	4c03      	ldr	r4, [pc, #12]	; (800214c <vSRL_E+0x10>)
 8002140:	4621      	mov	r1, r4
 8002142:	7920      	ldrb	r0, [r4, #4]
 8002144:	f001 f972 	bl	800342c <ucGBFunctionSRL>
 8002148:	7120      	strb	r0, [r4, #4]
 800214a:	bd10      	pop	{r4, pc}
 800214c:	24001664 	.word	0x24001664

08002150 <vSRL_H>:
void vSRL_H(){        reg.H = ucGBFunctionSRL(reg.H, &reg.F);}
 8002150:	b510      	push	{r4, lr}
 8002152:	4c03      	ldr	r4, [pc, #12]	; (8002160 <vSRL_H+0x10>)
 8002154:	4621      	mov	r1, r4
 8002156:	79e0      	ldrb	r0, [r4, #7]
 8002158:	f001 f968 	bl	800342c <ucGBFunctionSRL>
 800215c:	71e0      	strb	r0, [r4, #7]
 800215e:	bd10      	pop	{r4, pc}
 8002160:	24001664 	.word	0x24001664

08002164 <vSRL_L>:
void vSRL_L(){        reg.L = ucGBFunctionSRL(reg.L, &reg.F);}
 8002164:	b510      	push	{r4, lr}
 8002166:	4c03      	ldr	r4, [pc, #12]	; (8002174 <vSRL_L+0x10>)
 8002168:	4621      	mov	r1, r4
 800216a:	79a0      	ldrb	r0, [r4, #6]
 800216c:	f001 f95e 	bl	800342c <ucGBFunctionSRL>
 8002170:	71a0      	strb	r0, [r4, #6]
 8002172:	bd10      	pop	{r4, pc}
 8002174:	24001664 	.word	0x24001664

08002178 <vSRL_HL>:
void vSRL_HL(){       vGBMemoryWrite(reg.HL, ucGBFunctionSRL(ucGBMemoryRead(reg.HL), &reg.F));}
 8002178:	b538      	push	{r3, r4, r5, lr}
 800217a:	4d07      	ldr	r5, [pc, #28]	; (8002198 <vSRL_HL+0x20>)
 800217c:	88ec      	ldrh	r4, [r5, #6]
 800217e:	4620      	mov	r0, r4
 8002180:	f001 fa70 	bl	8003664 <ucGBMemoryRead>
 8002184:	4629      	mov	r1, r5
 8002186:	f001 f951 	bl	800342c <ucGBFunctionSRL>
 800218a:	4601      	mov	r1, r0
 800218c:	4620      	mov	r0, r4
 800218e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002192:	f001 ba7b 	b.w	800368c <vGBMemoryWrite>
 8002196:	bf00      	nop
 8002198:	24001664 	.word	0x24001664

0800219c <vSRL_A>:
void vSRL_A(){        reg.A = ucGBFunctionSRL(reg.A, &reg.F);}
 800219c:	b510      	push	{r4, lr}
 800219e:	4c03      	ldr	r4, [pc, #12]	; (80021ac <vSRL_A+0x10>)
 80021a0:	4621      	mov	r1, r4
 80021a2:	7860      	ldrb	r0, [r4, #1]
 80021a4:	f001 f942 	bl	800342c <ucGBFunctionSRL>
 80021a8:	7060      	strb	r0, [r4, #1]
 80021aa:	bd10      	pop	{r4, pc}
 80021ac:	24001664 	.word	0x24001664

080021b0 <vBIT_0_B>:
void vBIT_0_B(){      vGBFunctionBIT(reg.B, 0, &reg.F);}
 80021b0:	4a02      	ldr	r2, [pc, #8]	; (80021bc <vBIT_0_B+0xc>)
 80021b2:	2100      	movs	r1, #0
 80021b4:	78d0      	ldrb	r0, [r2, #3]
 80021b6:	f001 b94d 	b.w	8003454 <vGBFunctionBIT>
 80021ba:	bf00      	nop
 80021bc:	24001664 	.word	0x24001664

080021c0 <vBIT_0_C>:
void vBIT_0_C(){      vGBFunctionBIT(reg.C, 0, &reg.F);}
 80021c0:	4a02      	ldr	r2, [pc, #8]	; (80021cc <vBIT_0_C+0xc>)
 80021c2:	2100      	movs	r1, #0
 80021c4:	7890      	ldrb	r0, [r2, #2]
 80021c6:	f001 b945 	b.w	8003454 <vGBFunctionBIT>
 80021ca:	bf00      	nop
 80021cc:	24001664 	.word	0x24001664

080021d0 <vBIT_0_D>:
void vBIT_0_D(){      vGBFunctionBIT(reg.D, 0, &reg.F);}
 80021d0:	4a02      	ldr	r2, [pc, #8]	; (80021dc <vBIT_0_D+0xc>)
 80021d2:	2100      	movs	r1, #0
 80021d4:	7950      	ldrb	r0, [r2, #5]
 80021d6:	f001 b93d 	b.w	8003454 <vGBFunctionBIT>
 80021da:	bf00      	nop
 80021dc:	24001664 	.word	0x24001664

080021e0 <vBIT_0_E>:
void vBIT_0_E(){      vGBFunctionBIT(reg.E, 0, &reg.F);}
 80021e0:	4a02      	ldr	r2, [pc, #8]	; (80021ec <vBIT_0_E+0xc>)
 80021e2:	2100      	movs	r1, #0
 80021e4:	7910      	ldrb	r0, [r2, #4]
 80021e6:	f001 b935 	b.w	8003454 <vGBFunctionBIT>
 80021ea:	bf00      	nop
 80021ec:	24001664 	.word	0x24001664

080021f0 <vBIT_0_H>:
void vBIT_0_H(){      vGBFunctionBIT(reg.H, 0, &reg.F);}
 80021f0:	4a02      	ldr	r2, [pc, #8]	; (80021fc <vBIT_0_H+0xc>)
 80021f2:	2100      	movs	r1, #0
 80021f4:	79d0      	ldrb	r0, [r2, #7]
 80021f6:	f001 b92d 	b.w	8003454 <vGBFunctionBIT>
 80021fa:	bf00      	nop
 80021fc:	24001664 	.word	0x24001664

08002200 <vBIT_0_L>:
void vBIT_0_L(){      vGBFunctionBIT(reg.L, 0, &reg.F);}
 8002200:	4a02      	ldr	r2, [pc, #8]	; (800220c <vBIT_0_L+0xc>)
 8002202:	2100      	movs	r1, #0
 8002204:	7990      	ldrb	r0, [r2, #6]
 8002206:	f001 b925 	b.w	8003454 <vGBFunctionBIT>
 800220a:	bf00      	nop
 800220c:	24001664 	.word	0x24001664

08002210 <vBIT_0_HL>:
void vBIT_0_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 0, &reg.F);}
 8002210:	b510      	push	{r4, lr}
 8002212:	4c05      	ldr	r4, [pc, #20]	; (8002228 <vBIT_0_HL+0x18>)
 8002214:	88e0      	ldrh	r0, [r4, #6]
 8002216:	f001 fa25 	bl	8003664 <ucGBMemoryRead>
 800221a:	4622      	mov	r2, r4
 800221c:	2100      	movs	r1, #0
 800221e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002222:	f001 b917 	b.w	8003454 <vGBFunctionBIT>
 8002226:	bf00      	nop
 8002228:	24001664 	.word	0x24001664

0800222c <vBIT_0_A>:
void vBIT_0_A(){      vGBFunctionBIT(reg.A, 0, &reg.F);}
 800222c:	4a02      	ldr	r2, [pc, #8]	; (8002238 <vBIT_0_A+0xc>)
 800222e:	2100      	movs	r1, #0
 8002230:	7850      	ldrb	r0, [r2, #1]
 8002232:	f001 b90f 	b.w	8003454 <vGBFunctionBIT>
 8002236:	bf00      	nop
 8002238:	24001664 	.word	0x24001664

0800223c <vBIT_1_B>:
void vBIT_1_B(){      vGBFunctionBIT(reg.B, 1, &reg.F);}
 800223c:	4a02      	ldr	r2, [pc, #8]	; (8002248 <vBIT_1_B+0xc>)
 800223e:	2101      	movs	r1, #1
 8002240:	78d0      	ldrb	r0, [r2, #3]
 8002242:	f001 b907 	b.w	8003454 <vGBFunctionBIT>
 8002246:	bf00      	nop
 8002248:	24001664 	.word	0x24001664

0800224c <vBIT_1_C>:
void vBIT_1_C(){      vGBFunctionBIT(reg.C, 1, &reg.F);}
 800224c:	4a02      	ldr	r2, [pc, #8]	; (8002258 <vBIT_1_C+0xc>)
 800224e:	2101      	movs	r1, #1
 8002250:	7890      	ldrb	r0, [r2, #2]
 8002252:	f001 b8ff 	b.w	8003454 <vGBFunctionBIT>
 8002256:	bf00      	nop
 8002258:	24001664 	.word	0x24001664

0800225c <vBIT_1_D>:
void vBIT_1_D(){      vGBFunctionBIT(reg.D, 1, &reg.F);}
 800225c:	4a02      	ldr	r2, [pc, #8]	; (8002268 <vBIT_1_D+0xc>)
 800225e:	2101      	movs	r1, #1
 8002260:	7950      	ldrb	r0, [r2, #5]
 8002262:	f001 b8f7 	b.w	8003454 <vGBFunctionBIT>
 8002266:	bf00      	nop
 8002268:	24001664 	.word	0x24001664

0800226c <vBIT_1_E>:
void vBIT_1_E(){      vGBFunctionBIT(reg.E, 1, &reg.F);}
 800226c:	4a02      	ldr	r2, [pc, #8]	; (8002278 <vBIT_1_E+0xc>)
 800226e:	2101      	movs	r1, #1
 8002270:	7910      	ldrb	r0, [r2, #4]
 8002272:	f001 b8ef 	b.w	8003454 <vGBFunctionBIT>
 8002276:	bf00      	nop
 8002278:	24001664 	.word	0x24001664

0800227c <vBIT_1_H>:
void vBIT_1_H(){      vGBFunctionBIT(reg.H, 1, &reg.F);}
 800227c:	4a02      	ldr	r2, [pc, #8]	; (8002288 <vBIT_1_H+0xc>)
 800227e:	2101      	movs	r1, #1
 8002280:	79d0      	ldrb	r0, [r2, #7]
 8002282:	f001 b8e7 	b.w	8003454 <vGBFunctionBIT>
 8002286:	bf00      	nop
 8002288:	24001664 	.word	0x24001664

0800228c <vBIT_1_L>:
void vBIT_1_L(){      vGBFunctionBIT(reg.L, 1, &reg.F);}
 800228c:	4a02      	ldr	r2, [pc, #8]	; (8002298 <vBIT_1_L+0xc>)
 800228e:	2101      	movs	r1, #1
 8002290:	7990      	ldrb	r0, [r2, #6]
 8002292:	f001 b8df 	b.w	8003454 <vGBFunctionBIT>
 8002296:	bf00      	nop
 8002298:	24001664 	.word	0x24001664

0800229c <vBIT_1_HL>:
void vBIT_1_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 1, &reg.F);}
 800229c:	b510      	push	{r4, lr}
 800229e:	4c05      	ldr	r4, [pc, #20]	; (80022b4 <vBIT_1_HL+0x18>)
 80022a0:	88e0      	ldrh	r0, [r4, #6]
 80022a2:	f001 f9df 	bl	8003664 <ucGBMemoryRead>
 80022a6:	4622      	mov	r2, r4
 80022a8:	2101      	movs	r1, #1
 80022aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022ae:	f001 b8d1 	b.w	8003454 <vGBFunctionBIT>
 80022b2:	bf00      	nop
 80022b4:	24001664 	.word	0x24001664

080022b8 <vBIT_1_A>:
void vBIT_1_A(){      vGBFunctionBIT(reg.A, 1, &reg.F);}
 80022b8:	4a02      	ldr	r2, [pc, #8]	; (80022c4 <vBIT_1_A+0xc>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	7850      	ldrb	r0, [r2, #1]
 80022be:	f001 b8c9 	b.w	8003454 <vGBFunctionBIT>
 80022c2:	bf00      	nop
 80022c4:	24001664 	.word	0x24001664

080022c8 <vBIT_2_B>:
void vBIT_2_B(){      vGBFunctionBIT(reg.B, 2, &reg.F);}
 80022c8:	4a02      	ldr	r2, [pc, #8]	; (80022d4 <vBIT_2_B+0xc>)
 80022ca:	2102      	movs	r1, #2
 80022cc:	78d0      	ldrb	r0, [r2, #3]
 80022ce:	f001 b8c1 	b.w	8003454 <vGBFunctionBIT>
 80022d2:	bf00      	nop
 80022d4:	24001664 	.word	0x24001664

080022d8 <vBIT_2_C>:
void vBIT_2_C(){      vGBFunctionBIT(reg.C, 2, &reg.F);}
 80022d8:	4a02      	ldr	r2, [pc, #8]	; (80022e4 <vBIT_2_C+0xc>)
 80022da:	2102      	movs	r1, #2
 80022dc:	7890      	ldrb	r0, [r2, #2]
 80022de:	f001 b8b9 	b.w	8003454 <vGBFunctionBIT>
 80022e2:	bf00      	nop
 80022e4:	24001664 	.word	0x24001664

080022e8 <vBIT_2_D>:
void vBIT_2_D(){      vGBFunctionBIT(reg.D, 2, &reg.F);}
 80022e8:	4a02      	ldr	r2, [pc, #8]	; (80022f4 <vBIT_2_D+0xc>)
 80022ea:	2102      	movs	r1, #2
 80022ec:	7950      	ldrb	r0, [r2, #5]
 80022ee:	f001 b8b1 	b.w	8003454 <vGBFunctionBIT>
 80022f2:	bf00      	nop
 80022f4:	24001664 	.word	0x24001664

080022f8 <vBIT_2_E>:
void vBIT_2_E(){      vGBFunctionBIT(reg.E, 2, &reg.F);}
 80022f8:	4a02      	ldr	r2, [pc, #8]	; (8002304 <vBIT_2_E+0xc>)
 80022fa:	2102      	movs	r1, #2
 80022fc:	7910      	ldrb	r0, [r2, #4]
 80022fe:	f001 b8a9 	b.w	8003454 <vGBFunctionBIT>
 8002302:	bf00      	nop
 8002304:	24001664 	.word	0x24001664

08002308 <vBIT_2_H>:
void vBIT_2_H(){      vGBFunctionBIT(reg.H, 2, &reg.F);}
 8002308:	4a02      	ldr	r2, [pc, #8]	; (8002314 <vBIT_2_H+0xc>)
 800230a:	2102      	movs	r1, #2
 800230c:	79d0      	ldrb	r0, [r2, #7]
 800230e:	f001 b8a1 	b.w	8003454 <vGBFunctionBIT>
 8002312:	bf00      	nop
 8002314:	24001664 	.word	0x24001664

08002318 <vBIT_2_L>:
void vBIT_2_L(){      vGBFunctionBIT(reg.L, 2, &reg.F);}
 8002318:	4a02      	ldr	r2, [pc, #8]	; (8002324 <vBIT_2_L+0xc>)
 800231a:	2102      	movs	r1, #2
 800231c:	7990      	ldrb	r0, [r2, #6]
 800231e:	f001 b899 	b.w	8003454 <vGBFunctionBIT>
 8002322:	bf00      	nop
 8002324:	24001664 	.word	0x24001664

08002328 <vBIT_2_HL>:
void vBIT_2_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 2, &reg.F);}
 8002328:	b510      	push	{r4, lr}
 800232a:	4c05      	ldr	r4, [pc, #20]	; (8002340 <vBIT_2_HL+0x18>)
 800232c:	88e0      	ldrh	r0, [r4, #6]
 800232e:	f001 f999 	bl	8003664 <ucGBMemoryRead>
 8002332:	4622      	mov	r2, r4
 8002334:	2102      	movs	r1, #2
 8002336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800233a:	f001 b88b 	b.w	8003454 <vGBFunctionBIT>
 800233e:	bf00      	nop
 8002340:	24001664 	.word	0x24001664

08002344 <vBIT_2_A>:
void vBIT_2_A(){      vGBFunctionBIT(reg.A, 2, &reg.F);}
 8002344:	4a02      	ldr	r2, [pc, #8]	; (8002350 <vBIT_2_A+0xc>)
 8002346:	2102      	movs	r1, #2
 8002348:	7850      	ldrb	r0, [r2, #1]
 800234a:	f001 b883 	b.w	8003454 <vGBFunctionBIT>
 800234e:	bf00      	nop
 8002350:	24001664 	.word	0x24001664

08002354 <vBIT_3_B>:
void vBIT_3_B(){      vGBFunctionBIT(reg.B, 3, &reg.F);}
 8002354:	4a02      	ldr	r2, [pc, #8]	; (8002360 <vBIT_3_B+0xc>)
 8002356:	2103      	movs	r1, #3
 8002358:	78d0      	ldrb	r0, [r2, #3]
 800235a:	f001 b87b 	b.w	8003454 <vGBFunctionBIT>
 800235e:	bf00      	nop
 8002360:	24001664 	.word	0x24001664

08002364 <vBIT_3_C>:
void vBIT_3_C(){      vGBFunctionBIT(reg.C, 3, &reg.F);}
 8002364:	4a02      	ldr	r2, [pc, #8]	; (8002370 <vBIT_3_C+0xc>)
 8002366:	2103      	movs	r1, #3
 8002368:	7890      	ldrb	r0, [r2, #2]
 800236a:	f001 b873 	b.w	8003454 <vGBFunctionBIT>
 800236e:	bf00      	nop
 8002370:	24001664 	.word	0x24001664

08002374 <vBIT_3_D>:
void vBIT_3_D(){      vGBFunctionBIT(reg.D, 3, &reg.F);}
 8002374:	4a02      	ldr	r2, [pc, #8]	; (8002380 <vBIT_3_D+0xc>)
 8002376:	2103      	movs	r1, #3
 8002378:	7950      	ldrb	r0, [r2, #5]
 800237a:	f001 b86b 	b.w	8003454 <vGBFunctionBIT>
 800237e:	bf00      	nop
 8002380:	24001664 	.word	0x24001664

08002384 <vBIT_3_E>:
void vBIT_3_E(){      vGBFunctionBIT(reg.E, 3, &reg.F);}
 8002384:	4a02      	ldr	r2, [pc, #8]	; (8002390 <vBIT_3_E+0xc>)
 8002386:	2103      	movs	r1, #3
 8002388:	7910      	ldrb	r0, [r2, #4]
 800238a:	f001 b863 	b.w	8003454 <vGBFunctionBIT>
 800238e:	bf00      	nop
 8002390:	24001664 	.word	0x24001664

08002394 <vBIT_3_H>:
void vBIT_3_H(){      vGBFunctionBIT(reg.H, 3, &reg.F);}
 8002394:	4a02      	ldr	r2, [pc, #8]	; (80023a0 <vBIT_3_H+0xc>)
 8002396:	2103      	movs	r1, #3
 8002398:	79d0      	ldrb	r0, [r2, #7]
 800239a:	f001 b85b 	b.w	8003454 <vGBFunctionBIT>
 800239e:	bf00      	nop
 80023a0:	24001664 	.word	0x24001664

080023a4 <vBIT_3_L>:
void vBIT_3_L(){      vGBFunctionBIT(reg.L, 3, &reg.F);}
 80023a4:	4a02      	ldr	r2, [pc, #8]	; (80023b0 <vBIT_3_L+0xc>)
 80023a6:	2103      	movs	r1, #3
 80023a8:	7990      	ldrb	r0, [r2, #6]
 80023aa:	f001 b853 	b.w	8003454 <vGBFunctionBIT>
 80023ae:	bf00      	nop
 80023b0:	24001664 	.word	0x24001664

080023b4 <vBIT_3_HL>:
void vBIT_3_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 3, &reg.F);}
 80023b4:	b510      	push	{r4, lr}
 80023b6:	4c05      	ldr	r4, [pc, #20]	; (80023cc <vBIT_3_HL+0x18>)
 80023b8:	88e0      	ldrh	r0, [r4, #6]
 80023ba:	f001 f953 	bl	8003664 <ucGBMemoryRead>
 80023be:	4622      	mov	r2, r4
 80023c0:	2103      	movs	r1, #3
 80023c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023c6:	f001 b845 	b.w	8003454 <vGBFunctionBIT>
 80023ca:	bf00      	nop
 80023cc:	24001664 	.word	0x24001664

080023d0 <vBIT_3_A>:
void vBIT_3_A(){      vGBFunctionBIT(reg.A, 3, &reg.F);}
 80023d0:	4a02      	ldr	r2, [pc, #8]	; (80023dc <vBIT_3_A+0xc>)
 80023d2:	2103      	movs	r1, #3
 80023d4:	7850      	ldrb	r0, [r2, #1]
 80023d6:	f001 b83d 	b.w	8003454 <vGBFunctionBIT>
 80023da:	bf00      	nop
 80023dc:	24001664 	.word	0x24001664

080023e0 <vBIT_4_B>:
void vBIT_4_B(){      vGBFunctionBIT(reg.B, 4, &reg.F);}
 80023e0:	4a02      	ldr	r2, [pc, #8]	; (80023ec <vBIT_4_B+0xc>)
 80023e2:	2104      	movs	r1, #4
 80023e4:	78d0      	ldrb	r0, [r2, #3]
 80023e6:	f001 b835 	b.w	8003454 <vGBFunctionBIT>
 80023ea:	bf00      	nop
 80023ec:	24001664 	.word	0x24001664

080023f0 <vBIT_4_C>:
void vBIT_4_C(){      vGBFunctionBIT(reg.C, 4, &reg.F);}
 80023f0:	4a02      	ldr	r2, [pc, #8]	; (80023fc <vBIT_4_C+0xc>)
 80023f2:	2104      	movs	r1, #4
 80023f4:	7890      	ldrb	r0, [r2, #2]
 80023f6:	f001 b82d 	b.w	8003454 <vGBFunctionBIT>
 80023fa:	bf00      	nop
 80023fc:	24001664 	.word	0x24001664

08002400 <vBIT_4_D>:
void vBIT_4_D(){      vGBFunctionBIT(reg.D, 4, &reg.F);}
 8002400:	4a02      	ldr	r2, [pc, #8]	; (800240c <vBIT_4_D+0xc>)
 8002402:	2104      	movs	r1, #4
 8002404:	7950      	ldrb	r0, [r2, #5]
 8002406:	f001 b825 	b.w	8003454 <vGBFunctionBIT>
 800240a:	bf00      	nop
 800240c:	24001664 	.word	0x24001664

08002410 <vBIT_4_E>:
void vBIT_4_E(){      vGBFunctionBIT(reg.E, 4, &reg.F);}
 8002410:	4a02      	ldr	r2, [pc, #8]	; (800241c <vBIT_4_E+0xc>)
 8002412:	2104      	movs	r1, #4
 8002414:	7910      	ldrb	r0, [r2, #4]
 8002416:	f001 b81d 	b.w	8003454 <vGBFunctionBIT>
 800241a:	bf00      	nop
 800241c:	24001664 	.word	0x24001664

08002420 <vBIT_4_H>:
void vBIT_4_H(){      vGBFunctionBIT(reg.H, 4, &reg.F);}
 8002420:	4a02      	ldr	r2, [pc, #8]	; (800242c <vBIT_4_H+0xc>)
 8002422:	2104      	movs	r1, #4
 8002424:	79d0      	ldrb	r0, [r2, #7]
 8002426:	f001 b815 	b.w	8003454 <vGBFunctionBIT>
 800242a:	bf00      	nop
 800242c:	24001664 	.word	0x24001664

08002430 <vBIT_4_L>:
void vBIT_4_L(){      vGBFunctionBIT(reg.L, 4, &reg.F);}
 8002430:	4a02      	ldr	r2, [pc, #8]	; (800243c <vBIT_4_L+0xc>)
 8002432:	2104      	movs	r1, #4
 8002434:	7990      	ldrb	r0, [r2, #6]
 8002436:	f001 b80d 	b.w	8003454 <vGBFunctionBIT>
 800243a:	bf00      	nop
 800243c:	24001664 	.word	0x24001664

08002440 <vBIT_4_HL>:
void vBIT_4_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 4, &reg.F);}
 8002440:	b510      	push	{r4, lr}
 8002442:	4c05      	ldr	r4, [pc, #20]	; (8002458 <vBIT_4_HL+0x18>)
 8002444:	88e0      	ldrh	r0, [r4, #6]
 8002446:	f001 f90d 	bl	8003664 <ucGBMemoryRead>
 800244a:	4622      	mov	r2, r4
 800244c:	2104      	movs	r1, #4
 800244e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002452:	f000 bfff 	b.w	8003454 <vGBFunctionBIT>
 8002456:	bf00      	nop
 8002458:	24001664 	.word	0x24001664

0800245c <vBIT_4_A>:
void vBIT_4_A(){      vGBFunctionBIT(reg.A, 4, &reg.F);}
 800245c:	4a02      	ldr	r2, [pc, #8]	; (8002468 <vBIT_4_A+0xc>)
 800245e:	2104      	movs	r1, #4
 8002460:	7850      	ldrb	r0, [r2, #1]
 8002462:	f000 bff7 	b.w	8003454 <vGBFunctionBIT>
 8002466:	bf00      	nop
 8002468:	24001664 	.word	0x24001664

0800246c <vBIT_5_B>:
void vBIT_5_B(){      vGBFunctionBIT(reg.B, 5, &reg.F);}
 800246c:	4a02      	ldr	r2, [pc, #8]	; (8002478 <vBIT_5_B+0xc>)
 800246e:	2105      	movs	r1, #5
 8002470:	78d0      	ldrb	r0, [r2, #3]
 8002472:	f000 bfef 	b.w	8003454 <vGBFunctionBIT>
 8002476:	bf00      	nop
 8002478:	24001664 	.word	0x24001664

0800247c <vBIT_5_C>:
void vBIT_5_C(){      vGBFunctionBIT(reg.C, 5, &reg.F);}
 800247c:	4a02      	ldr	r2, [pc, #8]	; (8002488 <vBIT_5_C+0xc>)
 800247e:	2105      	movs	r1, #5
 8002480:	7890      	ldrb	r0, [r2, #2]
 8002482:	f000 bfe7 	b.w	8003454 <vGBFunctionBIT>
 8002486:	bf00      	nop
 8002488:	24001664 	.word	0x24001664

0800248c <vBIT_5_D>:
void vBIT_5_D(){      vGBFunctionBIT(reg.D, 5, &reg.F);}
 800248c:	4a02      	ldr	r2, [pc, #8]	; (8002498 <vBIT_5_D+0xc>)
 800248e:	2105      	movs	r1, #5
 8002490:	7950      	ldrb	r0, [r2, #5]
 8002492:	f000 bfdf 	b.w	8003454 <vGBFunctionBIT>
 8002496:	bf00      	nop
 8002498:	24001664 	.word	0x24001664

0800249c <vBIT_5_E>:
void vBIT_5_E(){      vGBFunctionBIT(reg.E, 5, &reg.F);}
 800249c:	4a02      	ldr	r2, [pc, #8]	; (80024a8 <vBIT_5_E+0xc>)
 800249e:	2105      	movs	r1, #5
 80024a0:	7910      	ldrb	r0, [r2, #4]
 80024a2:	f000 bfd7 	b.w	8003454 <vGBFunctionBIT>
 80024a6:	bf00      	nop
 80024a8:	24001664 	.word	0x24001664

080024ac <vBIT_5_H>:
void vBIT_5_H(){      vGBFunctionBIT(reg.H, 5, &reg.F);}
 80024ac:	4a02      	ldr	r2, [pc, #8]	; (80024b8 <vBIT_5_H+0xc>)
 80024ae:	2105      	movs	r1, #5
 80024b0:	79d0      	ldrb	r0, [r2, #7]
 80024b2:	f000 bfcf 	b.w	8003454 <vGBFunctionBIT>
 80024b6:	bf00      	nop
 80024b8:	24001664 	.word	0x24001664

080024bc <vBIT_5_L>:
void vBIT_5_L(){      vGBFunctionBIT(reg.L, 5, &reg.F);}
 80024bc:	4a02      	ldr	r2, [pc, #8]	; (80024c8 <vBIT_5_L+0xc>)
 80024be:	2105      	movs	r1, #5
 80024c0:	7990      	ldrb	r0, [r2, #6]
 80024c2:	f000 bfc7 	b.w	8003454 <vGBFunctionBIT>
 80024c6:	bf00      	nop
 80024c8:	24001664 	.word	0x24001664

080024cc <vBIT_5_HL>:
void vBIT_5_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 5, &reg.F);}
 80024cc:	b510      	push	{r4, lr}
 80024ce:	4c05      	ldr	r4, [pc, #20]	; (80024e4 <vBIT_5_HL+0x18>)
 80024d0:	88e0      	ldrh	r0, [r4, #6]
 80024d2:	f001 f8c7 	bl	8003664 <ucGBMemoryRead>
 80024d6:	4622      	mov	r2, r4
 80024d8:	2105      	movs	r1, #5
 80024da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024de:	f000 bfb9 	b.w	8003454 <vGBFunctionBIT>
 80024e2:	bf00      	nop
 80024e4:	24001664 	.word	0x24001664

080024e8 <vBIT_5_A>:
void vBIT_5_A(){      vGBFunctionBIT(reg.A, 5, &reg.F);}
 80024e8:	4a02      	ldr	r2, [pc, #8]	; (80024f4 <vBIT_5_A+0xc>)
 80024ea:	2105      	movs	r1, #5
 80024ec:	7850      	ldrb	r0, [r2, #1]
 80024ee:	f000 bfb1 	b.w	8003454 <vGBFunctionBIT>
 80024f2:	bf00      	nop
 80024f4:	24001664 	.word	0x24001664

080024f8 <vBIT_6_B>:
void vBIT_6_B(){      vGBFunctionBIT(reg.B, 6, &reg.F);}
 80024f8:	4a02      	ldr	r2, [pc, #8]	; (8002504 <vBIT_6_B+0xc>)
 80024fa:	2106      	movs	r1, #6
 80024fc:	78d0      	ldrb	r0, [r2, #3]
 80024fe:	f000 bfa9 	b.w	8003454 <vGBFunctionBIT>
 8002502:	bf00      	nop
 8002504:	24001664 	.word	0x24001664

08002508 <vBIT_6_C>:
void vBIT_6_C(){      vGBFunctionBIT(reg.C, 6, &reg.F);}
 8002508:	4a02      	ldr	r2, [pc, #8]	; (8002514 <vBIT_6_C+0xc>)
 800250a:	2106      	movs	r1, #6
 800250c:	7890      	ldrb	r0, [r2, #2]
 800250e:	f000 bfa1 	b.w	8003454 <vGBFunctionBIT>
 8002512:	bf00      	nop
 8002514:	24001664 	.word	0x24001664

08002518 <vBIT_6_D>:
void vBIT_6_D(){      vGBFunctionBIT(reg.D, 6, &reg.F);}
 8002518:	4a02      	ldr	r2, [pc, #8]	; (8002524 <vBIT_6_D+0xc>)
 800251a:	2106      	movs	r1, #6
 800251c:	7950      	ldrb	r0, [r2, #5]
 800251e:	f000 bf99 	b.w	8003454 <vGBFunctionBIT>
 8002522:	bf00      	nop
 8002524:	24001664 	.word	0x24001664

08002528 <vBIT_6_E>:
void vBIT_6_E(){      vGBFunctionBIT(reg.E, 6, &reg.F);}
 8002528:	4a02      	ldr	r2, [pc, #8]	; (8002534 <vBIT_6_E+0xc>)
 800252a:	2106      	movs	r1, #6
 800252c:	7910      	ldrb	r0, [r2, #4]
 800252e:	f000 bf91 	b.w	8003454 <vGBFunctionBIT>
 8002532:	bf00      	nop
 8002534:	24001664 	.word	0x24001664

08002538 <vBIT_6_H>:
void vBIT_6_H(){      vGBFunctionBIT(reg.H, 6, &reg.F);}
 8002538:	4a02      	ldr	r2, [pc, #8]	; (8002544 <vBIT_6_H+0xc>)
 800253a:	2106      	movs	r1, #6
 800253c:	79d0      	ldrb	r0, [r2, #7]
 800253e:	f000 bf89 	b.w	8003454 <vGBFunctionBIT>
 8002542:	bf00      	nop
 8002544:	24001664 	.word	0x24001664

08002548 <vBIT_6_L>:
void vBIT_6_L(){      vGBFunctionBIT(reg.L, 6, &reg.F);}
 8002548:	4a02      	ldr	r2, [pc, #8]	; (8002554 <vBIT_6_L+0xc>)
 800254a:	2106      	movs	r1, #6
 800254c:	7990      	ldrb	r0, [r2, #6]
 800254e:	f000 bf81 	b.w	8003454 <vGBFunctionBIT>
 8002552:	bf00      	nop
 8002554:	24001664 	.word	0x24001664

08002558 <vBIT_6_HL>:
void vBIT_6_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 6, &reg.F);}
 8002558:	b510      	push	{r4, lr}
 800255a:	4c05      	ldr	r4, [pc, #20]	; (8002570 <vBIT_6_HL+0x18>)
 800255c:	88e0      	ldrh	r0, [r4, #6]
 800255e:	f001 f881 	bl	8003664 <ucGBMemoryRead>
 8002562:	4622      	mov	r2, r4
 8002564:	2106      	movs	r1, #6
 8002566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800256a:	f000 bf73 	b.w	8003454 <vGBFunctionBIT>
 800256e:	bf00      	nop
 8002570:	24001664 	.word	0x24001664

08002574 <vBIT_6_A>:
void vBIT_6_A(){      vGBFunctionBIT(reg.A, 6, &reg.F);}
 8002574:	4a02      	ldr	r2, [pc, #8]	; (8002580 <vBIT_6_A+0xc>)
 8002576:	2106      	movs	r1, #6
 8002578:	7850      	ldrb	r0, [r2, #1]
 800257a:	f000 bf6b 	b.w	8003454 <vGBFunctionBIT>
 800257e:	bf00      	nop
 8002580:	24001664 	.word	0x24001664

08002584 <vBIT_7_B>:
void vBIT_7_B(){      vGBFunctionBIT(reg.B, 7, &reg.F);}
 8002584:	4a02      	ldr	r2, [pc, #8]	; (8002590 <vBIT_7_B+0xc>)
 8002586:	2107      	movs	r1, #7
 8002588:	78d0      	ldrb	r0, [r2, #3]
 800258a:	f000 bf63 	b.w	8003454 <vGBFunctionBIT>
 800258e:	bf00      	nop
 8002590:	24001664 	.word	0x24001664

08002594 <vBIT_7_C>:
void vBIT_7_C(){      vGBFunctionBIT(reg.C, 7, &reg.F);}
 8002594:	4a02      	ldr	r2, [pc, #8]	; (80025a0 <vBIT_7_C+0xc>)
 8002596:	2107      	movs	r1, #7
 8002598:	7890      	ldrb	r0, [r2, #2]
 800259a:	f000 bf5b 	b.w	8003454 <vGBFunctionBIT>
 800259e:	bf00      	nop
 80025a0:	24001664 	.word	0x24001664

080025a4 <vBIT_7_D>:
void vBIT_7_D(){      vGBFunctionBIT(reg.D, 7, &reg.F);}
 80025a4:	4a02      	ldr	r2, [pc, #8]	; (80025b0 <vBIT_7_D+0xc>)
 80025a6:	2107      	movs	r1, #7
 80025a8:	7950      	ldrb	r0, [r2, #5]
 80025aa:	f000 bf53 	b.w	8003454 <vGBFunctionBIT>
 80025ae:	bf00      	nop
 80025b0:	24001664 	.word	0x24001664

080025b4 <vBIT_7_E>:
void vBIT_7_E(){      vGBFunctionBIT(reg.E, 7, &reg.F);}
 80025b4:	4a02      	ldr	r2, [pc, #8]	; (80025c0 <vBIT_7_E+0xc>)
 80025b6:	2107      	movs	r1, #7
 80025b8:	7910      	ldrb	r0, [r2, #4]
 80025ba:	f000 bf4b 	b.w	8003454 <vGBFunctionBIT>
 80025be:	bf00      	nop
 80025c0:	24001664 	.word	0x24001664

080025c4 <vBIT_7_H>:
void vBIT_7_H(){      vGBFunctionBIT(reg.H, 7, &reg.F);}
 80025c4:	4a02      	ldr	r2, [pc, #8]	; (80025d0 <vBIT_7_H+0xc>)
 80025c6:	2107      	movs	r1, #7
 80025c8:	79d0      	ldrb	r0, [r2, #7]
 80025ca:	f000 bf43 	b.w	8003454 <vGBFunctionBIT>
 80025ce:	bf00      	nop
 80025d0:	24001664 	.word	0x24001664

080025d4 <vBIT_7_L>:
void vBIT_7_L(){      vGBFunctionBIT(reg.L, 7, &reg.F);}
 80025d4:	4a02      	ldr	r2, [pc, #8]	; (80025e0 <vBIT_7_L+0xc>)
 80025d6:	2107      	movs	r1, #7
 80025d8:	7990      	ldrb	r0, [r2, #6]
 80025da:	f000 bf3b 	b.w	8003454 <vGBFunctionBIT>
 80025de:	bf00      	nop
 80025e0:	24001664 	.word	0x24001664

080025e4 <vBIT_7_HL>:
void vBIT_7_HL(){     vGBFunctionBIT(ucGBMemoryRead(reg.HL), 7, &reg.F);}
 80025e4:	b510      	push	{r4, lr}
 80025e6:	4c05      	ldr	r4, [pc, #20]	; (80025fc <vBIT_7_HL+0x18>)
 80025e8:	88e0      	ldrh	r0, [r4, #6]
 80025ea:	f001 f83b 	bl	8003664 <ucGBMemoryRead>
 80025ee:	4622      	mov	r2, r4
 80025f0:	2107      	movs	r1, #7
 80025f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025f6:	f000 bf2d 	b.w	8003454 <vGBFunctionBIT>
 80025fa:	bf00      	nop
 80025fc:	24001664 	.word	0x24001664

08002600 <vBIT_7_A>:
void vBIT_7_A(){      vGBFunctionBIT(reg.A, 7, &reg.F);}
 8002600:	4a02      	ldr	r2, [pc, #8]	; (800260c <vBIT_7_A+0xc>)
 8002602:	2107      	movs	r1, #7
 8002604:	7850      	ldrb	r0, [r2, #1]
 8002606:	f000 bf25 	b.w	8003454 <vGBFunctionBIT>
 800260a:	bf00      	nop
 800260c:	24001664 	.word	0x24001664

08002610 <vRES_0_HL>:
void vRES_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 0));}
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <vRES_0_HL+0x1c>)
 8002612:	2100      	movs	r1, #0
 8002614:	b510      	push	{r4, lr}
 8002616:	88dc      	ldrh	r4, [r3, #6]
 8002618:	4620      	mov	r0, r4
 800261a:	f000 ff33 	bl	8003484 <ucGBFunctionRESHL>
 800261e:	4601      	mov	r1, r0
 8002620:	4620      	mov	r0, r4
 8002622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002626:	f001 b831 	b.w	800368c <vGBMemoryWrite>
 800262a:	bf00      	nop
 800262c:	24001664 	.word	0x24001664

08002630 <vRES_1_HL>:
void vRES_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 1));}
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <vRES_1_HL+0x1c>)
 8002632:	2101      	movs	r1, #1
 8002634:	b510      	push	{r4, lr}
 8002636:	88dc      	ldrh	r4, [r3, #6]
 8002638:	4620      	mov	r0, r4
 800263a:	f000 ff23 	bl	8003484 <ucGBFunctionRESHL>
 800263e:	4601      	mov	r1, r0
 8002640:	4620      	mov	r0, r4
 8002642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002646:	f001 b821 	b.w	800368c <vGBMemoryWrite>
 800264a:	bf00      	nop
 800264c:	24001664 	.word	0x24001664

08002650 <vRES_2_HL>:
void vRES_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 2));}
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <vRES_2_HL+0x1c>)
 8002652:	2102      	movs	r1, #2
 8002654:	b510      	push	{r4, lr}
 8002656:	88dc      	ldrh	r4, [r3, #6]
 8002658:	4620      	mov	r0, r4
 800265a:	f000 ff13 	bl	8003484 <ucGBFunctionRESHL>
 800265e:	4601      	mov	r1, r0
 8002660:	4620      	mov	r0, r4
 8002662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002666:	f001 b811 	b.w	800368c <vGBMemoryWrite>
 800266a:	bf00      	nop
 800266c:	24001664 	.word	0x24001664

08002670 <vRES_3_HL>:
void vRES_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 3));}
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <vRES_3_HL+0x1c>)
 8002672:	2103      	movs	r1, #3
 8002674:	b510      	push	{r4, lr}
 8002676:	88dc      	ldrh	r4, [r3, #6]
 8002678:	4620      	mov	r0, r4
 800267a:	f000 ff03 	bl	8003484 <ucGBFunctionRESHL>
 800267e:	4601      	mov	r1, r0
 8002680:	4620      	mov	r0, r4
 8002682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002686:	f001 b801 	b.w	800368c <vGBMemoryWrite>
 800268a:	bf00      	nop
 800268c:	24001664 	.word	0x24001664

08002690 <vRES_4_HL>:
void vRES_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 4));}
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <vRES_4_HL+0x1c>)
 8002692:	2104      	movs	r1, #4
 8002694:	b510      	push	{r4, lr}
 8002696:	88dc      	ldrh	r4, [r3, #6]
 8002698:	4620      	mov	r0, r4
 800269a:	f000 fef3 	bl	8003484 <ucGBFunctionRESHL>
 800269e:	4601      	mov	r1, r0
 80026a0:	4620      	mov	r0, r4
 80026a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026a6:	f000 bff1 	b.w	800368c <vGBMemoryWrite>
 80026aa:	bf00      	nop
 80026ac:	24001664 	.word	0x24001664

080026b0 <vRES_5_HL>:
void vRES_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 5));}
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <vRES_5_HL+0x1c>)
 80026b2:	2105      	movs	r1, #5
 80026b4:	b510      	push	{r4, lr}
 80026b6:	88dc      	ldrh	r4, [r3, #6]
 80026b8:	4620      	mov	r0, r4
 80026ba:	f000 fee3 	bl	8003484 <ucGBFunctionRESHL>
 80026be:	4601      	mov	r1, r0
 80026c0:	4620      	mov	r0, r4
 80026c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026c6:	f000 bfe1 	b.w	800368c <vGBMemoryWrite>
 80026ca:	bf00      	nop
 80026cc:	24001664 	.word	0x24001664

080026d0 <vRES_6_HL>:
void vRES_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 6));}
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <vRES_6_HL+0x1c>)
 80026d2:	2106      	movs	r1, #6
 80026d4:	b510      	push	{r4, lr}
 80026d6:	88dc      	ldrh	r4, [r3, #6]
 80026d8:	4620      	mov	r0, r4
 80026da:	f000 fed3 	bl	8003484 <ucGBFunctionRESHL>
 80026de:	4601      	mov	r1, r0
 80026e0:	4620      	mov	r0, r4
 80026e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026e6:	f000 bfd1 	b.w	800368c <vGBMemoryWrite>
 80026ea:	bf00      	nop
 80026ec:	24001664 	.word	0x24001664

080026f0 <vRES_7_HL>:
void vRES_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionRESHL(reg.HL, 7));}
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <vRES_7_HL+0x1c>)
 80026f2:	2107      	movs	r1, #7
 80026f4:	b510      	push	{r4, lr}
 80026f6:	88dc      	ldrh	r4, [r3, #6]
 80026f8:	4620      	mov	r0, r4
 80026fa:	f000 fec3 	bl	8003484 <ucGBFunctionRESHL>
 80026fe:	4601      	mov	r1, r0
 8002700:	4620      	mov	r0, r4
 8002702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002706:	f000 bfc1 	b.w	800368c <vGBMemoryWrite>
 800270a:	bf00      	nop
 800270c:	24001664 	.word	0x24001664

08002710 <vSET_0_HL>:
void vSET_0_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 0));}
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <vSET_0_HL+0x1c>)
 8002712:	2100      	movs	r1, #0
 8002714:	b510      	push	{r4, lr}
 8002716:	88dc      	ldrh	r4, [r3, #6]
 8002718:	4620      	mov	r0, r4
 800271a:	f000 febf 	bl	800349c <ucGBFunctionSETHL>
 800271e:	4601      	mov	r1, r0
 8002720:	4620      	mov	r0, r4
 8002722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002726:	f000 bfb1 	b.w	800368c <vGBMemoryWrite>
 800272a:	bf00      	nop
 800272c:	24001664 	.word	0x24001664

08002730 <vSET_1_HL>:
void vSET_1_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 1));}
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <vSET_1_HL+0x1c>)
 8002732:	2101      	movs	r1, #1
 8002734:	b510      	push	{r4, lr}
 8002736:	88dc      	ldrh	r4, [r3, #6]
 8002738:	4620      	mov	r0, r4
 800273a:	f000 feaf 	bl	800349c <ucGBFunctionSETHL>
 800273e:	4601      	mov	r1, r0
 8002740:	4620      	mov	r0, r4
 8002742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002746:	f000 bfa1 	b.w	800368c <vGBMemoryWrite>
 800274a:	bf00      	nop
 800274c:	24001664 	.word	0x24001664

08002750 <vSET_2_HL>:
void vSET_2_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 2));}
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <vSET_2_HL+0x1c>)
 8002752:	2102      	movs	r1, #2
 8002754:	b510      	push	{r4, lr}
 8002756:	88dc      	ldrh	r4, [r3, #6]
 8002758:	4620      	mov	r0, r4
 800275a:	f000 fe9f 	bl	800349c <ucGBFunctionSETHL>
 800275e:	4601      	mov	r1, r0
 8002760:	4620      	mov	r0, r4
 8002762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002766:	f000 bf91 	b.w	800368c <vGBMemoryWrite>
 800276a:	bf00      	nop
 800276c:	24001664 	.word	0x24001664

08002770 <vSET_3_HL>:
void vSET_3_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 3));}
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <vSET_3_HL+0x1c>)
 8002772:	2103      	movs	r1, #3
 8002774:	b510      	push	{r4, lr}
 8002776:	88dc      	ldrh	r4, [r3, #6]
 8002778:	4620      	mov	r0, r4
 800277a:	f000 fe8f 	bl	800349c <ucGBFunctionSETHL>
 800277e:	4601      	mov	r1, r0
 8002780:	4620      	mov	r0, r4
 8002782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002786:	f000 bf81 	b.w	800368c <vGBMemoryWrite>
 800278a:	bf00      	nop
 800278c:	24001664 	.word	0x24001664

08002790 <vSET_4_HL>:
void vSET_4_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 4));}
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <vSET_4_HL+0x1c>)
 8002792:	2104      	movs	r1, #4
 8002794:	b510      	push	{r4, lr}
 8002796:	88dc      	ldrh	r4, [r3, #6]
 8002798:	4620      	mov	r0, r4
 800279a:	f000 fe7f 	bl	800349c <ucGBFunctionSETHL>
 800279e:	4601      	mov	r1, r0
 80027a0:	4620      	mov	r0, r4
 80027a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027a6:	f000 bf71 	b.w	800368c <vGBMemoryWrite>
 80027aa:	bf00      	nop
 80027ac:	24001664 	.word	0x24001664

080027b0 <vSET_5_HL>:
void vSET_5_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 5));}
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <vSET_5_HL+0x1c>)
 80027b2:	2105      	movs	r1, #5
 80027b4:	b510      	push	{r4, lr}
 80027b6:	88dc      	ldrh	r4, [r3, #6]
 80027b8:	4620      	mov	r0, r4
 80027ba:	f000 fe6f 	bl	800349c <ucGBFunctionSETHL>
 80027be:	4601      	mov	r1, r0
 80027c0:	4620      	mov	r0, r4
 80027c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027c6:	f000 bf61 	b.w	800368c <vGBMemoryWrite>
 80027ca:	bf00      	nop
 80027cc:	24001664 	.word	0x24001664

080027d0 <vSET_6_HL>:
void vSET_6_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 6));}
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <vSET_6_HL+0x1c>)
 80027d2:	2106      	movs	r1, #6
 80027d4:	b510      	push	{r4, lr}
 80027d6:	88dc      	ldrh	r4, [r3, #6]
 80027d8:	4620      	mov	r0, r4
 80027da:	f000 fe5f 	bl	800349c <ucGBFunctionSETHL>
 80027de:	4601      	mov	r1, r0
 80027e0:	4620      	mov	r0, r4
 80027e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027e6:	f000 bf51 	b.w	800368c <vGBMemoryWrite>
 80027ea:	bf00      	nop
 80027ec:	24001664 	.word	0x24001664

080027f0 <vSET_7_HL>:
void vSET_7_HL(){     vGBMemoryWrite(reg.HL, ucGBFunctionSETHL(reg.HL, 7));}
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <vSET_7_HL+0x1c>)
 80027f2:	2107      	movs	r1, #7
 80027f4:	b510      	push	{r4, lr}
 80027f6:	88dc      	ldrh	r4, [r3, #6]
 80027f8:	4620      	mov	r0, r4
 80027fa:	f000 fe4f 	bl	800349c <ucGBFunctionSETHL>
 80027fe:	4601      	mov	r1, r0
 8002800:	4620      	mov	r0, r4
 8002802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002806:	f000 bf41 	b.w	800368c <vGBMemoryWrite>
 800280a:	bf00      	nop
 800280c:	24001664 	.word	0x24001664

08002810 <vCCF>:
void vCCF(){          resetbit(&reg.F, N_FLAG); resetbit(&reg.F, H_FLAG); (checkbit(reg.F, C_FLAG)) ? resetbit(&reg.F, C_FLAG) : setbit(&reg.F, C_FLAG);}
 8002810:	b510      	push	{r4, lr}
 8002812:	4c0d      	ldr	r4, [pc, #52]	; (8002848 <vCCF+0x38>)
 8002814:	2106      	movs	r1, #6
 8002816:	4620      	mov	r0, r4
 8002818:	f000 f9f0 	bl	8002bfc <resetbit>
 800281c:	4620      	mov	r0, r4
 800281e:	2105      	movs	r1, #5
 8002820:	f000 f9ec 	bl	8002bfc <resetbit>
 8002824:	7820      	ldrb	r0, [r4, #0]
 8002826:	2104      	movs	r1, #4
 8002828:	f000 f9f0 	bl	8002c0c <checkbit>
 800282c:	b128      	cbz	r0, 800283a <vCCF+0x2a>
 800282e:	4620      	mov	r0, r4
 8002830:	2104      	movs	r1, #4
 8002832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002836:	f000 b9e1 	b.w	8002bfc <resetbit>
 800283a:	4620      	mov	r0, r4
 800283c:	2104      	movs	r1, #4
 800283e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002842:	f000 b9d3 	b.w	8002bec <setbit>
 8002846:	bf00      	nop
 8002848:	24001664 	.word	0x24001664

0800284c <vRET_C.part.0>:
void vRET_NZ(){       customDuration = (checkbit(reg.F, Z_FLAG)) ?  8 : 20; if(checkbit(reg.F, Z_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 800284c:	4901      	ldr	r1, [pc, #4]	; (8002854 <vRET_C.part.0+0x8>)
 800284e:	1e88      	subs	r0, r1, #2
 8002850:	f000 bc2c 	b.w	80030ac <vGBFunctionRET>
 8002854:	2400166e 	.word	0x2400166e

08002858 <vRET_NZ>:
 8002858:	b510      	push	{r4, lr}
 800285a:	4c0b      	ldr	r4, [pc, #44]	; (8002888 <vRET_NZ+0x30>)
 800285c:	2107      	movs	r1, #7
 800285e:	7820      	ldrb	r0, [r4, #0]
 8002860:	f000 f9d4 	bl	8002c0c <checkbit>
 8002864:	2800      	cmp	r0, #0
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <vRET_NZ+0x34>)
 8002868:	f04f 0107 	mov.w	r1, #7
 800286c:	bf14      	ite	ne
 800286e:	2208      	movne	r2, #8
 8002870:	2214      	moveq	r2, #20
 8002872:	7820      	ldrb	r0, [r4, #0]
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	f000 f9c9 	bl	8002c0c <checkbit>
 800287a:	b100      	cbz	r0, 800287e <vRET_NZ+0x26>
 800287c:	bd10      	pop	{r4, pc}
 800287e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002882:	f7ff bfe3 	b.w	800284c <vRET_C.part.0>
 8002886:	bf00      	nop
 8002888:	24001664 	.word	0x24001664
 800288c:	24001094 	.word	0x24001094

08002890 <vRET_Z>:
void vRET_Z(){        customDuration = (checkbit(reg.F, Z_FLAG)) ?  20 : 8; if(checkbit(reg.F, Z_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002890:	b510      	push	{r4, lr}
 8002892:	4c0b      	ldr	r4, [pc, #44]	; (80028c0 <vRET_Z+0x30>)
 8002894:	2107      	movs	r1, #7
 8002896:	7820      	ldrb	r0, [r4, #0]
 8002898:	f000 f9b8 	bl	8002c0c <checkbit>
 800289c:	2800      	cmp	r0, #0
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <vRET_Z+0x34>)
 80028a0:	f04f 0107 	mov.w	r1, #7
 80028a4:	bf14      	ite	ne
 80028a6:	2214      	movne	r2, #20
 80028a8:	2208      	moveq	r2, #8
 80028aa:	7820      	ldrb	r0, [r4, #0]
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	f000 f9ad 	bl	8002c0c <checkbit>
 80028b2:	b900      	cbnz	r0, 80028b6 <vRET_Z+0x26>
 80028b4:	bd10      	pop	{r4, pc}
 80028b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ba:	f7ff bfc7 	b.w	800284c <vRET_C.part.0>
 80028be:	bf00      	nop
 80028c0:	24001664 	.word	0x24001664
 80028c4:	24001094 	.word	0x24001094

080028c8 <vRET_NC>:
void vRET_NC(){       customDuration =(checkbit(reg.F, C_FLAG)) ?  8 : 20; if(checkbit(reg.F, C_FLAG) == 0) vGBFunctionRET(&reg.SP, &reg.PC);}
 80028c8:	b510      	push	{r4, lr}
 80028ca:	4c0b      	ldr	r4, [pc, #44]	; (80028f8 <vRET_NC+0x30>)
 80028cc:	2104      	movs	r1, #4
 80028ce:	7820      	ldrb	r0, [r4, #0]
 80028d0:	f000 f99c 	bl	8002c0c <checkbit>
 80028d4:	2800      	cmp	r0, #0
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <vRET_NC+0x34>)
 80028d8:	f04f 0104 	mov.w	r1, #4
 80028dc:	bf14      	ite	ne
 80028de:	2208      	movne	r2, #8
 80028e0:	2214      	moveq	r2, #20
 80028e2:	7820      	ldrb	r0, [r4, #0]
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	f000 f991 	bl	8002c0c <checkbit>
 80028ea:	b100      	cbz	r0, 80028ee <vRET_NC+0x26>
 80028ec:	bd10      	pop	{r4, pc}
 80028ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028f2:	f7ff bfab 	b.w	800284c <vRET_C.part.0>
 80028f6:	bf00      	nop
 80028f8:	24001664 	.word	0x24001664
 80028fc:	24001094 	.word	0x24001094

08002900 <vRET_C>:
void vRET_C(){        customDuration =(checkbit(reg.F, C_FLAG)) ?  20 : 8; if(checkbit(reg.F, C_FLAG)) vGBFunctionRET(&reg.SP, &reg.PC);}
 8002900:	b510      	push	{r4, lr}
 8002902:	4c0b      	ldr	r4, [pc, #44]	; (8002930 <vRET_C+0x30>)
 8002904:	2104      	movs	r1, #4
 8002906:	7820      	ldrb	r0, [r4, #0]
 8002908:	f000 f980 	bl	8002c0c <checkbit>
 800290c:	2800      	cmp	r0, #0
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <vRET_C+0x34>)
 8002910:	f04f 0104 	mov.w	r1, #4
 8002914:	bf14      	ite	ne
 8002916:	2214      	movne	r2, #20
 8002918:	2208      	moveq	r2, #8
 800291a:	7820      	ldrb	r0, [r4, #0]
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	f000 f975 	bl	8002c0c <checkbit>
 8002922:	b900      	cbnz	r0, 8002926 <vRET_C+0x26>
 8002924:	bd10      	pop	{r4, pc}
 8002926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800292a:	f7ff bf8f 	b.w	800284c <vRET_C.part.0>
 800292e:	bf00      	nop
 8002930:	24001664 	.word	0x24001664
 8002934:	24001094 	.word	0x24001094

08002938 <vLD_A_A>:
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop

0800293c <vLD_B_B>:
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop

08002940 <vLD_C_C>:
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop

08002944 <vLD_D_D>:
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop

08002948 <vLD_E_E>:
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop

0800294c <vLD_H_H>:
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop

08002950 <vLD_L_L>:
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop

08002954 <ucGetTstate>:

uint8_t ucGetTstate(){
	return tStates;
 8002954:	4b01      	ldr	r3, [pc, #4]	; (800295c <ucGetTstate+0x8>)
}
 8002956:	7818      	ldrb	r0, [r3, #0]
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	2400109d 	.word	0x2400109d

08002960 <vGBCPUHaltedHandler>:
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
		//vGBMemoryPrint();
	}
}

void vGBCPUHaltedHandler(){
 8002960:	b538      	push	{r3, r4, r5, lr}
	if(ucOneCycleInterruptDelay == 1){
 8002962:	4c13      	ldr	r4, [pc, #76]	; (80029b0 <vGBCPUHaltedHandler+0x50>)
 8002964:	7823      	ldrb	r3, [r4, #0]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d002      	beq.n	8002970 <vGBCPUHaltedHandler+0x10>
				}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ ucHALTED = 0;
				}
			}

	}else{
		ucOneCycleInterruptDelay++;
 800296a:	3301      	adds	r3, #1
 800296c:	7023      	strb	r3, [r4, #0]
	}
}
 800296e:	bd38      	pop	{r3, r4, r5, pc}
			if(ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR) & 0x1F){
 8002970:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002974:	f000 fe76 	bl	8003664 <ucGBMemoryRead>
 8002978:	4605      	mov	r5, r0
 800297a:	f64f 700f 	movw	r0, #65295	; 0xff0f
 800297e:	f000 fe71 	bl	8003664 <ucGBMemoryRead>
 8002982:	4028      	ands	r0, r5
 8002984:	06c2      	lsls	r2, r0, #27
 8002986:	d0f2      	beq.n	800296e <vGBCPUHaltedHandler+0xe>
				ucInterruptMasterEnable = 0;
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <vGBCPUHaltedHandler+0x54>)
 800298a:	2500      	movs	r5, #0
				uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 800298c:	f64f 70ff 	movw	r0, #65535	; 0xffff
				ucInterruptMasterEnable = 0;
 8002990:	701d      	strb	r5, [r3, #0]
				ucOneCycleInterruptDelay = 0;
 8002992:	7025      	strb	r5, [r4, #0]
				uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002994:	f000 fe66 	bl	8003664 <ucGBMemoryRead>
 8002998:	4604      	mov	r4, r0
 800299a:	f64f 700f 	movw	r0, #65295	; 0xff0f
 800299e:	f000 fe61 	bl	8003664 <ucGBMemoryRead>
 80029a2:	4020      	ands	r0, r4
				}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ ucHALTED = 0;
 80029a4:	06c3      	lsls	r3, r0, #27
 80029a6:	d0e2      	beq.n	800296e <vGBCPUHaltedHandler+0xe>
				if      (InterruptSetandEn &  VBLANK_INTERRUPT){ ucHALTED = 0;
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <vGBCPUHaltedHandler+0x58>)
 80029aa:	701d      	strb	r5, [r3, #0]
}
 80029ac:	bd38      	pop	{r3, r4, r5, pc}
 80029ae:	bf00      	nop
 80029b0:	240010a0 	.word	0x240010a0
 80029b4:	2400109f 	.word	0x2400109f
 80029b8:	2400109e 	.word	0x2400109e

080029bc <vGBCPUInterruptHandler>:

void vGBCPUInterruptHandler(){
 80029bc:	b570      	push	{r4, r5, r6, lr}
	if(ucOneCycleInterruptDelay == 1){
 80029be:	4d39      	ldr	r5, [pc, #228]	; (8002aa4 <vGBCPUInterruptHandler+0xe8>)
 80029c0:	782c      	ldrb	r4, [r5, #0]
 80029c2:	2c01      	cmp	r4, #1
 80029c4:	d002      	beq.n	80029cc <vGBCPUInterruptHandler+0x10>
				tStates += 5*4;
			}
		}

	}else{
		ucOneCycleInterruptDelay++;
 80029c6:	3401      	adds	r4, #1
 80029c8:	702c      	strb	r4, [r5, #0]
	}
}
 80029ca:	bd70      	pop	{r4, r5, r6, pc}
		if(ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR) & 0x1F){
 80029cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80029d0:	f000 fe48 	bl	8003664 <ucGBMemoryRead>
 80029d4:	4606      	mov	r6, r0
 80029d6:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029da:	f000 fe43 	bl	8003664 <ucGBMemoryRead>
 80029de:	4030      	ands	r0, r6
 80029e0:	06c6      	lsls	r6, r0, #27
 80029e2:	d0f2      	beq.n	80029ca <vGBCPUInterruptHandler+0xe>
			ucHALTED = 0;
 80029e4:	4b30      	ldr	r3, [pc, #192]	; (8002aa8 <vGBCPUInterruptHandler+0xec>)
			ucInterruptMasterEnable = 0;
 80029e6:	2600      	movs	r6, #0
 80029e8:	4a30      	ldr	r2, [pc, #192]	; (8002aac <vGBCPUInterruptHandler+0xf0>)
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 80029ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
			ucHALTED = 0;
 80029ee:	701e      	strb	r6, [r3, #0]
			ucInterruptMasterEnable = 0;
 80029f0:	7016      	strb	r6, [r2, #0]
			ucOneCycleInterruptDelay = 0;
 80029f2:	702e      	strb	r6, [r5, #0]
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 80029f4:	f000 fe36 	bl	8003664 <ucGBMemoryRead>
 80029f8:	4605      	mov	r5, r0
 80029fa:	f64f 700f 	movw	r0, #65295	; 0xff0f
 80029fe:	f000 fe31 	bl	8003664 <ucGBMemoryRead>
 8002a02:	4028      	ands	r0, r5
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = VBLANK_VECTOR;
 8002a04:	07c5      	lsls	r5, r0, #31
			uint8_t InterruptSetandEn = ucGBMemoryRead(IE_ADDR) & ucGBMemoryRead(IF_ADDR);
 8002a06:	b2c3      	uxtb	r3, r0
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = VBLANK_VECTOR;
 8002a08:	d418      	bmi.n	8002a3c <vGBCPUInterruptHandler+0x80>
			}else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = LCDSTAT_VECTOR;
 8002a0a:	0798      	lsls	r0, r3, #30
 8002a0c:	d423      	bmi.n	8002a56 <vGBCPUInterruptHandler+0x9a>
			}else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = TIMER_VECTOR;
 8002a0e:	0759      	lsls	r1, r3, #29
 8002a10:	d42e      	bmi.n	8002a70 <vGBCPUInterruptHandler+0xb4>
			}else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = SERIAL_VECTOR;
 8002a12:	071a      	lsls	r2, r3, #28
 8002a14:	d439      	bmi.n	8002a8a <vGBCPUInterruptHandler+0xce>
			}else if(InterruptSetandEn &  JOYPAD_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 4); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = JOYPAD_VECTOR;
 8002a16:	06db      	lsls	r3, r3, #27
 8002a18:	d5d7      	bpl.n	80029ca <vGBCPUInterruptHandler+0xe>
 8002a1a:	2104      	movs	r1, #4
 8002a1c:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a20:	f000 fdfe 	bl	8003620 <vGBMemoryResetBit>
 8002a24:	4922      	ldr	r1, [pc, #136]	; (8002ab0 <vGBCPUInterruptHandler+0xf4>)
 8002a26:	1e88      	subs	r0, r1, #2
 8002a28:	f000 fb5e 	bl	80030e8 <vGBFunctionPUSH>
 8002a2c:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <vGBCPUInterruptHandler+0xf8>)
 8002a2e:	2260      	movs	r2, #96	; 0x60
 8002a30:	815a      	strh	r2, [r3, #10]
				tStates += 5*4;
 8002a32:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <vGBCPUInterruptHandler+0xfc>)
 8002a34:	7813      	ldrb	r3, [r2, #0]
 8002a36:	3314      	adds	r3, #20
 8002a38:	7013      	strb	r3, [r2, #0]
}
 8002a3a:	bd70      	pop	{r4, r5, r6, pc}
			if      (InterruptSetandEn &  VBLANK_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 0); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = VBLANK_VECTOR;
 8002a3c:	4631      	mov	r1, r6
 8002a3e:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a42:	f000 fded 	bl	8003620 <vGBMemoryResetBit>
 8002a46:	491a      	ldr	r1, [pc, #104]	; (8002ab0 <vGBCPUInterruptHandler+0xf4>)
 8002a48:	1e88      	subs	r0, r1, #2
 8002a4a:	f000 fb4d 	bl	80030e8 <vGBFunctionPUSH>
 8002a4e:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <vGBCPUInterruptHandler+0xf8>)
 8002a50:	2240      	movs	r2, #64	; 0x40
 8002a52:	815a      	strh	r2, [r3, #10]
			if( ucInterrTrig == 1){
 8002a54:	e7ed      	b.n	8002a32 <vGBCPUInterruptHandler+0x76>
			}else if(InterruptSetandEn & LCDSTAT_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 1); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = LCDSTAT_VECTOR;
 8002a56:	4621      	mov	r1, r4
 8002a58:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a5c:	f000 fde0 	bl	8003620 <vGBMemoryResetBit>
 8002a60:	4913      	ldr	r1, [pc, #76]	; (8002ab0 <vGBCPUInterruptHandler+0xf4>)
 8002a62:	1e88      	subs	r0, r1, #2
 8002a64:	f000 fb40 	bl	80030e8 <vGBFunctionPUSH>
 8002a68:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <vGBCPUInterruptHandler+0xf8>)
 8002a6a:	2248      	movs	r2, #72	; 0x48
 8002a6c:	815a      	strh	r2, [r3, #10]
			if( ucInterrTrig == 1){
 8002a6e:	e7e0      	b.n	8002a32 <vGBCPUInterruptHandler+0x76>
			}else if(InterruptSetandEn &   TIMER_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 2); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = TIMER_VECTOR;
 8002a70:	2102      	movs	r1, #2
 8002a72:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a76:	f000 fdd3 	bl	8003620 <vGBMemoryResetBit>
 8002a7a:	490d      	ldr	r1, [pc, #52]	; (8002ab0 <vGBCPUInterruptHandler+0xf4>)
 8002a7c:	1e88      	subs	r0, r1, #2
 8002a7e:	f000 fb33 	bl	80030e8 <vGBFunctionPUSH>
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <vGBCPUInterruptHandler+0xf8>)
 8002a84:	2250      	movs	r2, #80	; 0x50
 8002a86:	815a      	strh	r2, [r3, #10]
			if( ucInterrTrig == 1){
 8002a88:	e7d3      	b.n	8002a32 <vGBCPUInterruptHandler+0x76>
			}else if(InterruptSetandEn &  SERIAL_INTERRUPT){ vGBMemoryResetBit(IF_ADDR, 3); vGBFunctionPUSH(&reg.SP, &reg.PC); ucInterrTrig = 1; reg.PC = SERIAL_VECTOR;
 8002a8a:	2103      	movs	r1, #3
 8002a8c:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8002a90:	f000 fdc6 	bl	8003620 <vGBMemoryResetBit>
 8002a94:	4906      	ldr	r1, [pc, #24]	; (8002ab0 <vGBCPUInterruptHandler+0xf4>)
 8002a96:	1e88      	subs	r0, r1, #2
 8002a98:	f000 fb26 	bl	80030e8 <vGBFunctionPUSH>
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <vGBCPUInterruptHandler+0xf8>)
 8002a9e:	2258      	movs	r2, #88	; 0x58
 8002aa0:	815a      	strh	r2, [r3, #10]
			if( ucInterrTrig == 1){
 8002aa2:	e7c6      	b.n	8002a32 <vGBCPUInterruptHandler+0x76>
 8002aa4:	240010a0 	.word	0x240010a0
 8002aa8:	2400109e 	.word	0x2400109e
 8002aac:	2400109f 	.word	0x2400109f
 8002ab0:	2400166e 	.word	0x2400166e
 8002ab4:	24001664 	.word	0x24001664
 8002ab8:	2400109d 	.word	0x2400109d

08002abc <vGBCPUinstr>:

void vGBCPUinstr(uint8_t opcode){
 8002abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if(reg.PC == 0xC36F){
 8002abe:	4e2b      	ldr	r6, [pc, #172]	; (8002b6c <vGBCPUinstr+0xb0>)
 8002ac0:	f24c 336f 	movw	r3, #50031	; 0xc36f
void vGBCPUinstr(uint8_t opcode){
 8002ac4:	4604      	mov	r4, r0
	if(reg.PC == 0xC36F){
 8002ac6:	8972      	ldrh	r2, [r6, #10]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d103      	bne.n	8002ad4 <vGBCPUinstr+0x18>
		num++;
 8002acc:	4a28      	ldr	r2, [pc, #160]	; (8002b70 <vGBCPUinstr+0xb4>)
 8002ace:	7813      	ldrb	r3, [r2, #0]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	7013      	strb	r3, [r2, #0]
	}

	if(!ucHALTED){
 8002ad4:	4d27      	ldr	r5, [pc, #156]	; (8002b74 <vGBCPUinstr+0xb8>)
 8002ad6:	782b      	ldrb	r3, [r5, #0]
 8002ad8:	b163      	cbz	r3, 8002af4 <vGBCPUinstr+0x38>
 8002ada:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <vGBCPUinstr+0xbc>)
 8002adc:	7818      	ldrb	r0, [r3, #0]
			tStates = instructions[opcode].Tstate;
		}

	}

	vGBMemoryIncTimers(tStates >> 2);
 8002ade:	0880      	lsrs	r0, r0, #2
 8002ae0:	f000 fe36 	bl	8003750 <vGBMemoryIncTimers>

	if(ucInterruptMasterEnable == 1)
 8002ae4:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <vGBCPUinstr+0xc0>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d01c      	beq.n	8002b26 <vGBCPUinstr+0x6a>
		vGBCPUInterruptHandler();

	if(ucHALTED == 1)
 8002aec:	782b      	ldrb	r3, [r5, #0]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d015      	beq.n	8002b1e <vGBCPUinstr+0x62>
		vGBCPUHaltedHandler();

}
 8002af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vGBMemorySetOP(opcode);
 8002af4:	4620      	mov	r0, r4
 8002af6:	f000 fcfb 	bl	80034f0 <vGBMemorySetOP>
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002afa:	2ccb      	cmp	r4, #203	; 0xcb
 8002afc:	d01b      	beq.n	8002b36 <vGBCPUinstr+0x7a>
 8002afe:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <vGBCPUinstr+0xc4>)
 8002b00:	8971      	ldrh	r1, [r6, #10]
 8002b02:	eb02 07c4 	add.w	r7, r2, r4, lsl #3
		((void (*)(void))instructions[opcode].instr)();
 8002b06:	f852 2034 	ldr.w	r2, [r2, r4, lsl #3]
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002b0a:	793b      	ldrb	r3, [r7, #4]
 8002b0c:	440b      	add	r3, r1
 8002b0e:	8173      	strh	r3, [r6, #10]
		((void (*)(void))instructions[opcode].instr)();
 8002b10:	4790      	blx	r2
		}else if(instructions[opcode].Tstate == 255){
 8002b12:	7978      	ldrb	r0, [r7, #5]
 8002b14:	28ff      	cmp	r0, #255	; 0xff
 8002b16:	d009      	beq.n	8002b2c <vGBCPUinstr+0x70>
			tStates = instructions[opcode].Tstate;
 8002b18:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <vGBCPUinstr+0xbc>)
 8002b1a:	7018      	strb	r0, [r3, #0]
 8002b1c:	e7df      	b.n	8002ade <vGBCPUinstr+0x22>
}
 8002b1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		vGBCPUHaltedHandler();
 8002b22:	f7ff bf1d 	b.w	8002960 <vGBCPUHaltedHandler>
		vGBCPUInterruptHandler();
 8002b26:	f7ff ff49 	bl	80029bc <vGBCPUInterruptHandler>
 8002b2a:	e7df      	b.n	8002aec <vGBCPUinstr+0x30>
			tStates = customDuration;
 8002b2c:	4a15      	ldr	r2, [pc, #84]	; (8002b84 <vGBCPUinstr+0xc8>)
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <vGBCPUinstr+0xbc>)
 8002b30:	7810      	ldrb	r0, [r2, #0]
 8002b32:	7018      	strb	r0, [r3, #0]
 8002b34:	e7d3      	b.n	8002ade <vGBCPUinstr+0x22>
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002b36:	8970      	ldrh	r0, [r6, #10]
 8002b38:	4c13      	ldr	r4, [pc, #76]	; (8002b88 <vGBCPUinstr+0xcc>)
 8002b3a:	3001      	adds	r0, #1
 8002b3c:	b280      	uxth	r0, r0
 8002b3e:	f000 fd91 	bl	8003664 <ucGBMemoryRead>
 8002b42:	8971      	ldrh	r1, [r6, #10]
 8002b44:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
		((void (*)(void))instructions[opcode].instr)();
 8002b48:	4a0d      	ldr	r2, [pc, #52]	; (8002b80 <vGBCPUinstr+0xc4>)
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002b4a:	7903      	ldrb	r3, [r0, #4]
		((void (*)(void))instructions[opcode].instr)();
 8002b4c:	f8d2 2658 	ldr.w	r2, [r2, #1624]	; 0x658
		reg.PC += (opcode != 0xCB) ? instructions[opcode].bytes : prefix_instructions[ucGBMemoryRead(reg.PC + 1)].bytes;
 8002b50:	440b      	add	r3, r1
 8002b52:	8173      	strh	r3, [r6, #10]
		((void (*)(void))instructions[opcode].instr)();
 8002b54:	4790      	blx	r2
			tStates = prefix_instructions[ucGBMemoryRead(reg.PC - 1)].Tstate;
 8002b56:	8970      	ldrh	r0, [r6, #10]
 8002b58:	3801      	subs	r0, #1
 8002b5a:	b280      	uxth	r0, r0
 8002b5c:	f000 fd82 	bl	8003664 <ucGBMemoryRead>
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <vGBCPUinstr+0xbc>)
 8002b62:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002b66:	7940      	ldrb	r0, [r0, #5]
 8002b68:	7018      	strb	r0, [r3, #0]
 8002b6a:	e7b8      	b.n	8002ade <vGBCPUinstr+0x22>
 8002b6c:	24001664 	.word	0x24001664
 8002b70:	2400109c 	.word	0x2400109c
 8002b74:	2400109e 	.word	0x2400109e
 8002b78:	2400109d 	.word	0x2400109d
 8002b7c:	2400109f 	.word	0x2400109f
 8002b80:	24000008 	.word	0x24000008
 8002b84:	24001094 	.word	0x24001094
 8002b88:	24000808 	.word	0x24000808

08002b8c <vGBCPUboot>:
void vGBCPUboot(){
 8002b8c:	b570      	push	{r4, r5, r6, lr}
	if(reg.PC <= 0xFF){
 8002b8e:	4c12      	ldr	r4, [pc, #72]	; (8002bd8 <vGBCPUboot+0x4c>)
 8002b90:	8960      	ldrh	r0, [r4, #10]
 8002b92:	28ff      	cmp	r0, #255	; 0xff
 8002b94:	d90a      	bls.n	8002bac <vGBCPUboot+0x20>
		numcount++;
 8002b96:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <vGBCPUboot+0x50>)
		if(n == 0){
 8002b98:	4d11      	ldr	r5, [pc, #68]	; (8002be0 <vGBCPUboot+0x54>)
		numcount++;
 8002b9a:	e9d2 3100 	ldrd	r3, r1, [r2]
		if(n == 0){
 8002b9e:	682e      	ldr	r6, [r5, #0]
		numcount++;
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	f141 0100 	adc.w	r1, r1, #0
 8002ba6:	e9c2 3100 	strd	r3, r1, [r2]
		if(n == 0){
 8002baa:	b12e      	cbz	r6, 8002bb8 <vGBCPUboot+0x2c>
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002bac:	f000 fd5a 	bl	8003664 <ucGBMemoryRead>
}
 8002bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002bb4:	f7ff bf82 	b.w	8002abc <vGBCPUinstr>
			vGBMemoryLoad(getRomPointer(), 256);
 8002bb8:	f001 f9ee 	bl	8003f98 <getRomPointer>
 8002bbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bc0:	f000 fcac 	bl	800351c <vGBMemoryLoad>
			n = 1;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	8960      	ldrh	r0, [r4, #10]
 8002bc8:	602b      	str	r3, [r5, #0]
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002bca:	f000 fd4b 	bl	8003664 <ucGBMemoryRead>
}
 8002bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vGBCPUinstr(ucGBMemoryRead(reg.PC));
 8002bd2:	f7ff bf73 	b.w	8002abc <vGBCPUinstr>
 8002bd6:	bf00      	nop
 8002bd8:	24001664 	.word	0x24001664
 8002bdc:	24001658 	.word	0x24001658
 8002be0:	24001098 	.word	0x24001098

08002be4 <concat_16bit_bigEndian>:
#include <stdio.h>
#include "gbfunctions.h"
#include "gbmemory.h"

uint16_t concat_16bit_bigEndian(uint8_t x, uint8_t y) {
	return (uint16_t) (y << 8) + x;
 8002be4:	eb00 2001 	add.w	r0, r0, r1, lsl #8
}
 8002be8:	b280      	uxth	r0, r0
 8002bea:	4770      	bx	lr

08002bec <setbit>:

void setbit(uint8_t *n, uint8_t bit){
	(*n) |= (0x1 << bit);
 8002bec:	2301      	movs	r3, #1
 8002bee:	fa03 f101 	lsl.w	r1, r3, r1
 8002bf2:	7803      	ldrb	r3, [r0, #0]
 8002bf4:	4319      	orrs	r1, r3
 8002bf6:	7001      	strb	r1, [r0, #0]
}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop

08002bfc <resetbit>:

void resetbit(uint8_t *n, uint8_t bit){
	(*n) &= ~(0x1 << bit);
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	fa03 f101 	lsl.w	r1, r3, r1
 8002c02:	7803      	ldrb	r3, [r0, #0]
 8002c04:	ea23 0101 	bic.w	r1, r3, r1
 8002c08:	7001      	strb	r1, [r0, #0]
}
 8002c0a:	4770      	bx	lr

08002c0c <checkbit>:

uint8_t checkbit(uint8_t n, uint8_t bit){
	return ((n >> bit) & 0x1);
 8002c0c:	4108      	asrs	r0, r1
}
 8002c0e:	f000 0001 	and.w	r0, r0, #1
 8002c12:	4770      	bx	lr

08002c14 <v8bitRegisterINC>:

void v8bitRegisterINC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002c14:	7803      	ldrb	r3, [r0, #0]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002c1c:	780b      	ldrb	r3, [r1, #0]
 8002c1e:	bf0c      	ite	eq
 8002c20:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002c24:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002c28:	700b      	strb	r3, [r1, #0]
	*reg = *reg + 1;
 8002c2a:	7803      	ldrb	r3, [r0, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002c30:	f991 2000 	ldrsb.w	r2, [r1]
 8002c34:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8002c38:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002c3a:	7800      	ldrb	r0, [r0, #0]
 8002c3c:	b118      	cbz	r0, 8002c46 <v8bitRegisterINC+0x32>
	(*n) &= ~(0x1 << bit);
 8002c3e:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8002c42:	700b      	strb	r3, [r1, #0]
}
 8002c44:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002c46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	700b      	strb	r3, [r1, #0]
}
 8002c4e:	4770      	bx	lr

08002c50 <v8bitRegisterDEC>:

void v8bitRegisterDEC(uint8_t *reg, uint8_t *flagReg){
	((*reg & 0x0F) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8002c50:	7803      	ldrb	r3, [r0, #0]
 8002c52:	f013 0f0f 	tst.w	r3, #15
	(*n) &= ~(0x1 << bit);
 8002c56:	780b      	ldrb	r3, [r1, #0]
 8002c58:	bf14      	ite	ne
 8002c5a:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002c5e:	f043 0320 	orreq.w	r3, r3, #32
 8002c62:	700b      	strb	r3, [r1, #0]
	*reg = *reg - 1;
 8002c64:	7803      	ldrb	r3, [r0, #0]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	7003      	strb	r3, [r0, #0]
	(*n) |= (0x1 << bit);
 8002c6a:	f991 3000 	ldrsb.w	r3, [r1]
 8002c6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c72:	700a      	strb	r2, [r1, #0]
	setbit(flagReg, N_FLAG);
	(*reg != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002c74:	7802      	ldrb	r2, [r0, #0]
 8002c76:	b12a      	cbz	r2, 8002c84 <v8bitRegisterDEC+0x34>
	(*n) &= ~(0x1 << bit);
 8002c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c80:	700b      	strb	r3, [r1, #0]
}
 8002c82:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8002c84:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	700b      	strb	r3, [r1, #0]
}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop

08002c90 <vGBFunctionRLCA>:
	return ((n >> bit) & 0x1);
 8002c90:	7802      	ldrb	r2, [r0, #0]

void vGBFunctionRLCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(*reg, 7);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002c92:	09d3      	lsrs	r3, r2, #7
 8002c94:	bf0c      	ite	eq
 8002c96:	2300      	moveq	r3, #0
 8002c98:	2310      	movne	r3, #16
 8002c9a:	700b      	strb	r3, [r1, #0]
	*reg <<= 1;
 8002c9c:	7803      	ldrb	r3, [r0, #0]
 8002c9e:	005b      	lsls	r3, r3, #1
	*reg += tempCarry;
 8002ca0:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8002ca4:	7003      	strb	r3, [r0, #0]
}
 8002ca6:	4770      	bx	lr

08002ca8 <vGBFunctionRRCA>:
	return ((n >> bit) & 0x1);
 8002ca8:	7803      	ldrb	r3, [r0, #0]

void vGBFunctionRRCA(uint8_t *reg, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(*reg, 0);
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002caa:	f013 0301 	ands.w	r3, r3, #1
 8002cae:	d007      	beq.n	8002cc0 <vGBFunctionRRCA+0x18>
 8002cb0:	2310      	movs	r3, #16
 8002cb2:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002cb4:	7803      	ldrb	r3, [r0, #0]
 8002cb6:	085b      	lsrs	r3, r3, #1
	(*n) |= (0x1 << bit);
 8002cb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cbc:	7003      	strb	r3, [r0, #0]
}
 8002cbe:	4770      	bx	lr
	*flagReg = (tempCarry != 0) ? 0x10 : 0x00;
 8002cc0:	700b      	strb	r3, [r1, #0]
	*reg >>= 1;
 8002cc2:	7803      	ldrb	r3, [r0, #0]
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	7003      	strb	r3, [r0, #0]
	if (tempCarry != 0) setbit(reg, 7);
}
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop

08002ccc <vGBFunction16bitADD>:

void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
	uint32_t tempRes = *regHL + reg16;
 8002ccc:	8803      	ldrh	r3, [r0, #0]
 8002cce:	4419      	add	r1, r3
	(tempRes & 0xFFFF0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002cd0:	03cb      	lsls	r3, r1, #15
void vGBFunction16bitADD(uint16_t *regHL, uint16_t reg16, uint8_t *flagReg){
 8002cd2:	b430      	push	{r4, r5}
	(tempRes & 0xFFFF0000) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002cd4:	d517      	bpl.n	8002d06 <vGBFunction16bitADD+0x3a>
	(*n) |= (0x1 << bit);
 8002cd6:	f992 3000 	ldrsb.w	r3, [r2]
 8002cda:	f043 0310 	orr.w	r3, r3, #16
 8002cde:	b2dc      	uxtb	r4, r3
 8002ce0:	7014      	strb	r4, [r2, #0]
	(((tempRes & 0x07FF) < (*regHL & 0x07FF))) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002ce2:	f3c1 050a 	ubfx	r5, r1, #0, #11
 8002ce6:	8804      	ldrh	r4, [r0, #0]
 8002ce8:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8002cec:	42a5      	cmp	r5, r4
 8002cee:	d211      	bcs.n	8002d14 <vGBFunction16bitADD+0x48>
	(*n) |= (0x1 << bit);
 8002cf0:	f043 0320 	orr.w	r3, r3, #32
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	7013      	strb	r3, [r2, #0]
	*regHL = (uint16_t)(tempRes & 0xffff);
 8002cf8:	8001      	strh	r1, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002cfa:	7813      	ldrb	r3, [r2, #0]
 8002cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	resetbit(flagReg, N_FLAG);
}
 8002d00:	bc30      	pop	{r4, r5}
	(*n) &= ~(0x1 << bit);
 8002d02:	7013      	strb	r3, [r2, #0]
}
 8002d04:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002d06:	f992 4000 	ldrsb.w	r4, [r2]
 8002d0a:	f024 0310 	bic.w	r3, r4, #16
 8002d0e:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002d12:	e7e5      	b.n	8002ce0 <vGBFunction16bitADD+0x14>
	(*n) &= ~(0x1 << bit);
 8002d14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002d18:	e7ed      	b.n	8002cf6 <vGBFunction16bitADD+0x2a>
 8002d1a:	bf00      	nop

08002d1c <vGBFunctionRLA>:

void vGBFunctionRLA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002d1c:	f990 2000 	ldrsb.w	r2, [r0]
	return ((n >> bit) & 0x1);
 8002d20:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002d22:	10d2      	asrs	r2, r2, #3
	return ((n >> bit) & 0x1);
 8002d24:	f3c3 1300 	ubfx	r3, r3, #4, #1
	*flagReg = ((*regA & 0x80) != 0) ? 0x10 : 0x00;
 8002d28:	f002 0210 	and.w	r2, r2, #16
 8002d2c:	700a      	strb	r2, [r1, #0]
	*regA <<= 1;
 8002d2e:	7802      	ldrb	r2, [r0, #0]
	*regA += prevCarry;
 8002d30:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002d34:	7003      	strb	r3, [r0, #0]
}
 8002d36:	4770      	bx	lr

08002d38 <vGBFunctionRRA>:

void vGBFunctionRRA(uint8_t *regA, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002d38:	7802      	ldrb	r2, [r0, #0]
	return ((n >> bit) & 0x1);
 8002d3a:	780b      	ldrb	r3, [r1, #0]
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002d3c:	0112      	lsls	r2, r2, #4
	return ((n >> bit) & 0x1);
 8002d3e:	091b      	lsrs	r3, r3, #4
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002d40:	f002 0210 	and.w	r2, r2, #16
	*regA >>= 1;
	*regA += (prevCarry << 7);
 8002d44:	01db      	lsls	r3, r3, #7
	*flagReg = ((*regA & 0x01) != 0) ? 0x10 : 0x00;
 8002d46:	700a      	strb	r2, [r1, #0]
	*regA >>= 1;
 8002d48:	7802      	ldrb	r2, [r0, #0]
	*regA += (prevCarry << 7);
 8002d4a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002d4e:	7003      	strb	r3, [r0, #0]
}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop

08002d54 <vGBFunctionJR_NZ>:
	return ((n >> bit) & 0x1);
 8002d54:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_NZ(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002d56:	4603      	mov	r3, r0
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002d58:	09c9      	lsrs	r1, r1, #7
 8002d5a:	d105      	bne.n	8002d68 <vGBFunctionJR_NZ+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002d5c:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002d5e:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002d60:	fa41 f282 	sxtab	r2, r1, r2
 8002d64:	801a      	strh	r2, [r3, #0]
		return 12;
 8002d66:	4770      	bx	lr
		return 8;
 8002d68:	2008      	movs	r0, #8
	}
}
 8002d6a:	4770      	bx	lr

08002d6c <vGBFunctionDAA>:

void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
	uint16_t tempShort = *regA;
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002d6c:	780a      	ldrb	r2, [r1, #0]
void vGBFunctionDAA(uint8_t *regA, uint8_t *flagReg){
 8002d6e:	b410      	push	{r4}
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002d70:	f012 0f40 	tst.w	r2, #64	; 0x40
	uint16_t tempShort = *regA;
 8002d74:	7804      	ldrb	r4, [r0, #0]
 8002d76:	b2a3      	uxth	r3, r4
	if(checkbit(*flagReg, N_FLAG) != 0){
 8002d78:	d012      	beq.n	8002da0 <vGBFunctionDAA+0x34>
		if(checkbit(*flagReg, H_FLAG) != 0) tempShort += 0xFA;
 8002d7a:	0694      	lsls	r4, r2, #26
 8002d7c:	bf48      	it	mi
 8002d7e:	33fa      	addmi	r3, #250	; 0xfa
		if(checkbit(*flagReg, C_FLAG) != 0) tempShort += 0xA0;
 8002d80:	06d2      	lsls	r2, r2, #27
 8002d82:	d425      	bmi.n	8002dd0 <vGBFunctionDAA+0x64>
	}else{
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
		if(checkbit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; setbit(flagReg, C_FLAG);
		}else{ resetbit(flagReg, C_FLAG);}
	}
	*regA = tempShort;
 8002d84:	7003      	strb	r3, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002d86:	f991 2000 	ldrsb.w	r2, [r1]
 8002d8a:	f022 0320 	bic.w	r3, r2, #32
 8002d8e:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, H_FLAG);
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002d90:	7800      	ldrb	r0, [r0, #0]
 8002d92:	b1b0      	cbz	r0, 8002dc2 <vGBFunctionDAA+0x56>
	(*n) &= ~(0x1 << bit);
 8002d94:	f002 035f 	and.w	r3, r2, #95	; 0x5f
}
 8002d98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d9c:	700b      	strb	r3, [r1, #0]
 8002d9e:	4770      	bx	lr
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002da0:	f012 0f20 	tst.w	r2, #32
 8002da4:	d017      	beq.n	8002dd6 <vGBFunctionDAA+0x6a>
 8002da6:	3306      	adds	r3, #6
 8002da8:	b29b      	uxth	r3, r3
		if(checkbit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; setbit(flagReg, C_FLAG);
 8002daa:	06d4      	lsls	r4, r2, #27
 8002dac:	d403      	bmi.n	8002db6 <vGBFunctionDAA+0x4a>
 8002dae:	f403 74f8 	and.w	r4, r3, #496	; 0x1f0
 8002db2:	2c90      	cmp	r4, #144	; 0x90
 8002db4:	d914      	bls.n	8002de0 <vGBFunctionDAA+0x74>
 8002db6:	3360      	adds	r3, #96	; 0x60
	(*n) |= (0x1 << bit);
 8002db8:	f042 0210 	orr.w	r2, r2, #16
		if(checkbit(*flagReg, C_FLAG) || ((tempShort & 0x1F0) > 0x90)){ tempShort += 0x60; setbit(flagReg, C_FLAG);
 8002dbc:	b29b      	uxth	r3, r3
	(*n) |= (0x1 << bit);
 8002dbe:	700a      	strb	r2, [r1, #0]
}
 8002dc0:	e7e0      	b.n	8002d84 <vGBFunctionDAA+0x18>
	(*n) |= (0x1 << bit);
 8002dc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
}
 8002dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
	(*n) |= (0x1 << bit);
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	700b      	strb	r3, [r1, #0]
}
 8002dce:	4770      	bx	lr
		if(checkbit(*flagReg, C_FLAG) != 0) tempShort += 0xA0;
 8002dd0:	33a0      	adds	r3, #160	; 0xa0
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	e7d6      	b.n	8002d84 <vGBFunctionDAA+0x18>
		if(checkbit(*flagReg, H_FLAG) || (tempShort & 0xF) > 9) tempShort += 0x06;
 8002dd6:	f004 040f 	and.w	r4, r4, #15
 8002dda:	2c09      	cmp	r4, #9
 8002ddc:	d9e5      	bls.n	8002daa <vGBFunctionDAA+0x3e>
 8002dde:	e7e2      	b.n	8002da6 <vGBFunctionDAA+0x3a>
	(*n) &= ~(0x1 << bit);
 8002de0:	f022 0210 	bic.w	r2, r2, #16
 8002de4:	700a      	strb	r2, [r1, #0]
}
 8002de6:	e7cd      	b.n	8002d84 <vGBFunctionDAA+0x18>

08002de8 <vGBFunctionJR_Z>:
	return ((n >> bit) & 0x1);
 8002de8:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_Z(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002dea:	4603      	mov	r3, r0
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8002dec:	09c9      	lsrs	r1, r1, #7
 8002dee:	d005      	beq.n	8002dfc <vGBFunctionJR_Z+0x14>
		*regPC += (int8_t) r8value;
 8002df0:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002df2:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002df4:	fa41 f282 	sxtab	r2, r1, r2
 8002df8:	801a      	strh	r2, [r3, #0]
		return 12;
 8002dfa:	4770      	bx	lr
	}else{
		return 8;
 8002dfc:	2008      	movs	r0, #8
	}
}
 8002dfe:	4770      	bx	lr

08002e00 <vGBFunctionJR_NC>:
	return ((n >> bit) & 0x1);
 8002e00:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_NC(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002e02:	4603      	mov	r3, r0
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002e04:	06c9      	lsls	r1, r1, #27
 8002e06:	d405      	bmi.n	8002e14 <vGBFunctionJR_NC+0x14>
		return 8;
	}else{
		*regPC += (int8_t) r8value;
 8002e08:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002e0a:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002e0c:	fa41 f282 	sxtab	r2, r1, r2
 8002e10:	801a      	strh	r2, [r3, #0]
		return 12;
 8002e12:	4770      	bx	lr
		return 8;
 8002e14:	2008      	movs	r0, #8
	}
}
 8002e16:	4770      	bx	lr

08002e18 <vMemoryLocationINC>:

void vMemoryLocationINC(uint16_t loc, uint8_t *flagReg){
 8002e18:	b538      	push	{r3, r4, r5, lr}
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002e1e:	f000 fc21 	bl	8003664 <ucGBMemoryRead>
 8002e22:	f000 000f 	and.w	r0, r0, #15
	(*n) |= (0x1 << bit);
 8002e26:	7823      	ldrb	r3, [r4, #0]
	((ucGBMemoryRead(loc) & 0x0F) == 0x0F) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002e28:	280f      	cmp	r0, #15
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002e2a:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002e2c:	bf0c      	ite	eq
 8002e2e:	f043 0320 	orreq.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002e32:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
 8002e36:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) + 1);
 8002e38:	f000 fc14 	bl	8003664 <ucGBMemoryRead>
 8002e3c:	4601      	mov	r1, r0
 8002e3e:	4628      	mov	r0, r5
 8002e40:	3101      	adds	r1, #1
 8002e42:	b2c9      	uxtb	r1, r1
 8002e44:	f000 fc22 	bl	800368c <vGBMemoryWrite>
	(*n) &= ~(0x1 << bit);
 8002e48:	7823      	ldrb	r3, [r4, #0]
	resetbit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e4a:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e50:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e52:	f000 fc07 	bl	8003664 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002e56:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e58:	b118      	cbz	r0, 8002e62 <vMemoryLocationINC+0x4a>
	(*n) &= ~(0x1 << bit);
 8002e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e5e:	7023      	strb	r3, [r4, #0]
}
 8002e60:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e66:	7023      	strb	r3, [r4, #0]
}
 8002e68:	bd38      	pop	{r3, r4, r5, pc}
 8002e6a:	bf00      	nop

08002e6c <vMemoryLocationDEC>:

void vMemoryLocationDEC(uint16_t loc, uint8_t *flagReg){
 8002e6c:	b538      	push	{r3, r4, r5, lr}
 8002e6e:	460c      	mov	r4, r1
 8002e70:	4605      	mov	r5, r0
	((ucGBMemoryRead(loc) & 0x0F) != 0) ? resetbit(flagReg, H_FLAG) : setbit(flagReg, H_FLAG);
 8002e72:	f000 fbf7 	bl	8003664 <ucGBMemoryRead>
 8002e76:	0702      	lsls	r2, r0, #28
	(*n) &= ~(0x1 << bit);
 8002e78:	7823      	ldrb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002e7a:	4628      	mov	r0, r5
	(*n) &= ~(0x1 << bit);
 8002e7c:	bf14      	ite	ne
 8002e7e:	f003 03df 	andne.w	r3, r3, #223	; 0xdf
	(*n) |= (0x1 << bit);
 8002e82:	f043 0320 	orreq.w	r3, r3, #32
 8002e86:	7023      	strb	r3, [r4, #0]
	vGBMemoryWrite(loc, ucGBMemoryRead(loc) - 1);
 8002e88:	f000 fbec 	bl	8003664 <ucGBMemoryRead>
 8002e8c:	4601      	mov	r1, r0
 8002e8e:	4628      	mov	r0, r5
 8002e90:	3901      	subs	r1, #1
 8002e92:	b2c9      	uxtb	r1, r1
 8002e94:	f000 fbfa 	bl	800368c <vGBMemoryWrite>
	(*n) |= (0x1 << bit);
 8002e98:	7823      	ldrb	r3, [r4, #0]
	setbit(flagReg, N_FLAG);
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002e9a:	4628      	mov	r0, r5
	(*n) |= (0x1 << bit);
 8002e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea0:	7023      	strb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002ea2:	f000 fbdf 	bl	8003664 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 8002ea6:	7823      	ldrb	r3, [r4, #0]
	(ucGBMemoryRead(loc) != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002ea8:	b118      	cbz	r0, 8002eb2 <vMemoryLocationDEC+0x46>
	(*n) &= ~(0x1 << bit);
 8002eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eae:	7023      	strb	r3, [r4, #0]
}
 8002eb0:	bd38      	pop	{r3, r4, r5, pc}
	(*n) |= (0x1 << bit);
 8002eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb6:	7023      	strb	r3, [r4, #0]
}
 8002eb8:	bd38      	pop	{r3, r4, r5, pc}
 8002eba:	bf00      	nop

08002ebc <vGBFunctionJR_C>:
	return ((n >> bit) & 0x1);
 8002ebc:	7809      	ldrb	r1, [r1, #0]

uint8_t vGBFunctionJR_C(uint16_t *regPC, uint8_t *flagReg, uint8_t r8value){
 8002ebe:	4603      	mov	r3, r0
	if(checkbit(*flagReg, C_FLAG) != 0){
 8002ec0:	06c9      	lsls	r1, r1, #27
 8002ec2:	d505      	bpl.n	8002ed0 <vGBFunctionJR_C+0x14>
		*regPC += (int8_t) r8value;
 8002ec4:	8801      	ldrh	r1, [r0, #0]
		return 12;
 8002ec6:	200c      	movs	r0, #12
		*regPC += (int8_t) r8value;
 8002ec8:	fa41 f282 	sxtab	r2, r1, r2
 8002ecc:	801a      	strh	r2, [r3, #0]
		return 12;
 8002ece:	4770      	bx	lr
	}else{
		return 8;
 8002ed0:	2008      	movs	r0, #8
	}
}
 8002ed2:	4770      	bx	lr

08002ed4 <vGBFunctionADD>:

void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = *regA + regValue;
 8002ed4:	7803      	ldrb	r3, [r0, #0]
void vGBFunctionADD(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002ed6:	b430      	push	{r4, r5}
	((*regA & 0xF) + (regValue & 0xF) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002ed8:	f002 050f 	and.w	r5, r2, #15
 8002edc:	f003 040f 	and.w	r4, r3, #15
	uint32_t tempRes = *regA + regValue;
 8002ee0:	441a      	add	r2, r3
	((*regA & 0xF) + (regValue & 0xF) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002ee2:	1963      	adds	r3, r4, r5
 8002ee4:	2b0f      	cmp	r3, #15
	(*n) |= (0x1 << bit);
 8002ee6:	f991 3000 	ldrsb.w	r3, [r1]
 8002eea:	bfcc      	ite	gt
 8002eec:	f043 0320 	orrgt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8002ef0:	f023 0320 	bicle.w	r3, r3, #32
	resetbit(flagReg, N_FLAG);
	(tempRes > 0xFF) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002ef4:	2aff      	cmp	r2, #255	; 0xff
 8002ef6:	dd0d      	ble.n	8002f14 <vGBFunctionADD+0x40>
	(*n) |= (0x1 << bit);
 8002ef8:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
	*regA = tempRes;
 8002efc:	b2d2      	uxtb	r2, r2
	(*n) |= (0x1 << bit);
 8002efe:	f043 0310 	orr.w	r3, r3, #16
 8002f02:	700b      	strb	r3, [r1, #0]
	*regA = tempRes;
 8002f04:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002f06:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f08:	b162      	cbz	r2, 8002f24 <vGBFunctionADD+0x50>
	(*n) &= ~(0x1 << bit);
 8002f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f0e:	bc30      	pop	{r4, r5}
 8002f10:	700b      	strb	r3, [r1, #0]
 8002f12:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002f14:	f003 03af 	and.w	r3, r3, #175	; 0xaf
	*regA = tempRes;
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	700b      	strb	r3, [r1, #0]
 8002f1c:	7002      	strb	r2, [r0, #0]
	(*n) &= ~(0x1 << bit);
 8002f1e:	780b      	ldrb	r3, [r1, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f20:	2a00      	cmp	r2, #0
 8002f22:	d1f2      	bne.n	8002f0a <vGBFunctionADD+0x36>
	(*n) |= (0x1 << bit);
 8002f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002f28:	bc30      	pop	{r4, r5}
 8002f2a:	700b      	strb	r3, [r1, #0]
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop

08002f30 <vGBFunctionADC>:

void vGBFunctionADC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002f30:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002f32:	780d      	ldrb	r5, [r1, #0]
	((*regA & 0xF) + ((regValue & 0xF) + checkbit(*flagReg, C_FLAG)) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002f34:	f002 060f 	and.w	r6, r2, #15
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002f38:	7804      	ldrb	r4, [r0, #0]
 8002f3a:	f3c5 1300 	ubfx	r3, r5, #4, #1
 8002f3e:	4422      	add	r2, r4
	((*regA & 0xF) + ((regValue & 0xF) + checkbit(*flagReg, C_FLAG)) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002f40:	f004 070f 	and.w	r7, r4, #15
 8002f44:	18f4      	adds	r4, r6, r3
	uint32_t tempRes = *regA + regValue + checkbit(*flagReg, C_FLAG);
 8002f46:	4413      	add	r3, r2
	((*regA & 0xF) + ((regValue & 0xF) + checkbit(*flagReg, C_FLAG)) > 0xF) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8002f48:	19e2      	adds	r2, r4, r7
 8002f4a:	2a0f      	cmp	r2, #15
	(*n) |= (0x1 << bit);
 8002f4c:	bfcc      	ite	gt
 8002f4e:	f045 0520 	orrgt.w	r5, r5, #32
	(*n) &= ~(0x1 << bit);
 8002f52:	f025 0520 	bicle.w	r5, r5, #32
	resetbit(flagReg, N_FLAG);
	(tempRes > 0xFF) ? setbit(flagReg, C_FLAG) : resetbit(flagReg, C_FLAG);
 8002f56:	2bff      	cmp	r3, #255	; 0xff
	(*n) &= ~(0x1 << bit);
 8002f58:	b26d      	sxtb	r5, r5
	(tempRes > 0xFF) ? setbit(flagReg, C_FLAG) : resetbit(flagReg, C_FLAG);
 8002f5a:	dd0d      	ble.n	8002f78 <vGBFunctionADC+0x48>
	(*n) |= (0x1 << bit);
 8002f5c:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
	*regA = tempRes;
 8002f60:	b2db      	uxtb	r3, r3
	(*n) |= (0x1 << bit);
 8002f62:	f045 0510 	orr.w	r5, r5, #16
 8002f66:	700d      	strb	r5, [r1, #0]
	*regA = tempRes;
 8002f68:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f6a:	b163      	cbz	r3, 8002f86 <vGBFunctionADC+0x56>
	(*n) &= ~(0x1 << bit);
 8002f6c:	780b      	ldrb	r3, [r1, #0]
 8002f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f72:	bcf0      	pop	{r4, r5, r6, r7}
 8002f74:	700b      	strb	r3, [r1, #0]
 8002f76:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002f78:	f005 05af 	and.w	r5, r5, #175	; 0xaf
	*regA = tempRes;
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	700d      	strb	r5, [r1, #0]
 8002f80:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f2      	bne.n	8002f6c <vGBFunctionADC+0x3c>
	(*n) |= (0x1 << bit);
 8002f86:	780b      	ldrb	r3, [r1, #0]
 8002f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8002f8c:	bcf0      	pop	{r4, r5, r6, r7}
 8002f8e:	700b      	strb	r3, [r1, #0]
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop

08002f94 <vGBFunctionSUB>:

void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002f94:	7803      	ldrb	r3, [r0, #0]
 8002f96:	4293      	cmp	r3, r2
void vGBFunctionSUB(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8002f98:	b430      	push	{r4, r5}
	(regValue > *regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8002f9a:	d21d      	bcs.n	8002fd8 <vGBFunctionSUB+0x44>
	(*n) |= (0x1 << bit);
 8002f9c:	f991 3000 	ldrsb.w	r3, [r1]
 8002fa0:	f043 0310 	orr.w	r3, r3, #16
 8002fa4:	b2dc      	uxtb	r4, r3
 8002fa6:	700c      	strb	r4, [r1, #0]
	((regValue & 0x0F) > (*regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8002fa8:	f002 050f 	and.w	r5, r2, #15
 8002fac:	7804      	ldrb	r4, [r0, #0]
 8002fae:	f004 040f 	and.w	r4, r4, #15
 8002fb2:	42a5      	cmp	r5, r4
 8002fb4:	d920      	bls.n	8002ff8 <vGBFunctionSUB+0x64>
	(*n) |= (0x1 << bit);
 8002fb6:	f043 0320 	orr.w	r3, r3, #32
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	700b      	strb	r3, [r1, #0]
	*regA -= regValue;
 8002fbe:	7803      	ldrb	r3, [r0, #0]
 8002fc0:	1a9a      	subs	r2, r3, r2
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	7002      	strb	r2, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8002fc6:	b172      	cbz	r2, 8002fe6 <vGBFunctionSUB+0x52>
	(*n) &= ~(0x1 << bit);
 8002fc8:	780b      	ldrb	r3, [r1, #0]
 8002fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 8002fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8002fd2:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002fd4:	700b      	strb	r3, [r1, #0]
}
 8002fd6:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002fd8:	f991 4000 	ldrsb.w	r4, [r1]
 8002fdc:	f024 0310 	bic.w	r3, r4, #16
 8002fe0:	f004 04ef 	and.w	r4, r4, #239	; 0xef
}
 8002fe4:	e7df      	b.n	8002fa6 <vGBFunctionSUB+0x12>
	(*n) |= (0x1 << bit);
 8002fe6:	f991 3000 	ldrsb.w	r3, [r1]
 8002fea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8002ff2:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 8002ff4:	700b      	strb	r3, [r1, #0]
}
 8002ff6:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8002ff8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
}
 8002ffc:	e7de      	b.n	8002fbc <vGBFunctionSUB+0x28>
 8002ffe:	bf00      	nop

08003000 <vGBFunctionSBC>:

void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
	uint32_t tempRes = regValue + checkbit(*flagReg, C_FLAG);
 8003000:	780b      	ldrb	r3, [r1, #0]
void vGBFunctionSBC(uint8_t *regA, uint8_t *flagReg, uint8_t regValue){
 8003002:	b470      	push	{r4, r5, r6}
	return ((n >> bit) & 0x1);
 8003004:	f3c3 1500 	ubfx	r5, r3, #4, #1
	((*regA & 0xF) - ((regValue & 0xF) + checkbit(*flagReg, C_FLAG)) < 0x0) ? setbit(flagReg, H_FLAG) : resetbit(flagReg, H_FLAG);
 8003008:	7804      	ldrb	r4, [r0, #0]
 800300a:	f002 060f 	and.w	r6, r2, #15
 800300e:	f004 040f 	and.w	r4, r4, #15
 8003012:	442e      	add	r6, r5
 8003014:	1ba4      	subs	r4, r4, r6
 8003016:	2c00      	cmp	r4, #0
	(*n) |= (0x1 << bit);
 8003018:	bfb4      	ite	lt
 800301a:	f043 0320 	orrlt.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 800301e:	f023 0320 	bicge.w	r3, r3, #32
 8003022:	700b      	strb	r3, [r1, #0]
 8003024:	b25e      	sxtb	r6, r3
	(*regA - regValue - checkbit(*flagReg, C_FLAG) < 0 ) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003026:	7804      	ldrb	r4, [r0, #0]
 8003028:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800302c:	1aa4      	subs	r4, r4, r2
 800302e:	1ae3      	subs	r3, r4, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	db19      	blt.n	8003068 <vGBFunctionSBC+0x68>
	(*n) &= ~(0x1 << bit);
 8003034:	f006 03ef 	and.w	r3, r6, #239	; 0xef
 8003038:	700b      	strb	r3, [r1, #0]
	*regA -= tempRes;
 800303a:	7804      	ldrb	r4, [r0, #0]
 800303c:	1aa3      	subs	r3, r4, r2
 800303e:	1b5b      	subs	r3, r3, r5
 8003040:	b2db      	uxtb	r3, r3
 8003042:	7003      	strb	r3, [r0, #0]
	(*regA != 0) ? resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8003044:	b13b      	cbz	r3, 8003056 <vGBFunctionSBC+0x56>
	(*n) &= ~(0x1 << bit);
 8003046:	780b      	ldrb	r3, [r1, #0]
 8003048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 800304c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 8003050:	bc70      	pop	{r4, r5, r6}
	(*n) |= (0x1 << bit);
 8003052:	700b      	strb	r3, [r1, #0]
}
 8003054:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8003056:	f991 3000 	ldrsb.w	r3, [r1]
 800305a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800305e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8003062:	bc70      	pop	{r4, r5, r6}
	(*n) |= (0x1 << bit);
 8003064:	700b      	strb	r3, [r1, #0]
}
 8003066:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 8003068:	f046 0310 	orr.w	r3, r6, #16
 800306c:	b2db      	uxtb	r3, r3
}
 800306e:	e7e3      	b.n	8003038 <vGBFunctionSBC+0x38>

08003070 <vGBFunctionCP>:
	(*n) |= (0x1 << bit);
 8003070:	f991 3000 	ldrsb.w	r3, [r1]

void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
	(regValue > regA) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003074:	4282      	cmp	r2, r0
void vGBFunctionCP(uint8_t regA, uint8_t *flagReg, uint8_t regValue){
 8003076:	b430      	push	{r4, r5}
	((regValue & 0x0F) > (regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 8003078:	f002 040f 	and.w	r4, r2, #15
 800307c:	f000 050f 	and.w	r5, r0, #15
	(*n) |= (0x1 << bit);
 8003080:	bf8c      	ite	hi
 8003082:	f043 0310 	orrhi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003086:	f023 0310 	bicls.w	r3, r3, #16
	((regValue & 0x0F) > (regA & 0x0F)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 800308a:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 800308c:	bf8c      	ite	hi
 800308e:	f043 0320 	orrhi.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 8003092:	f023 0320 	bicls.w	r3, r3, #32
	(regA == regValue) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003096:	4282      	cmp	r2, r0
	(*n) |= (0x1 << bit);
 8003098:	bf0c      	ite	eq
 800309a:	f063 037f 	orneq	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 800309e:	f003 037f 	andne.w	r3, r3, #127	; 0x7f
	(*n) |= (0x1 << bit);
 80030a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	setbit(flagReg, N_FLAG);
}
 80030a6:	bc30      	pop	{r4, r5}
	(*n) |= (0x1 << bit);
 80030a8:	700b      	strb	r3, [r1, #0]
}
 80030aa:	4770      	bx	lr

080030ac <vGBFunctionRET>:

void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	4604      	mov	r4, r0
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 80030b0:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionRET(uint16_t *regSP, uint16_t *regPC){
 80030b2:	460e      	mov	r6, r1
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 80030b4:	f000 fad6 	bl	8003664 <ucGBMemoryRead>
 80030b8:	8823      	ldrh	r3, [r4, #0]
 80030ba:	4605      	mov	r5, r0
 80030bc:	1c58      	adds	r0, r3, #1
 80030be:	b280      	uxth	r0, r0
 80030c0:	f000 fad0 	bl	8003664 <ucGBMemoryRead>
	return (uint16_t) (y << 8) + x;
 80030c4:	eb05 2000 	add.w	r0, r5, r0, lsl #8
	*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
 80030c8:	8030      	strh	r0, [r6, #0]
	*regSP += 2;
 80030ca:	8823      	ldrh	r3, [r4, #0]
 80030cc:	3302      	adds	r3, #2
 80030ce:	8023      	strh	r3, [r4, #0]
}
 80030d0:	bd70      	pop	{r4, r5, r6, pc}
 80030d2:	bf00      	nop

080030d4 <vGBFunctionPOP>:
 80030d4:	f7ff bfea 	b.w	80030ac <vGBFunctionRET>

080030d8 <vGBFunctionJP_NZ_a16>:
	return ((n >> bit) & 0x1);
 80030d8:	780b      	ldrb	r3, [r1, #0]
	*reg16 = concat_16bit_bigEndian(ucGBMemoryRead(*regSP), ucGBMemoryRead(*regSP + 1));
	*regSP += 2;
}

uint8_t vGBFunctionJP_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, Z_FLAG) != 0){
 80030da:	09db      	lsrs	r3, r3, #7
 80030dc:	d102      	bne.n	80030e4 <vGBFunctionJP_NZ_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 80030de:	8002      	strh	r2, [r0, #0]
		return 16;
 80030e0:	2010      	movs	r0, #16
 80030e2:	4770      	bx	lr
		return 12;
 80030e4:	200c      	movs	r0, #12
	}
}
 80030e6:	4770      	bx	lr

080030e8 <vGBFunctionPUSH>:
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}

void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 80030e8:	b538      	push	{r3, r4, r5, lr}
 80030ea:	4604      	mov	r4, r0
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 80030ec:	8800      	ldrh	r0, [r0, #0]
void vGBFunctionPUSH(uint16_t *regSP, uint16_t *reg16){
 80030ee:	460d      	mov	r5, r1
	vGBMemoryWrite(*regSP - 1, (uint8_t) ((*reg16 & 0xFF00) >> 8));
 80030f0:	8809      	ldrh	r1, [r1, #0]
 80030f2:	3801      	subs	r0, #1
 80030f4:	0a09      	lsrs	r1, r1, #8
 80030f6:	b280      	uxth	r0, r0
 80030f8:	f000 fac8 	bl	800368c <vGBMemoryWrite>
	vGBMemoryWrite(*regSP - 2, (uint8_t) (*reg16 & 0x00FF));
 80030fc:	8820      	ldrh	r0, [r4, #0]
 80030fe:	7829      	ldrb	r1, [r5, #0]
 8003100:	3802      	subs	r0, #2
 8003102:	b280      	uxth	r0, r0
 8003104:	f000 fac2 	bl	800368c <vGBMemoryWrite>
	*regSP -= 2;
 8003108:	8823      	ldrh	r3, [r4, #0]
 800310a:	3b02      	subs	r3, #2
 800310c:	8023      	strh	r3, [r4, #0]
}
 800310e:	bd38      	pop	{r3, r4, r5, pc}

08003110 <vGBFunctionCALL_NZ_a16>:
uint8_t vGBFunctionCALL_NZ_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8003110:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 8003112:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, Z_FLAG) != 0){
 8003114:	09db      	lsrs	r3, r3, #7
 8003116:	d001      	beq.n	800311c <vGBFunctionCALL_NZ_a16+0xc>
		return 12;
 8003118:	200c      	movs	r0, #12
}
 800311a:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 800311c:	4604      	mov	r4, r0
 800311e:	4610      	mov	r0, r2
 8003120:	4621      	mov	r1, r4
 8003122:	f7ff ffe1 	bl	80030e8 <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003126:	8820      	ldrh	r0, [r4, #0]
 8003128:	3802      	subs	r0, #2
 800312a:	b280      	uxth	r0, r0
 800312c:	f000 fa9a 	bl	8003664 <ucGBMemoryRead>
 8003130:	8823      	ldrh	r3, [r4, #0]
 8003132:	4605      	mov	r5, r0
 8003134:	1e58      	subs	r0, r3, #1
 8003136:	b280      	uxth	r0, r0
 8003138:	f000 fa94 	bl	8003664 <ucGBMemoryRead>
 800313c:	4603      	mov	r3, r0
		return 24;
 800313e:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8003140:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 8003144:	8025      	strh	r5, [r4, #0]
}
 8003146:	bd38      	pop	{r3, r4, r5, pc}

08003148 <vGBFunctionJP_Z_a16>:
	return ((n >> bit) & 0x1);
 8003148:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, Z_FLAG) != 0){
 800314a:	09db      	lsrs	r3, r3, #7
 800314c:	d002      	beq.n	8003154 <vGBFunctionJP_Z_a16+0xc>
		*regPC = addr;
 800314e:	8002      	strh	r2, [r0, #0]
		return 16;
 8003150:	2010      	movs	r0, #16
 8003152:	4770      	bx	lr
	}else{
		return 12;
 8003154:	200c      	movs	r0, #12
	}
}
 8003156:	4770      	bx	lr

08003158 <vGBFunctionCALL_Z_a16>:

uint8_t vGBFunctionCALL_Z_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 8003158:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 800315a:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, Z_FLAG) != 0){
 800315c:	09db      	lsrs	r3, r3, #7
 800315e:	d101      	bne.n	8003164 <vGBFunctionCALL_Z_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 8003160:	200c      	movs	r0, #12
	}
}
 8003162:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 8003164:	4604      	mov	r4, r0
 8003166:	4610      	mov	r0, r2
 8003168:	4621      	mov	r1, r4
 800316a:	f7ff ffbd 	bl	80030e8 <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800316e:	8820      	ldrh	r0, [r4, #0]
 8003170:	3802      	subs	r0, #2
 8003172:	b280      	uxth	r0, r0
 8003174:	f000 fa76 	bl	8003664 <ucGBMemoryRead>
 8003178:	8823      	ldrh	r3, [r4, #0]
 800317a:	4605      	mov	r5, r0
 800317c:	1e58      	subs	r0, r3, #1
 800317e:	b280      	uxth	r0, r0
 8003180:	f000 fa70 	bl	8003664 <ucGBMemoryRead>
 8003184:	4603      	mov	r3, r0
		return 24;
 8003186:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8003188:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800318c:	8025      	strh	r5, [r4, #0]
}
 800318e:	bd38      	pop	{r3, r4, r5, pc}

08003190 <vGBFunctionJP_NC_a16>:
	return ((n >> bit) & 0x1);
 8003190:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, C_FLAG) != 0){
 8003192:	06db      	lsls	r3, r3, #27
 8003194:	d402      	bmi.n	800319c <vGBFunctionJP_NC_a16+0xc>
		return 12;
	}else{
		*regPC = addr;
 8003196:	8002      	strh	r2, [r0, #0]
		return 16;
 8003198:	2010      	movs	r0, #16
 800319a:	4770      	bx	lr
		return 12;
 800319c:	200c      	movs	r0, #12
	}
}
 800319e:	4770      	bx	lr

080031a0 <vGBFunctionCALL_NC_a16>:

uint8_t vGBFunctionCALL_NC_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 80031a0:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 80031a2:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, C_FLAG) != 0){
 80031a4:	06db      	lsls	r3, r3, #27
 80031a6:	d501      	bpl.n	80031ac <vGBFunctionCALL_NC_a16+0xc>
		return 12;
 80031a8:	200c      	movs	r0, #12
	}else{
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}
}
 80031aa:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 80031ac:	4604      	mov	r4, r0
 80031ae:	4610      	mov	r0, r2
 80031b0:	4621      	mov	r1, r4
 80031b2:	f7ff ff99 	bl	80030e8 <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80031b6:	8820      	ldrh	r0, [r4, #0]
 80031b8:	3802      	subs	r0, #2
 80031ba:	b280      	uxth	r0, r0
 80031bc:	f000 fa52 	bl	8003664 <ucGBMemoryRead>
 80031c0:	8823      	ldrh	r3, [r4, #0]
 80031c2:	4605      	mov	r5, r0
 80031c4:	1e58      	subs	r0, r3, #1
 80031c6:	b280      	uxth	r0, r0
 80031c8:	f000 fa4c 	bl	8003664 <ucGBMemoryRead>
 80031cc:	4603      	mov	r3, r0
		return 24;
 80031ce:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 80031d0:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80031d4:	8025      	strh	r5, [r4, #0]
}
 80031d6:	bd38      	pop	{r3, r4, r5, pc}

080031d8 <vGBFunctionJP_C_a16>:
	return ((n >> bit) & 0x1);
 80031d8:	780b      	ldrb	r3, [r1, #0]

uint8_t vGBFunctionJP_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t addr){
	if(checkbit(*flagReg, C_FLAG) != 0){
 80031da:	06db      	lsls	r3, r3, #27
 80031dc:	d502      	bpl.n	80031e4 <vGBFunctionJP_C_a16+0xc>
		*regPC = addr;
 80031de:	8002      	strh	r2, [r0, #0]
		return 16;
 80031e0:	2010      	movs	r0, #16
 80031e2:	4770      	bx	lr
	}else{
		return 12;
 80031e4:	200c      	movs	r0, #12
	}
}
 80031e6:	4770      	bx	lr

080031e8 <vGBFunctionCALL_C_a16>:

uint8_t vGBFunctionCALL_C_a16(uint16_t *regPC, uint8_t *flagReg, uint16_t *regSP){
 80031e8:	b538      	push	{r3, r4, r5, lr}
	return ((n >> bit) & 0x1);
 80031ea:	780b      	ldrb	r3, [r1, #0]
	if(checkbit(*flagReg, C_FLAG) != 0){
 80031ec:	06db      	lsls	r3, r3, #27
 80031ee:	d401      	bmi.n	80031f4 <vGBFunctionCALL_C_a16+0xc>
		vGBFunctionPUSH(regSP, regPC);
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
		return 24;
	}else{
		return 12;
 80031f0:	200c      	movs	r0, #12
	}
}
 80031f2:	bd38      	pop	{r3, r4, r5, pc}
		vGBFunctionPUSH(regSP, regPC);
 80031f4:	4604      	mov	r4, r0
 80031f6:	4610      	mov	r0, r2
 80031f8:	4621      	mov	r1, r4
 80031fa:	f7ff ff75 	bl	80030e8 <vGBFunctionPUSH>
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 80031fe:	8820      	ldrh	r0, [r4, #0]
 8003200:	3802      	subs	r0, #2
 8003202:	b280      	uxth	r0, r0
 8003204:	f000 fa2e 	bl	8003664 <ucGBMemoryRead>
 8003208:	8823      	ldrh	r3, [r4, #0]
 800320a:	4605      	mov	r5, r0
 800320c:	1e58      	subs	r0, r3, #1
 800320e:	b280      	uxth	r0, r0
 8003210:	f000 fa28 	bl	8003664 <ucGBMemoryRead>
 8003214:	4603      	mov	r3, r0
		return 24;
 8003216:	2018      	movs	r0, #24
	return (uint16_t) (y << 8) + x;
 8003218:	eb05 2503 	add.w	r5, r5, r3, lsl #8
		*regPC = concat_16bit_bigEndian(ucGBMemoryRead(*regPC - 2), ucGBMemoryRead(*regPC - 1));
 800321c:	8025      	strh	r5, [r4, #0]
}
 800321e:	bd38      	pop	{r3, r4, r5, pc}

08003220 <vGBFunctionADD_SP_r8>:

void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
	uint32_t tempRes = *regSP +r8value;
 8003220:	8803      	ldrh	r3, [r0, #0]
void vGBFunctionADD_SP_r8(uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 8003222:	b430      	push	{r4, r5}
	uint32_t tempRes = *regSP +r8value;
 8003224:	189c      	adds	r4, r3, r2
	((tempRes & 0xFF) < (*regSP & 0xFF)) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003226:	b2db      	uxtb	r3, r3
 8003228:	b2e5      	uxtb	r5, r4
 800322a:	429d      	cmp	r5, r3
 800322c:	d219      	bcs.n	8003262 <vGBFunctionADD_SP_r8+0x42>
	(*n) |= (0x1 << bit);
 800322e:	f991 3000 	ldrsb.w	r3, [r1]
 8003232:	f043 0310 	orr.w	r3, r3, #16
 8003236:	b2dd      	uxtb	r5, r3
 8003238:	700d      	strb	r5, [r1, #0]
	((tempRes & 0xF) < (*regSP & 0xF)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 800323a:	f004 040f 	and.w	r4, r4, #15
 800323e:	8805      	ldrh	r5, [r0, #0]
 8003240:	f005 050f 	and.w	r5, r5, #15
 8003244:	42ac      	cmp	r4, r5
	(*n) |= (0x1 << bit);
 8003246:	bf34      	ite	cc
 8003248:	f043 0320 	orrcc.w	r3, r3, #32
	(*n) &= ~(0x1 << bit);
 800324c:	f023 0320 	biccs.w	r3, r3, #32
 8003250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003254:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	*regSP += (int8_t) r8value;
 8003256:	8803      	ldrh	r3, [r0, #0]
 8003258:	fa43 f282 	sxtab	r2, r3, r2
}
 800325c:	bc30      	pop	{r4, r5}
	*regSP += (int8_t) r8value;
 800325e:	8002      	strh	r2, [r0, #0]
}
 8003260:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003262:	f991 5000 	ldrsb.w	r5, [r1]
 8003266:	f025 0310 	bic.w	r3, r5, #16
 800326a:	f005 05ef 	and.w	r5, r5, #239	; 0xef
}
 800326e:	e7e3      	b.n	8003238 <vGBFunctionADD_SP_r8+0x18>

08003270 <vGBFunctionLD_HL_SP_r8>:

void vGBFunctionLD_HL_SP_r8(uint16_t *regHL, uint16_t *regSP, uint8_t *flagReg, uint8_t r8value){
 8003270:	b470      	push	{r4, r5, r6}
	uint32_t tempRes = *regSP +r8value;
 8003272:	880c      	ldrh	r4, [r1, #0]
 8003274:	18e5      	adds	r5, r4, r3
	((tempRes & 0xFF) < (*regSP & 0xFF)) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003276:	b2e4      	uxtb	r4, r4
 8003278:	b2ee      	uxtb	r6, r5
 800327a:	42a6      	cmp	r6, r4
 800327c:	d219      	bcs.n	80032b2 <vGBFunctionLD_HL_SP_r8+0x42>
	(*n) |= (0x1 << bit);
 800327e:	f992 4000 	ldrsb.w	r4, [r2]
 8003282:	f044 0410 	orr.w	r4, r4, #16
 8003286:	b2e6      	uxtb	r6, r4
 8003288:	7016      	strb	r6, [r2, #0]
	((tempRes & 0xF) < (*regSP & 0xF)) ? setbit(flagReg, H_FLAG): resetbit(flagReg, H_FLAG);
 800328a:	f005 050f 	and.w	r5, r5, #15
 800328e:	880e      	ldrh	r6, [r1, #0]
 8003290:	f006 060f 	and.w	r6, r6, #15
 8003294:	42b5      	cmp	r5, r6
	(*n) |= (0x1 << bit);
 8003296:	bf34      	ite	cc
 8003298:	f044 0420 	orrcc.w	r4, r4, #32
	(*n) &= ~(0x1 << bit);
 800329c:	f024 0420 	biccs.w	r4, r4, #32
 80032a0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 80032a4:	7014      	strb	r4, [r2, #0]
	resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	 *regHL = *regSP + (int8_t) r8value;
 80032a6:	880a      	ldrh	r2, [r1, #0]
 80032a8:	fa42 f383 	sxtab	r3, r2, r3
}
 80032ac:	bc70      	pop	{r4, r5, r6}
	 *regHL = *regSP + (int8_t) r8value;
 80032ae:	8003      	strh	r3, [r0, #0]
}
 80032b0:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80032b2:	f992 6000 	ldrsb.w	r6, [r2]
 80032b6:	f026 0410 	bic.w	r4, r6, #16
 80032ba:	f006 06ef 	and.w	r6, r6, #239	; 0xef
}
 80032be:	e7e3      	b.n	8003288 <vGBFunctionLD_HL_SP_r8+0x18>

080032c0 <ucGBFunctionRLC>:

/*prefix functions*/

uint8_t ucGBFunctionRLC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(regValue, 7);
	regValue <<= 1;
 80032c0:	0043      	lsls	r3, r0, #1
	return ((n >> bit) & 0x1);
 80032c2:	11c2      	asrs	r2, r0, #7
	regValue += tempCarry;
 80032c4:	eb03 10d0 	add.w	r0, r3, r0, lsr #7
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80032c8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80032cc:	d10a      	bne.n	80032e4 <ucGBFunctionRLC+0x24>
	(*n) |= (0x1 << bit);
 80032ce:	f991 3000 	ldrsb.w	r3, [r1]
 80032d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80032d6:	b152      	cbz	r2, 80032ee <ucGBFunctionRLC+0x2e>
	(*n) |= (0x1 << bit);
 80032d8:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80032dc:	f043 0310 	orr.w	r3, r3, #16
 80032e0:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80032e2:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80032e4:	780b      	ldrb	r3, [r1, #0]
 80032e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80032ea:	2a00      	cmp	r2, #0
 80032ec:	d1f4      	bne.n	80032d8 <ucGBFunctionRLC+0x18>
	(*n) &= ~(0x1 << bit);
 80032ee:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 80032f2:	700b      	strb	r3, [r1, #0]
}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop

080032f8 <ucGBFunctionRRC>:

uint8_t ucGBFunctionRRC(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempCarry = checkbit(regValue, 0);
	regValue >>= 1;
	if(tempCarry) setbit(&regValue, 7);
 80032f8:	07c3      	lsls	r3, r0, #31
	regValue >>= 1;
 80032fa:	ea4f 0250 	mov.w	r2, r0, lsr #1
	if(tempCarry) setbit(&regValue, 7);
 80032fe:	d509      	bpl.n	8003314 <ucGBFunctionRRC+0x1c>
	(*n) &= ~(0x1 << bit);
 8003300:	780b      	ldrb	r3, [r1, #0]
	(*n) |= (0x1 << bit);
 8003302:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	(*n) &= ~(0x1 << bit);
 8003306:	f003 031f 	and.w	r3, r3, #31
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
	return regValue;
}
 800330a:	4610      	mov	r0, r2
	(*n) |= (0x1 << bit);
 800330c:	f043 0310 	orr.w	r3, r3, #16
 8003310:	700b      	strb	r3, [r1, #0]
}
 8003312:	4770      	bx	lr
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003314:	b942      	cbnz	r2, 8003328 <ucGBFunctionRRC+0x30>
	(*n) |= (0x1 << bit);
 8003316:	f991 3000 	ldrsb.w	r3, [r1]
 800331a:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 800331e:	f003 038f 	and.w	r3, r3, #143	; 0x8f
}
 8003322:	4610      	mov	r0, r2
 8003324:	700b      	strb	r3, [r1, #0]
 8003326:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003328:	780b      	ldrb	r3, [r1, #0]
 800332a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	(tempCarry != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800332e:	e7f6      	b.n	800331e <ucGBFunctionRRC+0x26>

08003330 <ucGBFunctionRL>:

uint8_t ucGBFunctionRL(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
 8003330:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x80) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003332:	f010 0f80 	tst.w	r0, #128	; 0x80
	return ((n >> bit) & 0x1);
 8003336:	f3c3 1200 	ubfx	r2, r3, #4, #1
	(*n) |= (0x1 << bit);
 800333a:	bf14      	ite	ne
 800333c:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003340:	f023 0310 	biceq.w	r3, r3, #16
	regValue <<= 1;
	regValue += prevCarry;
 8003344:	eb02 0040 	add.w	r0, r2, r0, lsl #1
	(*n) &= ~(0x1 << bit);
 8003348:	b25b      	sxtb	r3, r3
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800334a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800334e:	d105      	bne.n	800335c <ucGBFunctionRL+0x2c>
	(*n) |= (0x1 << bit);
 8003350:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003358:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800335a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	700b      	strb	r3, [r1, #0]
}
 8003362:	4770      	bx	lr

08003364 <ucGBFunctionRR>:

uint8_t ucGBFunctionRR(uint8_t regValue, uint8_t *flagReg){
	uint8_t prevCarry =  checkbit(*flagReg, C_FLAG);
 8003364:	780b      	ldrb	r3, [r1, #0]
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 8003366:	f010 0f01 	tst.w	r0, #1
	return ((n >> bit) & 0x1);
 800336a:	ea4f 1213 	mov.w	r2, r3, lsr #4
	(*n) |= (0x1 << bit);
 800336e:	bf14      	ite	ne
 8003370:	f043 0310 	orrne.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003374:	f023 0310 	biceq.w	r3, r3, #16
	regValue >>= 1;
	regValue += (prevCarry << 7);
 8003378:	01d2      	lsls	r2, r2, #7
	(*n) &= ~(0x1 << bit);
 800337a:	b25b      	sxtb	r3, r3
	regValue += (prevCarry << 7);
 800337c:	eb02 0050 	add.w	r0, r2, r0, lsr #1
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003380:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003384:	d105      	bne.n	8003392 <ucGBFunctionRR+0x2e>
	(*n) |= (0x1 << bit);
 8003386:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 800338a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800338e:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 8003390:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	700b      	strb	r3, [r1, #0]
}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop

0800339c <ucGBFunctionSLA>:

uint8_t ucGBFunctionSLA(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x80) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800339c:	0602      	lsls	r2, r0, #24
	(*n) |= (0x1 << bit);
 800339e:	f991 3000 	ldrsb.w	r3, [r1]
	regValue <<= 1;
 80033a2:	ea4f 0040 	mov.w	r0, r0, lsl #1
	(*n) |= (0x1 << bit);
 80033a6:	bf4c      	ite	mi
 80033a8:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 80033ac:	f023 0310 	bicpl.w	r3, r3, #16
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80033b0:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80033b4:	d105      	bne.n	80033c2 <ucGBFunctionSLA+0x26>
	(*n) |= (0x1 << bit);
 80033b6:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80033ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033be:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80033c0:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	700b      	strb	r3, [r1, #0]
}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop

080033cc <ucGBFunctionSRA>:

uint8_t ucGBFunctionSRA(uint8_t regValue, uint8_t *flagReg){
	uint8_t tempMSB = regValue & 0x80;
 80033cc:	f000 0380 	and.w	r3, r0, #128	; 0x80
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 80033d0:	f010 0f01 	tst.w	r0, #1
	(*n) |= (0x1 << bit);
 80033d4:	f991 2000 	ldrsb.w	r2, [r1]
	regValue >>= 1;
	regValue += tempMSB;
 80033d8:	eb03 0050 	add.w	r0, r3, r0, lsr #1
	(*n) |= (0x1 << bit);
 80033dc:	bf14      	ite	ne
 80033de:	f042 0210 	orrne.w	r2, r2, #16
	(*n) &= ~(0x1 << bit);
 80033e2:	f022 0210 	biceq.w	r2, r2, #16
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 80033e6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80033ea:	d105      	bne.n	80033f8 <ucGBFunctionSRA+0x2c>
	(*n) |= (0x1 << bit);
 80033ec:	f002 039f 	and.w	r3, r2, #159	; 0x9f
 80033f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f4:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 80033f6:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 80033f8:	f002 031f 	and.w	r3, r2, #31
 80033fc:	700b      	strb	r3, [r1, #0]
}
 80033fe:	4770      	bx	lr

08003400 <ucGBFunctionSWAP>:

uint8_t ucGBFunctionSWAP(uint8_t regValue, uint8_t *flagReg){
	regValue = ((regValue & 0x0F) << 4) | ((regValue & 0xF0) >> 4);
 8003400:	0903      	lsrs	r3, r0, #4
 8003402:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 8003406:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800340a:	d107      	bne.n	800341c <ucGBFunctionSWAP+0x1c>
	(*n) |= (0x1 << bit);
 800340c:	f991 3000 	ldrsb.w	r3, [r1]
 8003410:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8003414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003418:	700b      	strb	r3, [r1, #0]
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	resetbit(flagReg, C_FLAG);
	return regValue;
}
 800341a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800341c:	780b      	ldrb	r3, [r1, #0]
 800341e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	700b      	strb	r3, [r1, #0]
}
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop

0800342c <ucGBFunctionSRL>:

uint8_t ucGBFunctionSRL(uint8_t regValue, uint8_t *flagReg){
	((regValue & 0x01) != 0) ? setbit(flagReg, C_FLAG): resetbit(flagReg, C_FLAG);
 800342c:	07c2      	lsls	r2, r0, #31
	(*n) |= (0x1 << bit);
 800342e:	f991 3000 	ldrsb.w	r3, [r1]
 8003432:	bf4c      	ite	mi
 8003434:	f043 0310 	orrmi.w	r3, r3, #16
	(*n) &= ~(0x1 << bit);
 8003438:	f023 0310 	bicpl.w	r3, r3, #16
	regValue >>= 1;
	resetbit(flagReg, N_FLAG);
	resetbit(flagReg, H_FLAG);
	(regValue == 0) ? setbit(flagReg, Z_FLAG): resetbit(flagReg, Z_FLAG);
 800343c:	0840      	lsrs	r0, r0, #1
 800343e:	d105      	bne.n	800344c <ucGBFunctionSRL+0x20>
	(*n) |= (0x1 << bit);
 8003440:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8003444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003448:	700b      	strb	r3, [r1, #0]
	return regValue;
}
 800344a:	4770      	bx	lr
	(*n) &= ~(0x1 << bit);
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	700b      	strb	r3, [r1, #0]
}
 8003452:	4770      	bx	lr

08003454 <vGBFunctionBIT>:
	return ((n >> bit) & 0x1);
 8003454:	fa40 f101 	asr.w	r1, r0, r1

void vGBFunctionBIT(uint8_t regValue, uint8_t bit, uint8_t *flagReg){
	(checkbit(regValue, bit) != 0) ?  resetbit(flagReg, Z_FLAG): setbit(flagReg, Z_FLAG);
 8003458:	07cb      	lsls	r3, r1, #31
 800345a:	d508      	bpl.n	800346e <vGBFunctionBIT+0x1a>
	(*n) &= ~(0x1 << bit);
 800345c:	7813      	ldrb	r3, [r2, #0]
 800345e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 8003466:	f043 0320 	orr.w	r3, r3, #32
 800346a:	7013      	strb	r3, [r2, #0]
	resetbit(flagReg, N_FLAG);
	setbit(flagReg, H_FLAG);
}
 800346c:	4770      	bx	lr
	(*n) |= (0x1 << bit);
 800346e:	f992 3000 	ldrsb.w	r3, [r2]
 8003472:	f063 037f 	orn	r3, r3, #127	; 0x7f
	(*n) &= ~(0x1 << bit);
 8003476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	(*n) |= (0x1 << bit);
 800347a:	f043 0320 	orr.w	r3, r3, #32
 800347e:	7013      	strb	r3, [r2, #0]
}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop

08003484 <ucGBFunctionRESHL>:

uint8_t ucGBFunctionRESHL(uint16_t regHLaddr, uint8_t bit){
 8003484:	b510      	push	{r4, lr}
 8003486:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 8003488:	f000 f8ec 	bl	8003664 <ucGBMemoryRead>
	(*n) &= ~(0x1 << bit);
 800348c:	2301      	movs	r3, #1
 800348e:	fa03 f104 	lsl.w	r1, r3, r4
 8003492:	ea20 0001 	bic.w	r0, r0, r1
	resetbit(&tempRes, bit);
	return tempRes;
}
 8003496:	b2c0      	uxtb	r0, r0
 8003498:	bd10      	pop	{r4, pc}
 800349a:	bf00      	nop

0800349c <ucGBFunctionSETHL>:

uint8_t ucGBFunctionSETHL(uint16_t regHLaddr, uint8_t bit){
 800349c:	b510      	push	{r4, lr}
 800349e:	460c      	mov	r4, r1
	uint8_t tempRes = ucGBMemoryRead(regHLaddr);
 80034a0:	f000 f8e0 	bl	8003664 <ucGBMemoryRead>
	(*n) |= (0x1 << bit);
 80034a4:	2301      	movs	r3, #1
 80034a6:	fa03 f104 	lsl.w	r1, r3, r4
 80034aa:	4308      	orrs	r0, r1
	setbit(&tempRes, bit);
	return tempRes;
}
 80034ac:	b2c0      	uxtb	r0, r0
 80034ae:	bd10      	pop	{r4, pc}

080034b0 <vGBMemoryWrite.part.0>:
 * @brief
 * @details
 * @param address
 * @param data
 */
void vGBMemoryWrite(uint16_t address, uint8_t data){
 80034b0:	b538      	push	{r3, r4, r5, lr}
			mem.ram[DIV_ADDR] = 0;
			return;
		}

		else if(address == TAC_ADDR){
			timerStopStart = checkbit(data, 2);
 80034b2:	2102      	movs	r1, #2
void vGBMemoryWrite(uint16_t address, uint8_t data){
 80034b4:	4604      	mov	r4, r0
			timerStopStart = checkbit(data, 2);
 80034b6:	f7ff fba9 	bl	8002c0c <checkbit>
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <vGBMemoryWrite.part.0+0x34>)
 80034bc:	4602      	mov	r2, r0
			clockMode = (checkbit(data, 1) * 2) + checkbit(data, 0);
 80034be:	2101      	movs	r1, #1
 80034c0:	4620      	mov	r0, r4
			timerStopStart = checkbit(data, 2);
 80034c2:	701a      	strb	r2, [r3, #0]
			clockMode = (checkbit(data, 1) * 2) + checkbit(data, 0);
 80034c4:	f7ff fba2 	bl	8002c0c <checkbit>
 80034c8:	4605      	mov	r5, r0
 80034ca:	2100      	movs	r1, #0
 80034cc:	4620      	mov	r0, r4
 80034ce:	f7ff fb9d 	bl	8002c0c <checkbit>
			mem.ram[address] = data;
 80034d2:	4905      	ldr	r1, [pc, #20]	; (80034e8 <vGBMemoryWrite.part.0+0x38>)
 80034d4:	f64f 7207 	movw	r2, #65287	; 0xff07
			clockMode = (checkbit(data, 1) * 2) + checkbit(data, 0);
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <vGBMemoryWrite.part.0+0x3c>)
 80034da:	eb00 0045 	add.w	r0, r0, r5, lsl #1
			mem.ram[address] = data;
 80034de:	548c      	strb	r4, [r1, r2]
			clockMode = (checkbit(data, 1) * 2) + checkbit(data, 0);
 80034e0:	7018      	strb	r0, [r3, #0]
		mem.ram[address - 0x2000] = data;
		return;
	}

	mem.ram[address] = data;
}
 80034e2:	bd38      	pop	{r3, r4, r5, pc}
 80034e4:	24011674 	.word	0x24011674
 80034e8:	24001674 	.word	0x24001674
 80034ec:	24011675 	.word	0x24011675

080034f0 <vGBMemorySetOP>:
	current_op = op;
 80034f0:	4b01      	ldr	r3, [pc, #4]	; (80034f8 <vGBMemorySetOP+0x8>)
 80034f2:	7018      	strb	r0, [r3, #0]
}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	24001660 	.word	0x24001660

080034fc <vGBMemoryInit>:
	mem.ram[JOY_ADDR] = 0xCF;
 80034fc:	4b06      	ldr	r3, [pc, #24]	; (8003518 <vGBMemoryInit+0x1c>)
 80034fe:	21cf      	movs	r1, #207	; 0xcf
 8003500:	20f8      	movs	r0, #248	; 0xf8
 8003502:	f503 427f 	add.w	r2, r3, #65280	; 0xff00
void vGBMemoryInit(){
 8003506:	b430      	push	{r4, r5}
	mem.ram[IF_ADDR] = 0xE1;
 8003508:	f64f 740f 	movw	r4, #65295	; 0xff0f
 800350c:	25e1      	movs	r5, #225	; 0xe1
	mem.ram[JOY_ADDR] = 0xCF;
 800350e:	7011      	strb	r1, [r2, #0]
	mem.ram[IF_ADDR] = 0xE1;
 8003510:	551d      	strb	r5, [r3, r4]
}
 8003512:	bc30      	pop	{r4, r5}
 8003514:	f7ff bfcc 	b.w	80034b0 <vGBMemoryWrite.part.0>
 8003518:	24001674 	.word	0x24001674

0800351c <vGBMemoryLoad>:
void vGBMemoryLoad(const void* data, uint32_t bytes){
 800351c:	4603      	mov	r3, r0
 800351e:	460a      	mov	r2, r1
	memcpy(mem.ram , data, bytes);
 8003520:	4801      	ldr	r0, [pc, #4]	; (8003528 <vGBMemoryLoad+0xc>)
 8003522:	4619      	mov	r1, r3
 8003524:	f006 bec4 	b.w	800a2b0 <memcpy>
 8003528:	24001674 	.word	0x24001674

0800352c <vGBMemoryJoypad>:
uint8_t vGBMemoryJoypad(){
 800352c:	b538      	push	{r3, r4, r5, lr}
	if(joypadSELdir == 0x10){
 800352e:	4c25      	ldr	r4, [pc, #148]	; (80035c4 <vGBMemoryJoypad+0x98>)
 8003530:	7822      	ldrb	r2, [r4, #0]
 8003532:	2a10      	cmp	r2, #16
 8003534:	d009      	beq.n	800354a <vGBMemoryJoypad+0x1e>
	}else if(joypadSELbut == 0x20){
 8003536:	4d24      	ldr	r5, [pc, #144]	; (80035c8 <vGBMemoryJoypad+0x9c>)
 8003538:	782b      	ldrb	r3, [r5, #0]
 800353a:	2b20      	cmp	r3, #32
 800353c:	d029      	beq.n	8003592 <vGBMemoryJoypad+0x66>
 800353e:	200e      	movs	r0, #14
	return 0xC0 | (0xF^mask) | (joypadSELbut | joypadSELdir);
 8003540:	4310      	orrs	r0, r2
 8003542:	4318      	orrs	r0, r3
}
 8003544:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8003548:	bd38      	pop	{r3, r4, r5, pc}
		HAL_ADC_Start(&hadc3);
 800354a:	4820      	ldr	r0, [pc, #128]	; (80035cc <vGBMemoryJoypad+0xa0>)
 800354c:	f003 f89a 	bl	8006684 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8003550:	f04f 31ff 	mov.w	r1, #4294967295
 8003554:	481d      	ldr	r0, [pc, #116]	; (80035cc <vGBMemoryJoypad+0xa0>)
 8003556:	f002 fd83 	bl	8006060 <HAL_ADC_PollForConversion>
	    value = HAL_ADC_GetValue(&hadc3) >> 12;
 800355a:	481c      	ldr	r0, [pc, #112]	; (80035cc <vGBMemoryJoypad+0xa0>)
 800355c:	f002 fe0a 	bl	8006174 <HAL_ADC_GetValue>
 8003560:	4d19      	ldr	r5, [pc, #100]	; (80035c8 <vGBMemoryJoypad+0x9c>)
 8003562:	0b00      	lsrs	r0, r0, #12
	if(value == 0xf)
 8003564:	280f      	cmp	r0, #15
 8003566:	d022      	beq.n	80035ae <vGBMemoryJoypad+0x82>
		if((value >> 3) & 0x1){
 8003568:	0703      	lsls	r3, r0, #28
 800356a:	d40a      	bmi.n	8003582 <vGBMemoryJoypad+0x56>
		}else if((value & 0x6) == 0x6){
 800356c:	f000 0306 	and.w	r3, r0, #6
 8003570:	2b06      	cmp	r3, #6
 8003572:	782b      	ldrb	r3, [r5, #0]
 8003574:	d022      	beq.n	80035bc <vGBMemoryJoypad+0x90>
		}else if(value > 0x2){
 8003576:	2802      	cmp	r0, #2
 8003578:	7822      	ldrb	r2, [r4, #0]
 800357a:	bf8c      	ite	hi
 800357c:	200d      	movhi	r0, #13
 800357e:	200e      	movls	r0, #14
 8003580:	e7de      	b.n	8003540 <vGBMemoryJoypad+0x14>
 8003582:	7822      	ldrb	r2, [r4, #0]
		if((value >> 3) & 0x1){
 8003584:	200b      	movs	r0, #11
 8003586:	782b      	ldrb	r3, [r5, #0]
	return 0xC0 | (0xF^mask) | (joypadSELbut | joypadSELdir);
 8003588:	4310      	orrs	r0, r2
 800358a:	4318      	orrs	r0, r3
}
 800358c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8003590:	bd38      	pop	{r3, r4, r5, pc}
		HAL_ADC_Start(&hadc1);
 8003592:	480f      	ldr	r0, [pc, #60]	; (80035d0 <vGBMemoryJoypad+0xa4>)
 8003594:	f003 f876 	bl	8006684 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003598:	f04f 31ff 	mov.w	r1, #4294967295
 800359c:	480c      	ldr	r0, [pc, #48]	; (80035d0 <vGBMemoryJoypad+0xa4>)
 800359e:	f002 fd5f 	bl	8006060 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc1) >> 12;
 80035a2:	480b      	ldr	r0, [pc, #44]	; (80035d0 <vGBMemoryJoypad+0xa4>)
 80035a4:	f002 fde6 	bl	8006174 <HAL_ADC_GetValue>
 80035a8:	0b00      	lsrs	r0, r0, #12
	if(value == 0xf)
 80035aa:	280f      	cmp	r0, #15
 80035ac:	d1dc      	bne.n	8003568 <vGBMemoryJoypad+0x3c>
 80035ae:	7822      	ldrb	r2, [r4, #0]
	return 0xC0 | (0xF^mask) | (joypadSELbut | joypadSELdir);
 80035b0:	782b      	ldrb	r3, [r5, #0]
 80035b2:	4310      	orrs	r0, r2
 80035b4:	4318      	orrs	r0, r3
}
 80035b6:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
		}else if((value & 0x6) == 0x6){
 80035bc:	2007      	movs	r0, #7
 80035be:	7822      	ldrb	r2, [r4, #0]
 80035c0:	e7be      	b.n	8003540 <vGBMemoryJoypad+0x14>
 80035c2:	bf00      	nop
 80035c4:	24001670 	.word	0x24001670
 80035c8:	24011676 	.word	0x24011676
 80035cc:	240117c4 	.word	0x240117c4
 80035d0:	24011760 	.word	0x24011760

080035d4 <vGBMemorySetBit>:
 *
 * @param address
 * @param bit
 */
void vGBMemorySetBit(uint16_t address, uint8_t bit){
	if(address >= ECHORAM_BASE && address < OAM_BASE)
 80035d4:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 80035d8:	b29b      	uxth	r3, r3
 80035da:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80035de:	d302      	bcc.n	80035e6 <vGBMemorySetBit+0x12>
		mem.ram[address - 0x2000] |= (0x1 << bit);

	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
 80035e0:	0403      	lsls	r3, r0, #16
 80035e2:	d411      	bmi.n	8003608 <vGBMemorySetBit+0x34>
 80035e4:	4770      	bx	lr
		mem.ram[address - 0x2000] |= (0x1 << bit);
 80035e6:	2301      	movs	r3, #1
 80035e8:	4a0c      	ldr	r2, [pc, #48]	; (800361c <vGBMemorySetBit+0x48>)
void vGBMemorySetBit(uint16_t address, uint8_t bit){
 80035ea:	b410      	push	{r4}
		mem.ram[address - 0x2000] |= (0x1 << bit);
 80035ec:	fa03 f101 	lsl.w	r1, r3, r1
 80035f0:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 80035f4:	b249      	sxtb	r1, r1
 80035f6:	5d13      	ldrb	r3, [r2, r4]
 80035f8:	430b      	orrs	r3, r1
 80035fa:	5513      	strb	r3, [r2, r4]
		return;

	mem.ram[address] |= (0x1 << bit);
 80035fc:	5c13      	ldrb	r3, [r2, r0]
 80035fe:	4319      	orrs	r1, r3
 8003600:	5411      	strb	r1, [r2, r0]
}
 8003602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	2301      	movs	r3, #1
 800360a:	4a04      	ldr	r2, [pc, #16]	; (800361c <vGBMemorySetBit+0x48>)
 800360c:	fa03 f101 	lsl.w	r1, r3, r1
	mem.ram[address] |= (0x1 << bit);
 8003610:	5c13      	ldrb	r3, [r2, r0]
 8003612:	b249      	sxtb	r1, r1
 8003614:	4319      	orrs	r1, r3
 8003616:	5411      	strb	r1, [r2, r0]
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	24001674 	.word	0x24001674

08003620 <vGBMemoryResetBit>:
 * @param address
 * @param bit
 */
void vGBMemoryResetBit(uint16_t address, uint8_t bit){

	if(address >= ECHORAM_BASE && address < OAM_BASE)
 8003620:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 8003624:	b292      	uxth	r2, r2
 8003626:	f5b2 5ff0 	cmp.w	r2, #7680	; 0x1e00
void vGBMemoryResetBit(uint16_t address, uint8_t bit){
 800362a:	b430      	push	{r4, r5}
	if(address >= ECHORAM_BASE && address < OAM_BASE)
 800362c:	d20f      	bcs.n	800364e <vGBMemoryResetBit+0x2e>
		mem.ram[address - 0x2000] &= ~(0x1 << bit);
 800362e:	2201      	movs	r2, #1
 8003630:	f5a0 5500 	sub.w	r5, r0, #8192	; 0x2000
 8003634:	4c0a      	ldr	r4, [pc, #40]	; (8003660 <vGBMemoryResetBit+0x40>)
 8003636:	fa02 f101 	lsl.w	r1, r2, r1
 800363a:	5d62      	ldrb	r2, [r4, r5]
 800363c:	43cb      	mvns	r3, r1
 800363e:	b25b      	sxtb	r3, r3
 8003640:	401a      	ands	r2, r3
 8003642:	5562      	strb	r2, [r4, r5]

	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
		return;

	mem.ram[address] &= ~(0x1 << bit);
 8003644:	5c22      	ldrb	r2, [r4, r0]
 8003646:	4013      	ands	r3, r2
 8003648:	5423      	strb	r3, [r4, r0]
}
 800364a:	bc30      	pop	{r4, r5}
 800364c:	4770      	bx	lr
	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
 800364e:	0403      	lsls	r3, r0, #16
 8003650:	d5fb      	bpl.n	800364a <vGBMemoryResetBit+0x2a>
 8003652:	2201      	movs	r2, #1
 8003654:	4c02      	ldr	r4, [pc, #8]	; (8003660 <vGBMemoryResetBit+0x40>)
 8003656:	fa02 f301 	lsl.w	r3, r2, r1
 800365a:	43db      	mvns	r3, r3
 800365c:	b25b      	sxtb	r3, r3
 800365e:	e7f1      	b.n	8003644 <vGBMemoryResetBit+0x24>
 8003660:	24001674 	.word	0x24001674

08003664 <ucGBMemoryRead>:
 * @return
 */
uint8_t ucGBMemoryRead(uint16_t address){

	if(address >= 0xFF00){
		if(address == JOY_ADDR){
 8003664:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8003668:	d009      	beq.n	800367e <ucGBMemoryRead+0x1a>
			return vGBMemoryJoypad();
		}

	}

	if(address >= ECHORAM_BASE && address < OAM_BASE)
 800366a:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 800366e:	b29b      	uxth	r3, r3
 8003670:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
		return mem.ram[address - 0x2000];
 8003674:	bf34      	ite	cc
 8003676:	4b03      	ldrcc	r3, [pc, #12]	; (8003684 <ucGBMemoryRead+0x20>)

	return mem.ram[address];
 8003678:	4b03      	ldrcs	r3, [pc, #12]	; (8003688 <ucGBMemoryRead+0x24>)
 800367a:	5c18      	ldrb	r0, [r3, r0]
}
 800367c:	4770      	bx	lr
			return vGBMemoryJoypad();
 800367e:	f7ff bf55 	b.w	800352c <vGBMemoryJoypad>
 8003682:	bf00      	nop
 8003684:	23fff674 	.word	0x23fff674
 8003688:	24001674 	.word	0x24001674

0800368c <vGBMemoryWrite>:
	if(address >= 0xFF00){
 800368c:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8003690:	d30f      	bcc.n	80036b2 <vGBMemoryWrite+0x26>
		if(address == JOY_ADDR){
 8003692:	d01a      	beq.n	80036ca <vGBMemoryWrite+0x3e>
		else if(address == DMA_ADDR){
 8003694:	f64f 7346 	movw	r3, #65350	; 0xff46
 8003698:	4298      	cmp	r0, r3
 800369a:	d01f      	beq.n	80036dc <vGBMemoryWrite+0x50>
		else if(address == DIV_ADDR){
 800369c:	f64f 7304 	movw	r3, #65284	; 0xff04
 80036a0:	4298      	cmp	r0, r3
 80036a2:	d030      	beq.n	8003706 <vGBMemoryWrite+0x7a>
		else if(address == TAC_ADDR){
 80036a4:	f64f 7307 	movw	r3, #65287	; 0xff07
 80036a8:	4298      	cmp	r0, r3
 80036aa:	d030      	beq.n	800370e <vGBMemoryWrite+0x82>
	mem.ram[address] = data;
 80036ac:	4b19      	ldr	r3, [pc, #100]	; (8003714 <vGBMemoryWrite+0x88>)
 80036ae:	5419      	strb	r1, [r3, r0]
 80036b0:	4770      	bx	lr
	if((address >= CARTROM_BANK0 && address < VRAM_BASE))
 80036b2:	0403      	lsls	r3, r0, #16
 80036b4:	d400      	bmi.n	80036b8 <vGBMemoryWrite+0x2c>
 80036b6:	4770      	bx	lr
	if(address >= ECHORAM_BASE && address < OAM_BASE){
 80036b8:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80036c2:	d2f3      	bcs.n	80036ac <vGBMemoryWrite+0x20>
		mem.ram[address - 0x2000] = data;
 80036c4:	4b14      	ldr	r3, [pc, #80]	; (8003718 <vGBMemoryWrite+0x8c>)
 80036c6:	54c1      	strb	r1, [r0, r3]
		return;
 80036c8:	4770      	bx	lr
			joypadSELdir = data & 0x10;
 80036ca:	f001 0010 	and.w	r0, r1, #16
 80036ce:	4a13      	ldr	r2, [pc, #76]	; (800371c <vGBMemoryWrite+0x90>)
			joypadSELbut = data & 0x20;
 80036d0:	f001 0120 	and.w	r1, r1, #32
 80036d4:	4b12      	ldr	r3, [pc, #72]	; (8003720 <vGBMemoryWrite+0x94>)
			joypadSELdir = data & 0x10;
 80036d6:	7010      	strb	r0, [r2, #0]
			joypadSELbut = data & 0x20;
 80036d8:	7019      	strb	r1, [r3, #0]
			return;
 80036da:	4770      	bx	lr
			for(uint16_t i = 0; i < 40*4; i++) vGBMemoryWrite(OAM_BASE + i, ucGBMemoryRead((data << 8) + i));
 80036dc:	0209      	lsls	r1, r1, #8
void vGBMemoryWrite(uint16_t address, uint8_t data){
 80036de:	b570      	push	{r4, r5, r6, lr}
			for(uint16_t i = 0; i < 40*4; i++) vGBMemoryWrite(OAM_BASE + i, ucGBMemoryRead((data << 8) + i));
 80036e0:	f44f 447e 	mov.w	r4, #65024	; 0xfe00
 80036e4:	f64f 66a0 	movw	r6, #65184	; 0xfea0
 80036e8:	f501 7500 	add.w	r5, r1, #512	; 0x200
 80036ec:	1960      	adds	r0, r4, r5
 80036ee:	b280      	uxth	r0, r0
 80036f0:	f7ff ffb8 	bl	8003664 <ucGBMemoryRead>
 80036f4:	4601      	mov	r1, r0
 80036f6:	4620      	mov	r0, r4
 80036f8:	3401      	adds	r4, #1
 80036fa:	f7ff ffc7 	bl	800368c <vGBMemoryWrite>
 80036fe:	b2a4      	uxth	r4, r4
 8003700:	42b4      	cmp	r4, r6
 8003702:	d1f3      	bne.n	80036ec <vGBMemoryWrite+0x60>
}
 8003704:	bd70      	pop	{r4, r5, r6, pc}
			mem.ram[DIV_ADDR] = 0;
 8003706:	4b03      	ldr	r3, [pc, #12]	; (8003714 <vGBMemoryWrite+0x88>)
 8003708:	2200      	movs	r2, #0
 800370a:	541a      	strb	r2, [r3, r0]
			return;
 800370c:	4770      	bx	lr
 800370e:	4608      	mov	r0, r1
 8003710:	f7ff bece 	b.w	80034b0 <vGBMemoryWrite.part.0>
 8003714:	24001674 	.word	0x24001674
 8003718:	23fff674 	.word	0x23fff674
 800371c:	24001670 	.word	0x24001670
 8003720:	24011676 	.word	0x24011676

08003724 <vGBMemoryWriteShort>:
void vGBMemoryWriteShort(uint16_t address, uint16_t data){
 8003724:	b538      	push	{r3, r4, r5, lr}
 8003726:	4604      	mov	r4, r0
 8003728:	460d      	mov	r5, r1
	vGBMemoryWrite(address,   data & 0xFF);
 800372a:	b2c9      	uxtb	r1, r1
 800372c:	f7ff ffae 	bl	800368c <vGBMemoryWrite>
	vGBMemoryWrite(address+1, data >> 8);
 8003730:	1c60      	adds	r0, r4, #1
 8003732:	0a29      	lsrs	r1, r5, #8
 8003734:	b280      	uxth	r0, r0
}
 8003736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vGBMemoryWrite(address+1, data >> 8);
 800373a:	f7ff bfa7 	b.w	800368c <vGBMemoryWrite>
 800373e:	bf00      	nop

08003740 <usGBMemoryReadShort>:
 *
 * @param address
 * @return
 */
uint16_t usGBMemoryReadShort(uint16_t address){
	return concat_16bit_bigEndian(mem.ram[address], mem.ram[address+1]);
 8003740:	4b02      	ldr	r3, [pc, #8]	; (800374c <usGBMemoryReadShort+0xc>)
 8003742:	181a      	adds	r2, r3, r0
 8003744:	5c18      	ldrb	r0, [r3, r0]
 8003746:	7851      	ldrb	r1, [r2, #1]
 8003748:	f7ff ba4c 	b.w	8002be4 <concat_16bit_bigEndian>
 800374c:	24001674 	.word	0x24001674

08003750 <vGBMemoryIncTimers>:
void vGBMemoryIncTimers(uint8_t durationMcycle){
	static uint8_t timerDIV  = 0;
	static uint8_t timerTIMA = 0;
	static uint8_t oldTIMA   = 0;

	if((timerDIV + (durationMcycle << 2)) > 0xFF){
 8003750:	4a2a      	ldr	r2, [pc, #168]	; (80037fc <vGBMemoryIncTimers+0xac>)
 8003752:	4601      	mov	r1, r0
void vGBMemoryIncTimers(uint8_t durationMcycle){
 8003754:	b4f0      	push	{r4, r5, r6, r7}
	if((timerDIV + (durationMcycle << 2)) > 0xFF){
 8003756:	7813      	ldrb	r3, [r2, #0]
 8003758:	0084      	lsls	r4, r0, #2
 800375a:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 800375e:	2dff      	cmp	r5, #255	; 0xff
 8003760:	dd05      	ble.n	800376e <vGBMemoryIncTimers+0x1e>
		mem.ram[DIV_ADDR]++;
 8003762:	4f27      	ldr	r7, [pc, #156]	; (8003800 <vGBMemoryIncTimers+0xb0>)
 8003764:	f64f 7604 	movw	r6, #65284	; 0xff04
 8003768:	5dbd      	ldrb	r5, [r7, r6]
 800376a:	3501      	adds	r5, #1
 800376c:	55bd      	strb	r5, [r7, r6]
	}

	timerDIV += (durationMcycle << 2);

	if(timerStopStart){
 800376e:	4d25      	ldr	r5, [pc, #148]	; (8003804 <vGBMemoryIncTimers+0xb4>)
	timerDIV += (durationMcycle << 2);
 8003770:	4423      	add	r3, r4
	if(timerStopStart){
 8003772:	782d      	ldrb	r5, [r5, #0]
	timerDIV += (durationMcycle << 2);
 8003774:	7013      	strb	r3, [r2, #0]
	if(timerStopStart){
 8003776:	2d00      	cmp	r5, #0
 8003778:	d02f      	beq.n	80037da <vGBMemoryIncTimers+0x8a>
		uint16_t curDuration = 0;

		switch (clockMode) {
 800377a:	4b23      	ldr	r3, [pc, #140]	; (8003808 <vGBMemoryIncTimers+0xb8>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b03      	cmp	r3, #3
 8003780:	d82d      	bhi.n	80037de <vGBMemoryIncTimers+0x8e>
 8003782:	e8df f003 	tbb	[pc, r3]
 8003786:	3405      	.short	0x3405
 8003788:	0237      	.short	0x0237
			case 0x0: curDuration = (durationMcycle << 0);  break;
			case 0x1: curDuration = (durationMcycle << 6);  break;
			case 0x2: curDuration = (durationMcycle << 4);  break;
			case 0x3: curDuration = (durationMcycle << 2);  break;
 800378a:	b2a1      	uxth	r1, r4
 800378c:	f004 00fc 	and.w	r0, r4, #252	; 0xfc
			default:  break;
		}

		if(timerTIMA + curDuration > 0xFF){
 8003790:	4d1e      	ldr	r5, [pc, #120]	; (800380c <vGBMemoryIncTimers+0xbc>)
 8003792:	782a      	ldrb	r2, [r5, #0]
 8003794:	4411      	add	r1, r2
 8003796:	29ff      	cmp	r1, #255	; 0xff
 8003798:	dd24      	ble.n	80037e4 <vGBMemoryIncTimers+0x94>
			mem.ram[TIMA_ADDR]++;
 800379a:	4c19      	ldr	r4, [pc, #100]	; (8003800 <vGBMemoryIncTimers+0xb0>)
 800379c:	f64f 7605 	movw	r6, #65285	; 0xff05
		}

		if(timerTIMA + curDuration > 0x1FE){
 80037a0:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
			mem.ram[TIMA_ADDR]++;
 80037a4:	5da3      	ldrb	r3, [r4, r6]
 80037a6:	bfd4      	ite	le
 80037a8:	3301      	addle	r3, #1
			mem.ram[TIMA_ADDR]++;
 80037aa:	3302      	addgt	r3, #2
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	55a3      	strb	r3, [r4, r6]
		}

		timerTIMA += curDuration;
 80037b0:	4410      	add	r0, r2


		if(mem.ram[TIMA_ADDR] < 5 && oldTIMA == 0xFF){
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	4a16      	ldr	r2, [pc, #88]	; (8003810 <vGBMemoryIncTimers+0xc0>)
		timerTIMA += curDuration;
 80037b6:	7028      	strb	r0, [r5, #0]
		if(mem.ram[TIMA_ADDR] < 5 && oldTIMA == 0xFF){
 80037b8:	d80e      	bhi.n	80037d8 <vGBMemoryIncTimers+0x88>
 80037ba:	7811      	ldrb	r1, [r2, #0]
 80037bc:	29ff      	cmp	r1, #255	; 0xff
 80037be:	d10b      	bne.n	80037d8 <vGBMemoryIncTimers+0x88>
	mem.ram[address] |= (0x1 << bit);
 80037c0:	f64f 700f 	movw	r0, #65295	; 0xff0f
			mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 80037c4:	f64f 7306 	movw	r3, #65286	; 0xff06
 80037c8:	f64f 7505 	movw	r5, #65285	; 0xff05
	mem.ram[address] |= (0x1 << bit);
 80037cc:	5c21      	ldrb	r1, [r4, r0]
			mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 80037ce:	5ce3      	ldrb	r3, [r4, r3]
	mem.ram[address] |= (0x1 << bit);
 80037d0:	f041 0104 	orr.w	r1, r1, #4
			mem.ram[TIMA_ADDR] = mem.ram[TMA_ADDR];
 80037d4:	5563      	strb	r3, [r4, r5]
	mem.ram[address] |= (0x1 << bit);
 80037d6:	5421      	strb	r1, [r4, r0]
			vGBMemorySetBit(IF_ADDR, 2);
		}

		oldTIMA = mem.ram[TIMA_ADDR];
 80037d8:	7013      	strb	r3, [r2, #0]
	}

}
 80037da:	bcf0      	pop	{r4, r5, r6, r7}
 80037dc:	4770      	bx	lr
		if(timerTIMA + curDuration > 0xFF){
 80037de:	4d0b      	ldr	r5, [pc, #44]	; (800380c <vGBMemoryIncTimers+0xbc>)
 80037e0:	2000      	movs	r0, #0
 80037e2:	782a      	ldrb	r2, [r5, #0]
 80037e4:	4c06      	ldr	r4, [pc, #24]	; (8003800 <vGBMemoryIncTimers+0xb0>)
 80037e6:	f64f 7305 	movw	r3, #65285	; 0xff05
 80037ea:	5ce3      	ldrb	r3, [r4, r3]
 80037ec:	e7e0      	b.n	80037b0 <vGBMemoryIncTimers+0x60>
			case 0x1: curDuration = (durationMcycle << 6);  break;
 80037ee:	0181      	lsls	r1, r0, #6
 80037f0:	b2c8      	uxtb	r0, r1
 80037f2:	e7cd      	b.n	8003790 <vGBMemoryIncTimers+0x40>
			case 0x2: curDuration = (durationMcycle << 4);  break;
 80037f4:	0101      	lsls	r1, r0, #4
 80037f6:	b2c8      	uxtb	r0, r1
 80037f8:	e7ca      	b.n	8003790 <vGBMemoryIncTimers+0x40>
 80037fa:	bf00      	nop
 80037fc:	240010a3 	.word	0x240010a3
 8003800:	24001674 	.word	0x24001674
 8003804:	24011674 	.word	0x24011674
 8003808:	24011675 	.word	0x24011675
 800380c:	240010a4 	.word	0x240010a4
 8003810:	240010a2 	.word	0x240010a2

08003814 <setMode.part.0>:
 * @return Nothing
 */
void setMode(uint8_t mode){
	Mode = mode;
	switch (mode) {
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 8003814:	2101      	movs	r1, #1
 8003816:	f64f 7041 	movw	r0, #65345	; 0xff41
void setMode(uint8_t mode){
 800381a:	b508      	push	{r3, lr}
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 800381c:	f7ff ff00 	bl	8003620 <vGBMemoryResetBit>
 8003820:	2100      	movs	r1, #0
 8003822:	f64f 7041 	movw	r0, #65345	; 0xff41
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
		default:                                                                       break;
	}
}
 8003826:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_0: vGBMemoryResetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 00
 800382a:	f7ff bef9 	b.w	8003620 <vGBMemoryResetBit>
 800382e:	bf00      	nop

08003830 <vSetFrameBuffer>:
	memset(gb_frame, 0, 160 * 144 * 4 * scaleAmount);
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <vSetFrameBuffer+0x18>)
 8003832:	f44f 32b4 	mov.w	r2, #92160	; 0x16800
 8003836:	4805      	ldr	r0, [pc, #20]	; (800384c <vSetFrameBuffer+0x1c>)
 8003838:	2100      	movs	r1, #0
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	6800      	ldr	r0, [r0, #0]
 800383e:	fb02 f203 	mul.w	r2, r2, r3
 8003842:	f006 bd43 	b.w	800a2cc <memset>
 8003846:	bf00      	nop
 8003848:	2400100c 	.word	0x2400100c
 800384c:	24001008 	.word	0x24001008

08003850 <vCheckBGP>:
void vCheckBGP(){
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 8003852:	f64f 7047 	movw	r0, #65351	; 0xff47
			case 2: BGPColorToPalette[i] = 3;  break;
 8003856:	2703      	movs	r7, #3
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 8003858:	f7ff ff04 	bl	8003664 <ucGBMemoryRead>
			case 3: BGPColorToPalette[i] = 4;  break;
 800385c:	2604      	movs	r6, #4
 800385e:	490c      	ldr	r1, [pc, #48]	; (8003890 <vCheckBGP+0x40>)
	uint8_t BGP = ucGBMemoryRead(BGP_ADDR);
 8003860:	2200      	movs	r2, #0
			case 1: BGPColorToPalette[i] = 2;  break;
 8003862:	2502      	movs	r5, #2
			case 0: BGPColorToPalette[i] = 1;  break;
 8003864:	2401      	movs	r4, #1
		switch ((BGP >> (i*2)) & 0x03) {
 8003866:	fa40 f302 	asr.w	r3, r0, r2
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d00c      	beq.n	800388c <vCheckBGP+0x3c>
 8003872:	2b03      	cmp	r3, #3
 8003874:	d008      	beq.n	8003888 <vCheckBGP+0x38>
 8003876:	2b01      	cmp	r3, #1
			case 0: BGPColorToPalette[i] = 1;  break;
 8003878:	bf14      	ite	ne
 800387a:	700c      	strbne	r4, [r1, #0]
			case 1: BGPColorToPalette[i] = 2;  break;
 800387c:	700d      	strbeq	r5, [r1, #0]
	for(int i = 0; i < 4; i++){
 800387e:	3202      	adds	r2, #2
 8003880:	3101      	adds	r1, #1
 8003882:	2a08      	cmp	r2, #8
 8003884:	d1ef      	bne.n	8003866 <vCheckBGP+0x16>
}
 8003886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			case 3: BGPColorToPalette[i] = 4;  break;
 8003888:	700e      	strb	r6, [r1, #0]
 800388a:	e7f8      	b.n	800387e <vCheckBGP+0x2e>
			case 2: BGPColorToPalette[i] = 3;  break;
 800388c:	700f      	strb	r7, [r1, #0]
 800388e:	e7f6      	b.n	800387e <vCheckBGP+0x2e>
 8003890:	24011678 	.word	0x24011678

08003894 <vCheckOBP0>:
void vCheckOBP0(){
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t BGP = ucGBMemoryRead(OBP0_ADDR);
 8003896:	f64f 7048 	movw	r0, #65352	; 0xff48
			case 2: OBP0ColorToPalette[i] = 3;    break;
 800389a:	2703      	movs	r7, #3
	uint8_t BGP = ucGBMemoryRead(OBP0_ADDR);
 800389c:	f7ff fee2 	bl	8003664 <ucGBMemoryRead>
 80038a0:	2200      	movs	r2, #0
 80038a2:	490c      	ldr	r1, [pc, #48]	; (80038d4 <vCheckOBP0+0x40>)
			case 3: OBP0ColorToPalette[i] = 4;    break;
 80038a4:	2504      	movs	r5, #4
			case 0: OBP0ColorToPalette[i] = 0;    break;
 80038a6:	4616      	mov	r6, r2
			case 1: OBP0ColorToPalette[i] = 2;    break;
 80038a8:	2402      	movs	r4, #2
		switch ((BGP >> (i*2)) & 0x03) {
 80038aa:	fa40 f302 	asr.w	r3, r0, r2
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d00c      	beq.n	80038d0 <vCheckOBP0+0x3c>
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d008      	beq.n	80038cc <vCheckOBP0+0x38>
 80038ba:	2b01      	cmp	r3, #1
			case 0: OBP0ColorToPalette[i] = 0;    break;
 80038bc:	bf14      	ite	ne
 80038be:	700e      	strbne	r6, [r1, #0]
			case 1: OBP0ColorToPalette[i] = 2;    break;
 80038c0:	700c      	strbeq	r4, [r1, #0]
	for(int i = 0; i < 4; i++){
 80038c2:	3202      	adds	r2, #2
 80038c4:	3101      	adds	r1, #1
 80038c6:	2a08      	cmp	r2, #8
 80038c8:	d1ef      	bne.n	80038aa <vCheckOBP0+0x16>
}
 80038ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			case 3: OBP0ColorToPalette[i] = 4;    break;
 80038cc:	700d      	strb	r5, [r1, #0]
 80038ce:	e7f8      	b.n	80038c2 <vCheckOBP0+0x2e>
			case 2: OBP0ColorToPalette[i] = 3;    break;
 80038d0:	700f      	strb	r7, [r1, #0]
 80038d2:	e7f6      	b.n	80038c2 <vCheckOBP0+0x2e>
 80038d4:	24011694 	.word	0x24011694

080038d8 <vCheckOBP1>:
void vCheckOBP1(){
 80038d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t BGP = ucGBMemoryRead(OBP1_ADDR);
 80038da:	f64f 7049 	movw	r0, #65353	; 0xff49
			case 2: OBP1ColorToPalette[i] = 3;  break;
 80038de:	2703      	movs	r7, #3
	uint8_t BGP = ucGBMemoryRead(OBP1_ADDR);
 80038e0:	f7ff fec0 	bl	8003664 <ucGBMemoryRead>
 80038e4:	2200      	movs	r2, #0
 80038e6:	490c      	ldr	r1, [pc, #48]	; (8003918 <vCheckOBP1+0x40>)
			case 3: OBP1ColorToPalette[i] = 4;  break;
 80038e8:	2504      	movs	r5, #4
			case 0: OBP1ColorToPalette[i] = 0;  break;
 80038ea:	4616      	mov	r6, r2
			case 1: OBP1ColorToPalette[i] = 2;  break;
 80038ec:	2402      	movs	r4, #2
		switch ((BGP >> (i*2)) & 0x03) {
 80038ee:	fa40 f302 	asr.w	r3, r0, r2
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d00c      	beq.n	8003914 <vCheckOBP1+0x3c>
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d008      	beq.n	8003910 <vCheckOBP1+0x38>
 80038fe:	2b01      	cmp	r3, #1
			case 0: OBP1ColorToPalette[i] = 0;  break;
 8003900:	bf14      	ite	ne
 8003902:	700e      	strbne	r6, [r1, #0]
			case 1: OBP1ColorToPalette[i] = 2;  break;
 8003904:	700c      	strbeq	r4, [r1, #0]
	for(int i = 0; i < 4; i++){
 8003906:	3202      	adds	r2, #2
 8003908:	3101      	adds	r1, #1
 800390a:	2a08      	cmp	r2, #8
 800390c:	d1ef      	bne.n	80038ee <vCheckOBP1+0x16>
}
 800390e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			case 3: OBP1ColorToPalette[i] = 4;  break;
 8003910:	700d      	strb	r5, [r1, #0]
 8003912:	e7f8      	b.n	8003906 <vCheckOBP1+0x2e>
			case 2: OBP1ColorToPalette[i] = 3;  break;
 8003914:	700f      	strb	r7, [r1, #0]
 8003916:	e7f6      	b.n	8003906 <vCheckOBP1+0x2e>
 8003918:	2401167c 	.word	0x2401167c

0800391c <getTileLineData>:
	if (TileDataAddr == 0x8000){
 800391c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
uint16_t getTileLineData(uint16_t tile_offset, uint8_t line_offset, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003920:	b538      	push	{r3, r4, r5, lr}
 8003922:	460d      	mov	r5, r1
	if (TileDataAddr == 0x8000){
 8003924:	d00e      	beq.n	8003944 <getTileLineData+0x28>
		int8_t temp  = (int8_t)(ucGBMemoryRead(DisplayAddr + tile_offset));
 8003926:	4418      	add	r0, r3
 8003928:	4614      	mov	r4, r2
 800392a:	b280      	uxth	r0, r0
 800392c:	f7ff fe9a 	bl	8003664 <ucGBMemoryRead>
		return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 8003930:	1961      	adds	r1, r4, r5
		uint16_t temp2 =( temp + 128) * 0x10;
 8003932:	b240      	sxtb	r0, r0
 8003934:	3080      	adds	r0, #128	; 0x80
		return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 8003936:	eb01 1000 	add.w	r0, r1, r0, lsl #4
}
 800393a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usGBMemoryReadShort(TileDataAddr + temp2 + line_offset);
 800393e:	b280      	uxth	r0, r0
 8003940:	f7ff befe 	b.w	8003740 <usGBMemoryReadShort>
		return usGBMemoryReadShort(TileDataAddr + (ucGBMemoryRead(DisplayAddr + tile_offset) * 0x10) + line_offset);
 8003944:	4418      	add	r0, r3
 8003946:	b280      	uxth	r0, r0
 8003948:	f7ff fe8c 	bl	8003664 <ucGBMemoryRead>
 800394c:	f5a5 4100 	sub.w	r1, r5, #32768	; 0x8000
 8003950:	eb01 1000 	add.w	r0, r1, r0, lsl #4
}
 8003954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usGBMemoryReadShort(TileDataAddr + (ucGBMemoryRead(DisplayAddr + tile_offset) * 0x10) + line_offset);
 8003958:	b280      	uxth	r0, r0
 800395a:	f7ff bef1 	b.w	8003740 <usGBMemoryReadShort>
 800395e:	bf00      	nop

08003960 <LYC_check>:
void LYC_check(uint8_t ly){
 8003960:	b510      	push	{r4, lr}
 8003962:	4604      	mov	r4, r0
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003964:	f64f 7045 	movw	r0, #65349	; 0xff45
 8003968:	f7ff fe7c 	bl	8003664 <ucGBMemoryRead>
		vGBMemorySetBit(STAT_ADDR, 2);
 800396c:	2102      	movs	r1, #2
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 800396e:	42a0      	cmp	r0, r4
		vGBMemorySetBit(STAT_ADDR, 2);
 8003970:	f64f 7041 	movw	r0, #65345	; 0xff41
	if(ly == ucGBMemoryRead(LYC_ADDR)){
 8003974:	d003      	beq.n	800397e <LYC_check+0x1e>
}
 8003976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vGBMemoryResetBit(STAT_ADDR, 2);
 800397a:	f7ff be51 	b.w	8003620 <vGBMemoryResetBit>
		vGBMemorySetBit(STAT_ADDR, 2);
 800397e:	f7ff fe29 	bl	80035d4 <vGBMemorySetBit>
		if(checkbit(ucGBMemoryRead(STAT_ADDR), 6))
 8003982:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003986:	f7ff fe6d 	bl	8003664 <ucGBMemoryRead>
 800398a:	2106      	movs	r1, #6
 800398c:	f7ff f93e 	bl	8002c0c <checkbit>
 8003990:	b900      	cbnz	r0, 8003994 <LYC_check+0x34>
}
 8003992:	bd10      	pop	{r4, pc}
			vGBMemorySetBit(IF_ADDR, 1);
 8003994:	2101      	movs	r1, #1
 8003996:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 800399a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vGBMemorySetBit(IF_ADDR, 1);
 800399e:	f7ff be19 	b.w	80035d4 <vGBMemorySetBit>
 80039a2:	bf00      	nop

080039a4 <setMode>:
void setMode(uint8_t mode){
 80039a4:	b508      	push	{r3, lr}
	Mode = mode;
 80039a6:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <setMode+0x64>)
 80039a8:	7018      	strb	r0, [r3, #0]
	switch (mode) {
 80039aa:	2803      	cmp	r0, #3
 80039ac:	d82b      	bhi.n	8003a06 <setMode+0x62>
 80039ae:	e8df f000 	tbb	[pc, r0]
 80039b2:	1202      	.short	0x1202
 80039b4:	061e      	.short	0x061e
}
 80039b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80039ba:	f7ff bf2b 	b.w	8003814 <setMode.part.0>
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 80039be:	2101      	movs	r1, #1
 80039c0:	f64f 7041 	movw	r0, #65345	; 0xff41
 80039c4:	f7ff fe06 	bl	80035d4 <vGBMemorySetBit>
 80039c8:	2100      	movs	r1, #0
 80039ca:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 80039ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_3:   vGBMemorySetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 11
 80039d2:	f7ff bdff 	b.w	80035d4 <vGBMemorySetBit>
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 80039d6:	2101      	movs	r1, #1
 80039d8:	f64f 7041 	movw	r0, #65345	; 0xff41
 80039dc:	f7ff fe20 	bl	8003620 <vGBMemoryResetBit>
 80039e0:	2100      	movs	r1, #0
 80039e2:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 80039e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_1: vGBMemoryResetBit(STAT_ADDR, 1);   vGBMemorySetBit(STAT_ADDR, 0); break;		// 01
 80039ea:	f7ff bdf3 	b.w	80035d4 <vGBMemorySetBit>
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 80039ee:	2101      	movs	r1, #1
 80039f0:	f64f 7041 	movw	r0, #65345	; 0xff41
 80039f4:	f7ff fdee 	bl	80035d4 <vGBMemorySetBit>
 80039f8:	2100      	movs	r1, #0
 80039fa:	f64f 7041 	movw	r0, #65345	; 0xff41
}
 80039fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		case MODE_2:   vGBMemorySetBit(STAT_ADDR, 1); vGBMemoryResetBit(STAT_ADDR, 0); break;		// 10
 8003a02:	f7ff be0d 	b.w	8003620 <vGBMemoryResetBit>
}
 8003a06:	bd08      	pop	{r3, pc}
 8003a08:	24011684 	.word	0x24011684

08003a0c <updateBufferObj>:

void updateBufferObj(uint8_t data, int pixelPos){
 8003a0c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
	pixelPos *= scaleAmount;
 8003a10:	4f10      	ldr	r7, [pc, #64]	; (8003a54 <updateBufferObj+0x48>)
 8003a12:	783b      	ldrb	r3, [r7, #0]
 8003a14:	fb01 f103 	mul.w	r1, r1, r3
	for (int yStretch = 1; yStretch <= scaleAmount; yStretch++){
 8003a18:	b1cb      	cbz	r3, 8003a4e <updateBufferObj+0x42>
 8003a1a:	2601      	movs	r6, #1
 8003a1c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8003a5c <updateBufferObj+0x50>
 8003a20:	4d0d      	ldr	r5, [pc, #52]	; (8003a58 <updateBufferObj+0x4c>)
 8003a22:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8003a60 <updateBufferObj+0x54>
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
 8003a26:	2200      	movs	r2, #0
			gb_frame[pixelPos + xStretch + (curLine) + (lineadd * yStretch)] = data;
 8003a28:	f8d8 3000 	ldr.w	r3, [r8]
 8003a2c:	682c      	ldr	r4, [r5, #0]
 8003a2e:	440b      	add	r3, r1
 8003a30:	4413      	add	r3, r2
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
 8003a32:	3201      	adds	r2, #1
			gb_frame[pixelPos + xStretch + (curLine) + (lineadd * yStretch)] = data;
 8003a34:	fb04 3306 	mla	r3, r4, r6, r3
 8003a38:	f8dc 4000 	ldr.w	r4, [ip]
 8003a3c:	5518      	strb	r0, [r3, r4]
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
 8003a3e:	783b      	ldrb	r3, [r7, #0]
 8003a40:	4293      	cmp	r3, r2
 8003a42:	dcf1      	bgt.n	8003a28 <updateBufferObj+0x1c>
	for (int yStretch = 1; yStretch <= scaleAmount; yStretch++){
 8003a44:	3601      	adds	r6, #1
 8003a46:	42b3      	cmp	r3, r6
 8003a48:	db01      	blt.n	8003a4e <updateBufferObj+0x42>
		for(int xStretch = 0; xStretch < scaleAmount; xStretch++){
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1eb      	bne.n	8003a26 <updateBufferObj+0x1a>
		}
	}
}
 8003a4e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8003a52:	4770      	bx	lr
 8003a54:	2400100c 	.word	0x2400100c
 8003a58:	24011688 	.word	0x24011688
 8003a5c:	24001008 	.word	0x24001008
 8003a60:	2401168c 	.word	0x2401168c

08003a64 <vGBPPUDrawLineWindow.part.0>:

void vGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
	if(WY > ly || WY > 143 || WX > 166)
		return;

	uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);			           // gives the address offset in the tile map
 8003a64:	1a82      	subs	r2, r0, r2
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003a66:	4250      	negs	r0, r2
void vGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003a6c:	f000 0007 	and.w	r0, r0, #7
	uint8_t pixl_offset = (WX - 7) % 8;											                   // gives current pixel offset
 8003a70:	f1a1 0507 	sub.w	r5, r1, #7
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003a74:	f002 0107 	and.w	r1, r2, #7
	uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);			           // gives the address offset in the tile map
 8003a78:	f3c2 06c4 	ubfx	r6, r2, #3, #5
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003a7c:	bf58      	it	pl
 8003a7e:	4241      	negpl	r1, r0
	uint8_t pixl_offset = (WX - 7) % 8;											                   // gives current pixel offset
 8003a80:	426f      	negs	r7, r5
	uint16_t tile_offset = (((uint8_t)(ly - WY) / 8) * 32);			           // gives the address offset in the tile map
 8003a82:	ea4f 1646 	mov.w	r6, r6, lsl #5
	uint8_t pixl_offset = (WX - 7) % 8;											                   // gives current pixel offset
 8003a86:	f005 0407 	and.w	r4, r5, #7
 8003a8a:	f007 0707 	and.w	r7, r7, #7
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003a8e:	ea4f 0141 	mov.w	r1, r1, lsl #1

	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003a92:	461a      	mov	r2, r3
void vGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003a94:	469a      	mov	sl, r3
	uint8_t pixl_offset = (WX - 7) % 8;											                   // gives current pixel offset
 8003a96:	bf58      	it	pl
 8003a98:	427c      	negpl	r4, r7
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003a9a:	b2c9      	uxtb	r1, r1
	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003a9c:	4630      	mov	r0, r6

	for(int j = (WX - 7); j < 160; j++){
		uint8_t pixelData = 0;

		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003a9e:	f248 0780 	movw	r7, #32896	; 0x8080
	uint8_t pixl_offset = (WX - 7) % 8;											                   // gives current pixel offset
 8003aa2:	b2e4      	uxtb	r4, r4
			case 0x0000: pixelData = BGPColorToPalette[0]; break;
			case 0x0080: pixelData = BGPColorToPalette[1]; break;
			case 0x8000: pixelData = BGPColorToPalette[2]; break;
 8003aa4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8003b2c <vGBPPUDrawLineWindow.part.0+0xc8>
void vGBPPUDrawLineWindow(uint8_t ly, uint8_t WX, uint8_t WY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003aa8:	ed2d 8b02 	vpush	{d8}
 8003aac:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
	uint8_t line_offset = (((ly - WY) % 8)) * 2;										   // gives the line offset in the tile
 8003ab0:	ee08 1a10 	vmov	s16, r1
	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003ab4:	465b      	mov	r3, fp
 8003ab6:	f7ff ff31 	bl	800391c <getTileLineData>
 8003aba:	4680      	mov	r8, r0
	for(int j = (WX - 7); j < 160; j++){
 8003abc:	e00d      	b.n	8003ada <vGBPPUDrawLineWindow.part.0+0x76>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003abe:	2b80      	cmp	r3, #128	; 0x80
 8003ac0:	d11c      	bne.n	8003afc <vGBPPUDrawLineWindow.part.0+0x98>
			case 0x0080: pixelData = BGPColorToPalette[1]; break;
 8003ac2:	f899 0001 	ldrb.w	r0, [r9, #1]
			case 0x8080: pixelData = BGPColorToPalette[3]; break;
		}
		updateBufferObj(pixelData, j);
			pixl_offset++;
 8003ac6:	3401      	adds	r4, #1
		updateBufferObj(pixelData, j);
 8003ac8:	4629      	mov	r1, r5
 8003aca:	f7ff ff9f 	bl	8003a0c <updateBufferObj>
			pixl_offset++;
 8003ace:	b2e4      	uxtb	r4, r4

			if(pixl_offset == 8){
 8003ad0:	2c08      	cmp	r4, #8
 8003ad2:	d015      	beq.n	8003b00 <vGBPPUDrawLineWindow.part.0+0x9c>
	for(int j = (WX - 7); j < 160; j++){
 8003ad4:	3501      	adds	r5, #1
 8003ad6:	2da0      	cmp	r5, #160	; 0xa0
 8003ad8:	d020      	beq.n	8003b1c <vGBPPUDrawLineWindow.part.0+0xb8>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003ada:	fa08 f304 	lsl.w	r3, r8, r4
 8003ade:	403b      	ands	r3, r7
 8003ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae4:	d01e      	beq.n	8003b24 <vGBPPUDrawLineWindow.part.0+0xc0>
 8003ae6:	dc04      	bgt.n	8003af2 <vGBPPUDrawLineWindow.part.0+0x8e>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e8      	bne.n	8003abe <vGBPPUDrawLineWindow.part.0+0x5a>
			case 0x0000: pixelData = BGPColorToPalette[0]; break;
 8003aec:	f899 0000 	ldrb.w	r0, [r9]
 8003af0:	e7e9      	b.n	8003ac6 <vGBPPUDrawLineWindow.part.0+0x62>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003af2:	42bb      	cmp	r3, r7
 8003af4:	d102      	bne.n	8003afc <vGBPPUDrawLineWindow.part.0+0x98>
			case 0x8080: pixelData = BGPColorToPalette[3]; break;
 8003af6:	f899 0003 	ldrb.w	r0, [r9, #3]
 8003afa:	e7e4      	b.n	8003ac6 <vGBPPUDrawLineWindow.part.0+0x62>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003afc:	2000      	movs	r0, #0
 8003afe:	e7e2      	b.n	8003ac6 <vGBPPUDrawLineWindow.part.0+0x62>
				tile_offset++;
 8003b00:	3601      	adds	r6, #1
	for(int j = (WX - 7); j < 160; j++){
 8003b02:	3501      	adds	r5, #1
				pixl_offset = 0;
				tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003b04:	465b      	mov	r3, fp
 8003b06:	4652      	mov	r2, sl
				tile_offset++;
 8003b08:	b2b6      	uxth	r6, r6
				tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003b0a:	ee18 1a10 	vmov	r1, s16
				pixl_offset = 0;
 8003b0e:	2400      	movs	r4, #0
				tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003b10:	4630      	mov	r0, r6
 8003b12:	f7ff ff03 	bl	800391c <getTileLineData>
	for(int j = (WX - 7); j < 160; j++){
 8003b16:	2da0      	cmp	r5, #160	; 0xa0
				tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003b18:	4680      	mov	r8, r0
	for(int j = (WX - 7); j < 160; j++){
 8003b1a:	d1de      	bne.n	8003ada <vGBPPUDrawLineWindow.part.0+0x76>

			}

		}
}
 8003b1c:	ecbd 8b02 	vpop	{d8}
 8003b20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			case 0x8000: pixelData = BGPColorToPalette[2]; break;
 8003b24:	f899 0002 	ldrb.w	r0, [r9, #2]
 8003b28:	e7cd      	b.n	8003ac6 <vGBPPUDrawLineWindow.part.0+0x62>
 8003b2a:	bf00      	nop
 8003b2c:	24011678 	.word	0x24011678

08003b30 <vGBPPUDrawLineBackground>:
	uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);			           // gives the address offset in the tile map
 8003b30:	4402      	add	r2, r0
void vGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003b32:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);			           // gives the address offset in the tile map
 8003b36:	f3c2 05c4 	ubfx	r5, r2, #3, #5
 8003b3a:	ea4f 09d1 	mov.w	r9, r1, lsr #3
void vGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003b3e:	461c      	mov	r4, r3
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 8003b40:	f002 0007 	and.w	r0, r2, #7
	uint16_t tile_offset = (((uint8_t)(SCY + ly) / 8) * 32) + (SCX / 8);			           // gives the address offset in the tile map
 8003b44:	eb09 1945 	add.w	r9, r9, r5, lsl #5
void vGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003b48:	2700      	movs	r7, #0
	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003b4a:	4622      	mov	r2, r4
	uint8_t pixl_offset = SCX % 8;											                   // gives current pixel offset
 8003b4c:	f001 0407 	and.w	r4, r1, #7
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 8003b50:	0041      	lsls	r1, r0, #1
	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003b52:	4648      	mov	r0, r9
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003b54:	f248 0680 	movw	r6, #32896	; 0x8080
	for(int j = 0; j < 160; j++){
 8003b58:	463d      	mov	r5, r7
			case 0x8000: pixelData = BGPColorToPalette[2]; break;
 8003b5a:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8003be8 <vGBPPUDrawLineBackground+0xb8>
void vGBPPUDrawLineBackground(uint8_t ly, uint8_t SCX, uint8_t SCY, uint16_t TileDataAddr, uint16_t DisplayAddr){
 8003b5e:	ed2d 8b02 	vpush	{d8}
 8003b62:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
 8003b66:	ee08 3a90 	vmov	s17, r3
	uint8_t line_offset = (((SCY % 8) + ly) % 8) * 2;										   // gives the line offset in the tile
 8003b6a:	ee08 1a10 	vmov	s16, r1
	uint16_t tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);                            // tile data holds tile line information
 8003b6e:	465b      	mov	r3, fp
 8003b70:	f7ff fed4 	bl	800391c <getTileLineData>
 8003b74:	4680      	mov	r8, r0
	for(int j = 0; j < 160; j++){
 8003b76:	e00e      	b.n	8003b96 <vGBPPUDrawLineBackground+0x66>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003b78:	2b80      	cmp	r3, #128	; 0x80
 8003b7a:	d101      	bne.n	8003b80 <vGBPPUDrawLineBackground+0x50>
			case 0x0080: pixelData = BGPColorToPalette[1]; break;
 8003b7c:	f89a 7001 	ldrb.w	r7, [sl, #1]
		pixl_offset++;
 8003b80:	3401      	adds	r4, #1
		updateBufferObj(pixelData, j);
 8003b82:	4629      	mov	r1, r5
 8003b84:	4638      	mov	r0, r7
		pixl_offset++;
 8003b86:	b2e4      	uxtb	r4, r4
		updateBufferObj(pixelData, j);
 8003b88:	f7ff ff40 	bl	8003a0c <updateBufferObj>
		if(pixl_offset == 8){
 8003b8c:	2c08      	cmp	r4, #8
 8003b8e:	d013      	beq.n	8003bb8 <vGBPPUDrawLineBackground+0x88>
	for(int j = 0; j < 160; j++){
 8003b90:	3501      	adds	r5, #1
 8003b92:	2da0      	cmp	r5, #160	; 0xa0
 8003b94:	d021      	beq.n	8003bda <vGBPPUDrawLineBackground+0xaa>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003b96:	fa08 f304 	lsl.w	r3, r8, r4
 8003b9a:	4033      	ands	r3, r6
 8003b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba0:	d01f      	beq.n	8003be2 <vGBPPUDrawLineBackground+0xb2>
 8003ba2:	dc04      	bgt.n	8003bae <vGBPPUDrawLineBackground+0x7e>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e7      	bne.n	8003b78 <vGBPPUDrawLineBackground+0x48>
			case 0x0000: pixelData = BGPColorToPalette[0]; break;
 8003ba8:	f89a 7000 	ldrb.w	r7, [sl]
 8003bac:	e7e8      	b.n	8003b80 <vGBPPUDrawLineBackground+0x50>
		switch (((tile_data << pixl_offset) & 0x8080)) {
 8003bae:	42b3      	cmp	r3, r6
 8003bb0:	d1e6      	bne.n	8003b80 <vGBPPUDrawLineBackground+0x50>
			case 0x8080: pixelData = BGPColorToPalette[3]; break;
 8003bb2:	f89a 7003 	ldrb.w	r7, [sl, #3]
 8003bb6:	e7e3      	b.n	8003b80 <vGBPPUDrawLineBackground+0x50>
			tile_offset++;
 8003bb8:	f109 0901 	add.w	r9, r9, #1
	for(int j = 0; j < 160; j++){
 8003bbc:	3501      	adds	r5, #1
			tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003bbe:	465b      	mov	r3, fp
 8003bc0:	ee18 2a90 	vmov	r2, s17
			tile_offset++;
 8003bc4:	fa1f f989 	uxth.w	r9, r9
			tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003bc8:	ee18 1a10 	vmov	r1, s16
			pixl_offset = 0;
 8003bcc:	2400      	movs	r4, #0
			tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003bce:	4648      	mov	r0, r9
 8003bd0:	f7ff fea4 	bl	800391c <getTileLineData>
	for(int j = 0; j < 160; j++){
 8003bd4:	2da0      	cmp	r5, #160	; 0xa0
			tile_data = getTileLineData(tile_offset, line_offset, TileDataAddr, DisplayAddr);
 8003bd6:	4680      	mov	r8, r0
	for(int j = 0; j < 160; j++){
 8003bd8:	d1dd      	bne.n	8003b96 <vGBPPUDrawLineBackground+0x66>
}
 8003bda:	ecbd 8b02 	vpop	{d8}
 8003bde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			case 0x8000: pixelData = BGPColorToPalette[2]; break;
 8003be2:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8003be6:	e7cb      	b.n	8003b80 <vGBPPUDrawLineBackground+0x50>
 8003be8:	24011678 	.word	0x24011678

08003bec <vGBPPUDrawLineObjects>:

void vGBPPUDrawLineObjects(uint8_t ly){
 8003bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf0:	f44f 447e 	mov.w	r4, #65024	; 0xfe00
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	4680      	mov	r8, r0
 8003bf8:	e006      	b.n	8003c08 <vGBPPUDrawLineObjects+0x1c>
	for(int obj = 0; obj < 40; obj++){
 8003bfa:	3404      	adds	r4, #4
 8003bfc:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 8003c00:	b2a4      	uxth	r4, r4
 8003c02:	429c      	cmp	r4, r3
 8003c04:	f000 8088 	beq.w	8003d18 <vGBPPUDrawLineObjects+0x12c>
		uint8_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;
 8003c08:	4620      	mov	r0, r4
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
		uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
		uint8_t objPrio     = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003c0a:	1ce7      	adds	r7, r4, #3
		uint8_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;
 8003c0c:	f7ff fd2a 	bl	8003664 <ucGBMemoryRead>
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
 8003c10:	1c63      	adds	r3, r4, #1
		uint8_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;
 8003c12:	f1a0 0210 	sub.w	r2, r0, #16
		uint8_t objPrio     = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003c16:	b2bf      	uxth	r7, r7
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
 8003c18:	b298      	uxth	r0, r3
		uint8_t yCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4)) - 16;
 8003c1a:	fa5f f982 	uxtb.w	r9, r2
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
 8003c1e:	f7ff fd21 	bl	8003664 <ucGBMemoryRead>
		uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
 8003c22:	1ca3      	adds	r3, r4, #2
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
 8003c24:	4606      	mov	r6, r0
		uint8_t dataTile    = ucGBMemoryRead(OAM_BASE + (obj*4) + 2);
 8003c26:	b298      	uxth	r0, r3
 8003c28:	f7ff fd1c 	bl	8003664 <ucGBMemoryRead>
 8003c2c:	4605      	mov	r5, r0
		uint8_t objPrio     = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 7);
 8003c2e:	4638      	mov	r0, r7
 8003c30:	f7ff fd18 	bl	8003664 <ucGBMemoryRead>
 8003c34:	2107      	movs	r1, #7
 8003c36:	f7fe ffe9 	bl	8002c0c <checkbit>
		uint8_t objYFlip    = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 6);
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	f7ff fd12 	bl	8003664 <ucGBMemoryRead>
 8003c40:	2106      	movs	r1, #6
 8003c42:	f7fe ffe3 	bl	8002c0c <checkbit>
 8003c46:	4683      	mov	fp, r0
		uint8_t objXFlip    = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 5);
 8003c48:	4638      	mov	r0, r7
 8003c4a:	f7ff fd0b 	bl	8003664 <ucGBMemoryRead>
 8003c4e:	2105      	movs	r1, #5
 8003c50:	f7fe ffdc 	bl	8002c0c <checkbit>
 8003c54:	4603      	mov	r3, r0
		uint8_t objPalette  = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 4);
 8003c56:	4638      	mov	r0, r7
		uint8_t objXFlip    = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 5);
 8003c58:	461f      	mov	r7, r3
		uint8_t objPalette  = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 4);
 8003c5a:	f7ff fd03 	bl	8003664 <ucGBMemoryRead>
 8003c5e:	2104      	movs	r1, #4
 8003c60:	f7fe ffd4 	bl	8002c0c <checkbit>

		if(yCoordinate <= ly && (yCoordinate + 8) > ly){
 8003c64:	45c1      	cmp	r9, r8
		uint8_t objPalette  = checkbit(ucGBMemoryRead(OAM_BASE + (obj*4) + 3), 4);
 8003c66:	4682      	mov	sl, r0
		if(yCoordinate <= ly && (yCoordinate + 8) > ly){
 8003c68:	d8c7      	bhi.n	8003bfa <vGBPPUDrawLineObjects+0xe>
 8003c6a:	f109 0107 	add.w	r1, r9, #7
 8003c6e:	4541      	cmp	r1, r8
 8003c70:	dbc3      	blt.n	8003bfa <vGBPPUDrawLineObjects+0xe>

			uint8_t lineOffset = objYFlip ? (7 - (ly - yCoordinate)) * 2 : (ly - yCoordinate) * 2;
 8003c72:	eba8 0009 	sub.w	r0, r8, r9
 8003c76:	f1bb 0f00 	cmp.w	fp, #0
 8003c7a:	d04a      	beq.n	8003d12 <vGBPPUDrawLineObjects+0x126>
 8003c7c:	f1c0 0007 	rsb	r0, r0, #7
 8003c80:	0040      	lsls	r0, r0, #1
 8003c82:	b2c0      	uxtb	r0, r0
			uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003c84:	f505 6200 	add.w	r2, r5, #2048	; 0x800
			uint8_t *palette = (objPalette) ? &OBP1ColorToPalette[0] : &OBP0ColorToPalette[0];

			for(int pixelNum = 0; pixelNum < 8; pixelNum++){
 8003c88:	2500      	movs	r5, #0
		uint8_t xCoordinate = ucGBMemoryRead(OAM_BASE + (obj*4) + 1) - 8;
 8003c8a:	3e08      	subs	r6, #8

				uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
				uint8_t pixelData = 0;

				switch (colorInfo) {
 8003c8c:	f248 0b80 	movw	fp, #32896	; 0x8080
			uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003c90:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8003c94:	b2f6      	uxtb	r6, r6
 8003c96:	b280      	uxth	r0, r0
 8003c98:	f7ff fd52 	bl	8003740 <usGBMemoryReadShort>
			uint8_t *palette = (objPalette) ? &OBP1ColorToPalette[0] : &OBP0ColorToPalette[0];
 8003c9c:	4920      	ldr	r1, [pc, #128]	; (8003d20 <vGBPPUDrawLineObjects+0x134>)
 8003c9e:	4b21      	ldr	r3, [pc, #132]	; (8003d24 <vGBPPUDrawLineObjects+0x138>)
			uint16_t tile_data = usGBMemoryReadShort(TILE_DATA_UNSIGNED_ADDR + (dataTile * 0x10) + lineOffset);
 8003ca0:	4602      	mov	r2, r0
			uint8_t *palette = (objPalette) ? &OBP1ColorToPalette[0] : &OBP0ColorToPalette[0];
 8003ca2:	45aa      	cmp	sl, r5
 8003ca4:	bf08      	it	eq
 8003ca6:	460b      	moveq	r3, r1
 8003ca8:	469a      	mov	sl, r3
				uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
 8003caa:	b1bf      	cbz	r7, 8003cdc <vGBPPUDrawLineObjects+0xf0>
 8003cac:	fa42 f105 	asr.w	r1, r2, r5
 8003cb0:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <vGBPPUDrawLineObjects+0x13c>)
 8003cb2:	ea03 11c1 	and.w	r1, r3, r1, lsl #7
 8003cb6:	b289      	uxth	r1, r1
				switch (colorInfo) {
 8003cb8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003cbc:	d018      	beq.n	8003cf0 <vGBPPUDrawLineObjects+0x104>
 8003cbe:	d81a      	bhi.n	8003cf6 <vGBPPUDrawLineObjects+0x10a>
 8003cc0:	b1f1      	cbz	r1, 8003d00 <vGBPPUDrawLineObjects+0x114>
 8003cc2:	2980      	cmp	r1, #128	; 0x80
 8003cc4:	d104      	bne.n	8003cd0 <vGBPPUDrawLineObjects+0xe4>
					case 0x0000: pixelData = palette[0]; break;
					case 0x0080: pixelData = palette[1]; break;
 8003cc6:	f89a 0001 	ldrb.w	r0, [sl, #1]
					case 0x8000: pixelData = palette[2]; break;
					case 0x8080: pixelData = palette[3]; break;
				}

				if(pixelData != 0 && xCoordinate + pixelNum >= 0 && (xCoordinate + pixelNum) < 160){
 8003cca:	b108      	cbz	r0, 8003cd0 <vGBPPUDrawLineObjects+0xe4>
 8003ccc:	2e9f      	cmp	r6, #159	; 0x9f
 8003cce:	dd1a      	ble.n	8003d06 <vGBPPUDrawLineObjects+0x11a>
			for(int pixelNum = 0; pixelNum < 8; pixelNum++){
 8003cd0:	3501      	adds	r5, #1
 8003cd2:	3601      	adds	r6, #1
 8003cd4:	2d08      	cmp	r5, #8
 8003cd6:	d090      	beq.n	8003bfa <vGBPPUDrawLineObjects+0xe>
				uint16_t colorInfo = (objXFlip) ? (((tile_data >> pixelNum) & 0x0101) << 7) : ((tile_data << pixelNum) & 0x8080);
 8003cd8:	2f00      	cmp	r7, #0
 8003cda:	d1e7      	bne.n	8003cac <vGBPPUDrawLineObjects+0xc0>
 8003cdc:	fa02 f105 	lsl.w	r1, r2, r5
 8003ce0:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
 8003ce4:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8003ce8:	b289      	uxth	r1, r1
				switch (colorInfo) {
 8003cea:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003cee:	d1e6      	bne.n	8003cbe <vGBPPUDrawLineObjects+0xd2>
					case 0x8000: pixelData = palette[2]; break;
 8003cf0:	f89a 0002 	ldrb.w	r0, [sl, #2]
 8003cf4:	e7e9      	b.n	8003cca <vGBPPUDrawLineObjects+0xde>
				switch (colorInfo) {
 8003cf6:	4559      	cmp	r1, fp
 8003cf8:	d1ea      	bne.n	8003cd0 <vGBPPUDrawLineObjects+0xe4>
					case 0x8080: pixelData = palette[3]; break;
 8003cfa:	f89a 0003 	ldrb.w	r0, [sl, #3]
 8003cfe:	e7e4      	b.n	8003cca <vGBPPUDrawLineObjects+0xde>
					case 0x0000: pixelData = palette[0]; break;
 8003d00:	f89a 0000 	ldrb.w	r0, [sl]
 8003d04:	e7e1      	b.n	8003cca <vGBPPUDrawLineObjects+0xde>
					updateBufferObj(pixelData, xCoordinate + pixelNum);
 8003d06:	4631      	mov	r1, r6
 8003d08:	9201      	str	r2, [sp, #4]
 8003d0a:	f7ff fe7f 	bl	8003a0c <updateBufferObj>
 8003d0e:	9a01      	ldr	r2, [sp, #4]
 8003d10:	e7de      	b.n	8003cd0 <vGBPPUDrawLineObjects+0xe4>
			uint8_t lineOffset = objYFlip ? (7 - (ly - yCoordinate)) * 2 : (ly - yCoordinate) * 2;
 8003d12:	0040      	lsls	r0, r0, #1
 8003d14:	b2c0      	uxtb	r0, r0
 8003d16:	e7b5      	b.n	8003c84 <vGBPPUDrawLineObjects+0x98>
				}
			}

		}
	}
}
 8003d18:	b003      	add	sp, #12
 8003d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d1e:	bf00      	nop
 8003d20:	24011694 	.word	0x24011694
 8003d24:	2401167c 	.word	0x2401167c
 8003d28:	ffff8080 	.word	0xffff8080

08003d2c <vGBPPUDrawLine>:
 * @param ly lY Register Data
 * @param SCX Scroll X Register
 * @param SCY Scroll Y Register
 * @returns Nothing
 */
void vGBPPUDrawLine(uint8_t ly, uint8_t SCX, uint8_t SCY){
 8003d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	4604      	mov	r4, r0
 8003d32:	460e      	mov	r6, r1
 8003d34:	4617      	mov	r7, r2
	// update Palettes
	vCheckBGP();
 8003d36:	f7ff fd8b 	bl	8003850 <vCheckBGP>
	vCheckOBP0();
 8003d3a:	f7ff fdab 	bl	8003894 <vCheckOBP0>
	vCheckOBP1();
 8003d3e:	f7ff fdcb 	bl	80038d8 <vCheckOBP1>
	return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003d42:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003d46:	f7ff fc8d 	bl	8003664 <ucGBMemoryRead>
	uint16_t TileDataAddr = usGetBackWinTileDataSel();
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003d4a:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <vGBPPUDrawLine+0xf8>)
	return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003d4c:	4602      	mov	r2, r0
	lineadd = scaleAmount * 160;

	if(ucGBMemoryRead(LCDC_ADDR) & 0x01){
 8003d4e:	f64f 7040 	movw	r0, #65344	; 0xff40
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003d52:	781b      	ldrb	r3, [r3, #0]
	return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003d54:	f012 0f10 	tst.w	r2, #16
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003d58:	4a33      	ldr	r2, [pc, #204]	; (8003e28 <vGBPPUDrawLine+0xfc>)
 8003d5a:	fb14 f103 	smulbb	r1, r4, r3
	lineadd = scaleAmount * 160;
 8003d5e:	eb03 0583 	add.w	r5, r3, r3, lsl #2
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003d62:	fb03 f301 	mul.w	r3, r3, r1
	lineadd = scaleAmount * 160;
 8003d66:	ea4f 1545 	mov.w	r5, r5, lsl #5
 8003d6a:	4930      	ldr	r1, [pc, #192]	; (8003e2c <vGBPPUDrawLine+0x100>)
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003d6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	lineadd = scaleAmount * 160;
 8003d70:	600d      	str	r5, [r1, #0]
	return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003d72:	bf18      	it	ne
 8003d74:	f44f 4500 	movne.w	r5, #32768	; 0x8000
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003d78:	ea4f 1343 	mov.w	r3, r3, lsl #5
	return (ucGBMemoryRead(LCDC_ADDR) & 0x10) ? TILE_DATA_UNSIGNED_ADDR : TILE_DATA_SIGNED_ADDR;
 8003d7c:	bf08      	it	eq
 8003d7e:	f44f 4508 	moveq.w	r5, #34816	; 0x8800
	curLine = ly * scaleAmount * scaleAmount * 160;
 8003d82:	6013      	str	r3, [r2, #0]
	if(ucGBMemoryRead(LCDC_ADDR) & 0x01){
 8003d84:	f7ff fc6e 	bl	8003664 <ucGBMemoryRead>
 8003d88:	07c1      	lsls	r1, r0, #31
 8003d8a:	d407      	bmi.n	8003d9c <vGBPPUDrawLine+0x70>
		vGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, usGetBackTileDisplaySel());
		if(ucGBMemoryRead(LCDC_ADDR) & 0x20)
			vGBPPUDrawLineWindow(ly, ucGBMemoryRead(WX_ADDR), ucGBMemoryRead(WY_ADDR), TileDataAddr, usGetWinTileDisplaySel());
	}
	if(ucGBMemoryRead(LCDC_ADDR) & 0x02)
 8003d8c:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003d90:	f7ff fc68 	bl	8003664 <ucGBMemoryRead>
 8003d94:	0783      	lsls	r3, r0, #30
 8003d96:	d43e      	bmi.n	8003e16 <vGBPPUDrawLine+0xea>
		vGBPPUDrawLineObjects(ly);

}
 8003d98:	b003      	add	sp, #12
 8003d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003d9c:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003da0:	f7ff fc60 	bl	8003664 <ucGBMemoryRead>
 8003da4:	f010 0f08 	tst.w	r0, #8
		vGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, usGetBackTileDisplaySel());
 8003da8:	4631      	mov	r1, r6
 8003daa:	463a      	mov	r2, r7
	return (ucGBMemoryRead(LCDC_ADDR) & 0x08) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003dac:	bf14      	ite	ne
 8003dae:	f44f 461c 	movne.w	r6, #39936	; 0x9c00
 8003db2:	f44f 4618 	moveq.w	r6, #38912	; 0x9800
		vGBPPUDrawLineBackground(ly, SCX, SCY, TileDataAddr, usGetBackTileDisplaySel());
 8003db6:	462b      	mov	r3, r5
 8003db8:	4620      	mov	r0, r4
 8003dba:	9600      	str	r6, [sp, #0]
 8003dbc:	f7ff feb8 	bl	8003b30 <vGBPPUDrawLineBackground>
		if(ucGBMemoryRead(LCDC_ADDR) & 0x20)
 8003dc0:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003dc4:	f7ff fc4e 	bl	8003664 <ucGBMemoryRead>
 8003dc8:	0682      	lsls	r2, r0, #26
 8003dca:	d5df      	bpl.n	8003d8c <vGBPPUDrawLine+0x60>
			vGBPPUDrawLineWindow(ly, ucGBMemoryRead(WX_ADDR), ucGBMemoryRead(WY_ADDR), TileDataAddr, usGetWinTileDisplaySel());
 8003dcc:	f64f 704b 	movw	r0, #65355	; 0xff4b
 8003dd0:	f7ff fc48 	bl	8003664 <ucGBMemoryRead>
 8003dd4:	4607      	mov	r7, r0
 8003dd6:	f64f 704a 	movw	r0, #65354	; 0xff4a
 8003dda:	f7ff fc43 	bl	8003664 <ucGBMemoryRead>
 8003dde:	4606      	mov	r6, r0
	return (ucGBMemoryRead(LCDC_ADDR) & 0x40) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003de0:	f64f 7040 	movw	r0, #65344	; 0xff40
 8003de4:	f7ff fc3e 	bl	8003664 <ucGBMemoryRead>
 8003de8:	f010 0f40 	tst.w	r0, #64	; 0x40
	if(WY > ly || WY > 143 || WX > 166)
 8003dec:	4623      	mov	r3, r4
	return (ucGBMemoryRead(LCDC_ADDR) & 0x40) ? TILE_MAP_LOCATION_HIGH : TILE_MAP_LOCATION_LOW;
 8003dee:	bf14      	ite	ne
 8003df0:	f44f 421c 	movne.w	r2, #39936	; 0x9c00
 8003df4:	f44f 4218 	moveq.w	r2, #38912	; 0x9800
	if(WY > ly || WY > 143 || WX > 166)
 8003df8:	2c8f      	cmp	r4, #143	; 0x8f
 8003dfa:	bf28      	it	cs
 8003dfc:	238f      	movcs	r3, #143	; 0x8f
 8003dfe:	429e      	cmp	r6, r3
 8003e00:	d8c4      	bhi.n	8003d8c <vGBPPUDrawLine+0x60>
 8003e02:	2fa6      	cmp	r7, #166	; 0xa6
 8003e04:	d8c2      	bhi.n	8003d8c <vGBPPUDrawLine+0x60>
 8003e06:	9200      	str	r2, [sp, #0]
 8003e08:	462b      	mov	r3, r5
 8003e0a:	4632      	mov	r2, r6
 8003e0c:	4639      	mov	r1, r7
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f7ff fe28 	bl	8003a64 <vGBPPUDrawLineWindow.part.0>
 8003e14:	e7ba      	b.n	8003d8c <vGBPPUDrawLine+0x60>
		vGBPPUDrawLineObjects(ly);
 8003e16:	4620      	mov	r0, r4
}
 8003e18:	b003      	add	sp, #12
 8003e1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		vGBPPUDrawLineObjects(ly);
 8003e1e:	f7ff bee5 	b.w	8003bec <vGBPPUDrawLineObjects>
 8003e22:	bf00      	nop
 8003e24:	2400100c 	.word	0x2400100c
 8003e28:	2401168c 	.word	0x2401168c
 8003e2c:	24011688 	.word	0x24011688

08003e30 <gbPPUStep>:
void gbPPUStep(){
 8003e30:	b570      	push	{r4, r5, r6, lr}
	if(ucGBMemoryRead(LCDC_ADDR) & 0x80){															// check MSB of LCDC for screen en
 8003e32:	f64f 7040 	movw	r0, #65344	; 0xff40
void gbPPUStep(){
 8003e36:	b082      	sub	sp, #8
	if(ucGBMemoryRead(LCDC_ADDR) & 0x80){															// check MSB of LCDC for screen en
 8003e38:	f7ff fc14 	bl	8003664 <ucGBMemoryRead>
 8003e3c:	0601      	lsls	r1, r0, #24
 8003e3e:	d401      	bmi.n	8003e44 <gbPPUStep+0x14>
}
 8003e40:	b002      	add	sp, #8
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
		tStatesTotal += ucGetTstate();
 8003e44:	4c4e      	ldr	r4, [pc, #312]	; (8003f80 <gbPPUStep+0x150>)
 8003e46:	f7fe fd85 	bl	8002954 <ucGetTstate>
			ly++;
 8003e4a:	4d4e      	ldr	r5, [pc, #312]	; (8003f84 <gbPPUStep+0x154>)
		tStatesTotal += ucGetTstate();
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	4418      	add	r0, r3
		if (tStatesTotal > 456){												// end of hblank or vblank
 8003e50:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
		tStatesTotal += ucGetTstate();
 8003e54:	6020      	str	r0, [r4, #0]
		if (tStatesTotal > 456){												// end of hblank or vblank
 8003e56:	d81f      	bhi.n	8003e98 <gbPPUStep+0x68>
		if (ly > 143){													// vblank
 8003e58:	782d      	ldrb	r5, [r5, #0]
 8003e5a:	2d8f      	cmp	r5, #143	; 0x8f
 8003e5c:	d808      	bhi.n	8003e70 <gbPPUStep+0x40>
			if (tStatesTotal <= 80 && Mode != MODE_2)											// oam
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	2b50      	cmp	r3, #80	; 0x50
 8003e62:	d840      	bhi.n	8003ee6 <gbPPUStep+0xb6>
 8003e64:	4b48      	ldr	r3, [pc, #288]	; (8003f88 <gbPPUStep+0x158>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d0e9      	beq.n	8003e40 <gbPPUStep+0x10>
				setMode(MODE_2);
 8003e6c:	2002      	movs	r0, #2
 8003e6e:	e047      	b.n	8003f00 <gbPPUStep+0xd0>
			setMode(MODE_1);
 8003e70:	2001      	movs	r0, #1
 8003e72:	f7ff fd97 	bl	80039a4 <setMode>
			if(checkbit(ucGBMemoryRead(STAT_ADDR), 4))
 8003e76:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003e7a:	f7ff fbf3 	bl	8003664 <ucGBMemoryRead>
 8003e7e:	2104      	movs	r1, #4
 8003e80:	f7fe fec4 	bl	8002c0c <checkbit>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	d156      	bne.n	8003f36 <gbPPUStep+0x106>
			vGBMemorySetBit(IF_ADDR, 0);
 8003e88:	2100      	movs	r1, #0
					vGBMemorySetBit(IF_ADDR, 1);
 8003e8a:	f64f 700f 	movw	r0, #65295	; 0xff0f
}
 8003e8e:	b002      	add	sp, #8
 8003e90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vGBMemorySetBit(IF_ADDR, 1);
 8003e94:	f7ff bb9e 	b.w	80035d4 <vGBMemorySetBit>
			ly++;
 8003e98:	7828      	ldrb	r0, [r5, #0]
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	b2c0      	uxtb	r0, r0
 8003e9e:	7028      	strb	r0, [r5, #0]
			LYC_check(ly);
 8003ea0:	f7ff fd5e 	bl	8003960 <LYC_check>
			if(ly > 153){												// end of vblank
 8003ea4:	7829      	ldrb	r1, [r5, #0]
 8003ea6:	2999      	cmp	r1, #153	; 0x99
 8003ea8:	d914      	bls.n	8003ed4 <gbPPUStep+0xa4>
				if(n % 2){
 8003eaa:	4e38      	ldr	r6, [pc, #224]	; (8003f8c <gbPPUStep+0x15c>)
 8003eac:	6833      	ldr	r3, [r6, #0]
 8003eae:	07da      	lsls	r2, r3, #31
 8003eb0:	d45d      	bmi.n	8003f6e <gbPPUStep+0x13e>
				n++;
 8003eb2:	3301      	adds	r3, #1
				setMode(MODE_2);
 8003eb4:	2002      	movs	r0, #2
				n++;
 8003eb6:	6033      	str	r3, [r6, #0]
				setMode(MODE_2);
 8003eb8:	f7ff fd74 	bl	80039a4 <setMode>
				ly = 0;
 8003ebc:	2300      	movs	r3, #0
				if(checkbit(ucGBMemoryRead(STAT_ADDR), 5))
 8003ebe:	f64f 7041 	movw	r0, #65345	; 0xff41
				ly = 0;
 8003ec2:	702b      	strb	r3, [r5, #0]
				if(checkbit(ucGBMemoryRead(STAT_ADDR), 5))
 8003ec4:	f7ff fbce 	bl	8003664 <ucGBMemoryRead>
 8003ec8:	2105      	movs	r1, #5
 8003eca:	f7fe fe9f 	bl	8002c0c <checkbit>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	d147      	bne.n	8003f62 <gbPPUStep+0x132>
 8003ed2:	7829      	ldrb	r1, [r5, #0]
			vGBMemoryWrite(LY_ADDR, ly);								// update LY register
 8003ed4:	f64f 7044 	movw	r0, #65348	; 0xff44
 8003ed8:	f7ff fbd8 	bl	800368c <vGBMemoryWrite>
			tStatesTotal -= 456;
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003ee2:	6023      	str	r3, [r4, #0]
 8003ee4:	e7b8      	b.n	8003e58 <gbPPUStep+0x28>
			else if(tStatesTotal > 80 && tStatesTotal <= 252 && Mode != MODE_3){										// vram
 8003ee6:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
 8003eea:	2aab      	cmp	r2, #171	; 0xab
 8003eec:	d80d      	bhi.n	8003f0a <gbPPUStep+0xda>
 8003eee:	4b26      	ldr	r3, [pc, #152]	; (8003f88 <gbPPUStep+0x158>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d0a4      	beq.n	8003e40 <gbPPUStep+0x10>
				if (n % 2 == 0){
 8003ef6:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <gbPPUStep+0x15c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	07db      	lsls	r3, r3, #31
 8003efc:	d521      	bpl.n	8003f42 <gbPPUStep+0x112>
				setMode(MODE_3);
 8003efe:	2003      	movs	r0, #3
}
 8003f00:	b002      	add	sp, #8
 8003f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				setMode(MODE_3);
 8003f06:	f7ff bd4d 	b.w	80039a4 <setMode>
			}else if(tStatesTotal > 252 && tStatesTotal <= 456 && Mode != MODE_0){										// hblank
 8003f0a:	3bfd      	subs	r3, #253	; 0xfd
 8003f0c:	2bcb      	cmp	r3, #203	; 0xcb
 8003f0e:	d897      	bhi.n	8003e40 <gbPPUStep+0x10>
 8003f10:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <gbPPUStep+0x158>)
 8003f12:	781a      	ldrb	r2, [r3, #0]
 8003f14:	2a00      	cmp	r2, #0
 8003f16:	d093      	beq.n	8003e40 <gbPPUStep+0x10>
	Mode = mode;
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]
	switch (mode) {
 8003f1c:	f7ff fc7a 	bl	8003814 <setMode.part.0>
				if(checkbit(ucGBMemoryRead(STAT_ADDR), 3))
 8003f20:	f64f 7041 	movw	r0, #65345	; 0xff41
 8003f24:	f7ff fb9e 	bl	8003664 <ucGBMemoryRead>
 8003f28:	2103      	movs	r1, #3
 8003f2a:	f7fe fe6f 	bl	8002c0c <checkbit>
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	d086      	beq.n	8003e40 <gbPPUStep+0x10>
					vGBMemorySetBit(IF_ADDR, 1);
 8003f32:	2101      	movs	r1, #1
 8003f34:	e7a9      	b.n	8003e8a <gbPPUStep+0x5a>
				vGBMemorySetBit(IF_ADDR, 1);
 8003f36:	2101      	movs	r1, #1
 8003f38:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8003f3c:	f7ff fb4a 	bl	80035d4 <vGBMemorySetBit>
 8003f40:	e7a2      	b.n	8003e88 <gbPPUStep+0x58>
					vGBPPUDrawLine(ly, ucGBMemoryRead(SCX_ADDR), ucGBMemoryRead(SCY_ADDR));
 8003f42:	f64f 7043 	movw	r0, #65347	; 0xff43
 8003f46:	f7ff fb8d 	bl	8003664 <ucGBMemoryRead>
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	f64f 7042 	movw	r0, #65346	; 0xff42
 8003f50:	9101      	str	r1, [sp, #4]
 8003f52:	f7ff fb87 	bl	8003664 <ucGBMemoryRead>
 8003f56:	9901      	ldr	r1, [sp, #4]
 8003f58:	4602      	mov	r2, r0
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f7ff fee6 	bl	8003d2c <vGBPPUDrawLine>
 8003f60:	e7cd      	b.n	8003efe <gbPPUStep+0xce>
					vGBMemorySetBit(IF_ADDR, 1);
 8003f62:	2101      	movs	r1, #1
 8003f64:	f64f 700f 	movw	r0, #65295	; 0xff0f
 8003f68:	f7ff fb34 	bl	80035d4 <vGBMemorySetBit>
 8003f6c:	e7b1      	b.n	8003ed2 <gbPPUStep+0xa2>
					displayFrameBuffer(gb_frame, scaleAmount);
 8003f6e:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <gbPPUStep+0x160>)
 8003f70:	4a08      	ldr	r2, [pc, #32]	; (8003f94 <gbPPUStep+0x164>)
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	7811      	ldrb	r1, [r2, #0]
 8003f76:	f000 fb03 	bl	8004580 <displayFrameBuffer>
 8003f7a:	6833      	ldr	r3, [r6, #0]
 8003f7c:	e799      	b.n	8003eb2 <gbPPUStep+0x82>
 8003f7e:	bf00      	nop
 8003f80:	24011680 	.word	0x24011680
 8003f84:	240010a5 	.word	0x240010a5
 8003f88:	24011684 	.word	0x24011684
 8003f8c:	240010a8 	.word	0x240010a8
 8003f90:	24001008 	.word	0x24001008
 8003f94:	2400100c 	.word	0x2400100c

08003f98 <getRomPointer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
const unsigned char* getRomPointer(){
	return rom;
 8003f98:	4b01      	ldr	r3, [pc, #4]	; (8003fa0 <getRomPointer+0x8>)
}
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	24001010 	.word	0x24001010

08003fa4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fa4:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8003fa6:	2004      	movs	r0, #4
{
 8003fa8:	b09e      	sub	sp, #120	; 0x78
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8003faa:	f004 f825 	bl	8007ff8 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fae:	4a2f      	ldr	r2, [pc, #188]	; (800406c <SystemClock_Config+0xc8>)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fb6:	4b2e      	ldr	r3, [pc, #184]	; (8004070 <SystemClock_Config+0xcc>)
 8003fb8:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003fbc:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fbe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003fc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fc2:	f002 0201 	and.w	r2, r2, #1
 8003fc6:	9201      	str	r2, [sp, #4]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003fce:	619a      	str	r2, [r3, #24]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003fd6:	9301      	str	r3, [sp, #4]
 8003fd8:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003fda:	6983      	ldr	r3, [r0, #24]
 8003fdc:	049b      	lsls	r3, r3, #18
 8003fde:	d5fc      	bpl.n	8003fda <SystemClock_Config+0x36>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003fe0:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003fe2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8003fe6:	2200      	movs	r2, #0
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fe8:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;

  RCC_OscInitStruct.PLL.PLLM = 5;
 8003fea:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 8003fec:	25a0      	movs	r5, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003fee:	2408      	movs	r4, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ff0:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work
 8003ff2:	2110      	movs	r1, #16
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ff4:	900c      	str	r0, [sp, #48]	; 0x30
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003ff6:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8003ff8:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8003ffa:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003ffc:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003ffe:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 16;						// changed from 4 to 16 to make i2s work
 8004000:	9119      	str	r1, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8004002:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004004:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004008:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800400c:	e9cd 6516 	strd	r6, r5, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004010:	f004 f82e 	bl	8008070 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8004014:	b108      	cbz	r0, 800401a <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004016:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004018:	e7fe      	b.n	8004018 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800401a:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800401c:	263f      	movs	r6, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800401e:	2503      	movs	r5, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004020:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004024:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8004026:	2104      	movs	r1, #4
 8004028:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800402a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800402c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004030:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004034:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8004038:	f004 fbb0 	bl	800879c <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 800403c:	b108      	cbz	r0, 8004042 <SystemClock_Config+0x9e>
 800403e:	b672      	cpsid	i
  while (1)
 8004040:	e7fe      	b.n	8004040 <SystemClock_Config+0x9c>
  __HAL_RCC_CSI_ENABLE() ;
 8004042:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <SystemClock_Config+0xd0>)
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800404a:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800404c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8004050:	f042 0202 	orr.w	r2, r2, #2
 8004054:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8004058:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	9302      	str	r3, [sp, #8]
 8004062:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 8004064:	f001 fff4 	bl	8006050 <HAL_EnableCompensationCell>
}
 8004068:	b01e      	add	sp, #120	; 0x78
 800406a:	bd70      	pop	{r4, r5, r6, pc}
 800406c:	58000400 	.word	0x58000400
 8004070:	58024800 	.word	0x58024800
 8004074:	58024400 	.word	0x58024400

08004078 <PeriphCommonClock_Config>:
{
 8004078:	b530      	push	{r4, r5, lr}
 800407a:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800407c:	229c      	movs	r2, #156	; 0x9c
 800407e:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8004080:	250c      	movs	r5, #12
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004082:	a809      	add	r0, sp, #36	; 0x24
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8004084:	24c0      	movs	r4, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004086:	f006 f921 	bl	800a2cc <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800408a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800408e:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8004090:	2120      	movs	r1, #32
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8004092:	2200      	movs	r2, #0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004094:	9000      	str	r0, [sp, #0]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004096:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8004098:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800409a:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800409c:	9502      	str	r5, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800409e:	9208      	str	r2, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80040a0:	e9cd 3303 	strd	r3, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80040a4:	e9cd 4106 	strd	r4, r1, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040a8:	f004 fdbc 	bl	8008c24 <HAL_RCCEx_PeriphCLKConfig>
 80040ac:	b108      	cbz	r0, 80040b2 <PeriphCommonClock_Config+0x3a>
 80040ae:	b672      	cpsid	i
  while (1)
 80040b0:	e7fe      	b.n	80040b0 <PeriphCommonClock_Config+0x38>
}
 80040b2:	b031      	add	sp, #196	; 0xc4
 80040b4:	bd30      	pop	{r4, r5, pc}
 80040b6:	bf00      	nop

080040b8 <main>:
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80040b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040bc:	49bb      	ldr	r1, [pc, #748]	; (80043ac <main+0x2f4>)
 80040be:	e002      	b.n	80040c6 <main+0xe>
 80040c0:	3b01      	subs	r3, #1
 80040c2:	f000 811e 	beq.w	8004302 <main+0x24a>
 80040c6:	680a      	ldr	r2, [r1, #0]
 80040c8:	0410      	lsls	r0, r2, #16
 80040ca:	d4f9      	bmi.n	80040c0 <main+0x8>
{
 80040cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040d0:	b092      	sub	sp, #72	; 0x48
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80040d2:	2401      	movs	r4, #1
	HAL_MPU_Disable();
 80040d4:	f002 fe02 	bl	8006cdc <HAL_MPU_Disable>
	MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80040d8:	4ab5      	ldr	r2, [pc, #724]	; (80043b0 <main+0x2f8>)
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80040da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 80040de:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80040e2:	a80b      	add	r0, sp, #44	; 0x2c
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80040e4:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80040e8:	930e      	str	r3, [sp, #56]	; 0x38
	MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80040ea:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80040ee:	f002 fe17 	bl	8006d20 <HAL_MPU_ConfigRegion>
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80040f2:	2004      	movs	r0, #4
 80040f4:	f002 fe02 	bl	8006cfc <HAL_MPU_Enable>
  HAL_Init();
 80040f8:	f001 ff46 	bl	8005f88 <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80040fc:	4aad      	ldr	r2, [pc, #692]	; (80043b4 <main+0x2fc>)
 80040fe:	6953      	ldr	r3, [r2, #20]
 8004100:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8004104:	d111      	bne.n	800412a <main+0x72>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004106:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800410a:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800410e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004112:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004116:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800411a:	6953      	ldr	r3, [r2, #20]
 800411c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004120:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004122:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004126:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800412a:	4aa2      	ldr	r2, [pc, #648]	; (80043b4 <main+0x2fc>)
 800412c:	6953      	ldr	r3, [r2, #20]
 800412e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004132:	d124      	bne.n	800417e <main+0xc6>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004134:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004138:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800413c:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004140:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004144:	f3c5 304e 	ubfx	r0, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004148:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 800414c:	0140      	lsls	r0, r0, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800414e:	ea00 0406 	and.w	r4, r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004152:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004154:	ea44 7183 	orr.w	r1, r4, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8004158:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800415a:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800415e:	1c59      	adds	r1, r3, #1
 8004160:	d1f8      	bne.n	8004154 <main+0x9c>
    } while(sets-- != 0U);
 8004162:	3820      	subs	r0, #32
 8004164:	f110 0f20 	cmn.w	r0, #32
 8004168:	d1f1      	bne.n	800414e <main+0x96>
 800416a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800416e:	6953      	ldr	r3, [r2, #20]
 8004170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004174:	6153      	str	r3, [r2, #20]
 8004176:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800417a:	f3bf 8f6f 	isb	sy
__HAL_RCC_HSEM_CLK_ENABLE();
 800417e:	4c8b      	ldr	r4, [pc, #556]	; (80043ac <main+0x2f4>)
  SystemClock_Config();
 8004180:	f7ff ff10 	bl	8003fa4 <SystemClock_Config>
  PeriphCommonClock_Config();
 8004184:	f7ff ff78 	bl	8004078 <PeriphCommonClock_Config>
HAL_HSEM_FastTake(HSEM_ID_0);
 8004188:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 800418a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800418e:	4625      	mov	r5, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8004190:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004194:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8004198:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800419c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	9b00      	ldr	r3, [sp, #0]
HAL_HSEM_FastTake(HSEM_ID_0);
 80041a4:	f003 fcb2 	bl	8007b0c <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 80041a8:	2100      	movs	r1, #0
 80041aa:	4608      	mov	r0, r1
 80041ac:	f003 fcbc 	bl	8007b28 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80041b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041b4:	e002      	b.n	80041bc <main+0x104>
 80041b6:	3b01      	subs	r3, #1
 80041b8:	f000 80a5 	beq.w	8004306 <main+0x24e>
 80041bc:	682a      	ldr	r2, [r5, #0]
 80041be:	0412      	lsls	r2, r2, #16
 80041c0:	d5f9      	bpl.n	80041b6 <main+0xfe>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c6:	2601      	movs	r6, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c8:	2202      	movs	r2, #2
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ca:	2400      	movs	r4, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041cc:	f043 0301 	orr.w	r3, r3, #1
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80041d0:	f44f 7880 	mov.w	r8, #256	; 0x100
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80041d4:	a90b      	add	r1, sp, #44	; 0x2c
 80041d6:	4878      	ldr	r0, [pc, #480]	; (80043b8 <main+0x300>)
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80041dc:	f44f 2900 	mov.w	r9, #524288	; 0x80000
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041e4:	2704      	movs	r7, #4
  hadc1.Instance = ADC1;
 80041e6:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 80043cc <main+0x314>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ea:	4033      	ands	r3, r6
 80041ec:	9302      	str	r3, [sp, #8]
 80041ee:	9b02      	ldr	r3, [sp, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041f0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80041fa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80041fe:	4013      	ands	r3, r2
 8004200:	9303      	str	r3, [sp, #12]
 8004202:	9b03      	ldr	r3, [sp, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004204:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004208:	f043 0308 	orr.w	r3, r3, #8
 800420c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004210:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	9304      	str	r3, [sp, #16]
 800421a:	9b04      	ldr	r3, [sp, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800421c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004220:	f043 0304 	orr.w	r3, r3, #4
 8004224:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004228:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	9305      	str	r3, [sp, #20]
 8004232:	9b05      	ldr	r3, [sp, #20]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004234:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800423c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004240:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004248:	9306      	str	r3, [sp, #24]
 800424a:	9b06      	ldr	r3, [sp, #24]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 800424c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004250:	f043 0320 	orr.w	r3, r3, #32
 8004254:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004258:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425c:	920c      	str	r2, [sp, #48]	; 0x30
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 800425e:	f003 0320 	and.w	r3, r3, #32
	  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8004262:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004266:	9307      	str	r3, [sp, #28]
 8004268:	9b07      	ldr	r3, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800426e:	940f      	str	r4, [sp, #60]	; 0x3c
	  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8004270:	f003 fb20 	bl	80078b4 <HAL_GPIO_Init>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004274:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8004276:	f44f 4270 	mov.w	r2, #61440	; 0xf000
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 800427a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800427e:	a90b      	add	r1, sp, #44	; 0x2c
 8004280:	484e      	ldr	r0, [pc, #312]	; (80043bc <main+0x304>)
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004282:	ea43 0308 	orr.w	r3, r3, r8
 8004286:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800428a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800428e:	920b      	str	r2, [sp, #44]	; 0x2c
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004290:	ea03 0308 	and.w	r3, r3, r8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004294:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004296:	940e      	str	r4, [sp, #56]	; 0x38
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004298:	9301      	str	r3, [sp, #4]
 800429a:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800429c:	960c      	str	r6, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800429e:	f003 fb09 	bl	80078b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80042a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042a6:	a90b      	add	r1, sp, #44	; 0x2c
 80042a8:	4845      	ldr	r0, [pc, #276]	; (80043c0 <main+0x308>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80042aa:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ac:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ae:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042b2:	f003 faff 	bl	80078b4 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 80042b6:	4b43      	ldr	r3, [pc, #268]	; (80043c4 <main+0x30c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80042b8:	4650      	mov	r0, sl
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80042ba:	f8aa 4014 	strh.w	r4, [sl, #20]
  ADC_MultiModeTypeDef multimode = {0};
 80042be:	9408      	str	r4, [sp, #32]
  ADC_ChannelConfTypeDef sConfig = {0};
 80042c0:	9411      	str	r4, [sp, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 1;
 80042c2:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80042c6:	f88a 401c 	strb.w	r4, [sl, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80042ca:	f8ca 4034 	str.w	r4, [sl, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80042ce:	f88a 4038 	strb.w	r4, [sl, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80042d2:	f8ca 7010 	str.w	r7, [sl, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80042d6:	e9ca 3900 	strd	r3, r9, [sl]
  ADC_ChannelConfTypeDef sConfig = {0};
 80042da:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80042de:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 80042e2:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  ADC_MultiModeTypeDef multimode = {0};
 80042e6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80042ea:	e9ca 4402 	strd	r4, r4, [sl, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80042ee:	e9ca 4409 	strd	r4, r4, [sl, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80042f2:	e9ca 440b 	strd	r4, r4, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80042f6:	f002 fb09 	bl	800690c <HAL_ADC_Init>
 80042fa:	4603      	mov	r3, r0
 80042fc:	b128      	cbz	r0, 800430a <main+0x252>
  __ASM volatile ("cpsid i" : : : "memory");
 80042fe:	b672      	cpsid	i
  while (1)
 8004300:	e7fe      	b.n	8004300 <main+0x248>
 8004302:	b672      	cpsid	i
 8004304:	e7fe      	b.n	8004304 <main+0x24c>
 8004306:	b672      	cpsid	i
 8004308:	e7fe      	b.n	8004308 <main+0x250>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800430a:	a908      	add	r1, sp, #32
 800430c:	4650      	mov	r0, sl
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800430e:	9308      	str	r3, [sp, #32]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004310:	f002 fc08 	bl	8006b24 <HAL_ADCEx_MultiModeConfigChannel>
 8004314:	4603      	mov	r3, r0
 8004316:	b108      	cbz	r0, 800431c <main+0x264>
 8004318:	b672      	cpsid	i
  while (1)
 800431a:	e7fe      	b.n	800431a <main+0x262>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800431c:	2506      	movs	r5, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800431e:	f240 74ff 	movw	r4, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004322:	4650      	mov	r0, sl
 8004324:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004326:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.OffsetSignedSaturation = DISABLE;
 8004328:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  sConfig.Channel = ADC_CHANNEL_0;
 800432c:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800432e:	950c      	str	r5, [sp, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004330:	940e      	str	r4, [sp, #56]	; 0x38
  sConfig.Offset = 0;
 8004332:	e9cd 730f 	strd	r7, r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004336:	f001 ff21 	bl	800617c <HAL_ADC_ConfigChannel>
 800433a:	4603      	mov	r3, r0
 800433c:	b108      	cbz	r0, 8004342 <main+0x28a>
 800433e:	b672      	cpsid	i
  while (1)
 8004340:	e7fe      	b.n	8004340 <main+0x288>
  hadc3.Instance = ADC3;
 8004342:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80043d0 <main+0x318>
 8004346:	4a20      	ldr	r2, [pc, #128]	; (80043c8 <main+0x310>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8004348:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800434a:	4650      	mov	r0, sl
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800434c:	f8aa 3014 	strh.w	r3, [sl, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004350:	f88a 301c 	strb.w	r3, [sl, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8004354:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8004358:	f88a 3038 	strb.w	r3, [sl, #56]	; 0x38
  hadc3.Init.NbrOfConversion = 1;
 800435c:	f8ca 6018 	str.w	r6, [sl, #24]
  hadc3.Instance = ADC3;
 8004360:	f8ca 2000 	str.w	r2, [sl]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004364:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8004368:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 800436c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8004370:	e9ca 9301 	strd	r9, r3, [sl, #4]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004374:	e9ca 3703 	strd	r3, r7, [sl, #12]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004378:	e9ca 3309 	strd	r3, r3, [sl, #36]	; 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800437c:	e9ca 330b 	strd	r3, r3, [sl, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004380:	f002 fac4 	bl	800690c <HAL_ADC_Init>
 8004384:	4603      	mov	r3, r0
 8004386:	b108      	cbz	r0, 800438c <main+0x2d4>
 8004388:	b672      	cpsid	i
  while (1)
 800438a:	e7fe      	b.n	800438a <main+0x2d2>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800438c:	a90b      	add	r1, sp, #44	; 0x2c
 800438e:	4650      	mov	r0, sl
  sConfig.OffsetSignedSaturation = DISABLE;
 8004390:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004394:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004398:	e9cd 650b 	strd	r6, r5, [sp, #44]	; 0x2c
  sConfig.Offset = 0;
 800439c:	e9cd 730f 	strd	r7, r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80043a0:	f001 feec 	bl	800617c <HAL_ADC_ConfigChannel>
 80043a4:	4604      	mov	r4, r0
 80043a6:	b1a8      	cbz	r0, 80043d4 <main+0x31c>
 80043a8:	b672      	cpsid	i
  while (1)
 80043aa:	e7fe      	b.n	80043aa <main+0x2f2>
 80043ac:	58024400 	.word	0x58024400
 80043b0:	03000018 	.word	0x03000018
 80043b4:	e000ed00 	.word	0xe000ed00
 80043b8:	58020000 	.word	0x58020000
 80043bc:	58022000 	.word	0x58022000
 80043c0:	58020800 	.word	0x58020800
 80043c4:	40022000 	.word	0x40022000
 80043c8:	58026000 	.word	0x58026000
 80043cc:	24011760 	.word	0x24011760
 80043d0:	240117c4 	.word	0x240117c4
  stm32h7_displaySetPalette();
 80043d4:	f000 f836 	bl	8004444 <stm32h7_displaySetPalette>
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 80043d8:	4631      	mov	r1, r6
 80043da:	4620      	mov	r0, r4
 80043dc:	f001 fc72 	bl	8005cc4 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80043e0:	4813      	ldr	r0, [pc, #76]	; (8004430 <main+0x378>)
 80043e2:	f005 feab 	bl	800a13c <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 80043e6:	4620      	mov	r0, r4
 80043e8:	f005 feda 	bl	800a1a0 <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 80043ec:	f04f 30ff 	mov.w	r0, #4294967295
 80043f0:	f005 ff2a 	bl	800a248 <UTIL_LCD_Clear>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 80043f4:	f04f 30ff 	mov.w	r0, #4294967295
 80043f8:	f005 feea 	bl	800a1d0 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 80043fc:	480d      	ldr	r0, [pc, #52]	; (8004434 <main+0x37c>)
 80043fe:	f005 fedf 	bl	800a1c0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 8004402:	480d      	ldr	r0, [pc, #52]	; (8004438 <main+0x380>)
 8004404:	f005 feec 	bl	800a1e0 <UTIL_LCD_SetFont>
  vGBMemoryLoad(rom, 32768);														// load rom into memory
 8004408:	4b0c      	ldr	r3, [pc, #48]	; (800443c <main+0x384>)
 800440a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	f7ff f884 	bl	800351c <vGBMemoryLoad>
  vGBMemoryLoad(dmg_boot_bin, 256);													// load boot rom into appropriate place in memory map
 8004414:	4641      	mov	r1, r8
 8004416:	480a      	ldr	r0, [pc, #40]	; (8004440 <main+0x388>)
 8004418:	f7ff f880 	bl	800351c <vGBMemoryLoad>
  vGBMemoryInit();
 800441c:	f7ff f86e 	bl	80034fc <vGBMemoryInit>
  vSetFrameBuffer();
 8004420:	f7ff fa06 	bl	8003830 <vSetFrameBuffer>
	  vGBCPUboot();
 8004424:	f7fe fbb2 	bl	8002b8c <vGBCPUboot>
	  gbPPUStep();
 8004428:	f7ff fd02 	bl	8003e30 <gbPPUStep>
  while (1)
 800442c:	e7fa      	b.n	8004424 <main+0x36c>
 800442e:	bf00      	nop
 8004430:	08012578 	.word	0x08012578
 8004434:	ff0000ff 	.word	0xff0000ff
 8004438:	2400106c 	.word	0x2400106c
 800443c:	24001010 	.word	0x24001010
 8004440:	08012304 	.word	0x08012304

08004444 <stm32h7_displaySetPalette>:
};

static uint32_t clut_argb8888[256];
DMA2D_CLUTCfgTypeDef clut_cfg;

void stm32h7_displaySetPalette(){
 8004444:	b430      	push	{r4, r5}

	clut_argb8888[1] = LIGHTEST_GREEN;
 8004446:	4b08      	ldr	r3, [pc, #32]	; (8004468 <stm32h7_displaySetPalette+0x24>)
	clut_argb8888[2] = LIGHT_GREEN;
	clut_argb8888[3] = DARK_GREEN;
	clut_argb8888[4] = DARKEST_GREEN;

	clut_cfg.pCLUT = clut_argb8888;
	clut_cfg.CLUTColorMode = DMA2D_CCM_ARGB8888;
 8004448:	2000      	movs	r0, #0
	clut_argb8888[1] = LIGHTEST_GREEN;
 800444a:	4c08      	ldr	r4, [pc, #32]	; (800446c <stm32h7_displaySetPalette+0x28>)
	clut_cfg.Size = 255;
 800444c:	21ff      	movs	r1, #255	; 0xff
	clut_argb8888[2] = LIGHT_GREEN;
 800444e:	4a08      	ldr	r2, [pc, #32]	; (8004470 <stm32h7_displaySetPalette+0x2c>)
	clut_argb8888[3] = DARK_GREEN;
 8004450:	4d08      	ldr	r5, [pc, #32]	; (8004474 <stm32h7_displaySetPalette+0x30>)
	clut_argb8888[1] = LIGHTEST_GREEN;
 8004452:	605c      	str	r4, [r3, #4]
	clut_argb8888[2] = LIGHT_GREEN;
 8004454:	609a      	str	r2, [r3, #8]
	clut_argb8888[4] = DARKEST_GREEN;
 8004456:	4c08      	ldr	r4, [pc, #32]	; (8004478 <stm32h7_displaySetPalette+0x34>)
	clut_cfg.pCLUT = clut_argb8888;
 8004458:	4a08      	ldr	r2, [pc, #32]	; (800447c <stm32h7_displaySetPalette+0x38>)
	clut_argb8888[4] = DARKEST_GREEN;
 800445a:	e9c3 5403 	strd	r5, r4, [r3, #12]
	clut_cfg.CLUTColorMode = DMA2D_CCM_ARGB8888;
 800445e:	e9c2 3000 	strd	r3, r0, [r2]
}
 8004462:	bc30      	pop	{r4, r5}
	clut_cfg.Size = 255;
 8004464:	6091      	str	r1, [r2, #8]
}
 8004466:	4770      	bx	lr
 8004468:	240010ac 	.word	0x240010ac
 800446c:	ff9bbc0f 	.word	0xff9bbc0f
 8004470:	ff8bac0f 	.word	0xff8bac0f
 8004474:	ff306230 	.word	0xff306230
 8004478:	ff0f380f 	.word	0xff0f380f
 800447c:	2401187c 	.word	0x2401187c

08004480 <HAL_LTDC_LineEventCallback>:
  *                the configuration information for the LTDC.
  * @retval None
  */
void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
  if(pend_buffer >= 0)
 8004480:	4b0e      	ldr	r3, [pc, #56]	; (80044bc <HAL_LTDC_LineEventCallback+0x3c>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	2a00      	cmp	r2, #0
 8004486:	db15      	blt.n	80044b4 <HAL_LTDC_LineEventCallback+0x34>
  {
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8004488:	490d      	ldr	r1, [pc, #52]	; (80044c0 <HAL_LTDC_LineEventCallback+0x40>)
 800448a:	6802      	ldr	r2, [r0, #0]
{
 800448c:	b470      	push	{r4, r5, r6}
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 800448e:	681d      	ldr	r5, [r3, #0]
    __HAL_LTDC_RELOAD_CONFIG(hltdc);

    front_buffer = pend_buffer;
    pend_buffer = -1;
 8004490:	f04f 34ff 	mov.w	r4, #4294967295
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8004494:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
    front_buffer = pend_buffer;
 8004498:	4d0a      	ldr	r5, [pc, #40]	; (80044c4 <HAL_LTDC_LineEventCallback+0x44>)
    LTDC_LAYER(hltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 800449a:	f8c2 60ac 	str.w	r6, [r2, #172]	; 0xac
    __HAL_LTDC_RELOAD_CONFIG(hltdc);
 800449e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80044a0:	f041 0101 	orr.w	r1, r1, #1
 80044a4:	6251      	str	r1, [r2, #36]	; 0x24
  }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 80044a6:	2100      	movs	r1, #0
    front_buffer = pend_buffer;
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	602a      	str	r2, [r5, #0]
    pend_buffer = -1;
 80044ac:	601c      	str	r4, [r3, #0]
}
 80044ae:	bc70      	pop	{r4, r5, r6}
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 80044b0:	f003 bce6 	b.w	8007e80 <HAL_LTDC_ProgramLineEvent>
 80044b4:	2100      	movs	r1, #0
 80044b6:	f003 bce3 	b.w	8007e80 <HAL_LTDC_ProgramLineEvent>
 80044ba:	bf00      	nop
 80044bc:	24001014 	.word	0x24001014
 80044c0:	08012404 	.word	0x08012404
 80044c4:	240014ac 	.word	0x240014ac

080044c8 <CopyBuffer>:

void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize)
{
 80044c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044cc:	b083      	sub	sp, #12

  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
  uint32_t source      = (uint32_t)pSrc;

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  hdma2d.Init.Mode         = DMA2D_M2M_PFC;
 80044ce:	4c29      	ldr	r4, [pc, #164]	; (8004574 <CopyBuffer+0xac>)
 80044d0:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hdma2d.XferCpltCallback  = NULL;

  /*##-3- Foreground Configuration ###########################################*/
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 80044d4:	f04f 0eff 	mov.w	lr, #255	; 0xff
{
 80044d8:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
  //hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_L8;
 80044dc:	f04f 0c05 	mov.w	ip, #5
{
 80044e0:	461e      	mov	r6, r3
  hdma2d.LayerCfg[1].InputOffset = 0;
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */

  hdma2d.Instance          = DMA2D;
 80044e2:	4b25      	ldr	r3, [pc, #148]	; (8004578 <CopyBuffer+0xb0>)
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 80044e4:	f5ca 7548 	rsb	r5, sl, #800	; 0x320
{
 80044e8:	4680      	mov	r8, r0

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 80044ea:	4620      	mov	r0, r4
{
 80044ec:	460f      	mov	r7, r1
  hdma2d.Init.OutputOffset = LCD_X_Size - xsize;
 80044ee:	60e5      	str	r5, [r4, #12]
  hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80044f0:	2500      	movs	r5, #0
{
 80044f2:	4691      	mov	r9, r2
  hdma2d.Init.Mode         = DMA2D_M2M_PFC;
 80044f4:	f8c4 b004 	str.w	fp, [r4, #4]
  hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80044f8:	60a5      	str	r5, [r4, #8]
  hdma2d.XferCpltCallback  = NULL;
 80044fa:	6225      	str	r5, [r4, #32]
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80044fc:	64e5      	str	r5, [r4, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputOffset = 0;
 80044fe:	6465      	str	r5, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004500:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_L8;
 8004504:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
  hdma2d.Instance          = DMA2D;
 8004508:	6023      	str	r3, [r4, #0]
  hdma2d.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 800450a:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 800450e:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
{
 8004512:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8004516:	f002 fc79 	bl	8006e0c <HAL_DMA2D_Init>
 800451a:	b110      	cbz	r0, 8004522 <CopyBuffer+0x5a>
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
		  }
    }
    }
  }
}
 800451c:	b003      	add	sp, #12
 800451e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK)
 8004522:	2101      	movs	r1, #1
 8004524:	4620      	mov	r0, r4
 8004526:	f002 fd93 	bl	8007050 <HAL_DMA2D_ConfigLayer>
 800452a:	2800      	cmp	r0, #0
 800452c:	d1f6      	bne.n	800451c <CopyBuffer+0x54>
      if(HAL_DMA2D_CLUTLoad(&hdma2d, clut_cfg, 1) == HAL_OK){
 800452e:	2201      	movs	r2, #1
 8004530:	4b12      	ldr	r3, [pc, #72]	; (800457c <CopyBuffer+0xb4>)
 8004532:	4620      	mov	r0, r4
 8004534:	9200      	str	r2, [sp, #0]
 8004536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004538:	f002 fcc6 	bl	8006ec8 <HAL_DMA2D_CLUTLoad>
 800453c:	2800      	cmp	r0, #0
 800453e:	d1ed      	bne.n	800451c <CopyBuffer+0x54>
    	  HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8004540:	210a      	movs	r1, #10
 8004542:	4620      	mov	r0, r4
 8004544:	f002 fcfe 	bl	8006f44 <HAL_DMA2D_PollForTransfer>
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004548:	f44f 7248 	mov.w	r2, #800	; 0x320
		  if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 800454c:	4653      	mov	r3, sl
 800454e:	4641      	mov	r1, r8
  uint32_t destination = (uint32_t)pDst + (y * LCD_X_Size + x) * 4;
 8004550:	fb02 9206 	mla	r2, r2, r6, r9
		  if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8004554:	4620      	mov	r0, r4
 8004556:	9500      	str	r5, [sp, #0]
 8004558:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800455c:	f002 fc98 	bl	8006e90 <HAL_DMA2D_Start>
 8004560:	2800      	cmp	r0, #0
 8004562:	d1db      	bne.n	800451c <CopyBuffer+0x54>
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8004564:	4620      	mov	r0, r4
 8004566:	210a      	movs	r1, #10
}
 8004568:	b003      	add	sp, #12
 800456a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 800456e:	f002 bce9 	b.w	8006f44 <HAL_DMA2D_PollForTransfer>
 8004572:	bf00      	nop
 8004574:	240014b0 	.word	0x240014b0
 8004578:	52001000 	.word	0x52001000
 800457c:	2401187c 	.word	0x2401187c

08004580 <displayFrameBuffer>:

void displayFrameBuffer(uint8_t* gb_frame, uint8_t scaleAmount){
 8004580:	b530      	push	{r4, r5, lr}
 8004582:	460c      	mov	r4, r1
 8004584:	b083      	sub	sp, #12
	CopyBuffer((uint32_t *) gb_frame, (uint32_t *)Buffers[0], 0, (480 - (144*3))/2, 160 * scaleAmount, 144 * scaleAmount);
 8004586:	2318      	movs	r3, #24
 8004588:	2200      	movs	r2, #0
 800458a:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 800458e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8004592:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004596:	012d      	lsls	r5, r5, #4
 8004598:	0164      	lsls	r4, r4, #5
 800459a:	e9cd 4500 	strd	r4, r5, [sp]
 800459e:	f7ff ff93 	bl	80044c8 <CopyBuffer>
	LTDC_LAYER(&hlcd_ltdc, 0)->CFBAR = ((uint32_t)Buffers[0]);
 80045a2:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <displayFrameBuffer+0x34>)
 80045a4:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 //__HAL_LTDC_RELOAD_CONFIG(&hlcd_ltdc);
}
 80045ae:	b003      	add	sp, #12
 80045b0:	bd30      	pop	{r4, r5, pc}
 80045b2:	bf00      	nop
 80045b4:	24011888 	.word	0x24011888

080045b8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b8:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <HAL_MspInit+0x20>)
{
 80045ba:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045bc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80045c0:	f042 0202 	orr.w	r2, r2, #2
 80045c4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80045c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045d4:	b002      	add	sp, #8
 80045d6:	4770      	bx	lr
 80045d8:	58024400 	.word	0x58024400

080045dc <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80045dc:	4938      	ldr	r1, [pc, #224]	; (80046c0 <HAL_ADC_MspInit+0xe4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045de:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80045e0:	6802      	ldr	r2, [r0, #0]
{
 80045e2:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 80045e4:	428a      	cmp	r2, r1
{
 80045e6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80045ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80045f0:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 80045f2:	d004      	beq.n	80045fe <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 80045f4:	4933      	ldr	r1, [pc, #204]	; (80046c4 <HAL_ADC_MspInit+0xe8>)
 80045f6:	428a      	cmp	r2, r1
 80045f8:	d026      	beq.n	8004648 <HAL_ADC_MspInit+0x6c>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80045fa:	b00a      	add	sp, #40	; 0x28
 80045fc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 80045fe:	4b32      	ldr	r3, [pc, #200]	; (80046c8 <HAL_ADC_MspInit+0xec>)
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8004600:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004604:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8004608:	4608      	mov	r0, r1
    __HAL_RCC_ADC12_CLK_ENABLE();
 800460a:	f042 0220 	orr.w	r2, r2, #32
 800460e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004612:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004616:	f002 0220 	and.w	r2, r2, #32
 800461a:	9200      	str	r2, [sp, #0]
 800461c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800461e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800462a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	9b01      	ldr	r3, [sp, #4]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8004636:	f001 fd01 	bl	800603c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800463a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800463e:	4608      	mov	r0, r1
 8004640:	f001 fcfc 	bl	800603c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8004644:	b00a      	add	sp, #40	; 0x28
 8004646:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004648:	4a1f      	ldr	r2, [pc, #124]	; (80046c8 <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 800464a:	f44f 6680 	mov.w	r6, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800464e:	2503      	movs	r5, #3
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8004650:	a905      	add	r1, sp, #20
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004652:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8004656:	481d      	ldr	r0, [pc, #116]	; (80046cc <HAL_ADC_MspInit+0xf0>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004658:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 800465c:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8004660:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004664:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
 8004668:	9402      	str	r4, [sp, #8]
 800466a:	9c02      	ldr	r4, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800466c:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004670:	f044 0420 	orr.w	r4, r4, #32
 8004674:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8004678:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 800467c:	f004 0420 	and.w	r4, r4, #32
 8004680:	9403      	str	r4, [sp, #12]
 8004682:	9c03      	ldr	r4, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004684:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8004688:	f044 0404 	orr.w	r4, r4, #4
 800468c:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8004690:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004694:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004696:	f002 0204 	and.w	r2, r2, #4
 800469a:	9204      	str	r2, [sp, #16]
 800469c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800469e:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 80046a2:	f003 f907 	bl	80078b4 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80046a6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80046aa:	4608      	mov	r0, r1
 80046ac:	f001 fcc6 	bl	800603c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80046b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80046b4:	4608      	mov	r0, r1
 80046b6:	f001 fcc1 	bl	800603c <HAL_SYSCFG_AnalogSwitchConfig>
}
 80046ba:	b00a      	add	sp, #40	; 0x28
 80046bc:	bd70      	pop	{r4, r5, r6, pc}
 80046be:	bf00      	nop
 80046c0:	40022000 	.word	0x40022000
 80046c4:	58026000 	.word	0x58026000
 80046c8:	58024400 	.word	0x58024400
 80046cc:	58021400 	.word	0x58021400

080046d0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop

080046d4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 80046d4:	4c05      	ldr	r4, [pc, #20]	; (80046ec <HardFault_Handler+0x18>)
{
 80046d6:	b508      	push	{r3, lr}
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 80046d8:	4620      	mov	r0, r4
 80046da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046de:	f003 fa0b 	bl	8007af8 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80046e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046e6:	f001 fc91 	bl	800600c <HAL_Delay>
  while (1)
 80046ea:	e7f5      	b.n	80046d8 <HardFault_Handler+0x4>
 80046ec:	58022000 	.word	0x58022000

080046f0 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80046f0:	e7fe      	b.n	80046f0 <MemManage_Handler>
 80046f2:	bf00      	nop

080046f4 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80046f4:	e7fe      	b.n	80046f4 <BusFault_Handler>
 80046f6:	bf00      	nop

080046f8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80046f8:	e7fe      	b.n	80046f8 <UsageFault_Handler>
 80046fa:	bf00      	nop

080046fc <SVC_Handler>:
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop

08004700 <DebugMon_Handler>:
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop

08004704 <PendSV_Handler>:
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop

08004708 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8004708:	f001 bc6e 	b.w	8005fe8 <HAL_IncTick>

0800470c <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 800470c:	4801      	ldr	r0, [pc, #4]	; (8004714 <LTDC_IRQHandler+0x8>)
 800470e:	f003 bb25 	b.w	8007d5c <HAL_LTDC_IRQHandler>
 8004712:	bf00      	nop
 8004714:	24011888 	.word	0x24011888

08004718 <LTDC_ER_IRQHandler>:
 8004718:	f7ff bff8 	b.w	800470c <LTDC_IRQHandler>

0800471c <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 800471c:	4801      	ldr	r0, [pc, #4]	; (8004724 <DSI_IRQHandler+0x8>)
 800471e:	f002 bdeb 	b.w	80072f8 <HAL_DSI_IRQHandler>
 8004722:	bf00      	nop
 8004724:	2401194c 	.word	0x2401194c

08004728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004760 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800472c:	f7fb fdd4 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004730:	480c      	ldr	r0, [pc, #48]	; (8004764 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004732:	490d      	ldr	r1, [pc, #52]	; (8004768 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004734:	4a0d      	ldr	r2, [pc, #52]	; (800476c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004738:	e002      	b.n	8004740 <LoopCopyDataInit>

0800473a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800473a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800473c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800473e:	3304      	adds	r3, #4

08004740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004744:	d3f9      	bcc.n	800473a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004746:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004748:	4c0a      	ldr	r4, [pc, #40]	; (8004774 <LoopFillZerobss+0x22>)
  movs r3, #0
 800474a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800474c:	e001      	b.n	8004752 <LoopFillZerobss>

0800474e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800474e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004750:	3204      	adds	r2, #4

08004752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004754:	d3fb      	bcc.n	800474e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004756:	f005 fd87 	bl	800a268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800475a:	f7ff fcad 	bl	80040b8 <main>
  bx  lr
 800475e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004760:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8004764:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004768:	24001074 	.word	0x24001074
  ldr r2, =_sidata
 800476c:	08014064 	.word	0x08014064
  ldr r2, =_sbss
 8004770:	24001078 	.word	0x24001078
  ldr r4, =_ebss
 8004774:	24011a08 	.word	0x24011a08

08004778 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004778:	e7fe      	b.n	8004778 <ADC3_IRQHandler>
	...

0800477c <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                     pRegMode->BurstType     |\
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800477e:	4c0e      	ldr	r4, [pc, #56]	; (80047b8 <IS42S32800J_ModeRegConfig+0x3c>)
 8004780:	2304      	movs	r3, #4
{
 8004782:	460a      	mov	r2, r1
  Command.CommandTarget          = pRegMode->TargetBank;
  Command.AutoRefreshNumber      = 1;
 8004784:	2601      	movs	r6, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004786:	6023      	str	r3, [r4, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004788:	69d7      	ldr	r7, [r2, #28]
 800478a:	e9d1 3503 	ldrd	r3, r5, [r1, #12]
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800478e:	4621      	mov	r1, r4
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004790:	432b      	orrs	r3, r5
                     pRegMode->BurstType     |\
 8004792:	6955      	ldr	r5, [r2, #20]
 8004794:	432b      	orrs	r3, r5
                     pRegMode->CASLatency    |\
 8004796:	6995      	ldr	r5, [r2, #24]
 8004798:	432b      	orrs	r3, r5
  Command.CommandTarget          = pRegMode->TargetBank;
 800479a:	6815      	ldr	r5, [r2, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800479c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
 80047a0:	60a6      	str	r6, [r4, #8]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80047a2:	433b      	orrs	r3, r7
  Command.CommandTarget          = pRegMode->TargetBank;
 80047a4:	6065      	str	r5, [r4, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 80047a6:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047a8:	f005 fbe4 	bl	8009f74 <HAL_SDRAM_SendCommand>
 80047ac:	3800      	subs	r0, #0
 80047ae:	bf18      	it	ne
 80047b0:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80047b2:	4240      	negs	r0, r0
 80047b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b6:	bf00      	nop
 80047b8:	24001518 	.word	0x24001518

080047bc <IS42S32800J_Init>:
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80047bc:	680a      	ldr	r2, [r1, #0]
{
 80047be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80047c0:	4c22      	ldr	r4, [pc, #136]	; (800484c <IS42S32800J_Init+0x90>)
 80047c2:	2301      	movs	r3, #1
  Command.ModeRegisterDefinition = 0;
 80047c4:	2700      	movs	r7, #0
{
 80047c6:	460d      	mov	r5, r1
  Command.CommandTarget          = Interface;
 80047c8:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047ca:	4621      	mov	r1, r4
 80047cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 80047d0:	4606      	mov	r6, r0
  Command.ModeRegisterDefinition = 0;
 80047d2:	60e7      	str	r7, [r4, #12]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80047d4:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 80047d6:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047d8:	f005 fbcc 	bl	8009f74 <HAL_SDRAM_SendCommand>
 80047dc:	2800      	cmp	r0, #0
 80047de:	d132      	bne.n	8004846 <IS42S32800J_Init+0x8a>
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80047e0:	f001 fc0e 	bl	8006000 <HAL_GetTick>
 80047e4:	4607      	mov	r7, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80047e6:	f001 fc0b 	bl	8006000 <HAL_GetTick>
 80047ea:	4287      	cmp	r7, r0
 80047ec:	d0fb      	beq.n	80047e6 <IS42S32800J_Init+0x2a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80047ee:	682a      	ldr	r2, [r5, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80047f0:	2002      	movs	r0, #2
  Command.AutoRefreshNumber      = 1;
 80047f2:	2101      	movs	r1, #1
  Command.ModeRegisterDefinition = 0;
 80047f4:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
 80047f6:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80047fc:	6020      	str	r0, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047fe:	4630      	mov	r0, r6
  Command.AutoRefreshNumber      = 1;
 8004800:	60a1      	str	r1, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004802:	4912      	ldr	r1, [pc, #72]	; (800484c <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8004804:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004806:	f005 fbb5 	bl	8009f74 <HAL_SDRAM_SendCommand>
 800480a:	4603      	mov	r3, r0
 800480c:	b9d8      	cbnz	r0, 8004846 <IS42S32800J_Init+0x8a>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 800480e:	6828      	ldr	r0, [r5, #0]
  Command.AutoRefreshNumber      = 8;
 8004810:	2708      	movs	r7, #8
  Command.CommandMode            = RefreshMode;
 8004812:	6869      	ldr	r1, [r5, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004814:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = Interface;
 8004818:	6060      	str	r0, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800481a:	4630      	mov	r0, r6
  Command.CommandMode            = RefreshMode;
 800481c:	6021      	str	r1, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800481e:	490b      	ldr	r1, [pc, #44]	; (800484c <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8004820:	60e3      	str	r3, [r4, #12]
  Command.AutoRefreshNumber      = 8;
 8004822:	60a7      	str	r7, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004824:	f005 fba6 	bl	8009f74 <HAL_SDRAM_SendCommand>
 8004828:	b968      	cbnz	r0, 8004846 <IS42S32800J_Init+0x8a>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 800482a:	4629      	mov	r1, r5
 800482c:	4630      	mov	r0, r6
 800482e:	f7ff ffa5 	bl	800477c <IS42S32800J_ModeRegConfig>
 8004832:	b940      	cbnz	r0, 8004846 <IS42S32800J_Init+0x8a>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8004834:	68a9      	ldr	r1, [r5, #8]
 8004836:	4630      	mov	r0, r6
 8004838:	f005 fbbc 	bl	8009fb4 <HAL_SDRAM_ProgramRefreshRate>
 800483c:	3800      	subs	r0, #0
 800483e:	bf18      	it	ne
 8004840:	2001      	movne	r0, #1
 8004842:	4240      	negs	r0, r0
}
 8004844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = IS42S32800J_ERROR;
 8004846:	f04f 30ff 	mov.w	r0, #4294967295
}
 800484a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800484c:	24001518 	.word	0x24001518

08004850 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 8004850:	f04f 30ff 	mov.w	r0, #4294967295
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop

08004858 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 8004858:	4b02      	ldr	r3, [pc, #8]	; (8004864 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 800485a:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	600b      	str	r3, [r1, #0]
}
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	24001528 	.word	0x24001528

08004868 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8004868:	4b02      	ldr	r3, [pc, #8]	; (8004874 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 800486a:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	600b      	str	r3, [r1, #0]
}
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	24001528 	.word	0x24001528

08004878 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004878:	4b06      	ldr	r3, [pc, #24]	; (8004894 <OTM8009A_GetXSize+0x1c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	b123      	cbz	r3, 8004888 <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 800487e:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 8004882:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 8004884:	600b      	str	r3, [r1, #0]
}
 8004886:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 8004888:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 800488c:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 800488e:	600b      	str	r3, [r1, #0]
}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	24001528 	.word	0x24001528

08004898 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8004898:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <OTM8009A_GetYSize+0x1c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	b123      	cbz	r3, 80048a8 <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 800489e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 80048a2:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 80048a4:	600b      	str	r3, [r1, #0]
}
 80048a6:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 80048a8:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 80048ac:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 80048ae:	600b      	str	r3, [r1, #0]
}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	24001528 	.word	0x24001528

080048b8 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop

080048c0 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop

080048c8 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80048c8:	f04f 30ff 	mov.w	r0, #4294967295
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop

080048d0 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop

080048d8 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop

080048e0 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80048e0:	f04f 30ff 	mov.w	r0, #4294967295
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop

080048e8 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80048e8:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80048ea:	6884      	ldr	r4, [r0, #8]
 80048ec:	8800      	ldrh	r0, [r0, #0]
 80048ee:	46a4      	mov	ip, r4
}
 80048f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80048f4:	4760      	bx	ip
 80048f6:	bf00      	nop

080048f8 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80048f8:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80048fa:	6844      	ldr	r4, [r0, #4]
 80048fc:	8800      	ldrh	r0, [r0, #0]
 80048fe:	46a4      	mov	ip, r4
}
 8004900:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004904:	4760      	bx	ip
 8004906:	bf00      	nop

08004908 <OTM8009A_Init>:
{
 8004908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800490c:	2300      	movs	r3, #0
 800490e:	f100 0710 	add.w	r7, r0, #16
{
 8004912:	b082      	sub	sp, #8
 8004914:	4680      	mov	r8, r0
 8004916:	4689      	mov	r9, r1
 8004918:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800491a:	4619      	mov	r1, r3
 800491c:	4ae0      	ldr	r2, [pc, #896]	; (8004ca0 <OTM8009A_Init+0x398>)
 800491e:	4638      	mov	r0, r7
 8004920:	f000 fcd6 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004924:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004926:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004928:	4ade      	ldr	r2, [pc, #888]	; (8004ca4 <OTM8009A_Init+0x39c>)
 800492a:	21ff      	movs	r1, #255	; 0xff
 800492c:	4638      	mov	r0, r7
 800492e:	f000 fccf 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004932:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004934:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004936:	4adc      	ldr	r2, [pc, #880]	; (8004ca8 <OTM8009A_Init+0x3a0>)
 8004938:	4619      	mov	r1, r3
 800493a:	4638      	mov	r0, r7
 800493c:	f000 fcc8 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004940:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004942:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004944:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004946:	4ad9      	ldr	r2, [pc, #868]	; (8004cac <OTM8009A_Init+0x3a4>)
 8004948:	21ff      	movs	r1, #255	; 0xff
 800494a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800494c:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800494e:	f000 fcbf 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004952:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004954:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004956:	4ad4      	ldr	r2, [pc, #848]	; (8004ca8 <OTM8009A_Init+0x3a0>)
 8004958:	4619      	mov	r1, r3
 800495a:	4638      	mov	r0, r7
 800495c:	f000 fcb8 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004960:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004962:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004964:	2300      	movs	r3, #0
 8004966:	4ad2      	ldr	r2, [pc, #840]	; (8004cb0 <OTM8009A_Init+0x3a8>)
 8004968:	21c4      	movs	r1, #196	; 0xc4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800496a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800496c:	4638      	mov	r0, r7
 800496e:	f000 fcaf 	bl	80052d0 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004972:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004976:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 8004978:	4798      	blx	r3
 800497a:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800497c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004980:	4798      	blx	r3
 8004982:	1b00      	subs	r0, r0, r4
 8004984:	2809      	cmp	r0, #9
 8004986:	d9f9      	bls.n	800497c <OTM8009A_Init+0x74>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004988:	2300      	movs	r3, #0
 800498a:	4aca      	ldr	r2, [pc, #808]	; (8004cb4 <OTM8009A_Init+0x3ac>)
 800498c:	4638      	mov	r0, r7
 800498e:	4619      	mov	r1, r3
 8004990:	f000 fc9e 	bl	80052d0 <otm8009a_write_reg>
 8004994:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004996:	2300      	movs	r3, #0
 8004998:	4ac7      	ldr	r2, [pc, #796]	; (8004cb8 <OTM8009A_Init+0x3b0>)
 800499a:	21c4      	movs	r1, #196	; 0xc4
 800499c:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800499e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80049a0:	f000 fc96 	bl	80052d0 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 80049a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80049a8:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 80049aa:	4798      	blx	r3
 80049ac:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80049ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80049b2:	4798      	blx	r3
 80049b4:	1b40      	subs	r0, r0, r5
 80049b6:	2809      	cmp	r0, #9
 80049b8:	d9f9      	bls.n	80049ae <OTM8009A_Init+0xa6>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80049ba:	2300      	movs	r3, #0
 80049bc:	4abf      	ldr	r2, [pc, #764]	; (8004cbc <OTM8009A_Init+0x3b4>)
 80049be:	4638      	mov	r0, r7
 80049c0:	4619      	mov	r1, r3
 80049c2:	f000 fc85 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80049c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80049c8:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80049ca:	4abd      	ldr	r2, [pc, #756]	; (8004cc0 <OTM8009A_Init+0x3b8>)
 80049cc:	21c5      	movs	r1, #197	; 0xc5
 80049ce:	4638      	mov	r0, r7
 80049d0:	f000 fc7e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80049d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80049d6:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80049d8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80049da:	4619      	mov	r1, r3
 80049dc:	4ab9      	ldr	r2, [pc, #740]	; (8004cc4 <OTM8009A_Init+0x3bc>)
 80049de:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80049e0:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80049e2:	f000 fc75 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80049e6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80049e8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80049ea:	4ab7      	ldr	r2, [pc, #732]	; (8004cc8 <OTM8009A_Init+0x3c0>)
 80049ec:	21c5      	movs	r1, #197	; 0xc5
 80049ee:	4638      	mov	r0, r7
 80049f0:	f000 fc6e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80049f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80049f6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80049f8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80049fa:	4619      	mov	r1, r3
 80049fc:	4ab3      	ldr	r2, [pc, #716]	; (8004ccc <OTM8009A_Init+0x3c4>)
 80049fe:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004a00:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004a02:	f000 fc65 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004a06:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004a08:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004a0a:	4ab1      	ldr	r2, [pc, #708]	; (8004cd0 <OTM8009A_Init+0x3c8>)
 8004a0c:	21c0      	movs	r1, #192	; 0xc0
 8004a0e:	4638      	mov	r0, r7
 8004a10:	f000 fc5e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a14:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004a16:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004a18:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4aa0      	ldr	r2, [pc, #640]	; (8004ca0 <OTM8009A_Init+0x398>)
 8004a1e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004a20:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a22:	f000 fc55 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004a26:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a28:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004a2a:	4aaa      	ldr	r2, [pc, #680]	; (8004cd4 <OTM8009A_Init+0x3cc>)
 8004a2c:	21d9      	movs	r1, #217	; 0xd9
 8004a2e:	4638      	mov	r0, r7
 8004a30:	f000 fc4e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004a34:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a36:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004a38:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4aa6      	ldr	r2, [pc, #664]	; (8004cd8 <OTM8009A_Init+0x3d0>)
 8004a3e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004a40:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004a42:	f000 fc45 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004a46:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004a48:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004a4a:	4aa4      	ldr	r2, [pc, #656]	; (8004cdc <OTM8009A_Init+0x3d4>)
 8004a4c:	21c1      	movs	r1, #193	; 0xc1
 8004a4e:	4638      	mov	r0, r7
 8004a50:	f000 fc3e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004a54:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004a56:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004a58:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4aa0      	ldr	r2, [pc, #640]	; (8004ce0 <OTM8009A_Init+0x3d8>)
 8004a5e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004a60:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004a62:	f000 fc35 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004a66:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004a68:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004a6a:	4a9e      	ldr	r2, [pc, #632]	; (8004ce4 <OTM8009A_Init+0x3dc>)
 8004a6c:	21c1      	movs	r1, #193	; 0xc1
 8004a6e:	4638      	mov	r0, r7
 8004a70:	f000 fc2e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004a74:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004a76:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004a78:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4a9a      	ldr	r2, [pc, #616]	; (8004ce8 <OTM8009A_Init+0x3e0>)
 8004a7e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004a80:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004a82:	f000 fc25 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004a86:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004a88:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004a8a:	4a98      	ldr	r2, [pc, #608]	; (8004cec <OTM8009A_Init+0x3e4>)
 8004a8c:	21c5      	movs	r1, #197	; 0xc5
 8004a8e:	4638      	mov	r0, r7
 8004a90:	f000 fc1e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004a94:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004a96:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004a98:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4a94      	ldr	r2, [pc, #592]	; (8004cf0 <OTM8009A_Init+0x3e8>)
 8004a9e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004aa0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004aa2:	f000 fc15 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004aa6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004aa8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004aaa:	4a87      	ldr	r2, [pc, #540]	; (8004cc8 <OTM8009A_Init+0x3c0>)
 8004aac:	21c5      	movs	r1, #197	; 0xc5
 8004aae:	4638      	mov	r0, r7
 8004ab0:	f000 fc0e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ab4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004ab6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004ab8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004aba:	4619      	mov	r1, r3
 8004abc:	4a78      	ldr	r2, [pc, #480]	; (8004ca0 <OTM8009A_Init+0x398>)
 8004abe:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004ac0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ac2:	f000 fc05 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004ac6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ac8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004aca:	4a8a      	ldr	r2, [pc, #552]	; (8004cf4 <OTM8009A_Init+0x3ec>)
 8004acc:	21d8      	movs	r1, #216	; 0xd8
 8004ace:	4638      	mov	r0, r7
 8004ad0:	f000 fbfe 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004ad4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ad6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004ad8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004ada:	4619      	mov	r1, r3
 8004adc:	4a86      	ldr	r2, [pc, #536]	; (8004cf8 <OTM8009A_Init+0x3f0>)
 8004ade:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004ae0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004ae2:	f000 fbf5 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004ae6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004ae8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004aea:	4a84      	ldr	r2, [pc, #528]	; (8004cfc <OTM8009A_Init+0x3f4>)
 8004aec:	21c5      	movs	r1, #197	; 0xc5
 8004aee:	4638      	mov	r0, r7
 8004af0:	f000 fbee 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004af4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004af6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004af8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004afa:	4619      	mov	r1, r3
 8004afc:	4a80      	ldr	r2, [pc, #512]	; (8004d00 <OTM8009A_Init+0x3f8>)
 8004afe:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004b00:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004b02:	f000 fbe5 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004b06:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004b08:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004b0a:	4a7e      	ldr	r2, [pc, #504]	; (8004d04 <OTM8009A_Init+0x3fc>)
 8004b0c:	21c0      	movs	r1, #192	; 0xc0
 8004b0e:	4638      	mov	r0, r7
 8004b10:	f000 fbde 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004b14:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004b16:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004b18:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4a7a      	ldr	r2, [pc, #488]	; (8004d08 <OTM8009A_Init+0x400>)
 8004b1e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004b20:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004b22:	f000 fbd5 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004b26:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004b28:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004b2a:	4a78      	ldr	r2, [pc, #480]	; (8004d0c <OTM8009A_Init+0x404>)
 8004b2c:	21c5      	movs	r1, #197	; 0xc5
 8004b2e:	4638      	mov	r0, r7
 8004b30:	f000 fbce 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004b34:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004b36:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004b38:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4a66      	ldr	r2, [pc, #408]	; (8004cd8 <OTM8009A_Init+0x3d0>)
 8004b3e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004b40:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004b42:	f000 fbc5 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004b46:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004b48:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004b4a:	4a71      	ldr	r2, [pc, #452]	; (8004d10 <OTM8009A_Init+0x408>)
 8004b4c:	21c4      	movs	r1, #196	; 0xc4
 8004b4e:	4638      	mov	r0, r7
 8004b50:	f000 fbbe 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004b54:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004b56:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004b58:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4a60      	ldr	r2, [pc, #384]	; (8004ce0 <OTM8009A_Init+0x3d8>)
 8004b5e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004b60:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004b62:	f000 fbb5 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004b66:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004b68:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004b6a:	4a6a      	ldr	r2, [pc, #424]	; (8004d14 <OTM8009A_Init+0x40c>)
 8004b6c:	21c1      	movs	r1, #193	; 0xc1
 8004b6e:	4638      	mov	r0, r7
 8004b70:	f000 fbae 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004b74:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004b76:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004b78:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4a66      	ldr	r2, [pc, #408]	; (8004d18 <OTM8009A_Init+0x410>)
 8004b7e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004b80:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004b82:	f000 fba5 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004b86:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004b88:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004b8a:	4a64      	ldr	r2, [pc, #400]	; (8004d1c <OTM8009A_Init+0x414>)
 8004b8c:	21b3      	movs	r1, #179	; 0xb3
 8004b8e:	4638      	mov	r0, r7
 8004b90:	f000 fb9e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b94:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004b96:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004b98:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4a42      	ldr	r2, [pc, #264]	; (8004ca8 <OTM8009A_Init+0x3a0>)
 8004b9e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004ba0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ba2:	f000 fb95 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004ba6:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ba8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004baa:	4a5d      	ldr	r2, [pc, #372]	; (8004d20 <OTM8009A_Init+0x418>)
 8004bac:	21ce      	movs	r1, #206	; 0xce
 8004bae:	4638      	mov	r0, r7
 8004bb0:	f000 fb8e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004bb4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004bb6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004bb8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4a59      	ldr	r2, [pc, #356]	; (8004d24 <OTM8009A_Init+0x41c>)
 8004bbe:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004bc0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004bc2:	f000 fb85 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004bc6:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004bc8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004bca:	4a57      	ldr	r2, [pc, #348]	; (8004d28 <OTM8009A_Init+0x420>)
 8004bcc:	21ce      	movs	r1, #206	; 0xce
 8004bce:	4638      	mov	r0, r7
 8004bd0:	f000 fb7e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004bd4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004bd6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004bd8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4a53      	ldr	r2, [pc, #332]	; (8004d2c <OTM8009A_Init+0x424>)
 8004bde:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004be0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004be2:	f000 fb75 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004be6:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004be8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004bea:	4a51      	ldr	r2, [pc, #324]	; (8004d30 <OTM8009A_Init+0x428>)
 8004bec:	21ce      	movs	r1, #206	; 0xce
 8004bee:	4638      	mov	r0, r7
 8004bf0:	f000 fb6e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004bf4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004bf6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004bf8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4a4d      	ldr	r2, [pc, #308]	; (8004d34 <OTM8009A_Init+0x42c>)
 8004bfe:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004c00:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004c02:	f000 fb65 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004c06:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004c08:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004c0a:	4a4b      	ldr	r2, [pc, #300]	; (8004d38 <OTM8009A_Init+0x430>)
 8004c0c:	21cf      	movs	r1, #207	; 0xcf
 8004c0e:	4638      	mov	r0, r7
 8004c10:	f000 fb5e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004c14:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004c16:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004c18:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4a47      	ldr	r2, [pc, #284]	; (8004d3c <OTM8009A_Init+0x434>)
 8004c1e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004c20:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004c22:	f000 fb55 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004c26:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004c28:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004c2a:	4a45      	ldr	r2, [pc, #276]	; (8004d40 <OTM8009A_Init+0x438>)
 8004c2c:	21cf      	movs	r1, #207	; 0xcf
 8004c2e:	4638      	mov	r0, r7
 8004c30:	f000 fb4e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c34:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004c36:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004c38:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4a1a      	ldr	r2, [pc, #104]	; (8004ca8 <OTM8009A_Init+0x3a0>)
 8004c3e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004c40:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c42:	f000 fb45 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004c46:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c48:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004c4a:	4a3e      	ldr	r2, [pc, #248]	; (8004d44 <OTM8009A_Init+0x43c>)
 8004c4c:	21cb      	movs	r1, #203	; 0xcb
 8004c4e:	4638      	mov	r0, r7
 8004c50:	f000 fb3e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004c54:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c56:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004c58:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4a3a      	ldr	r2, [pc, #232]	; (8004d48 <OTM8009A_Init+0x440>)
 8004c5e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004c60:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004c62:	f000 fb35 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004c66:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004c68:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004c6a:	4a38      	ldr	r2, [pc, #224]	; (8004d4c <OTM8009A_Init+0x444>)
 8004c6c:	21cb      	movs	r1, #203	; 0xcb
 8004c6e:	4638      	mov	r0, r7
 8004c70:	f000 fb2e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c74:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004c76:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004c78:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4a29      	ldr	r2, [pc, #164]	; (8004d24 <OTM8009A_Init+0x41c>)
 8004c7e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004c80:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c82:	f000 fb25 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004c86:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c88:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004c8a:	4a31      	ldr	r2, [pc, #196]	; (8004d50 <OTM8009A_Init+0x448>)
 8004c8c:	21cb      	movs	r1, #203	; 0xcb
 8004c8e:	4638      	mov	r0, r7
 8004c90:	f000 fb1e 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004c94:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c96:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004c98:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	e05a      	b.n	8004d54 <OTM8009A_Init+0x44c>
 8004c9e:	bf00      	nop
 8004ca0:	08012545 	.word	0x08012545
 8004ca4:	08012414 	.word	0x08012414
 8004ca8:	08012546 	.word	0x08012546
 8004cac:	080124a0 	.word	0x080124a0
 8004cb0:	08012547 	.word	0x08012547
 8004cb4:	08012548 	.word	0x08012548
 8004cb8:	08012549 	.word	0x08012549
 8004cbc:	0801254a 	.word	0x0801254a
 8004cc0:	0801254b 	.word	0x0801254b
 8004cc4:	0801254c 	.word	0x0801254c
 8004cc8:	0801254d 	.word	0x0801254d
 8004ccc:	0801254e 	.word	0x0801254e
 8004cd0:	0801254f 	.word	0x0801254f
 8004cd4:	08012550 	.word	0x08012550
 8004cd8:	08012551 	.word	0x08012551
 8004cdc:	08012552 	.word	0x08012552
 8004ce0:	08012553 	.word	0x08012553
 8004ce4:	08012554 	.word	0x08012554
 8004ce8:	08012555 	.word	0x08012555
 8004cec:	08012556 	.word	0x08012556
 8004cf0:	08012557 	.word	0x08012557
 8004cf4:	08012514 	.word	0x08012514
 8004cf8:	08012558 	.word	0x08012558
 8004cfc:	08012559 	.word	0x08012559
 8004d00:	0801255a 	.word	0x0801255a
 8004d04:	0801255b 	.word	0x0801255b
 8004d08:	0801255c 	.word	0x0801255c
 8004d0c:	0801255d 	.word	0x0801255d
 8004d10:	0801255e 	.word	0x0801255e
 8004d14:	0801255f 	.word	0x0801255f
 8004d18:	08012560 	.word	0x08012560
 8004d1c:	08012518 	.word	0x08012518
 8004d20:	0801251c 	.word	0x0801251c
 8004d24:	08012561 	.word	0x08012561
 8004d28:	08012524 	.word	0x08012524
 8004d2c:	08012562 	.word	0x08012562
 8004d30:	08012534 	.word	0x08012534
 8004d34:	08012563 	.word	0x08012563
 8004d38:	08012418 	.word	0x08012418
 8004d3c:	08012564 	.word	0x08012564
 8004d40:	08012571 	.word	0x08012571
 8004d44:	08012424 	.word	0x08012424
 8004d48:	08012565 	.word	0x08012565
 8004d4c:	08012430 	.word	0x08012430
 8004d50:	08012440 	.word	0x08012440
 8004d54:	4ad1      	ldr	r2, [pc, #836]	; (800509c <OTM8009A_Init+0x794>)
 8004d56:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004d58:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004d5a:	f000 fab9 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004d5e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004d60:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004d62:	4acf      	ldr	r2, [pc, #828]	; (80050a0 <OTM8009A_Init+0x798>)
 8004d64:	21cb      	movs	r1, #203	; 0xcb
 8004d66:	4638      	mov	r0, r7
 8004d68:	f000 fab2 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004d6c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004d6e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004d70:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004d72:	4619      	mov	r1, r3
 8004d74:	4acb      	ldr	r2, [pc, #812]	; (80050a4 <OTM8009A_Init+0x79c>)
 8004d76:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004d78:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004d7a:	f000 faa9 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004d7e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004d80:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004d82:	4ac9      	ldr	r2, [pc, #804]	; (80050a8 <OTM8009A_Init+0x7a0>)
 8004d84:	21cb      	movs	r1, #203	; 0xcb
 8004d86:	4638      	mov	r0, r7
 8004d88:	f000 faa2 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d8c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004d8e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004d90:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d92:	4619      	mov	r1, r3
 8004d94:	4ac5      	ldr	r2, [pc, #788]	; (80050ac <OTM8009A_Init+0x7a4>)
 8004d96:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004d98:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d9a:	f000 fa99 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004d9e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004da0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004da2:	4ac3      	ldr	r2, [pc, #780]	; (80050b0 <OTM8009A_Init+0x7a8>)
 8004da4:	21cb      	movs	r1, #203	; 0xcb
 8004da6:	4638      	mov	r0, r7
 8004da8:	f000 fa92 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004dac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004dae:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004db0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004db2:	4619      	mov	r1, r3
 8004db4:	4abf      	ldr	r2, [pc, #764]	; (80050b4 <OTM8009A_Init+0x7ac>)
 8004db6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004db8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004dba:	f000 fa89 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004dbe:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004dc0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004dc2:	4abd      	ldr	r2, [pc, #756]	; (80050b8 <OTM8009A_Init+0x7b0>)
 8004dc4:	21cb      	movs	r1, #203	; 0xcb
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	f000 fa82 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004dcc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004dce:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004dd0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4ab9      	ldr	r2, [pc, #740]	; (80050bc <OTM8009A_Init+0x7b4>)
 8004dd6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004dd8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004dda:	f000 fa79 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004dde:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004de0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004de2:	4ab7      	ldr	r2, [pc, #732]	; (80050c0 <OTM8009A_Init+0x7b8>)
 8004de4:	21cb      	movs	r1, #203	; 0xcb
 8004de6:	4638      	mov	r0, r7
 8004de8:	f000 fa72 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004dec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004dee:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004df0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004df2:	4619      	mov	r1, r3
 8004df4:	4ab3      	ldr	r2, [pc, #716]	; (80050c4 <OTM8009A_Init+0x7bc>)
 8004df6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004df8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004dfa:	f000 fa69 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004dfe:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e00:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004e02:	4ab1      	ldr	r2, [pc, #708]	; (80050c8 <OTM8009A_Init+0x7c0>)
 8004e04:	21cc      	movs	r1, #204	; 0xcc
 8004e06:	4638      	mov	r0, r7
 8004e08:	f000 fa62 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e0c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e0e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004e10:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e12:	4619      	mov	r1, r3
 8004e14:	4aad      	ldr	r2, [pc, #692]	; (80050cc <OTM8009A_Init+0x7c4>)
 8004e16:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004e18:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e1a:	f000 fa59 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004e1e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e20:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004e22:	4aab      	ldr	r2, [pc, #684]	; (80050d0 <OTM8009A_Init+0x7c8>)
 8004e24:	21cc      	movs	r1, #204	; 0xcc
 8004e26:	4638      	mov	r0, r7
 8004e28:	f000 fa52 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e2c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e2e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004e30:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e32:	4619      	mov	r1, r3
 8004e34:	4aa7      	ldr	r2, [pc, #668]	; (80050d4 <OTM8009A_Init+0x7cc>)
 8004e36:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004e38:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e3a:	f000 fa49 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004e3e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e40:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004e42:	4aa5      	ldr	r2, [pc, #660]	; (80050d8 <OTM8009A_Init+0x7d0>)
 8004e44:	21cc      	movs	r1, #204	; 0xcc
 8004e46:	4638      	mov	r0, r7
 8004e48:	f000 fa42 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e4c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e4e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004e50:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e52:	4619      	mov	r1, r3
 8004e54:	4a91      	ldr	r2, [pc, #580]	; (800509c <OTM8009A_Init+0x794>)
 8004e56:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004e58:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e5a:	f000 fa39 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004e5e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e60:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004e62:	4a9e      	ldr	r2, [pc, #632]	; (80050dc <OTM8009A_Init+0x7d4>)
 8004e64:	21cc      	movs	r1, #204	; 0xcc
 8004e66:	4638      	mov	r0, r7
 8004e68:	f000 fa32 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e6c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004e6e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004e70:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e72:	4619      	mov	r1, r3
 8004e74:	4a8b      	ldr	r2, [pc, #556]	; (80050a4 <OTM8009A_Init+0x79c>)
 8004e76:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004e78:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e7a:	f000 fa29 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004e7e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e80:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004e82:	4a97      	ldr	r2, [pc, #604]	; (80050e0 <OTM8009A_Init+0x7d8>)
 8004e84:	21cc      	movs	r1, #204	; 0xcc
 8004e86:	4638      	mov	r0, r7
 8004e88:	f000 fa22 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e8c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004e8e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004e90:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e92:	4619      	mov	r1, r3
 8004e94:	4a85      	ldr	r2, [pc, #532]	; (80050ac <OTM8009A_Init+0x7a4>)
 8004e96:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004e98:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004e9a:	f000 fa19 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004e9e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004ea0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004ea2:	4a90      	ldr	r2, [pc, #576]	; (80050e4 <OTM8009A_Init+0x7dc>)
 8004ea4:	21cc      	movs	r1, #204	; 0xcc
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	f000 fa12 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004eac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004eae:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004eb0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4a8c      	ldr	r2, [pc, #560]	; (80050e8 <OTM8009A_Init+0x7e0>)
 8004eb6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004eb8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004eba:	f000 fa09 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004ebe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ec0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004ec2:	4a8a      	ldr	r2, [pc, #552]	; (80050ec <OTM8009A_Init+0x7e4>)
 8004ec4:	21c5      	movs	r1, #197	; 0xc5
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	f000 fa02 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004ecc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ece:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004ed0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4a86      	ldr	r2, [pc, #536]	; (80050f0 <OTM8009A_Init+0x7e8>)
 8004ed6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004ed8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004eda:	f000 f9f9 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004ede:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004ee0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004ee2:	4a84      	ldr	r2, [pc, #528]	; (80050f4 <OTM8009A_Init+0x7ec>)
 8004ee4:	21f5      	movs	r1, #245	; 0xf5
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	f000 f9f2 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004eec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004eee:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004ef0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4a80      	ldr	r2, [pc, #512]	; (80050f8 <OTM8009A_Init+0x7f0>)
 8004ef6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004ef8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004efa:	f000 f9e9 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004efe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004f00:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004f02:	4a7e      	ldr	r2, [pc, #504]	; (80050fc <OTM8009A_Init+0x7f4>)
 8004f04:	21c6      	movs	r1, #198	; 0xc6
 8004f06:	4638      	mov	r0, r7
 8004f08:	f000 f9e2 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f0c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004f0e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004f10:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f12:	4619      	mov	r1, r3
 8004f14:	4a7a      	ldr	r2, [pc, #488]	; (8005100 <OTM8009A_Init+0x7f8>)
 8004f16:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004f18:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f1a:	f000 f9d9 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004f1e:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f20:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004f22:	4a78      	ldr	r2, [pc, #480]	; (8005104 <OTM8009A_Init+0x7fc>)
 8004f24:	21ff      	movs	r1, #255	; 0xff
 8004f26:	4638      	mov	r0, r7
 8004f28:	f000 f9d2 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f2c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f2e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f30:	4a73      	ldr	r2, [pc, #460]	; (8005100 <OTM8009A_Init+0x7f8>)
 8004f32:	4619      	mov	r1, r3
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004f34:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f36:	4638      	mov	r0, r7
 8004f38:	f000 f9ca 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f3c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004f3e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f40:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f42:	4619      	mov	r1, r3
 8004f44:	4a6e      	ldr	r2, [pc, #440]	; (8005100 <OTM8009A_Init+0x7f8>)
 8004f46:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f48:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f4a:	f000 f9c1 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004f4e:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f50:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004f52:	4a6d      	ldr	r2, [pc, #436]	; (8005108 <OTM8009A_Init+0x800>)
 8004f54:	21e1      	movs	r1, #225	; 0xe1
 8004f56:	4638      	mov	r0, r7
 8004f58:	f000 f9ba 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f5c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f5e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004f60:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f62:	4619      	mov	r1, r3
 8004f64:	4a66      	ldr	r2, [pc, #408]	; (8005100 <OTM8009A_Init+0x7f8>)
 8004f66:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004f68:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f6a:	f000 f9b1 	bl	80052d0 <otm8009a_write_reg>
 8004f6e:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004f70:	2310      	movs	r3, #16
 8004f72:	4a66      	ldr	r2, [pc, #408]	; (800510c <OTM8009A_Init+0x804>)
 8004f74:	21e2      	movs	r1, #226	; 0xe2
 8004f76:	4638      	mov	r0, r7
 8004f78:	f000 f9aa 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f7c:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004f7e:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004f80:	2300      	movs	r3, #0
 8004f82:	4a63      	ldr	r2, [pc, #396]	; (8005110 <OTM8009A_Init+0x808>)
 8004f84:	2111      	movs	r1, #17
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004f86:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004f88:	4638      	mov	r0, r7
 8004f8a:	f000 f9a1 	bl	80052d0 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8004f8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004f92:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8004f94:	4798      	blx	r3
 8004f96:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004f98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004f9c:	4798      	blx	r3
 8004f9e:	1b40      	subs	r0, r0, r5
 8004fa0:	2877      	cmp	r0, #119	; 0x77
 8004fa2:	d9f9      	bls.n	8004f98 <OTM8009A_Init+0x690>
  switch(ColorCoding)
 8004fa4:	f1b9 0f00 	cmp.w	r9, #0
 8004fa8:	d074      	beq.n	8005094 <OTM8009A_Init+0x78c>
 8004faa:	f1b9 0f02 	cmp.w	r9, #2
 8004fae:	d14f      	bne.n	8005050 <OTM8009A_Init+0x748>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	4a58      	ldr	r2, [pc, #352]	; (8005114 <OTM8009A_Init+0x80c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004fb4:	213a      	movs	r1, #58	; 0x3a
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	f000 f98a 	bl	80052d0 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8004fbc:	4d56      	ldr	r5, [pc, #344]	; (8005118 <OTM8009A_Init+0x810>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004fbe:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004fc2:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8004fc4:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004fc8:	d046      	beq.n	8005058 <OTM8009A_Init+0x750>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004fce:	2300      	movs	r3, #0
 8004fd0:	4a52      	ldr	r2, [pc, #328]	; (800511c <OTM8009A_Init+0x814>)
 8004fd2:	2151      	movs	r1, #81	; 0x51
 8004fd4:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004fd6:	469a      	mov	sl, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004fd8:	f000 f97a 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004fdc:	4a50      	ldr	r2, [pc, #320]	; (8005120 <OTM8009A_Init+0x818>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8004fde:	eb04 0900 	add.w	r9, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004fe2:	4653      	mov	r3, sl
 8004fe4:	2153      	movs	r1, #83	; 0x53
 8004fe6:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8004fe8:	f8c5 a008 	str.w	sl, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004fec:	f000 f970 	bl	80052d0 <otm8009a_write_reg>
 8004ff0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8004ff2:	4653      	mov	r3, sl
 8004ff4:	4a4b      	ldr	r2, [pc, #300]	; (8005124 <OTM8009A_Init+0x81c>)
 8004ff6:	2155      	movs	r1, #85	; 0x55
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	f000 f969 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8004ffe:	444c      	add	r4, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8005000:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005002:	4653      	mov	r3, sl
 8005004:	4a48      	ldr	r2, [pc, #288]	; (8005128 <OTM8009A_Init+0x820>)
 8005006:	215e      	movs	r1, #94	; 0x5e
 8005008:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800500a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800500c:	f000 f960 	bl	80052d0 <otm8009a_write_reg>
 8005010:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005012:	4653      	mov	r3, sl
 8005014:	4a45      	ldr	r2, [pc, #276]	; (800512c <OTM8009A_Init+0x824>)
 8005016:	2129      	movs	r1, #41	; 0x29
 8005018:	4638      	mov	r0, r7
 800501a:	f000 f959 	bl	80052d0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800501e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005020:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005022:	4653      	mov	r3, sl
 8005024:	4651      	mov	r1, sl
 8005026:	4a36      	ldr	r2, [pc, #216]	; (8005100 <OTM8009A_Init+0x7f8>)
 8005028:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800502a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800502c:	f000 f950 	bl	80052d0 <otm8009a_write_reg>
 8005030:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8005032:	4653      	mov	r3, sl
 8005034:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005036:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8005038:	4a3d      	ldr	r2, [pc, #244]	; (8005130 <OTM8009A_Init+0x828>)
 800503a:	212c      	movs	r1, #44	; 0x2c
 800503c:	f000 f948 	bl	80052d0 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8005040:	42c4      	cmn	r4, r0
}
 8005042:	bf14      	ite	ne
 8005044:	f04f 30ff 	movne.w	r0, #4294967295
 8005048:	4650      	moveq	r0, sl
 800504a:	b002      	add	sp, #8
 800504c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005050:	f1ba 0f01 	cmp.w	sl, #1
 8005054:	4d30      	ldr	r5, [pc, #192]	; (8005118 <OTM8009A_Init+0x810>)
 8005056:	d1b8      	bne.n	8004fca <OTM8009A_Init+0x6c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005058:	2660      	movs	r6, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800505a:	2300      	movs	r3, #0
 800505c:	f10d 0207 	add.w	r2, sp, #7
 8005060:	2136      	movs	r1, #54	; 0x36
 8005062:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005064:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005068:	f000 f932 	bl	80052d0 <otm8009a_write_reg>
 800506c:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800506e:	2304      	movs	r3, #4
 8005070:	4a30      	ldr	r2, [pc, #192]	; (8005134 <OTM8009A_Init+0x82c>)
 8005072:	212a      	movs	r1, #42	; 0x2a
 8005074:	4638      	mov	r0, r7
 8005076:	f000 f92b 	bl	80052d0 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800507a:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800507c:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800507e:	2304      	movs	r3, #4
 8005080:	4a2d      	ldr	r2, [pc, #180]	; (8005138 <OTM8009A_Init+0x830>)
 8005082:	212b      	movs	r1, #43	; 0x2b
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005084:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005086:	4638      	mov	r0, r7
 8005088:	f000 f922 	bl	80052d0 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800508c:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005090:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8005092:	e79c      	b.n	8004fce <OTM8009A_Init+0x6c6>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005094:	464b      	mov	r3, r9
 8005096:	4a29      	ldr	r2, [pc, #164]	; (800513c <OTM8009A_Init+0x834>)
 8005098:	e78c      	b.n	8004fb4 <OTM8009A_Init+0x6ac>
 800509a:	bf00      	nop
 800509c:	08012562 	.word	0x08012562
 80050a0:	08012450 	.word	0x08012450
 80050a4:	08012563 	.word	0x08012563
 80050a8:	0801245c 	.word	0x0801245c
 80050ac:	08012564 	.word	0x08012564
 80050b0:	0801246c 	.word	0x0801246c
 80050b4:	08012566 	.word	0x08012566
 80050b8:	0801247c 	.word	0x0801247c
 80050bc:	08012567 	.word	0x08012567
 80050c0:	08012488 	.word	0x08012488
 80050c4:	08012546 	.word	0x08012546
 80050c8:	08012494 	.word	0x08012494
 80050cc:	08012565 	.word	0x08012565
 80050d0:	080124a4 	.word	0x080124a4
 80050d4:	08012561 	.word	0x08012561
 80050d8:	080124b4 	.word	0x080124b4
 80050dc:	080124c4 	.word	0x080124c4
 80050e0:	080124d0 	.word	0x080124d0
 80050e4:	080124e0 	.word	0x080124e0
 80050e8:	08012551 	.word	0x08012551
 80050ec:	08012572 	.word	0x08012572
 80050f0:	08012573 	.word	0x08012573
 80050f4:	08012574 	.word	0x08012574
 80050f8:	08012575 	.word	0x08012575
 80050fc:	08012576 	.word	0x08012576
 8005100:	08012545 	.word	0x08012545
 8005104:	080124f0 	.word	0x080124f0
 8005108:	080124f4 	.word	0x080124f4
 800510c:	08012504 	.word	0x08012504
 8005110:	08012568 	.word	0x08012568
 8005114:	08012569 	.word	0x08012569
 8005118:	24001528 	.word	0x24001528
 800511c:	0801256b 	.word	0x0801256b
 8005120:	0801256c 	.word	0x0801256c
 8005124:	0801256d 	.word	0x0801256d
 8005128:	0801256e 	.word	0x0801256e
 800512c:	0801256f 	.word	0x0801256f
 8005130:	08012570 	.word	0x08012570
 8005134:	0801240c 	.word	0x0801240c
 8005138:	08012410 	.word	0x08012410
 800513c:	0801256a 	.word	0x0801256a

08005140 <OTM8009A_SetBrightness>:
{
 8005140:	b570      	push	{r4, r5, r6, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8005142:	ebc1 2401 	rsb	r4, r1, r1, lsl #8
 8005146:	4e0b      	ldr	r6, [pc, #44]	; (8005174 <OTM8009A_SetBrightness+0x34>)
{
 8005148:	b082      	sub	sp, #8
 800514a:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 800514c:	fba6 6404 	umull	r6, r4, r6, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8005150:	2300      	movs	r3, #0
 8005152:	f10d 0207 	add.w	r2, sp, #7
 8005156:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8005158:	0964      	lsrs	r4, r4, #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 800515a:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 800515c:	f88d 4007 	strb.w	r4, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8005160:	f000 f8b6 	bl	80052d0 <otm8009a_write_reg>
 8005164:	b918      	cbnz	r0, 800516e <OTM8009A_SetBrightness+0x2e>
    OTM8009ACtx.Brightness = Brightness;
 8005166:	4b04      	ldr	r3, [pc, #16]	; (8005178 <OTM8009A_SetBrightness+0x38>)
 8005168:	609d      	str	r5, [r3, #8]
}
 800516a:	b002      	add	sp, #8
 800516c:	bd70      	pop	{r4, r5, r6, pc}
    ret = OTM8009A_ERROR;
 800516e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8005172:	e7fa      	b.n	800516a <OTM8009A_SetBrightness+0x2a>
 8005174:	51eb851f 	.word	0x51eb851f
 8005178:	24001528 	.word	0x24001528

0800517c <OTM8009A_DisplayOn>:
{
 800517c:	b500      	push	{lr}
 800517e:	b083      	sub	sp, #12
  uint8_t display = 0;
 8005180:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8005182:	2129      	movs	r1, #41	; 0x29
 8005184:	3010      	adds	r0, #16
 8005186:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 800518a:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 800518e:	f000 f89f 	bl	80052d0 <otm8009a_write_reg>
 8005192:	3800      	subs	r0, #0
 8005194:	bf18      	it	ne
 8005196:	2001      	movne	r0, #1
}
 8005198:	4240      	negs	r0, r0
 800519a:	b003      	add	sp, #12
 800519c:	f85d fb04 	ldr.w	pc, [sp], #4

080051a0 <OTM8009A_DisplayOff>:
{
 80051a0:	b500      	push	{lr}
 80051a2:	b083      	sub	sp, #12
  uint8_t display = 0;
 80051a4:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 80051a6:	2128      	movs	r1, #40	; 0x28
 80051a8:	3010      	adds	r0, #16
 80051aa:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 80051ae:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 80051b2:	f000 f88d 	bl	80052d0 <otm8009a_write_reg>
 80051b6:	3800      	subs	r0, #0
 80051b8:	bf18      	it	ne
 80051ba:	2001      	movne	r0, #1
}
 80051bc:	4240      	negs	r0, r0
 80051be:	b003      	add	sp, #12
 80051c0:	f85d fb04 	ldr.w	pc, [sp], #4

080051c4 <OTM8009A_SetOrientation>:
{
 80051c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80051c6:	2360      	movs	r3, #96	; 0x60
{
 80051c8:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 80051ca:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 80051cc:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80051ce:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 80051d2:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 80051d6:	d83e      	bhi.n	8005256 <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80051d8:	d020      	beq.n	800521c <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 80051da:	f100 0510 	add.w	r5, r0, #16
 80051de:	4633      	mov	r3, r6
 80051e0:	f10d 0207 	add.w	r2, sp, #7
 80051e4:	2136      	movs	r1, #54	; 0x36
 80051e6:	4628      	mov	r0, r5
 80051e8:	f000 f872 	bl	80052d0 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80051ec:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 80051ee:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80051f0:	4a1a      	ldr	r2, [pc, #104]	; (800525c <OTM8009A_SetOrientation+0x98>)
 80051f2:	212a      	movs	r1, #42	; 0x2a
 80051f4:	4628      	mov	r0, r5
 80051f6:	f000 f86b 	bl	80052d0 <otm8009a_write_reg>
 80051fa:	4607      	mov	r7, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80051fc:	2304      	movs	r3, #4
 80051fe:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005200:	443c      	add	r4, r7
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005202:	4a17      	ldr	r2, [pc, #92]	; (8005260 <OTM8009A_SetOrientation+0x9c>)
 8005204:	212b      	movs	r1, #43	; 0x2b
 8005206:	f000 f863 	bl	80052d0 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800520a:	4b16      	ldr	r3, [pc, #88]	; (8005264 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800520c:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800520e:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 8005210:	3800      	subs	r0, #0
 8005212:	bf18      	it	ne
 8005214:	2001      	movne	r0, #1
 8005216:	4240      	negs	r0, r0
}
 8005218:	b003      	add	sp, #12
 800521a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800521c:	f100 0510 	add.w	r5, r0, #16
 8005220:	4633      	mov	r3, r6
 8005222:	460f      	mov	r7, r1
 8005224:	f10d 0206 	add.w	r2, sp, #6
 8005228:	2136      	movs	r1, #54	; 0x36
 800522a:	4628      	mov	r0, r5
 800522c:	f000 f850 	bl	80052d0 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005230:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005232:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005234:	4a09      	ldr	r2, [pc, #36]	; (800525c <OTM8009A_SetOrientation+0x98>)
 8005236:	212a      	movs	r1, #42	; 0x2a
 8005238:	4628      	mov	r0, r5
 800523a:	f000 f849 	bl	80052d0 <otm8009a_write_reg>
 800523e:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005240:	2304      	movs	r3, #4
 8005242:	4628      	mov	r0, r5
 8005244:	4a06      	ldr	r2, [pc, #24]	; (8005260 <OTM8009A_SetOrientation+0x9c>)
 8005246:	212b      	movs	r1, #43	; 0x2b
 8005248:	f000 f842 	bl	80052d0 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800524c:	4434      	add	r4, r6
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800524e:	4b05      	ldr	r3, [pc, #20]	; (8005264 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005250:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8005252:	601f      	str	r7, [r3, #0]
 8005254:	e7dc      	b.n	8005210 <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 8005256:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800525a:	e7dd      	b.n	8005218 <OTM8009A_SetOrientation+0x54>
 800525c:	0801240c 	.word	0x0801240c
 8005260:	08012410 	.word	0x08012410
 8005264:	24001528 	.word	0x24001528

08005268 <OTM8009A_ReadID>:
{ 
 8005268:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 800526a:	3010      	adds	r0, #16
 800526c:	21da      	movs	r1, #218	; 0xda
{ 
 800526e:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8005270:	2300      	movs	r3, #0
 8005272:	f000 f825 	bl	80052c0 <otm8009a_read_reg>
 8005276:	3800      	subs	r0, #0
 8005278:	bf18      	it	ne
 800527a:	2001      	movne	r0, #1
}  
 800527c:	4240      	negs	r0, r0
 800527e:	bd08      	pop	{r3, pc}

08005280 <OTM8009A_DrawVLine>:
 8005280:	f04f 30ff 	mov.w	r0, #4294967295
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop

08005288 <OTM8009A_GetPixel>:
 8005288:	f04f 30ff 	mov.w	r0, #4294967295
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop

08005290 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8005290:	b178      	cbz	r0, 80052b2 <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005292:	684a      	ldr	r2, [r1, #4]
 8005294:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 8005296:	2000      	movs	r0, #0
{
 8005298:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 800529a:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 800529e:	4906      	ldr	r1, [pc, #24]	; (80052b8 <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80052a0:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80052a2:	4a06      	ldr	r2, [pc, #24]	; (80052bc <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 80052a4:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80052a8:	e9c3 1305 	strd	r1, r3, [r3, #20]
}
 80052ac:	bc30      	pop	{r4, r5}
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80052ae:	611a      	str	r2, [r3, #16]
}
 80052b0:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 80052b2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80052b6:	4770      	bx	lr
 80052b8:	080048e9 	.word	0x080048e9
 80052bc:	080048f9 	.word	0x080048f9

080052c0 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80052c0:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80052c2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80052c6:	46a4      	mov	ip, r4
}
 80052c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80052cc:	4760      	bx	ip
 80052ce:	bf00      	nop

080052d0 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 80052d0:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80052d2:	6804      	ldr	r4, [r0, #0]
 80052d4:	6880      	ldr	r0, [r0, #8]
 80052d6:	46a4      	mov	ip, r4
}
 80052d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80052dc:	4760      	bx	ip
 80052de:	bf00      	nop

080052e0 <BSP_GetTick>:
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
  return (int32_t)HAL_GetTick();
 80052e0:	f000 be8e 	b.w	8006000 <HAL_GetTick>

080052e4 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80052e4:	b910      	cbnz	r0, 80052ec <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 80052e6:	4b03      	ldr	r3, [pc, #12]	; (80052f4 <BSP_LCD_SetActiveLayer+0x10>)
 80052e8:	6099      	str	r1, [r3, #8]
 80052ea:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80052ec:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	24011930 	.word	0x24011930

080052f8 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80052f8:	b918      	cbnz	r0, 8005302 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 80052fa:	4b03      	ldr	r3, [pc, #12]	; (8005308 <BSP_LCD_GetPixelFormat+0x10>)
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	600b      	str	r3, [r1, #0]
 8005300:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8005302:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8005306:	4770      	bx	lr
 8005308:	24011930 	.word	0x24011930

0800530c <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800530c:	b948      	cbnz	r0, 8005322 <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 800530e:	4b06      	ldr	r3, [pc, #24]	; (8005328 <BSP_LCD_GetXSize+0x1c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005314:	b11b      	cbz	r3, 800531e <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8005316:	4b05      	ldr	r3, [pc, #20]	; (800532c <BSP_LCD_GetXSize+0x20>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	600b      	str	r3, [r1, #0]
 800531c:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 800531e:	4618      	mov	r0, r3
  }

  return ret;
}
 8005320:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8005322:	f06f 0001 	mvn.w	r0, #1
 8005326:	4770      	bx	lr
 8005328:	24001538 	.word	0x24001538
 800532c:	24011930 	.word	0x24011930

08005330 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8005330:	b948      	cbnz	r0, 8005346 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 8005332:	4b06      	ldr	r3, [pc, #24]	; (800534c <BSP_LCD_GetYSize+0x1c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005338:	b11b      	cbz	r3, 8005342 <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 800533a:	4b05      	ldr	r3, [pc, #20]	; (8005350 <BSP_LCD_GetYSize+0x20>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	600b      	str	r3, [r1, #0]
 8005340:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 8005342:	4618      	mov	r0, r3
  }

  return ret;
}
 8005344:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8005346:	f06f 0001 	mvn.w	r0, #1
 800534a:	4770      	bx	lr
 800534c:	24001538 	.word	0x24001538
 8005350:	24011930 	.word	0x24011930

08005354 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8005354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005358:	e9dd b409 	ldrd	fp, r4, [sp, #36]	; 0x24
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 800535c:	b39c      	cbz	r4, 80053c6 <BSP_LCD_FillRGBRect+0x72>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800535e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8005362:	4d1a      	ldr	r5, [pc, #104]	; (80053cc <BSP_LCD_FillRGBRect+0x78>)
 8005364:	eb04 0802 	add.w	r8, r4, r2
 8005368:	eb0b 0e01 	add.w	lr, fp, r1
 800536c:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8005370:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80053d0 <BSP_LCD_FillRGBRect+0x7c>
 8005374:	2734      	movs	r7, #52	; 0x34
    for(j = 0; j < Width; j++)
 8005376:	f1bb 0f00 	cmp.w	fp, #0
 800537a:	d021      	beq.n	80053c0 <BSP_LCD_FillRGBRect+0x6c>
 800537c:	460c      	mov	r4, r1
 800537e:	e00a      	b.n	8005396 <BSP_LCD_FillRGBRect+0x42>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8005380:	682e      	ldr	r6, [r5, #0]
 8005382:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8005384:	fb06 4602 	mla	r6, r6, r2, r4
 8005388:	3401      	adds	r4, #1
 800538a:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    for(j = 0; j < Width; j++)
 800538e:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 8005390:	6928      	ldr	r0, [r5, #16]
 8005392:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8005394:	d014      	beq.n	80053c0 <BSP_LCD_FillRGBRect+0x6c>
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005396:	68a8      	ldr	r0, [r5, #8]
 8005398:	f8d3 9000 	ldr.w	r9, [r3]
 800539c:	fb07 c000 	mla	r0, r7, r0, ip
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80053a0:	fa1f fa89 	uxth.w	sl, r9
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80053a4:	6c86      	ldr	r6, [r0, #72]	; 0x48
 80053a6:	2e00      	cmp	r6, #0
 80053a8:	d0ea      	beq.n	8005380 <BSP_LCD_FillRGBRect+0x2c>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80053aa:	682e      	ldr	r6, [r5, #0]
 80053ac:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80053ae:	fb06 4602 	mla	r6, r6, r2, r4
 80053b2:	3401      	adds	r4, #1
 80053b4:	f820 a016 	strh.w	sl, [r0, r6, lsl #1]
    for(j = 0; j < Width; j++)
 80053b8:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 80053ba:	6928      	ldr	r0, [r5, #16]
 80053bc:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 80053be:	d1ea      	bne.n	8005396 <BSP_LCD_FillRGBRect+0x42>
  for(i = 0; i < Height; i++)
 80053c0:	3201      	adds	r2, #1
 80053c2:	4542      	cmp	r2, r8
 80053c4:	d1d7      	bne.n	8005376 <BSP_LCD_FillRGBRect+0x22>
}
 80053c6:	2000      	movs	r0, #0
 80053c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053cc:	24011930 	.word	0x24011930
 80053d0:	24011888 	.word	0x24011888

080053d4 <BSP_LCD_ReadPixel>:
{
 80053d4:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80053d6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80053da:	4e10      	ldr	r6, [pc, #64]	; (800541c <BSP_LCD_ReadPixel+0x48>)
 80053dc:	4f10      	ldr	r7, [pc, #64]	; (8005420 <BSP_LCD_ReadPixel+0x4c>)
 80053de:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80053e2:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 80053e6:	0080      	lsls	r0, r0, #2
 80053e8:	68ac      	ldr	r4, [r5, #8]
 80053ea:	fb0c 7404 	mla	r4, ip, r4, r7
 80053ee:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80053f0:	b94d      	cbnz	r5, 8005406 <BSP_LCD_ReadPixel+0x32>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80053f2:	5830      	ldr	r0, [r6, r0]
 80053f4:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 80053f6:	fb00 1202 	mla	r2, r0, r2, r1
}
 80053fa:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80053fc:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 8005400:	bcf0      	pop	{r4, r5, r6, r7}
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8005406:	5835      	ldr	r5, [r6, r0]
 8005408:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800540a:	fb05 1202 	mla	r2, r5, r2, r1
 800540e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 8005412:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8005414:	b292      	uxth	r2, r2
}
 8005416:	bcf0      	pop	{r4, r5, r6, r7}
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	4770      	bx	lr
 800541c:	24011930 	.word	0x24011930
 8005420:	24011888 	.word	0x24011888

08005424 <BSP_LCD_WritePixel>:
{
 8005424:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005426:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800542a:	4e0f      	ldr	r6, [pc, #60]	; (8005468 <BSP_LCD_WritePixel+0x44>)
 800542c:	4f0f      	ldr	r7, [pc, #60]	; (800546c <BSP_LCD_WritePixel+0x48>)
 800542e:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8005432:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8005436:	0080      	lsls	r0, r0, #2
 8005438:	68ac      	ldr	r4, [r5, #8]
 800543a:	fb0c 7404 	mla	r4, ip, r4, r7
 800543e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8005440:	b945      	cbnz	r5, 8005454 <BSP_LCD_WritePixel+0x30>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8005442:	5830      	ldr	r0, [r6, r0]
 8005444:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8005446:	fb00 1202 	mla	r2, r0, r2, r1
  }

  return BSP_ERROR_NONE;
}
 800544a:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800544c:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 8005450:	bcf0      	pop	{r4, r5, r6, r7}
 8005452:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8005454:	5835      	ldr	r5, [r6, r0]
 8005456:	b29b      	uxth	r3, r3
 8005458:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800545a:	fb05 1202 	mla	r2, r5, r2, r1
}
 800545e:	bcf0      	pop	{r4, r5, r6, r7}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8005460:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 8005464:	2000      	movs	r0, #0
 8005466:	4770      	bx	lr
 8005468:	24011930 	.word	0x24011930
 800546c:	24011888 	.word	0x24011888

08005470 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8005470:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8005472:	2406      	movs	r4, #6
{
 8005474:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8005476:	9101      	str	r1, [sp, #4]
 8005478:	4601      	mov	r1, r0
 800547a:	9202      	str	r2, [sp, #8]
 800547c:	9400      	str	r4, [sp, #0]
 800547e:	4805      	ldr	r0, [pc, #20]	; (8005494 <DSI_IO_Read+0x24>)
 8005480:	f002 f990 	bl	80077a4 <HAL_DSI_Read>
 8005484:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 8005486:	bf14      	ite	ne
 8005488:	f06f 0007 	mvnne.w	r0, #7
 800548c:	2000      	moveq	r0, #0
 800548e:	b004      	add	sp, #16
 8005490:	bd10      	pop	{r4, pc}
 8005492:	bf00      	nop
 8005494:	2401194c 	.word	0x2401194c

08005498 <BSP_LCD_DrawBitmap>:
{
 8005498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800549c:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 80054a0:	4e4f      	ldr	r6, [pc, #316]	; (80055e0 <BSP_LCD_DrawBitmap+0x148>)
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80054a2:	7d1c      	ldrb	r4, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80054a4:	f04f 0934 	mov.w	r9, #52	; 0x34
 80054a8:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 80054ac:	f856 802c 	ldr.w	r8, [r6, ip, lsl #2]
 80054b0:	f8df e138 	ldr.w	lr, [pc, #312]	; 80055ec <BSP_LCD_DrawBitmap+0x154>
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80054b4:	0424      	lsls	r4, r4, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80054b6:	fb08 1202 	mla	r2, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80054ba:	f893 c013 	ldrb.w	ip, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80054be:	68b9      	ldr	r1, [r7, #8]
{
 80054c0:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80054c2:	7b1d      	ldrb	r5, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80054c4:	eb04 240c 	add.w	r4, r4, ip, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80054c8:	fb09 e101 	mla	r1, r9, r1, lr
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80054cc:	f893 800b 	ldrb.w	r8, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80054d0:	f893 c01d 	ldrb.w	ip, [r3, #29]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80054d4:	042d      	lsls	r5, r5, #16
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80054d6:	f893 a018 	ldrb.w	sl, [r3, #24]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80054da:	f893 901c 	ldrb.w	r9, [r3, #28]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80054de:	eb05 2508 	add.w	r5, r5, r8, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80054e2:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80054e4:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80054e8:	f8d7 8010 	ldr.w	r8, [r7, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80054ec:	eb09 290c 	add.w	r9, r9, ip, lsl #8
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80054f0:	7c9f      	ldrb	r7, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80054f2:	f893 e017 	ldrb.w	lr, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80054f6:	fb08 1802 	mla	r8, r8, r2, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80054fa:	f893 c00a 	ldrb.w	ip, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80054fe:	443c      	add	r4, r7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005500:	eb0a 2a0e 	add.w	sl, sl, lr, lsl #8
 8005504:	7d9f      	ldrb	r7, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005506:	4465      	add	r5, ip
 8005508:	7b59      	ldrb	r1, [r3, #13]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800550a:	44ba      	add	sl, r7
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800550c:	7d5f      	ldrb	r7, [r3, #21]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800550e:	eb05 6101 	add.w	r1, r5, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 8005512:	f1a9 0520 	sub.w	r5, r9, #32
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005516:	7e5a      	ldrb	r2, [r3, #25]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005518:	eb04 6407 	add.w	r4, r4, r7, lsl #24
  if ((bit_pixel/8U) == 4U)
 800551c:	2d07      	cmp	r5, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800551e:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005522:	9403      	str	r4, [sp, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8005524:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 8005528:	d957      	bls.n	80055da <BSP_LCD_DrawBitmap+0x142>
  else if ((bit_pixel/8U) == 2U)
 800552a:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 800552e:	2c08      	cmp	r4, #8
 8005530:	bf34      	ite	cc
 8005532:	f04f 0b02 	movcc.w	fp, #2
 8005536:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 800553a:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 800553e:	9c03      	ldr	r4, [sp, #12]
 8005540:	f10a 35ff 	add.w	r5, sl, #4294967295
 8005544:	fb04 f909 	mul.w	r9, r4, r9
 8005548:	fb09 1505 	mla	r5, r9, r5, r1
 800554c:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 800554e:	f1ba 0f00 	cmp.w	sl, #0
 8005552:	d03e      	beq.n	80055d2 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005554:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 8005556:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 800555a:	2700      	movs	r7, #0
 800555c:	4c21      	ldr	r4, [pc, #132]	; (80055e4 <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 800555e:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8005562:	e006      	b.n	8005572 <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8005564:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 8005566:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8005568:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 800556a:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800556c:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 8005570:	d02f      	beq.n	80055d2 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005572:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 8005574:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8005576:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800557a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800557e:	2b02      	cmp	r3, #2
  hlcd_dma2d.Instance = DMA2D;
 8005580:	4919      	ldr	r1, [pc, #100]	; (80055e8 <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8005582:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  for(index=0; index < height; index++)
 8005586:	f107 0701 	add.w	r7, r7, #1
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800558a:	bf18      	it	ne
 800558c:	4613      	movne	r3, r2
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800558e:	64e2      	str	r2, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8005590:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8005592:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8005596:	e9c4 1000 	strd	r1, r0, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800559a:	4812      	ldr	r0, [pc, #72]	; (80055e4 <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.Init.OutputOffset = 0;
 800559c:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80055a0:	f001 fc34 	bl	8006e0c <HAL_DMA2D_Init>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d1dd      	bne.n	8005564 <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80055a8:	2101      	movs	r1, #1
 80055aa:	480e      	ldr	r0, [pc, #56]	; (80055e4 <BSP_LCD_DrawBitmap+0x14c>)
 80055ac:	f001 fd50 	bl	8007050 <HAL_DMA2D_ConfigLayer>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d1d7      	bne.n	8005564 <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80055b4:	2001      	movs	r0, #1
 80055b6:	9b03      	ldr	r3, [sp, #12]
 80055b8:	4642      	mov	r2, r8
 80055ba:	4629      	mov	r1, r5
 80055bc:	9000      	str	r0, [sp, #0]
 80055be:	4809      	ldr	r0, [pc, #36]	; (80055e4 <BSP_LCD_DrawBitmap+0x14c>)
 80055c0:	f001 fc66 	bl	8006e90 <HAL_DMA2D_Start>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d1cd      	bne.n	8005564 <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 80055c8:	2132      	movs	r1, #50	; 0x32
 80055ca:	4806      	ldr	r0, [pc, #24]	; (80055e4 <BSP_LCD_DrawBitmap+0x14c>)
 80055cc:	f001 fcba 	bl	8006f44 <HAL_DMA2D_PollForTransfer>
 80055d0:	e7c8      	b.n	8005564 <BSP_LCD_DrawBitmap+0xcc>
}
 80055d2:	2000      	movs	r0, #0
 80055d4:	b005      	add	sp, #20
 80055d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 80055da:	f04f 0b00 	mov.w	fp, #0
 80055de:	e7ac      	b.n	800553a <BSP_LCD_DrawBitmap+0xa2>
 80055e0:	24011930 	.word	0x24011930
 80055e4:	24011968 	.word	0x24011968
 80055e8:	52001000 	.word	0x52001000
 80055ec:	24011888 	.word	0x24011888

080055f0 <LL_FillBuffer>:
{
 80055f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(Lcd_Ctx[Instance].PixelFormat)
 80055f4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80055f8:	4c28      	ldr	r4, [pc, #160]	; (800569c <LL_FillBuffer+0xac>)
{
 80055fa:	4617      	mov	r7, r2
 80055fc:	b082      	sub	sp, #8
  switch(Lcd_Ctx[Instance].PixelFormat)
 80055fe:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8005602:	4698      	mov	r8, r3
 8005604:	460e      	mov	r6, r1
 8005606:	9b08      	ldr	r3, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8005608:	68c2      	ldr	r2, [r0, #12]
{
 800560a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  switch(Lcd_Ctx[Instance].PixelFormat)
 800560c:	2a02      	cmp	r2, #2
 800560e:	d00f      	beq.n	8005630 <LL_FillBuffer+0x40>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8005610:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8005612:	4c23      	ldr	r4, [pc, #140]	; (80056a0 <LL_FillBuffer+0xb0>)
 8005614:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 8005618:	4922      	ldr	r1, [pc, #136]	; (80056a4 <LL_FillBuffer+0xb4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800561a:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800561c:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800561e:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 8005620:	e9c4 1c00 	strd	r1, ip, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8005624:	f001 fbf2 	bl	8006e0c <HAL_DMA2D_Init>
 8005628:	b308      	cbz	r0, 800566e <LL_FillBuffer+0x7e>
}
 800562a:	b002      	add	sp, #8
 800562c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 8005630:	f3c5 1045 	ubfx	r0, r5, #5, #6
 8005634:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 8005638:	f005 041f 	and.w	r4, r5, #31
 800563c:	eb00 15c0 	add.w	r5, r0, r0, lsl #7
 8005640:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8005644:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8005648:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 800564c:	3521      	adds	r5, #33	; 0x21
 800564e:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 8005652:	3117      	adds	r1, #23
 8005654:	09ad      	lsrs	r5, r5, #6
 8005656:	0989      	lsrs	r1, r1, #6
 8005658:	022d      	lsls	r5, r5, #8
 800565a:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800565e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8005662:	3017      	adds	r0, #23
 8005664:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 8005668:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 800566c:	e7d1      	b.n	8005612 <LL_FillBuffer+0x22>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800566e:	2101      	movs	r1, #1
 8005670:	4620      	mov	r0, r4
 8005672:	f001 fced 	bl	8007050 <HAL_DMA2D_ConfigLayer>
 8005676:	2800      	cmp	r0, #0
 8005678:	d1d7      	bne.n	800562a <LL_FillBuffer+0x3a>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800567a:	463b      	mov	r3, r7
 800567c:	4632      	mov	r2, r6
 800567e:	4629      	mov	r1, r5
 8005680:	4620      	mov	r0, r4
 8005682:	f8cd 8000 	str.w	r8, [sp]
 8005686:	f001 fc03 	bl	8006e90 <HAL_DMA2D_Start>
 800568a:	2800      	cmp	r0, #0
 800568c:	d1cd      	bne.n	800562a <LL_FillBuffer+0x3a>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800568e:	4620      	mov	r0, r4
 8005690:	2119      	movs	r1, #25
}
 8005692:	b002      	add	sp, #8
 8005694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8005698:	f001 bc54 	b.w	8006f44 <HAL_DMA2D_PollForTransfer>
 800569c:	24011930 	.word	0x24011930
 80056a0:	24011968 	.word	0x24011968
 80056a4:	52001000 	.word	0x52001000

080056a8 <BSP_LCD_DrawHLine>:
{
 80056a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80056ac:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 80056b0:	4f12      	ldr	r7, [pc, #72]	; (80056fc <BSP_LCD_DrawHLine+0x54>)
{
 80056b2:	460c      	mov	r4, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80056b4:	f8df e048 	ldr.w	lr, [pc, #72]	; 8005700 <BSP_LCD_DrawHLine+0x58>
 80056b8:	eb07 018c 	add.w	r1, r7, ip, lsl #2
 80056bc:	f04f 0834 	mov.w	r8, #52	; 0x34
 80056c0:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80056c4:	eb04 0c03 	add.w	ip, r4, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80056c8:	688d      	ldr	r5, [r1, #8]
{
 80056ca:	b082      	sub	sp, #8
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80056cc:	690e      	ldr	r6, [r1, #16]
 80056ce:	fb02 4207 	mla	r2, r2, r7, r4
 80056d2:	fb08 e505 	mla	r5, r8, r5, lr
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80056d6:	4567      	cmp	r7, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80056d8:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 80056da:	bf38      	it	cc
 80056dc:	1b3b      	subcc	r3, r7, r4
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80056de:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80056e0:	fb06 1102 	mla	r1, r6, r2, r1
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80056e4:	9a08      	ldr	r2, [sp, #32]
 80056e6:	9400      	str	r4, [sp, #0]
 80056e8:	9201      	str	r2, [sp, #4]
 80056ea:	461a      	mov	r2, r3
 80056ec:	2301      	movs	r3, #1
 80056ee:	f7ff ff7f 	bl	80055f0 <LL_FillBuffer>
}
 80056f2:	4620      	mov	r0, r4
 80056f4:	b002      	add	sp, #8
 80056f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056fa:	bf00      	nop
 80056fc:	24011930 	.word	0x24011930
 8005700:	24011888 	.word	0x24011888

08005704 <BSP_LCD_DrawVLine>:
{
 8005704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005708:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 800570c:	4c11      	ldr	r4, [pc, #68]	; (8005754 <BSP_LCD_DrawVLine+0x50>)
 800570e:	4d12      	ldr	r5, [pc, #72]	; (8005758 <BSP_LCD_DrawVLine+0x54>)
 8005710:	f04f 0834 	mov.w	r8, #52	; 0x34
 8005714:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8005718:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800571c:	eb02 0c03 	add.w	ip, r2, r3
{
 8005720:	b082      	sub	sp, #8
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005722:	68be      	ldr	r6, [r7, #8]
 8005724:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8005728:	3c01      	subs	r4, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800572a:	fb08 5606 	mla	r6, r8, r6, r5
 800572e:	693d      	ldr	r5, [r7, #16]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8005730:	687f      	ldr	r7, [r7, #4]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005732:	6df6      	ldr	r6, [r6, #92]	; 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8005734:	45bc      	cmp	ip, r7
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005736:	fb05 6101 	mla	r1, r5, r1, r6
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 800573a:	bf88      	it	hi
 800573c:	1abb      	subhi	r3, r7, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 800573e:	9a08      	ldr	r2, [sp, #32]
 8005740:	e9cd 4200 	strd	r4, r2, [sp]
 8005744:	2201      	movs	r2, #1
 8005746:	f7ff ff53 	bl	80055f0 <LL_FillBuffer>
}
 800574a:	2000      	movs	r0, #0
 800574c:	b002      	add	sp, #8
 800574e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005752:	bf00      	nop
 8005754:	24011930 	.word	0x24011930
 8005758:	24011888 	.word	0x24011888

0800575c <BSP_LCD_FillRect>:
{
 800575c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800575e:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 8005762:	4f0e      	ldr	r7, [pc, #56]	; (800579c <BSP_LCD_FillRect+0x40>)
 8005764:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8005768:	4d0d      	ldr	r5, [pc, #52]	; (80057a0 <BSP_LCD_FillRect+0x44>)
 800576a:	eb07 0684 	add.w	r6, r7, r4, lsl #2
 800576e:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
{
 8005772:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005774:	68b7      	ldr	r7, [r6, #8]
 8005776:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800577a:	1ae4      	subs	r4, r4, r3
 800577c:	461a      	mov	r2, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800577e:	fb0e 5507 	mla	r5, lr, r7, r5
 8005782:	6937      	ldr	r7, [r6, #16]
{
 8005784:	9e09      	ldr	r6, [sp, #36]	; 0x24
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8005786:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8005788:	9400      	str	r4, [sp, #0]
 800578a:	fb07 3101 	mla	r1, r7, r1, r3
 800578e:	9b08      	ldr	r3, [sp, #32]
 8005790:	9601      	str	r6, [sp, #4]
 8005792:	f7ff ff2d 	bl	80055f0 <LL_FillBuffer>
}
 8005796:	2000      	movs	r0, #0
 8005798:	b003      	add	sp, #12
 800579a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800579c:	24011930 	.word	0x24011930
 80057a0:	24011888 	.word	0x24011888

080057a4 <LTDC_MspInit.part.0>:
    __HAL_RCC_LTDC_CLK_ENABLE();
 80057a4:	4b0d      	ldr	r3, [pc, #52]	; (80057dc <LTDC_MspInit.part.0+0x38>)
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
 80057a6:	b082      	sub	sp, #8
    __HAL_RCC_LTDC_CLK_ENABLE();
 80057a8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80057ac:	f042 0208 	orr.w	r2, r2, #8
 80057b0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80057b4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80057b8:	f002 0208 	and.w	r2, r2, #8
 80057bc:	9201      	str	r2, [sp, #4]
 80057be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_LTDC_FORCE_RESET();
 80057c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80057c4:	f042 0208 	orr.w	r2, r2, #8
 80057c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80057cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80057d0:	f022 0208 	bic.w	r2, r2, #8
 80057d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80057d8:	b002      	add	sp, #8
 80057da:	4770      	bx	lr
 80057dc:	58024400 	.word	0x58024400

080057e0 <DMA2D_MspInit.part.0>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80057e0:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <DMA2D_MspInit.part.0+0x30>)
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
 80057e2:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80057e4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80057e8:	f042 0210 	orr.w	r2, r2, #16
 80057ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80057f0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80057f4:	f002 0210 	and.w	r2, r2, #16
 80057f8:	9201      	str	r2, [sp, #4]
 80057fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80057fc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80057fe:	f042 0210 	orr.w	r2, r2, #16
 8005802:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8005804:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005806:	f022 0210 	bic.w	r2, r2, #16
 800580a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800580c:	b002      	add	sp, #8
 800580e:	4770      	bx	lr
 8005810:	58024400 	.word	0x58024400

08005814 <DSI_MspInit.part.0>:
    __HAL_RCC_DSI_CLK_ENABLE();
 8005814:	4b0d      	ldr	r3, [pc, #52]	; (800584c <DSI_MspInit.part.0+0x38>)
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
 8005816:	b082      	sub	sp, #8
    __HAL_RCC_DSI_CLK_ENABLE();
 8005818:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800581c:	f042 0210 	orr.w	r2, r2, #16
 8005820:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005824:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005828:	f002 0210 	and.w	r2, r2, #16
 800582c:	9201      	str	r2, [sp, #4]
 800582e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DSI_FORCE_RESET();
 8005830:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005834:	f042 0210 	orr.w	r2, r2, #16
 8005838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 800583c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005840:	f022 0210 	bic.w	r2, r2, #16
 8005844:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8005848:	b002      	add	sp, #8
 800584a:	4770      	bx	lr
 800584c:	58024400 	.word	0x58024400

08005850 <DSI_IO_Write>:
  if(Size <= 1U)
 8005850:	2b01      	cmp	r3, #1
{
 8005852:	b530      	push	{r4, r5, lr}
 8005854:	460d      	mov	r5, r1
 8005856:	b083      	sub	sp, #12
 8005858:	4601      	mov	r1, r0
  if(Size <= 1U)
 800585a:	d909      	bls.n	8005870 <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 800585c:	480a      	ldr	r0, [pc, #40]	; (8005888 <DSI_IO_Write+0x38>)
 800585e:	e9cd 5200 	strd	r5, r2, [sp]
 8005862:	2239      	movs	r2, #57	; 0x39
 8005864:	f001 ff32 	bl	80076cc <HAL_DSI_LongWrite>
 8005868:	b958      	cbnz	r0, 8005882 <DSI_IO_Write+0x32>
  int32_t ret = BSP_ERROR_NONE;
 800586a:	2000      	movs	r0, #0
}
 800586c:	b003      	add	sp, #12
 800586e:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8005870:	5cd0      	ldrb	r0, [r2, r3]
 8005872:	462b      	mov	r3, r5
 8005874:	2215      	movs	r2, #21
 8005876:	9000      	str	r0, [sp, #0]
 8005878:	4803      	ldr	r0, [pc, #12]	; (8005888 <DSI_IO_Write+0x38>)
 800587a:	f001 ff13 	bl	80076a4 <HAL_DSI_ShortWrite>
 800587e:	2800      	cmp	r0, #0
 8005880:	d0f3      	beq.n	800586a <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 8005882:	f06f 0007 	mvn.w	r0, #7
 8005886:	e7f1      	b.n	800586c <DSI_IO_Write+0x1c>
 8005888:	2401194c 	.word	0x2401194c

0800588c <BSP_LCD_Reset>:
  LCD_RESET_GPIO_CLK_ENABLE();
 800588c:	4b16      	ldr	r3, [pc, #88]	; (80058e8 <BSP_LCD_Reset+0x5c>)
 800588e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
{
 8005896:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 8005898:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 800589c:	b087      	sub	sp, #28
  LCD_RESET_GPIO_CLK_ENABLE();
 800589e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 80058a2:	2508      	movs	r5, #8
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 80058a4:	4c11      	ldr	r4, [pc, #68]	; (80058ec <BSP_LCD_Reset+0x60>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80058a6:	2601      	movs	r6, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 80058a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058ac:	2703      	movs	r7, #3
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 80058ae:	4620      	mov	r0, r4
 80058b0:	a901      	add	r1, sp, #4
  LCD_RESET_GPIO_CLK_ENABLE();
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 80058b6:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058b8:	9704      	str	r7, [sp, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 80058ba:	e9cd 6602 	strd	r6, r6, [sp, #8]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 80058be:	f001 fff9 	bl	80078b4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 80058c2:	4629      	mov	r1, r5
 80058c4:	4620      	mov	r0, r4
 80058c6:	2200      	movs	r2, #0
 80058c8:	f002 f912 	bl	8007af0 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 80058cc:	2014      	movs	r0, #20
 80058ce:	f000 fb9d 	bl	800600c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 80058d2:	4632      	mov	r2, r6
 80058d4:	4629      	mov	r1, r5
 80058d6:	4620      	mov	r0, r4
 80058d8:	f002 f90a 	bl	8007af0 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 80058dc:	200a      	movs	r0, #10
 80058de:	f000 fb95 	bl	800600c <HAL_Delay>
}
 80058e2:	b007      	add	sp, #28
 80058e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e6:	bf00      	nop
 80058e8:	58024400 	.word	0x58024400
 80058ec:	58021800 	.word	0x58021800

080058f0 <MX_DSIHOST_DSI_Init>:
{
 80058f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdsi->Instance = DSI;
 80058f4:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
{
 80058f8:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80058fa:	2500      	movs	r5, #0
  hdsi->Init.TXEscapeCkdiv = 4;
 80058fc:	f04f 0904 	mov.w	r9, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8005900:	2601      	movs	r6, #1
  PLLInit.PLLNDIV = 100;
 8005902:	f04f 0e64 	mov.w	lr, #100	; 0x64
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8005906:	f04f 0c05 	mov.w	ip, #5
  hdsi->Instance = DSI;
 800590a:	6007      	str	r7, [r0, #0]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800590c:	60c6      	str	r6, [r0, #12]
{
 800590e:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8005910:	4669      	mov	r1, sp
{
 8005912:	4604      	mov	r4, r0
 8005914:	4690      	mov	r8, r2
 8005916:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8005918:	9502      	str	r5, [sp, #8]
  hdsi->Init.TXEscapeCkdiv = 4;
 800591a:	e9c0 5901 	strd	r5, r9, [r0, #4]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800591e:	e9cd ec00 	strd	lr, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8005922:	f001 fc27 	bl	8007174 <HAL_DSI_Init>
 8005926:	b118      	cbz	r0, 8005930 <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 8005928:	4630      	mov	r0, r6
}
 800592a:	b01e      	add	sp, #120	; 0x78
 800592c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005930:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005934:	4a22      	ldr	r2, [pc, #136]	; (80059c0 <MX_DSIHOST_DSI_Init+0xd0>)
 8005936:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8005938:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800593a:	fb03 2207 	mla	r2, r3, r7, r2
 800593e:	4b21      	ldr	r3, [pc, #132]	; (80059c4 <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8005940:	2402      	movs	r4, #2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8005942:	2110      	movs	r1, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005944:	fba3 2302 	umull	r2, r3, r3, r2
  VidCfg.NullPacketSize = 0xFFFU;
 8005948:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 800594c:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8005950:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8005954:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 8005956:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8005958:	9505      	str	r5, [sp, #20]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800595a:	950a      	str	r5, [sp, #40]	; 0x28
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 800595c:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800595e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 8005962:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8005966:	f44f 6800 	mov.w	r8, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 800596a:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800596c:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800596e:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8005972:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8005974:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.NullPacketSize = 0xFFFU;
 8005978:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 800597a:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.ColorCoding = PixelFormat;
 800597e:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8005982:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8005986:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800598a:	9614      	str	r6, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 800598c:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8005990:	270f      	movs	r7, #15
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8005992:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8005996:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800599a:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800599e:	a903      	add	r1, sp, #12
  VidCfg.LPVACTLargestPacketSize = 4;
 80059a0:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 80059a4:	e9cd e517 	strd	lr, r5, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 80059a8:	e9cd 8419 	strd	r8, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 80059ac:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 80059b0:	f001 fd18 	bl	80073e4 <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 80059b4:	3800      	subs	r0, #0
 80059b6:	bf18      	it	ne
 80059b8:	2001      	movne	r0, #1
}
 80059ba:	b01e      	add	sp, #120	; 0x78
 80059bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c0:	0042c1d8 	.word	0x0042c1d8
 80059c4:	4c751ce3 	.word	0x4c751ce3

080059c8 <MX_LTDC_Init>:
{
 80059c8:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Instance = LTDC;
 80059ca:	4d0e      	ldr	r5, [pc, #56]	; (8005a04 <MX_LTDC_Init+0x3c>)
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 80059cc:	f101 0423 	add.w	r4, r1, #35	; 0x23
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 80059d0:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 80059d2:	2701      	movs	r7, #1
  hltdc->Instance = LTDC;
 80059d4:	6005      	str	r5, [r0, #0]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 80059d6:	250f      	movs	r5, #15
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 80059d8:	2623      	movs	r6, #35	; 0x23
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 80059da:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 80059dc:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 80059de:	1954      	adds	r4, r2, r5
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80059e0:	2100      	movs	r1, #0
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 80059e2:	321f      	adds	r2, #31
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 80059e4:	6147      	str	r7, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 80059e6:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 80059e8:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 80059ea:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 80059ec:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 80059ee:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 80059f2:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 80059f4:	6181      	str	r1, [r0, #24]
}
 80059f6:	bcf0      	pop	{r4, r5, r6, r7}
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80059f8:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80059fc:	e9c0 1103 	strd	r1, r1, [r0, #12]
  return HAL_LTDC_Init(hltdc);
 8005a00:	f002 b934 	b.w	8007c6c <HAL_LTDC_Init>
 8005a04:	50001000 	.word	0x50001000

08005a08 <MX_LTDC_ConfigLayer>:
{
 8005a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 8005a0e:	24ff      	movs	r4, #255	; 0xff
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005a10:	460a      	mov	r2, r1
  pLayerCfg.WindowY0 = Config->Y0;
 8005a12:	6899      	ldr	r1, [r3, #8]
  pLayerCfg.Alpha0 = 0;
 8005a14:	2500      	movs	r5, #0
  pLayerCfg.Alpha = 255;
 8005a16:	9406      	str	r4, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005a18:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.WindowY0 = Config->Y0;
 8005a1c:	9103      	str	r1, [sp, #12]
  pLayerCfg.Alpha0 = 0;
 8005a1e:	9507      	str	r5, [sp, #28]
  pLayerCfg.Backcolor.Blue = 0;
 8005a20:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 8005a24:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  pLayerCfg.WindowX1 = Config->X1;
 8005a28:	e9d3 4600 	ldrd	r4, r6, [r3]
  pLayerCfg.WindowX0 = Config->X0;
 8005a2c:	9401      	str	r4, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8005a2e:	1b34      	subs	r4, r6, r4
  pLayerCfg.WindowX1 = Config->X1;
 8005a30:	9602      	str	r6, [sp, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005a32:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8005a34:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 8005a36:	68dc      	ldr	r4, [r3, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8005a38:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 8005a3a:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8005a3c:	910c      	str	r1, [sp, #48]	; 0x30
  pLayerCfg.FBStartAdress = Config->Address;
 8005a3e:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005a42:	e9cd 7608 	strd	r7, r6, [sp, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8005a46:	9105      	str	r1, [sp, #20]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005a48:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 8005a4a:	930a      	str	r3, [sp, #40]	; 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005a4c:	f002 f9e8 	bl	8007e20 <HAL_LTDC_ConfigLayer>
}
 8005a50:	b00f      	add	sp, #60	; 0x3c
 8005a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a54 <MX_LTDC_ClockConfig>:
{
 8005a54:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8005a56:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 8005a5a:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8005a5c:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8005a5e:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8005a60:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8005a64:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8005a66:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005a68:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8005a6a:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8005a6c:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005a6e:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 8005a70:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8005a72:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8005a76:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005a7a:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005a7e:	f003 f8d1 	bl	8008c24 <HAL_RCCEx_PeriphCLKConfig>
}
 8005a82:	b031      	add	sp, #196	; 0xc4
 8005a84:	bd30      	pop	{r4, r5, pc}
 8005a86:	bf00      	nop

08005a88 <BSP_LCD_InitEx>:
{
 8005a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005a8c:	2901      	cmp	r1, #1
{
 8005a8e:	b093      	sub	sp, #76	; 0x4c
 8005a90:	461d      	mov	r5, r3
 8005a92:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005a96:	9103      	str	r1, [sp, #12]
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005a98:	f200 80f2 	bhi.w	8005c80 <BSP_LCD_InitEx+0x1f8>
 8005a9c:	1e03      	subs	r3, r0, #0
 8005a9e:	bf18      	it	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	f040 80ec 	bne.w	8005c80 <BSP_LCD_InitEx+0x1f8>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8005aa8:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8005aaa:	2901      	cmp	r1, #1
 8005aac:	f200 80e8 	bhi.w	8005c80 <BSP_LCD_InitEx+0x1f8>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8005ab0:	2a02      	cmp	r2, #2
 8005ab2:	f000 80ab 	beq.w	8005c0c <BSP_LCD_InitEx+0x184>
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 8005ab6:	9301      	str	r3, [sp, #4]
      Lcd_Ctx[Instance].BppFactor = 4U;
 8005ab8:	2104      	movs	r1, #4
      dsi_pixel_format = DSI_RGB888;
 8005aba:	2305      	movs	r3, #5
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005abc:	4c72      	ldr	r4, [pc, #456]	; (8005c88 <BSP_LCD_InitEx+0x200>)
    BSP_LCD_Reset(Instance);
 8005abe:	2000      	movs	r0, #0
 8005ac0:	4f72      	ldr	r7, [pc, #456]	; (8005c8c <BSP_LCD_InitEx+0x204>)
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005ac2:	2600      	movs	r6, #0
 8005ac4:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8005ac6:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8005aca:	6139      	str	r1, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005acc:	f04f 0b02 	mov.w	fp, #2
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8005ad0:	60fa      	str	r2, [r7, #12]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8005ad2:	f04f 0a04 	mov.w	sl, #4
    Lcd_Ctx[Instance].XSize  = Width;
 8005ad6:	603d      	str	r5, [r7, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8005ad8:	f8c7 8004 	str.w	r8, [r7, #4]
    BSP_LCD_Reset(Instance);
 8005adc:	f7ff fed6 	bl	800588c <BSP_LCD_Reset>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005ae0:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005ae4:	2201      	movs	r2, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005ae6:	a90c      	add	r1, sp, #48	; 0x30
 8005ae8:	4869      	ldr	r0, [pc, #420]	; (8005c90 <BSP_LCD_InitEx+0x208>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005aea:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 8005aee:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8005af2:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8005af6:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005afa:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005afe:	920d      	str	r2, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005b00:	960e      	str	r6, [sp, #56]	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005b02:	f8cd c014 	str.w	ip, [sp, #20]
 8005b06:	f8dd c014 	ldr.w	ip, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005b0a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005b0e:	f001 fed1 	bl	80078b4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005b12:	2201      	movs	r2, #1
 8005b14:	4649      	mov	r1, r9
 8005b16:	485e      	ldr	r0, [pc, #376]	; (8005c90 <BSP_LCD_InitEx+0x208>)
 8005b18:	f001 ffea 	bl	8007af0 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 8005b1c:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8005b20:	a90c      	add	r1, sp, #48	; 0x30
 8005b22:	485b      	ldr	r0, [pc, #364]	; (8005c90 <BSP_LCD_InitEx+0x208>)
  LCD_TE_GPIO_CLK_ENABLE();
 8005b24:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
    hlcd_dma2d.Instance = DMA2D;
 8005b28:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8005cc0 <BSP_LCD_InitEx+0x238>
  LCD_TE_GPIO_CLK_ENABLE();
 8005b2c:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8005b30:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8005b34:	960d      	str	r6, [sp, #52]	; 0x34
  LCD_TE_GPIO_CLK_ENABLE();
 8005b36:	f404 7400 	and.w	r4, r4, #512	; 0x200
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005b3a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8005b3e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  LCD_TE_GPIO_CLK_ENABLE();
 8005b42:	9406      	str	r4, [sp, #24]
 8005b44:	9c06      	ldr	r4, [sp, #24]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8005b46:	f001 feb5 	bl	80078b4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	4651      	mov	r1, sl
 8005b4e:	4850      	ldr	r0, [pc, #320]	; (8005c90 <BSP_LCD_InitEx+0x208>)
 8005b50:	f001 ffce 	bl	8007af0 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8005b54:	4632      	mov	r2, r6
 8005b56:	210f      	movs	r1, #15
 8005b58:	2058      	movs	r0, #88	; 0x58
 8005b5a:	f001 f85f 	bl	8006c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005b5e:	2058      	movs	r0, #88	; 0x58
 8005b60:	f001 f896 	bl	8006c90 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8005b64:	4632      	mov	r2, r6
 8005b66:	210f      	movs	r1, #15
 8005b68:	205a      	movs	r0, #90	; 0x5a
 8005b6a:	f001 f857 	bl	8006c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005b6e:	205a      	movs	r0, #90	; 0x5a
 8005b70:	f001 f88e 	bl	8006c90 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 8005b74:	4632      	mov	r2, r6
 8005b76:	210f      	movs	r1, #15
 8005b78:	207b      	movs	r0, #123	; 0x7b
 8005b7a:	f001 f84f 	bl	8006c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8005b7e:	207b      	movs	r0, #123	; 0x7b
 8005b80:	f001 f886 	bl	8006c90 <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 8005b84:	4c43      	ldr	r4, [pc, #268]	; (8005c94 <BSP_LCD_InitEx+0x20c>)
    hlcd_dma2d.Instance = DMA2D;
 8005b86:	4844      	ldr	r0, [pc, #272]	; (8005c98 <BSP_LCD_InitEx+0x210>)
    hlcd_dsi.Instance = DSI;
 8005b88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005b8c:	4943      	ldr	r1, [pc, #268]	; (8005c9c <BSP_LCD_InitEx+0x214>)
    hlcd_ltdc.Instance = LTDC;
 8005b8e:	4e44      	ldr	r6, [pc, #272]	; (8005ca0 <BSP_LCD_InitEx+0x218>)
    hlcd_dsi.Instance = DSI;
 8005b90:	600a      	str	r2, [r1, #0]
    hlcd_ltdc.Instance = LTDC;
 8005b92:	6026      	str	r6, [r4, #0]
    hlcd_dma2d.Instance = DMA2D;
 8005b94:	f8c9 0000 	str.w	r0, [r9]
  if(hltdc->Instance == LTDC)
 8005b98:	f7ff fe04 	bl	80057a4 <LTDC_MspInit.part.0>
  if(hdma2d->Instance == DMA2D)
 8005b9c:	f8d9 2000 	ldr.w	r2, [r9]
 8005ba0:	9b02      	ldr	r3, [sp, #8]
 8005ba2:	4282      	cmp	r2, r0
 8005ba4:	d03a      	beq.n	8005c1c <BSP_LCD_InitEx+0x194>
  if(hdsi->Instance == DSI)
 8005ba6:	680a      	ldr	r2, [r1, #0]
 8005ba8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005bac:	d031      	beq.n	8005c12 <BSP_LCD_InitEx+0x18a>
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8005bae:	4642      	mov	r2, r8
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	483a      	ldr	r0, [pc, #232]	; (8005c9c <BSP_LCD_InitEx+0x214>)
 8005bb4:	f7ff fe9c 	bl	80058f0 <MX_DSIHOST_DSI_Init>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d15c      	bne.n	8005c76 <BSP_LCD_InitEx+0x1ee>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8005bbc:	4835      	ldr	r0, [pc, #212]	; (8005c94 <BSP_LCD_InitEx+0x20c>)
 8005bbe:	f7ff ff49 	bl	8005a54 <MX_LTDC_ClockConfig>
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	d157      	bne.n	8005c76 <BSP_LCD_InitEx+0x1ee>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	4629      	mov	r1, r5
 8005bca:	4832      	ldr	r0, [pc, #200]	; (8005c94 <BSP_LCD_InitEx+0x20c>)
 8005bcc:	f7ff fefc 	bl	80059c8 <MX_LTDC_Init>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d150      	bne.n	8005c76 <BSP_LCD_InitEx+0x1ee>
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8005bd4:	f000 f8b2 	bl	8005d3c <BSP_SDRAM_Init>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	d14c      	bne.n	8005c76 <BSP_LCD_InitEx+0x1ee>
      config.PixelFormat = ltdc_pixel_format;
 8005bdc:	9c01      	ldr	r4, [sp, #4]
      config.Address     = LCD_LAYER_0_ADDRESS;
 8005bde:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005be2:	4601      	mov	r1, r0
      config.X0          = 0;
 8005be4:	900c      	str	r0, [sp, #48]	; 0x30
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005be6:	aa0c      	add	r2, sp, #48	; 0x30
      config.Y1          = Height;
 8005be8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      config.Y0          = 0;
 8005bec:	e9cd 500d 	strd	r5, r0, [sp, #52]	; 0x34
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005bf0:	4828      	ldr	r0, [pc, #160]	; (8005c94 <BSP_LCD_InitEx+0x20c>)
      config.Address     = LCD_LAYER_0_ADDRESS;
 8005bf2:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005bf6:	f7ff ff07 	bl	8005a08 <MX_LTDC_ConfigLayer>
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	b190      	cbz	r0, 8005c24 <BSP_LCD_InitEx+0x19c>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005bfe:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 8005c02:	2301      	movs	r3, #1
 8005c04:	61bb      	str	r3, [r7, #24]
}
 8005c06:	b013      	add	sp, #76	; 0x4c
 8005c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Lcd_Ctx[Instance].BppFactor = 2U;
 8005c0c:	4611      	mov	r1, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 8005c0e:	9201      	str	r2, [sp, #4]
 8005c10:	e754      	b.n	8005abc <BSP_LCD_InitEx+0x34>
 8005c12:	9302      	str	r3, [sp, #8]
 8005c14:	f7ff fdfe 	bl	8005814 <DSI_MspInit.part.0>
 8005c18:	9b02      	ldr	r3, [sp, #8]
 8005c1a:	e7c8      	b.n	8005bae <BSP_LCD_InitEx+0x126>
 8005c1c:	f7ff fde0 	bl	80057e0 <DMA2D_MspInit.part.0>
 8005c20:	9b02      	ldr	r3, [sp, #8]
 8005c22:	e7c0      	b.n	8005ba6 <BSP_LCD_InitEx+0x11e>
        (void)HAL_DSI_Start(&hlcd_dsi);
 8005c24:	481d      	ldr	r0, [pc, #116]	; (8005c9c <BSP_LCD_InitEx+0x214>)
 8005c26:	f001 fd15 	bl	8007654 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8005c2a:	2104      	movs	r1, #4
 8005c2c:	481b      	ldr	r0, [pc, #108]	; (8005c9c <BSP_LCD_InitEx+0x214>)
 8005c2e:	f001 fcfd 	bl	800762c <HAL_DSI_ConfigFlowControl>
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
 8005c32:	4b1c      	ldr	r3, [pc, #112]	; (8005ca4 <BSP_LCD_InitEx+0x21c>)
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005c34:	4d1c      	ldr	r5, [pc, #112]	; (8005ca8 <BSP_LCD_InitEx+0x220>)
 8005c36:	a908      	add	r1, sp, #32
  IOCtx.WriteReg    = DSI_IO_Write;
 8005c38:	4a1c      	ldr	r2, [pc, #112]	; (8005cac <BSP_LCD_InitEx+0x224>)
  IOCtx.GetTick     = BSP_GetTick;
 8005c3a:	930b      	str	r3, [sp, #44]	; 0x2c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005c3c:	4628      	mov	r0, r5
  IOCtx.ReadReg     = DSI_IO_Read;
 8005c3e:	4b1c      	ldr	r3, [pc, #112]	; (8005cb0 <BSP_LCD_InitEx+0x228>)
  IOCtx.Address     = 0;
 8005c40:	f8ad 4020 	strh.w	r4, [sp, #32]
  IOCtx.ReadReg     = DSI_IO_Read;
 8005c44:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8005c48:	f7ff fb22 	bl	8005290 <OTM8009A_RegisterBusIO>
 8005c4c:	b980      	cbnz	r0, 8005c70 <BSP_LCD_InitEx+0x1e8>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 8005c4e:	4c19      	ldr	r4, [pc, #100]	; (8005cb4 <BSP_LCD_InitEx+0x22c>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8005c50:	4628      	mov	r0, r5
 8005c52:	a907      	add	r1, sp, #28
    Lcd_CompObj = &OTM8009AObj;
 8005c54:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8005c56:	f7ff fb07 	bl	8005268 <OTM8009A_ReadID>
 8005c5a:	b948      	cbnz	r0, 8005c70 <BSP_LCD_InitEx+0x1e8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8005c5c:	4b16      	ldr	r3, [pc, #88]	; (8005cb8 <BSP_LCD_InitEx+0x230>)
 8005c5e:	4d17      	ldr	r5, [pc, #92]	; (8005cbc <BSP_LCD_InitEx+0x234>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8005c60:	6820      	ldr	r0, [r4, #0]
 8005c62:	9a03      	ldr	r2, [sp, #12]
 8005c64:	9901      	ldr	r1, [sp, #4]
 8005c66:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8005c68:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8005c6a:	47a0      	blx	r4
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d0c8      	beq.n	8005c02 <BSP_LCD_InitEx+0x17a>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c70:	f06f 0006 	mvn.w	r0, #6
 8005c74:	e7c5      	b.n	8005c02 <BSP_LCD_InitEx+0x17a>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005c76:	f06f 0003 	mvn.w	r0, #3
}
 8005c7a:	b013      	add	sp, #76	; 0x4c
 8005c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005c80:	f06f 0001 	mvn.w	r0, #1
 8005c84:	e7bf      	b.n	8005c06 <BSP_LCD_InitEx+0x17e>
 8005c86:	bf00      	nop
 8005c88:	58024400 	.word	0x58024400
 8005c8c:	24011930 	.word	0x24011930
 8005c90:	58022400 	.word	0x58022400
 8005c94:	24011888 	.word	0x24011888
 8005c98:	52001000 	.word	0x52001000
 8005c9c:	2401194c 	.word	0x2401194c
 8005ca0:	50001000 	.word	0x50001000
 8005ca4:	080052e1 	.word	0x080052e1
 8005ca8:	2400153c 	.word	0x2400153c
 8005cac:	08005851 	.word	0x08005851
 8005cb0:	08005471 	.word	0x08005471
 8005cb4:	24001534 	.word	0x24001534
 8005cb8:	24001018 	.word	0x24001018
 8005cbc:	24001538 	.word	0x24001538
 8005cc0:	24011968 	.word	0x24011968

08005cc4 <BSP_LCD_Init>:
{
 8005cc4:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8005cc6:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 8005cca:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8005ccc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	9400      	str	r4, [sp, #0]
 8005cd4:	f7ff fed8 	bl	8005a88 <BSP_LCD_InitEx>
}
 8005cd8:	b002      	add	sp, #8
 8005cda:	bd10      	pop	{r4, pc}

08005cdc <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8005cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8005cde:	4915      	ldr	r1, [pc, #84]	; (8005d34 <MX_SDRAM_Init+0x58>)

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005ce0:	2620      	movs	r6, #32
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005ce2:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005ce8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 8005cec:	b089      	sub	sp, #36	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005cee:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <MX_SDRAM_Init+0x5c>)
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005cf0:	f44f 77c0 	mov.w	r7, #384	; 0x180
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8005cf4:	6001      	str	r1, [r0, #0]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005cf6:	2101      	movs	r1, #1
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005cf8:	6106      	str	r6, [r0, #16]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005cfa:	2604      	movs	r6, #4
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005cfc:	6145      	str	r5, [r0, #20]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005cfe:	2500      	movs	r5, #0
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005d00:	6202      	str	r2, [r0, #32]

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 8005d02:	2202      	movs	r2, #2
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005d04:	6244      	str	r4, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005d06:	2407      	movs	r4, #7
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005d08:	6187      	str	r7, [r0, #24]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005d0a:	60c6      	str	r6, [r0, #12]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005d0c:	61c5      	str	r5, [r0, #28]
  sdram_timing.SelfRefreshTime      = 4;
 8005d0e:	9603      	str	r6, [sp, #12]
  sdram_timing.LoadToActiveDelay    = 2;
 8005d10:	9201      	str	r2, [sp, #4]
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 8005d12:	9207      	str	r2, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005d14:	9402      	str	r4, [sp, #8]
  sdram_timing.RowCycleDelay        = 7;
 8005d16:	9404      	str	r4, [sp, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005d18:	e9c0 1101 	strd	r1, r1, [r0, #4]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005d1c:	eb0d 0106 	add.w	r1, sp, r6
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005d20:	629d      	str	r5, [r3, #40]	; 0x28
  sdram_timing.RPDelay              = 2;
 8005d22:	e9cd 2205 	strd	r2, r2, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005d26:	f004 f8fb 	bl	8009f20 <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }
  return HAL_OK;
}
 8005d2a:	1b40      	subs	r0, r0, r5
 8005d2c:	bf18      	it	ne
 8005d2e:	2001      	movne	r0, #1
 8005d30:	b009      	add	sp, #36	; 0x24
 8005d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d34:	52004140 	.word	0x52004140
 8005d38:	240119d0 	.word	0x240119d0

08005d3c <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	f040 80e1 	bne.w	8005f04 <BSP_SDRAM_Init+0x1c8>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d42:	4b73      	ldr	r3, [pc, #460]	; (8005f10 <BSP_SDRAM_Init+0x1d4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005d44:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d46:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005d4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
 8005d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d50:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
 8005d54:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d56:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005d5a:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005d5c:	2002      	movs	r0, #2
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005d5e:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d60:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d64:	2703      	movs	r7, #3
  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8005d66:	f240 2602 	movw	r6, #514	; 0x202
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d6a:	9201      	str	r2, [sp, #4]
 8005d6c:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8005d6e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005d72:	430a      	orrs	r2, r1
 8005d74:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005d78:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005d7c:	400a      	ands	r2, r1
 8005d7e:	9202      	str	r2, [sp, #8]
 8005d80:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d86:	f042 0208 	orr.w	r2, r2, #8
 8005d8a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005d8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d92:	f002 0208 	and.w	r2, r2, #8
 8005d96:	9203      	str	r2, [sp, #12]
 8005d98:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005d9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d9e:	f042 0210 	orr.w	r2, r2, #16
 8005da2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005da6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005daa:	f002 0210 	and.w	r2, r2, #16
 8005dae:	9204      	str	r2, [sp, #16]
 8005db0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005db2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005db6:	f042 0220 	orr.w	r2, r2, #32
 8005dba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005dbe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005dc2:	f002 0220 	and.w	r2, r2, #32
 8005dc6:	9205      	str	r2, [sp, #20]
 8005dc8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005dca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dd2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005dd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005dda:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005dde:	9206      	str	r2, [sp, #24]
 8005de0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005de2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005de6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005dea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005dee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005df2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005df6:	9207      	str	r2, [sp, #28]
 8005df8:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005dfa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005dfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005e06:	f24c 7203 	movw	r2, #50947	; 0xc703
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005e0e:	900a      	str	r0, [sp, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005e14:	483f      	ldr	r0, [pc, #252]	; (8005f14 <BSP_SDRAM_Init+0x1d8>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005e16:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005e18:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005e1a:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005e1c:	9209      	str	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005e1e:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005e20:	940d      	str	r4, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e22:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005e24:	f001 fd46 	bl	80078b4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005e28:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005e2c:	a909      	add	r1, sp, #36	; 0x24
 8005e2e:	483a      	ldr	r0, [pc, #232]	; (8005f18 <BSP_SDRAM_Init+0x1dc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005e30:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005e32:	f001 fd3f 	bl	80078b4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005e36:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005e3a:	a909      	add	r1, sp, #36	; 0x24
 8005e3c:	4837      	ldr	r0, [pc, #220]	; (8005f1c <BSP_SDRAM_Init+0x1e0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005e3e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005e40:	f001 fd38 	bl	80078b4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005e44:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005e48:	a909      	add	r1, sp, #36	; 0x24
 8005e4a:	4835      	ldr	r0, [pc, #212]	; (8005f20 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005e4c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005e4e:	f001 fd31 	bl	80078b4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005e52:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005e56:	a909      	add	r1, sp, #36	; 0x24
 8005e58:	4832      	ldr	r0, [pc, #200]	; (8005f24 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005e5a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005e5c:	f001 fd2a 	bl	80078b4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005e60:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005e64:	a909      	add	r1, sp, #36	; 0x24
 8005e66:	4830      	ldr	r0, [pc, #192]	; (8005f28 <BSP_SDRAM_Init+0x1ec>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005e68:	4c30      	ldr	r4, [pc, #192]	; (8005f2c <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005e6a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005e6c:	f001 fd22 	bl	80078b4 <HAL_GPIO_Init>
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005e70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005e74:	f640 0008 	movw	r0, #2056	; 0x808
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005e78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005e7c:	2120      	movs	r1, #32
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005e7e:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005e80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005e84:	60a3      	str	r3, [r4, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005e86:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005e88:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
  mdma_handle.Init.BufferTransferLength     = 128;
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005e8a:	4a29      	ldr	r2, [pc, #164]	; (8005f30 <BSP_SDRAM_Init+0x1f4>)
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005e8c:	60e3      	str	r3, [r4, #12]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8005e8e:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength     = 128;
 8005e90:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005e92:	61e1      	str	r1, [r4, #28]
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005e94:	6022      	str	r2, [r4, #0]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005e96:	6125      	str	r5, [r4, #16]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005e98:	e9c4 6005 	strd	r6, r0, [r4, #20]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005e9c:	4e25      	ldr	r6, [pc, #148]	; (8005f34 <BSP_SDRAM_Init+0x1f8>)

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005e9e:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005ea0:	6334      	str	r4, [r6, #48]	; 0x30
 8005ea2:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8005ea4:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8005ea8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005eac:	f002 f882 	bl	8007fb4 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f002 f805 	bl	8007ec0 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8005eb6:	462a      	mov	r2, r5
 8005eb8:	210f      	movs	r1, #15
 8005eba:	207a      	movs	r0, #122	; 0x7a
 8005ebc:	f000 feae 	bl	8006c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8005ec0:	207a      	movs	r0, #122	; 0x7a
 8005ec2:	f000 fee5 	bl	8006c90 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f7ff ff08 	bl	8005cdc <MX_SDRAM_Init>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	b9e0      	cbnz	r0, 8005f0a <BSP_SDRAM_Init+0x1ce>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005ed0:	4919      	ldr	r1, [pc, #100]	; (8005f38 <BSP_SDRAM_Init+0x1fc>)
 8005ed2:	f04f 0c08 	mov.w	ip, #8
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8005eda:	f240 6503 	movw	r5, #1539	; 0x603
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005ede:	2430      	movs	r4, #48	; 0x30
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005ee0:	4630      	mov	r0, r6
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8005ee2:	604f      	str	r7, [r1, #4]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8005ee4:	60cb      	str	r3, [r1, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8005ee6:	610b      	str	r3, [r1, #16]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8005ee8:	618b      	str	r3, [r1, #24]
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005eea:	f8c1 c000 	str.w	ip, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8005eee:	608d      	str	r5, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005ef0:	614c      	str	r4, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005ef2:	61ca      	str	r2, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005ef4:	f7fe fc62 	bl	80047bc <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	bf18      	it	ne
 8005efc:	f06f 0004 	mvnne.w	r0, #4
}
 8005f00:	b00f      	add	sp, #60	; 0x3c
 8005f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005f04:	f06f 0001 	mvn.w	r0, #1
}
 8005f08:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
 8005f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0e:	e7f7      	b.n	8005f00 <BSP_SDRAM_Init+0x1c4>
 8005f10:	58024400 	.word	0x58024400
 8005f14:	58020c00 	.word	0x58020c00
 8005f18:	58021000 	.word	0x58021000
 8005f1c:	58021400 	.word	0x58021400
 8005f20:	58021800 	.word	0x58021800
 8005f24:	58021c00 	.word	0x58021c00
 8005f28:	58022000 	.word	0x58022000
 8005f2c:	2400155c 	.word	0x2400155c
 8005f30:	52000040 	.word	0x52000040
 8005f34:	240119d0 	.word	0x240119d0
 8005f38:	240015c8 	.word	0x240015c8

08005f3c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005f3c:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <HAL_InitTick+0x40>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	b90b      	cbnz	r3, 8005f46 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8005f42:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8005f44:	4770      	bx	lr
{
 8005f46:	b510      	push	{r4, lr}
 8005f48:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005f4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f4e:	4a0c      	ldr	r2, [pc, #48]	; (8005f80 <HAL_InitTick+0x44>)
 8005f50:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f54:	6810      	ldr	r0, [r2, #0]
 8005f56:	fbb0 f0f3 	udiv	r0, r0, r3
 8005f5a:	f000 fea7 	bl	8006cac <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f5e:	2c0f      	cmp	r4, #15
 8005f60:	d800      	bhi.n	8005f64 <HAL_InitTick+0x28>
 8005f62:	b108      	cbz	r0, 8005f68 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8005f64:	2001      	movs	r0, #1
}
 8005f66:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f68:	2200      	movs	r2, #0
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f70:	f000 fe54 	bl	8006c1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f74:	4b03      	ldr	r3, [pc, #12]	; (8005f84 <HAL_InitTick+0x48>)
 8005f76:	2000      	movs	r0, #0
 8005f78:	601c      	str	r4, [r3, #0]
}
 8005f7a:	bd10      	pop	{r4, pc}
 8005f7c:	24001064 	.word	0x24001064
 8005f80:	24000000 	.word	0x24000000
 8005f84:	24001068 	.word	0x24001068

08005f88 <HAL_Init>:
{
 8005f88:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f8a:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f8c:	4c12      	ldr	r4, [pc, #72]	; (8005fd8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f8e:	f000 fe31 	bl	8006bf4 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f92:	4d12      	ldr	r5, [pc, #72]	; (8005fdc <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f94:	f002 fb62 	bl	800865c <HAL_RCC_GetSysClockFreq>
 8005f98:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <HAL_Init+0x58>)
 8005f9a:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f9c:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f9e:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fa0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005fa2:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fa6:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005fa8:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005faa:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005fac:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 8005fb0:	4c0c      	ldr	r4, [pc, #48]	; (8005fe4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fb2:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005fb6:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fb8:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8005fbc:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fbe:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005fc0:	f7ff ffbc 	bl	8005f3c <HAL_InitTick>
 8005fc4:	b110      	cbz	r0, 8005fcc <HAL_Init+0x44>
    return HAL_ERROR;
 8005fc6:	2401      	movs	r4, #1
}
 8005fc8:	4620      	mov	r0, r4
 8005fca:	bd38      	pop	{r3, r4, r5, pc}
 8005fcc:	4604      	mov	r4, r0
  HAL_MspInit();
 8005fce:	f7fe faf3 	bl	80045b8 <HAL_MspInit>
}
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	bd38      	pop	{r3, r4, r5, pc}
 8005fd6:	bf00      	nop
 8005fd8:	0800a2f4 	.word	0x0800a2f4
 8005fdc:	24000004 	.word	0x24000004
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	24000000 	.word	0x24000000

08005fe8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005fe8:	4a03      	ldr	r2, [pc, #12]	; (8005ff8 <HAL_IncTick+0x10>)
 8005fea:	4b04      	ldr	r3, [pc, #16]	; (8005ffc <HAL_IncTick+0x14>)
 8005fec:	6811      	ldr	r1, [r2, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	440b      	add	r3, r1
 8005ff2:	6013      	str	r3, [r2, #0]
}
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	24011a04 	.word	0x24011a04
 8005ffc:	24001064 	.word	0x24001064

08006000 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006000:	4b01      	ldr	r3, [pc, #4]	; (8006008 <HAL_GetTick+0x8>)
 8006002:	6818      	ldr	r0, [r3, #0]
}
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	24011a04 	.word	0x24011a04

0800600c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006010:	f7ff fff6 	bl	8006000 <HAL_GetTick>
 8006014:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006016:	1c63      	adds	r3, r4, #1
 8006018:	d002      	beq.n	8006020 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800601a:	4b04      	ldr	r3, [pc, #16]	; (800602c <HAL_Delay+0x20>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006020:	f7ff ffee 	bl	8006000 <HAL_GetTick>
 8006024:	1b43      	subs	r3, r0, r5
 8006026:	42a3      	cmp	r3, r4
 8006028:	d3fa      	bcc.n	8006020 <HAL_Delay+0x14>
  {
  }
}
 800602a:	bd38      	pop	{r3, r4, r5, pc}
 800602c:	24001064 	.word	0x24001064

08006030 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006030:	4b01      	ldr	r3, [pc, #4]	; (8006038 <HAL_GetREVID+0x8>)
 8006032:	6818      	ldr	r0, [r3, #0]
}
 8006034:	0c00      	lsrs	r0, r0, #16
 8006036:	4770      	bx	lr
 8006038:	5c001000 	.word	0x5c001000

0800603c <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800603c:	4a03      	ldr	r2, [pc, #12]	; (800604c <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 800603e:	6853      	ldr	r3, [r2, #4]
 8006040:	ea23 0000 	bic.w	r0, r3, r0
 8006044:	4301      	orrs	r1, r0
 8006046:	6051      	str	r1, [r2, #4]
}
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	58000400 	.word	0x58000400

08006050 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8006050:	4a02      	ldr	r2, [pc, #8]	; (800605c <HAL_EnableCompensationCell+0xc>)
 8006052:	6a13      	ldr	r3, [r2, #32]
 8006054:	f043 0301 	orr.w	r3, r3, #1
 8006058:	6213      	str	r3, [r2, #32]
}
 800605a:	4770      	bx	lr
 800605c:	58000400 	.word	0x58000400

08006060 <HAL_ADC_PollForConversion>:
{
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006060:	4a40      	ldr	r2, [pc, #256]	; (8006164 <HAL_ADC_PollForConversion+0x104>)
 8006062:	6803      	ldr	r3, [r0, #0]
 8006064:	4293      	cmp	r3, r2
{
 8006066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606a:	4606      	mov	r6, r0
 800606c:	460d      	mov	r5, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800606e:	d044      	beq.n	80060fa <HAL_ADC_PollForConversion+0x9a>
 8006070:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006074:	4293      	cmp	r3, r2
 8006076:	d040      	beq.n	80060fa <HAL_ADC_PollForConversion+0x9a>
 8006078:	4a3b      	ldr	r2, [pc, #236]	; (8006168 <HAL_ADC_PollForConversion+0x108>)

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800607a:	6934      	ldr	r4, [r6, #16]
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800607c:	6897      	ldr	r7, [r2, #8]
 800607e:	2c08      	cmp	r4, #8
 8006080:	f007 071f 	and.w	r7, r7, #31
 8006084:	d00a      	beq.n	800609c <HAL_ADC_PollForConversion+0x3c>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006086:	2f09      	cmp	r7, #9
 8006088:	d84d      	bhi.n	8006126 <HAL_ADC_PollForConversion+0xc6>
 800608a:	f240 2121 	movw	r1, #545	; 0x221
 800608e:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006090:	07c9      	lsls	r1, r1, #31
 8006092:	d548      	bpl.n	8006126 <HAL_ADC_PollForConversion+0xc6>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	07da      	lsls	r2, r3, #31
 8006098:	d449      	bmi.n	800612e <HAL_ADC_PollForConversion+0xce>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800609a:	2404      	movs	r4, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800609c:	f7ff ffb0 	bl	8006000 <HAL_GetTick>
 80060a0:	6832      	ldr	r2, [r6, #0]
 80060a2:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80060a4:	e001      	b.n	80060aa <HAL_ADC_PollForConversion+0x4a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80060a6:	1c6b      	adds	r3, r5, #1
 80060a8:	d129      	bne.n	80060fe <HAL_ADC_PollForConversion+0x9e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80060aa:	6813      	ldr	r3, [r2, #0]
 80060ac:	4223      	tst	r3, r4
 80060ae:	d0fa      	beq.n	80060a6 <HAL_ADC_PollForConversion+0x46>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80060b0:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80060b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060b6:	6573      	str	r3, [r6, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80060b8:	68d3      	ldr	r3, [r2, #12]
 80060ba:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 80060be:	d10f      	bne.n	80060e0 <HAL_ADC_PollForConversion+0x80>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80060c0:	7d73      	ldrb	r3, [r6, #21]
 80060c2:	b96b      	cbnz	r3, 80060e0 <HAL_ADC_PollForConversion+0x80>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80060c4:	6813      	ldr	r3, [r2, #0]
 80060c6:	0718      	lsls	r0, r3, #28
 80060c8:	d50a      	bpl.n	80060e0 <HAL_ADC_PollForConversion+0x80>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80060ca:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80060cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060d0:	6573      	str	r3, [r6, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80060d2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80060d4:	04d9      	lsls	r1, r3, #19
 80060d6:	d403      	bmi.n	80060e0 <HAL_ADC_PollForConversion+0x80>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80060d8:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80060da:	f043 0301 	orr.w	r3, r3, #1
 80060de:	6573      	str	r3, [r6, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80060e0:	4b22      	ldr	r3, [pc, #136]	; (800616c <HAL_ADC_PollForConversion+0x10c>)
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d02e      	beq.n	8006144 <HAL_ADC_PollForConversion+0xe4>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80060e6:	68d0      	ldr	r0, [r2, #12]
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80060e8:	2c08      	cmp	r4, #8
 80060ea:	d027      	beq.n	800613c <HAL_ADC_PollForConversion+0xdc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80060ec:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80060f0:	d134      	bne.n	800615c <HAL_ADC_PollForConversion+0xfc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80060f2:	230c      	movs	r3, #12
 80060f4:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80060f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80060fa:	4a1d      	ldr	r2, [pc, #116]	; (8006170 <HAL_ADC_PollForConversion+0x110>)
 80060fc:	e7bd      	b.n	800607a <HAL_ADC_PollForConversion+0x1a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80060fe:	f7ff ff7f 	bl	8006000 <HAL_GetTick>
 8006102:	eba0 0008 	sub.w	r0, r0, r8
 8006106:	6832      	ldr	r2, [r6, #0]
 8006108:	42a8      	cmp	r0, r5
 800610a:	d801      	bhi.n	8006110 <HAL_ADC_PollForConversion+0xb0>
 800610c:	2d00      	cmp	r5, #0
 800610e:	d1cc      	bne.n	80060aa <HAL_ADC_PollForConversion+0x4a>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006110:	6813      	ldr	r3, [r2, #0]
 8006112:	4023      	ands	r3, r4
 8006114:	d1c9      	bne.n	80060aa <HAL_ADC_PollForConversion+0x4a>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006116:	6d72      	ldr	r2, [r6, #84]	; 0x54
          return HAL_TIMEOUT;
 8006118:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 800611a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800611e:	f042 0204 	orr.w	r2, r2, #4
 8006122:	6572      	str	r2, [r6, #84]	; 0x54
          return HAL_TIMEOUT;
 8006124:	e7e7      	b.n	80060f6 <HAL_ADC_PollForConversion+0x96>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8006126:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006128:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800612c:	d0b5      	beq.n	800609a <HAL_ADC_PollForConversion+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800612e:	6d73      	ldr	r3, [r6, #84]	; 0x54
        return HAL_ERROR;
 8006130:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006132:	f043 0320 	orr.w	r3, r3, #32
 8006136:	6573      	str	r3, [r6, #84]	; 0x54
}
 8006138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 800613c:	2000      	movs	r0, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800613e:	6014      	str	r4, [r2, #0]
}
 8006140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006144:	2f09      	cmp	r7, #9
 8006146:	d902      	bls.n	800614e <HAL_ADC_PollForConversion+0xee>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006148:	4b06      	ldr	r3, [pc, #24]	; (8006164 <HAL_ADC_PollForConversion+0x104>)
 800614a:	68d8      	ldr	r0, [r3, #12]
 800614c:	e7cc      	b.n	80060e8 <HAL_ADC_PollForConversion+0x88>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800614e:	f240 2321 	movw	r3, #545	; 0x221
 8006152:	fa23 f707 	lsr.w	r7, r3, r7
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006156:	07fb      	lsls	r3, r7, #31
 8006158:	d4c5      	bmi.n	80060e6 <HAL_ADC_PollForConversion+0x86>
 800615a:	e7f5      	b.n	8006148 <HAL_ADC_PollForConversion+0xe8>
  return HAL_OK;
 800615c:	2000      	movs	r0, #0
}
 800615e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006162:	bf00      	nop
 8006164:	40022000 	.word	0x40022000
 8006168:	58026300 	.word	0x58026300
 800616c:	40022100 	.word	0x40022100
 8006170:	40022300 	.word	0x40022300

08006174 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006174:	6803      	ldr	r3, [r0, #0]
 8006176:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop

0800617c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800617c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800617e:	2200      	movs	r2, #0
{
 8006180:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8006182:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006184:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8006188:	2a01      	cmp	r2, #1
 800618a:	f000 813a 	beq.w	8006402 <HAL_ADC_ConfigChannel+0x286>
 800618e:	4603      	mov	r3, r0
 8006190:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006192:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8006194:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006198:	6894      	ldr	r4, [r2, #8]
 800619a:	0766      	lsls	r6, r4, #29
 800619c:	f100 8099 	bmi.w	80062d2 <HAL_ADC_ConfigChannel+0x156>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80061a0:	680c      	ldr	r4, [r1, #0]
 80061a2:	f3c4 0513 	ubfx	r5, r4, #0, #20
 80061a6:	2d00      	cmp	r5, #0
 80061a8:	f040 809e 	bne.w	80062e8 <HAL_ADC_ConfigChannel+0x16c>
 80061ac:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 80061b0:	fa00 f00c 	lsl.w	r0, r0, ip
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80061b4:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 80061b6:	261f      	movs	r6, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80061b8:	69d5      	ldr	r5, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80061ba:	09a7      	lsrs	r7, r4, #6
  MODIFY_REG(*preg,
 80061bc:	4034      	ands	r4, r6
 80061be:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80061c0:	f102 0530 	add.w	r5, r2, #48	; 0x30
 80061c4:	f007 070c 	and.w	r7, r7, #12
  MODIFY_REG(*preg,
 80061c8:	40a6      	lsls	r6, r4
 80061ca:	61d0      	str	r0, [r2, #28]
 80061cc:	fa0c f404 	lsl.w	r4, ip, r4
 80061d0:	5978      	ldr	r0, [r7, r5]
 80061d2:	ea20 0006 	bic.w	r0, r0, r6
 80061d6:	4320      	orrs	r0, r4
 80061d8:	5178      	str	r0, [r7, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80061da:	6890      	ldr	r0, [r2, #8]
 80061dc:	0745      	lsls	r5, r0, #29
 80061de:	f100 8081 	bmi.w	80062e4 <HAL_ADC_ConfigChannel+0x168>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80061e2:	6895      	ldr	r5, [r2, #8]
 80061e4:	f015 0508 	ands.w	r5, r5, #8
 80061e8:	d157      	bne.n	800629a <HAL_ADC_ConfigChannel+0x11e>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80061ea:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80061ec:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80061f0:	2007      	movs	r0, #7
 80061f2:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80061f4:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 80061f8:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80061fc:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8006200:	fa00 fe04 	lsl.w	lr, r0, r4
 8006204:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006208:	4fc3      	ldr	r7, [pc, #780]	; (8006518 <HAL_ADC_ConfigChannel+0x39c>)
 800620a:	f85c 0006 	ldr.w	r0, [ip, r6]
 800620e:	ea20 000e 	bic.w	r0, r0, lr
 8006212:	4320      	orrs	r0, r4
 8006214:	f84c 0006 	str.w	r0, [ip, r6]
 8006218:	6838      	ldr	r0, [r7, #0]
 800621a:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 800621e:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8006222:	f000 8098 	beq.w	8006356 <HAL_ADC_ConfigChannel+0x1da>
 8006226:	68d0      	ldr	r0, [r2, #12]
 8006228:	68d6      	ldr	r6, [r2, #12]
 800622a:	f010 0f10 	tst.w	r0, #16
 800622e:	6948      	ldr	r0, [r1, #20]
 8006230:	f040 8107 	bne.w	8006442 <HAL_ADC_ConfigChannel+0x2c6>
 8006234:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8006238:	0076      	lsls	r6, r6, #1
 800623a:	fa00 f606 	lsl.w	r6, r0, r6
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800623e:	690f      	ldr	r7, [r1, #16]
 8006240:	2f04      	cmp	r7, #4
 8006242:	f000 80e1 	beq.w	8006408 <HAL_ADC_ConfigChannel+0x28c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006246:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 800624a:	6808      	ldr	r0, [r1, #0]
 800624c:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8006250:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006254:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8006258:	ea40 000c 	orr.w	r0, r0, ip
 800625c:	4330      	orrs	r0, r6
 800625e:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006262:	7e4f      	ldrb	r7, [r1, #25]
 8006264:	690e      	ldr	r6, [r1, #16]
 8006266:	2f01      	cmp	r7, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006268:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800626c:	bf0c      	ite	eq
 800626e:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 8006272:	2700      	movne	r7, #0
 8006274:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006278:	4338      	orrs	r0, r7
 800627a:	f844 0026 	str.w	r0, [r4, r6, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800627e:	7e0c      	ldrb	r4, [r1, #24]
 8006280:	6908      	ldr	r0, [r1, #16]
 8006282:	2c01      	cmp	r4, #1
 8006284:	d104      	bne.n	8006290 <HAL_ADC_ConfigChannel+0x114>
 8006286:	f000 001f 	and.w	r0, r0, #31
 800628a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800628e:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006290:	6910      	ldr	r0, [r2, #16]
 8006292:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8006296:	4305      	orrs	r5, r0
 8006298:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800629a:	6890      	ldr	r0, [r2, #8]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800629c:	07c4      	lsls	r4, r0, #31
 800629e:	d416      	bmi.n	80062ce <HAL_ADC_ConfigChannel+0x152>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80062a0:	68ce      	ldr	r6, [r1, #12]
 80062a2:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80062a4:	f006 0718 	and.w	r7, r6, #24
 80062a8:	4c9c      	ldr	r4, [pc, #624]	; (800651c <HAL_ADC_ConfigChannel+0x3a0>)
 80062aa:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 80062ae:	40fc      	lsrs	r4, r7
 80062b0:	f3c0 0713 	ubfx	r7, r0, #0, #20

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80062b4:	f8df c288 	ldr.w	ip, [pc, #648]	; 8006540 <HAL_ADC_ConfigChannel+0x3c4>
 80062b8:	4004      	ands	r4, r0
 80062ba:	ea25 0507 	bic.w	r5, r5, r7
 80062be:	4566      	cmp	r6, ip
 80062c0:	ea44 0405 	orr.w	r4, r4, r5
 80062c4:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 80062c8:	d04d      	beq.n	8006366 <HAL_ADC_ConfigChannel+0x1ea>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80062ca:	2800      	cmp	r0, #0
 80062cc:	db15      	blt.n	80062fa <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062ce:	2000      	movs	r0, #0
 80062d0:	e003      	b.n	80062da <HAL_ADC_ConfigChannel+0x15e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062d4:	f042 0220 	orr.w	r2, r2, #32
 80062d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80062e0:	b003      	add	sp, #12
 80062e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80062e4:	6890      	ldr	r0, [r2, #8]
 80062e6:	e7d8      	b.n	800629a <HAL_ADC_ConfigChannel+0x11e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e8:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80062ec:	b115      	cbz	r5, 80062f4 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80062ee:	fab5 f585 	clz	r5, r5
 80062f2:	40a8      	lsls	r0, r5
 80062f4:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 80062f8:	e75c      	b.n	80061b4 <HAL_ADC_ConfigChannel+0x38>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062fa:	4989      	ldr	r1, [pc, #548]	; (8006520 <HAL_ADC_ConfigChannel+0x3a4>)
 80062fc:	428a      	cmp	r2, r1
 80062fe:	f000 80c6 	beq.w	800648e <HAL_ADC_ConfigChannel+0x312>
 8006302:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8006306:	428a      	cmp	r2, r1
 8006308:	f000 80c1 	beq.w	800648e <HAL_ADC_ConfigChannel+0x312>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800630c:	4e85      	ldr	r6, [pc, #532]	; (8006524 <HAL_ADC_ConfigChannel+0x3a8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800630e:	4d86      	ldr	r5, [pc, #536]	; (8006528 <HAL_ADC_ConfigChannel+0x3ac>)
 8006310:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006312:	68b4      	ldr	r4, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006314:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006318:	43e4      	mvns	r4, r4
 800631a:	f004 0401 	and.w	r4, r4, #1
 800631e:	2c00      	cmp	r4, #0
 8006320:	f000 80c3 	beq.w	80064aa <HAL_ADC_ConfigChannel+0x32e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006324:	4c81      	ldr	r4, [pc, #516]	; (800652c <HAL_ADC_ConfigChannel+0x3b0>)
 8006326:	42a0      	cmp	r0, r4
 8006328:	f000 810c 	beq.w	8006544 <HAL_ADC_ConfigChannel+0x3c8>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800632c:	4c80      	ldr	r4, [pc, #512]	; (8006530 <HAL_ADC_ConfigChannel+0x3b4>)
 800632e:	42a0      	cmp	r0, r4
 8006330:	f000 812b 	beq.w	800658a <HAL_ADC_ConfigChannel+0x40e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006334:	4c7f      	ldr	r4, [pc, #508]	; (8006534 <HAL_ADC_ConfigChannel+0x3b8>)
 8006336:	42a0      	cmp	r0, r4
 8006338:	d1c9      	bne.n	80062ce <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 800633a:	0249      	lsls	r1, r1, #9
 800633c:	d4c7      	bmi.n	80062ce <HAL_ADC_ConfigChannel+0x152>
 800633e:	4979      	ldr	r1, [pc, #484]	; (8006524 <HAL_ADC_ConfigChannel+0x3a8>)
 8006340:	428a      	cmp	r2, r1
 8006342:	d1c4      	bne.n	80062ce <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006344:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006346:	2000      	movs	r0, #0
 8006348:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800634c:	4332      	orrs	r2, r6
 800634e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006352:	60aa      	str	r2, [r5, #8]
}
 8006354:	e7c1      	b.n	80062da <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006356:	68d6      	ldr	r6, [r2, #12]
 8006358:	6948      	ldr	r0, [r1, #20]
 800635a:	f3c6 0682 	ubfx	r6, r6, #2, #3
 800635e:	0076      	lsls	r6, r6, #1
 8006360:	fa00 f606 	lsl.w	r6, r0, r6
 8006364:	e76b      	b.n	800623e <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006366:	2f00      	cmp	r7, #0
 8006368:	d071      	beq.n	800644e <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800636a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800636e:	2c00      	cmp	r4, #0
 8006370:	f000 80af 	beq.w	80064d2 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8006374:	fab4 f484 	clz	r4, r4
 8006378:	3401      	adds	r4, #1
 800637a:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800637e:	2c09      	cmp	r4, #9
 8006380:	f240 80a7 	bls.w	80064d2 <HAL_ADC_ConfigChannel+0x356>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006384:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006388:	2d00      	cmp	r5, #0
 800638a:	f000 8112 	beq.w	80065b2 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 800638e:	fab5 f585 	clz	r5, r5
 8006392:	3501      	adds	r5, #1
 8006394:	06ad      	lsls	r5, r5, #26
 8006396:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800639a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800639e:	2c00      	cmp	r4, #0
 80063a0:	f000 8105 	beq.w	80065ae <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 80063a4:	2601      	movs	r6, #1
 80063a6:	fab4 f484 	clz	r4, r4
 80063aa:	4434      	add	r4, r6
 80063ac:	f004 041f 	and.w	r4, r4, #31
 80063b0:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063b4:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b6:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80063ba:	2800      	cmp	r0, #0
 80063bc:	f000 80f5 	beq.w	80065aa <HAL_ADC_ConfigChannel+0x42e>
  return __builtin_clz(value);
 80063c0:	fab0 f480 	clz	r4, r0
 80063c4:	3401      	adds	r4, #1
 80063c6:	f004 041f 	and.w	r4, r4, #31
 80063ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80063ce:	f1a4 001e 	sub.w	r0, r4, #30
 80063d2:	0500      	lsls	r0, r0, #20
 80063d4:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063d8:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 80063da:	f04f 0c07 	mov.w	ip, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80063de:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 80063e2:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80063e4:	0dc7      	lsrs	r7, r0, #23
  MODIFY_REG(*preg,
 80063e6:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80063ea:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 80063ee:	fa0c fc00 	lsl.w	ip, ip, r0
 80063f2:	4086      	lsls	r6, r0
 80063f4:	597c      	ldr	r4, [r7, r5]
 80063f6:	ea24 000c 	bic.w	r0, r4, ip
 80063fa:	4330      	orrs	r0, r6
 80063fc:	5178      	str	r0, [r7, r5]
 80063fe:	6808      	ldr	r0, [r1, #0]
}
 8006400:	e763      	b.n	80062ca <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8006402:	2002      	movs	r0, #2
}
 8006404:	b003      	add	sp, #12
 8006406:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006408:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800640a:	680d      	ldr	r5, [r1, #0]
 800640c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006410:	06ac      	lsls	r4, r5, #26
 8006412:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8006416:	d030      	beq.n	800647a <HAL_ADC_ConfigChannel+0x2fe>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006418:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800641a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800641e:	4284      	cmp	r4, r0
 8006420:	d026      	beq.n	8006470 <HAL_ADC_ConfigChannel+0x2f4>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006422:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8006424:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006428:	4284      	cmp	r4, r0
 800642a:	d02b      	beq.n	8006484 <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800642c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800642e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006432:	4284      	cmp	r4, r0
 8006434:	f47f af31 	bne.w	800629a <HAL_ADC_ConfigChannel+0x11e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006438:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800643a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800643e:	66d0      	str	r0, [r2, #108]	; 0x6c
 8006440:	e72b      	b.n	800629a <HAL_ADC_ConfigChannel+0x11e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006442:	0876      	lsrs	r6, r6, #1
 8006444:	f006 0608 	and.w	r6, r6, #8
 8006448:	fa00 f606 	lsl.w	r6, r0, r6
 800644c:	e6f7      	b.n	800623e <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800644e:	0e80      	lsrs	r0, r0, #26
 8006450:	1c44      	adds	r4, r0, #1
 8006452:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006456:	2e09      	cmp	r6, #9
 8006458:	d82d      	bhi.n	80064b6 <HAL_ADC_ConfigChannel+0x33a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800645a:	06a5      	lsls	r5, r4, #26
 800645c:	2401      	movs	r4, #1
 800645e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8006462:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8006466:	fa04 f606 	lsl.w	r6, r4, r6
 800646a:	0500      	lsls	r0, r0, #20
 800646c:	4335      	orrs	r5, r6
 800646e:	e7b3      	b.n	80063d8 <HAL_ADC_ConfigChannel+0x25c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006470:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8006472:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006476:	6650      	str	r0, [r2, #100]	; 0x64
 8006478:	e7d3      	b.n	8006422 <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800647a:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800647c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006480:	6610      	str	r0, [r2, #96]	; 0x60
 8006482:	e7c9      	b.n	8006418 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006484:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8006486:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800648a:	6690      	str	r0, [r2, #104]	; 0x68
 800648c:	e7ce      	b.n	800642c <HAL_ADC_ConfigChannel+0x2b0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800648e:	492a      	ldr	r1, [pc, #168]	; (8006538 <HAL_ADC_ConfigChannel+0x3bc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006490:	4e23      	ldr	r6, [pc, #140]	; (8006520 <HAL_ADC_ConfigChannel+0x3a4>)
 8006492:	4c2a      	ldr	r4, [pc, #168]	; (800653c <HAL_ADC_ConfigChannel+0x3c0>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006494:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006496:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006498:	68b7      	ldr	r7, [r6, #8]
 800649a:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800649c:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064a0:	433c      	orrs	r4, r7
 80064a2:	43e4      	mvns	r4, r4
 80064a4:	f004 0401 	and.w	r4, r4, #1
 80064a8:	e739      	b.n	800631e <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80064ac:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064ae:	f042 0220 	orr.w	r2, r2, #32
 80064b2:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80064b4:	e711      	b.n	80062da <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80064b6:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80064ba:	2701      	movs	r7, #1
 80064bc:	06a5      	lsls	r5, r4, #26
 80064be:	381e      	subs	r0, #30
 80064c0:	fa07 f606 	lsl.w	r6, r7, r6
 80064c4:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80064c8:	0500      	lsls	r0, r0, #20
 80064ca:	4335      	orrs	r5, r6
 80064cc:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80064d0:	e782      	b.n	80063d8 <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d2:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80064d6:	2c00      	cmp	r4, #0
 80064d8:	d073      	beq.n	80065c2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80064da:	fab4 f484 	clz	r4, r4
 80064de:	3401      	adds	r4, #1
 80064e0:	06a4      	lsls	r4, r4, #26
 80064e2:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e6:	fa90 f6a0 	rbit	r6, r0
  if (value == 0U)
 80064ea:	2e00      	cmp	r6, #0
 80064ec:	d067      	beq.n	80065be <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 80064ee:	2501      	movs	r5, #1
 80064f0:	fab6 f686 	clz	r6, r6
 80064f4:	442e      	add	r6, r5
 80064f6:	f006 061f 	and.w	r6, r6, #31
 80064fa:	40b5      	lsls	r5, r6
 80064fc:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064fe:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8006502:	2800      	cmp	r0, #0
 8006504:	d058      	beq.n	80065b8 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8006506:	fab0 f480 	clz	r4, r0
 800650a:	3401      	adds	r4, #1
 800650c:	f004 041f 	and.w	r4, r4, #31
 8006510:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006514:	0520      	lsls	r0, r4, #20
 8006516:	e75f      	b.n	80063d8 <HAL_ADC_ConfigChannel+0x25c>
 8006518:	5c001000 	.word	0x5c001000
 800651c:	000fffff 	.word	0x000fffff
 8006520:	40022000 	.word	0x40022000
 8006524:	58026000 	.word	0x58026000
 8006528:	58026300 	.word	0x58026300
 800652c:	cb840000 	.word	0xcb840000
 8006530:	c7520000 	.word	0xc7520000
 8006534:	cfb80000 	.word	0xcfb80000
 8006538:	40022300 	.word	0x40022300
 800653c:	40022100 	.word	0x40022100
 8006540:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006544:	0208      	lsls	r0, r1, #8
 8006546:	f53f aec2 	bmi.w	80062ce <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800654a:	491f      	ldr	r1, [pc, #124]	; (80065c8 <HAL_ADC_ConfigChannel+0x44c>)
 800654c:	428a      	cmp	r2, r1
 800654e:	f47f aebe 	bne.w	80062ce <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006552:	4a1e      	ldr	r2, [pc, #120]	; (80065cc <HAL_ADC_ConfigChannel+0x450>)
 8006554:	481e      	ldr	r0, [pc, #120]	; (80065d0 <HAL_ADC_ConfigChannel+0x454>)
 8006556:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006558:	68a9      	ldr	r1, [r5, #8]
 800655a:	0992      	lsrs	r2, r2, #6
 800655c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8006560:	fba0 0202 	umull	r0, r2, r0, r2
 8006564:	4331      	orrs	r1, r6
 8006566:	0992      	lsrs	r2, r2, #6
 8006568:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800656c:	3201      	adds	r2, #1
 800656e:	60a9      	str	r1, [r5, #8]
 8006570:	0052      	lsls	r2, r2, #1
 8006572:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8006574:	9a01      	ldr	r2, [sp, #4]
 8006576:	2a00      	cmp	r2, #0
 8006578:	f43f aea9 	beq.w	80062ce <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 800657c:	9a01      	ldr	r2, [sp, #4]
 800657e:	3a01      	subs	r2, #1
 8006580:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8006582:	9a01      	ldr	r2, [sp, #4]
 8006584:	2a00      	cmp	r2, #0
 8006586:	d1f9      	bne.n	800657c <HAL_ADC_ConfigChannel+0x400>
 8006588:	e6a1      	b.n	80062ce <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800658a:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 800658e:	f47f ae9e 	bne.w	80062ce <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006592:	490d      	ldr	r1, [pc, #52]	; (80065c8 <HAL_ADC_ConfigChannel+0x44c>)
 8006594:	428a      	cmp	r2, r1
 8006596:	f47f ae9a 	bne.w	80062ce <HAL_ADC_ConfigChannel+0x152>
 800659a:	68aa      	ldr	r2, [r5, #8]
 800659c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80065a0:	4332      	orrs	r2, r6
 80065a2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80065a6:	60aa      	str	r2, [r5, #8]
}
 80065a8:	e697      	b.n	80062da <HAL_ADC_ConfigChannel+0x15e>
 80065aa:	480a      	ldr	r0, [pc, #40]	; (80065d4 <HAL_ADC_ConfigChannel+0x458>)
 80065ac:	e714      	b.n	80063d8 <HAL_ADC_ConfigChannel+0x25c>
 80065ae:	2402      	movs	r4, #2
 80065b0:	e700      	b.n	80063b4 <HAL_ADC_ConfigChannel+0x238>
 80065b2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80065b6:	e6f0      	b.n	800639a <HAL_ADC_ConfigChannel+0x21e>
 80065b8:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80065bc:	e70c      	b.n	80063d8 <HAL_ADC_ConfigChannel+0x25c>
 80065be:	2502      	movs	r5, #2
 80065c0:	e79c      	b.n	80064fc <HAL_ADC_ConfigChannel+0x380>
 80065c2:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 80065c6:	e78e      	b.n	80064e6 <HAL_ADC_ConfigChannel+0x36a>
 80065c8:	58026000 	.word	0x58026000
 80065cc:	24000000 	.word	0x24000000
 80065d0:	053e2d63 	.word	0x053e2d63
 80065d4:	fe500000 	.word	0xfe500000

080065d8 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065d8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	07d1      	lsls	r1, r2, #31
 80065de:	d501      	bpl.n	80065e4 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80065e0:	2000      	movs	r0, #0
}
 80065e2:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80065e4:	6899      	ldr	r1, [r3, #8]
 80065e6:	4a21      	ldr	r2, [pc, #132]	; (800666c <ADC_Enable+0x94>)
 80065e8:	4211      	tst	r1, r2
{
 80065ea:	b570      	push	{r4, r5, r6, lr}
 80065ec:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80065ee:	d008      	beq.n	8006602 <ADC_Enable+0x2a>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 80065f2:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065f4:	f043 0310 	orr.w	r3, r3, #16
 80065f8:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065fc:	4303      	orrs	r3, r0
 80065fe:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8006600:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8006602:	6899      	ldr	r1, [r3, #8]
 8006604:	4a1a      	ldr	r2, [pc, #104]	; (8006670 <ADC_Enable+0x98>)
 8006606:	400a      	ands	r2, r1
 8006608:	f042 0201 	orr.w	r2, r2, #1
 800660c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800660e:	f7ff fcf7 	bl	8006000 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	4a17      	ldr	r2, [pc, #92]	; (8006674 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8006616:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006618:	4293      	cmp	r3, r2
 800661a:	d01f      	beq.n	800665c <ADC_Enable+0x84>
 800661c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006620:	4293      	cmp	r3, r2
 8006622:	d01b      	beq.n	800665c <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006624:	4a14      	ldr	r2, [pc, #80]	; (8006678 <ADC_Enable+0xa0>)
 8006626:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	07d6      	lsls	r6, r2, #31
 800662c:	d414      	bmi.n	8006658 <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 800662e:	4e10      	ldr	r6, [pc, #64]	; (8006670 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006630:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006632:	07d0      	lsls	r0, r2, #31
 8006634:	d404      	bmi.n	8006640 <ADC_Enable+0x68>
  MODIFY_REG(ADCx->CR,
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	4032      	ands	r2, r6
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006640:	f7ff fcde 	bl	8006000 <HAL_GetTick>
 8006644:	1b43      	subs	r3, r0, r5
 8006646:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006648:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800664a:	d902      	bls.n	8006652 <ADC_Enable+0x7a>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	07d1      	lsls	r1, r2, #31
 8006650:	d5ce      	bpl.n	80065f0 <ADC_Enable+0x18>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	07d2      	lsls	r2, r2, #31
 8006656:	d5eb      	bpl.n	8006630 <ADC_Enable+0x58>
  return HAL_OK;
 8006658:	2000      	movs	r0, #0
}
 800665a:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800665c:	4a07      	ldr	r2, [pc, #28]	; (800667c <ADC_Enable+0xa4>)
 800665e:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006660:	06d2      	lsls	r2, r2, #27
 8006662:	d0e1      	beq.n	8006628 <ADC_Enable+0x50>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006664:	4a06      	ldr	r2, [pc, #24]	; (8006680 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006666:	4293      	cmp	r3, r2
 8006668:	d1de      	bne.n	8006628 <ADC_Enable+0x50>
 800666a:	e7f5      	b.n	8006658 <ADC_Enable+0x80>
 800666c:	8000003f 	.word	0x8000003f
 8006670:	7fffffc0 	.word	0x7fffffc0
 8006674:	40022000 	.word	0x40022000
 8006678:	58026300 	.word	0x58026300
 800667c:	40022300 	.word	0x40022300
 8006680:	40022100 	.word	0x40022100

08006684 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006684:	4a39      	ldr	r2, [pc, #228]	; (800676c <HAL_ADC_Start+0xe8>)
 8006686:	6803      	ldr	r3, [r0, #0]
 8006688:	4293      	cmp	r3, r2
{
 800668a:	b570      	push	{r4, r5, r6, lr}
 800668c:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800668e:	d045      	beq.n	800671c <HAL_ADC_Start+0x98>
 8006690:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006694:	4293      	cmp	r3, r2
 8006696:	d041      	beq.n	800671c <HAL_ADC_Start+0x98>
 8006698:	4a35      	ldr	r2, [pc, #212]	; (8006770 <HAL_ADC_Start+0xec>)
 800669a:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800669c:	689d      	ldr	r5, [r3, #8]
 800669e:	f015 0504 	ands.w	r5, r5, #4
 80066a2:	d141      	bne.n	8006728 <HAL_ADC_Start+0xa4>
    __HAL_LOCK(hadc);
 80066a4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d03d      	beq.n	8006728 <HAL_ADC_Start+0xa4>
 80066ac:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80066ae:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80066b0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 80066b4:	f7ff ff90 	bl	80065d8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d137      	bne.n	800672c <HAL_ADC_Start+0xa8>
      ADC_STATE_CLR_SET(hadc->State,
 80066bc:	6d61      	ldr	r1, [r4, #84]	; 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80066be:	f006 061f 	and.w	r6, r6, #31
 80066c2:	4a2c      	ldr	r2, [pc, #176]	; (8006774 <HAL_ADC_Start+0xf0>)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80066c4:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80066c6:	400a      	ands	r2, r1
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80066c8:	492b      	ldr	r1, [pc, #172]	; (8006778 <HAL_ADC_Start+0xf4>)
      ADC_STATE_CLR_SET(hadc->State,
 80066ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80066ce:	428b      	cmp	r3, r1
      ADC_STATE_CLR_SET(hadc->State,
 80066d0:	6562      	str	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80066d2:	d044      	beq.n	800675e <HAL_ADC_Start+0xda>
 80066d4:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80066d6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80066d8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80066dc:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80066de:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80066e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066e4:	d03f      	beq.n	8006766 <HAL_ADC_Start+0xe2>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80066e6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80066e8:	f022 0206 	bic.w	r2, r2, #6
 80066ec:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80066ee:	251c      	movs	r5, #28
      __HAL_UNLOCK(hadc);
 80066f0:	2200      	movs	r2, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80066f2:	428b      	cmp	r3, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80066f4:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 80066f6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80066fa:	d020      	beq.n	800673e <HAL_ADC_Start+0xba>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80066fc:	2e09      	cmp	r6, #9
 80066fe:	d918      	bls.n	8006732 <HAL_ADC_Start+0xae>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006700:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006706:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006708:	68cb      	ldr	r3, [r1, #12]
 800670a:	019b      	lsls	r3, r3, #6
 800670c:	d505      	bpl.n	800671a <HAL_ADC_Start+0x96>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800670e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006710:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006714:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006718:	6563      	str	r3, [r4, #84]	; 0x54
}
 800671a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800671c:	4a17      	ldr	r2, [pc, #92]	; (800677c <HAL_ADC_Start+0xf8>)
 800671e:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006720:	689d      	ldr	r5, [r3, #8]
 8006722:	f015 0504 	ands.w	r5, r5, #4
 8006726:	d0bd      	beq.n	80066a4 <HAL_ADC_Start+0x20>
    tmp_hal_status = HAL_BUSY;
 8006728:	2002      	movs	r0, #2
}
 800672a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 800672c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
 8006730:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006732:	f240 2221 	movw	r2, #545	; 0x221
 8006736:	fa22 f606 	lsr.w	r6, r2, r6
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800673a:	07f5      	lsls	r5, r6, #31
 800673c:	d5e0      	bpl.n	8006700 <HAL_ADC_Start+0x7c>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	0192      	lsls	r2, r2, #6
 8006742:	d505      	bpl.n	8006750 <HAL_ADC_Start+0xcc>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006744:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006746:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800674a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800674e:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8006750:	6899      	ldr	r1, [r3, #8]
 8006752:	4a0b      	ldr	r2, [pc, #44]	; (8006780 <HAL_ADC_Start+0xfc>)
 8006754:	400a      	ands	r2, r1
 8006756:	f042 0204 	orr.w	r2, r2, #4
 800675a:	609a      	str	r2, [r3, #8]
}
 800675c:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800675e:	4903      	ldr	r1, [pc, #12]	; (800676c <HAL_ADC_Start+0xe8>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006760:	2e00      	cmp	r6, #0
 8006762:	d0b8      	beq.n	80066d6 <HAL_ADC_Start+0x52>
 8006764:	e7bb      	b.n	80066de <HAL_ADC_Start+0x5a>
        ADC_CLEAR_ERRORCODE(hadc);
 8006766:	65a2      	str	r2, [r4, #88]	; 0x58
 8006768:	e7c1      	b.n	80066ee <HAL_ADC_Start+0x6a>
 800676a:	bf00      	nop
 800676c:	40022000 	.word	0x40022000
 8006770:	58026300 	.word	0x58026300
 8006774:	fffff0fe 	.word	0xfffff0fe
 8006778:	40022100 	.word	0x40022100
 800677c:	40022300 	.word	0x40022300
 8006780:	7fffffc0 	.word	0x7fffffc0

08006784 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006784:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006786:	4a5a      	ldr	r2, [pc, #360]	; (80068f0 <ADC_ConfigureBoostMode+0x16c>)
{
 8006788:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800678a:	6803      	ldr	r3, [r0, #0]
 800678c:	4293      	cmp	r3, r2
 800678e:	d029      	beq.n	80067e4 <ADC_ConfigureBoostMode+0x60>
 8006790:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006794:	4293      	cmp	r3, r2
 8006796:	d025      	beq.n	80067e4 <ADC_ConfigureBoostMode+0x60>
 8006798:	4b56      	ldr	r3, [pc, #344]	; (80068f4 <ADC_ConfigureBoostMode+0x170>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80067a0:	bf14      	ite	ne
 80067a2:	2301      	movne	r3, #1
 80067a4:	2300      	moveq	r3, #0
 80067a6:	b333      	cbz	r3, 80067f6 <ADC_ConfigureBoostMode+0x72>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80067a8:	f002 f922 	bl	80089f0 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80067ac:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 80067ae:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80067b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b4:	f000 808b 	beq.w	80068ce <ADC_ConfigureBoostMode+0x14a>
 80067b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067bc:	d06f      	beq.n	800689e <ADC_ConfigureBoostMode+0x11a>
 80067be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c2:	f000 8084 	beq.w	80068ce <ADC_ConfigureBoostMode+0x14a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80067c6:	f7ff fc33 	bl	8006030 <HAL_GetREVID>
 80067ca:	f241 0303 	movw	r3, #4099	; 0x1003
 80067ce:	4298      	cmp	r0, r3
 80067d0:	d84e      	bhi.n	8006870 <ADC_ConfigureBoostMode+0xec>
  {
    if (freq > 20000000UL)
 80067d2:	4b49      	ldr	r3, [pc, #292]	; (80068f8 <ADC_ConfigureBoostMode+0x174>)
 80067d4:	429d      	cmp	r5, r3
 80067d6:	d92d      	bls.n	8006834 <ADC_ConfigureBoostMode+0xb0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80067d8:	6822      	ldr	r2, [r4, #0]
 80067da:	6893      	ldr	r3, [r2, #8]
 80067dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067e0:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80067e4:	4b45      	ldr	r3, [pc, #276]	; (80068fc <ADC_ConfigureBoostMode+0x178>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80067ec:	bf14      	ite	ne
 80067ee:	2301      	movne	r3, #1
 80067f0:	2300      	moveq	r3, #0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1d8      	bne.n	80067a8 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80067f6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80067fa:	f003 fa0d 	bl	8009c18 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80067fe:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006800:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8006802:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006806:	d06c      	beq.n	80068e2 <ADC_ConfigureBoostMode+0x15e>
 8006808:	d808      	bhi.n	800681c <ADC_ConfigureBoostMode+0x98>
 800680a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800680e:	d050      	beq.n	80068b2 <ADC_ConfigureBoostMode+0x12e>
 8006810:	d916      	bls.n	8006840 <ADC_ConfigureBoostMode+0xbc>
 8006812:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006816:	d1d6      	bne.n	80067c6 <ADC_ConfigureBoostMode+0x42>
        freq /= 32UL;
 8006818:	0945      	lsrs	r5, r0, #5
        break;
 800681a:	e7d4      	b.n	80067c6 <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 800681c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006820:	d045      	beq.n	80068ae <ADC_ConfigureBoostMode+0x12a>
 8006822:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006826:	d1ce      	bne.n	80067c6 <ADC_ConfigureBoostMode+0x42>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006828:	f7ff fc02 	bl	8006030 <HAL_GetREVID>
 800682c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006830:	4298      	cmp	r0, r3
 8006832:	d840      	bhi.n	80068b6 <ADC_ConfigureBoostMode+0x132>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006834:	6822      	ldr	r2, [r4, #0]
 8006836:	6893      	ldr	r3, [r2, #8]
 8006838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800683c:	6093      	str	r3, [r2, #8]
}
 800683e:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8006840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006844:	d006      	beq.n	8006854 <ADC_ConfigureBoostMode+0xd0>
 8006846:	d90a      	bls.n	800685e <ADC_ConfigureBoostMode+0xda>
 8006848:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800684c:	d002      	beq.n	8006854 <ADC_ConfigureBoostMode+0xd0>
 800684e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006852:	d1b8      	bne.n	80067c6 <ADC_ConfigureBoostMode+0x42>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006854:	0c9b      	lsrs	r3, r3, #18
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 800685c:	e7b3      	b.n	80067c6 <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 800685e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006862:	d0f7      	beq.n	8006854 <ADC_ConfigureBoostMode+0xd0>
 8006864:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006868:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800686c:	d0f2      	beq.n	8006854 <ADC_ConfigureBoostMode+0xd0>
 800686e:	e7aa      	b.n	80067c6 <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8006870:	4b23      	ldr	r3, [pc, #140]	; (8006900 <ADC_ConfigureBoostMode+0x17c>)
 8006872:	429d      	cmp	r5, r3
 8006874:	d805      	bhi.n	8006882 <ADC_ConfigureBoostMode+0xfe>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006876:	6822      	ldr	r2, [r4, #0]
 8006878:	6893      	ldr	r3, [r2, #8]
 800687a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800687e:	6093      	str	r3, [r2, #8]
}
 8006880:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8006882:	4b20      	ldr	r3, [pc, #128]	; (8006904 <ADC_ConfigureBoostMode+0x180>)
 8006884:	429d      	cmp	r5, r3
 8006886:	d91a      	bls.n	80068be <ADC_ConfigureBoostMode+0x13a>
    else if (freq <= 25000000UL)
 8006888:	4b1f      	ldr	r3, [pc, #124]	; (8006908 <ADC_ConfigureBoostMode+0x184>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800688a:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 800688c:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800688e:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8006890:	d829      	bhi.n	80068e6 <ADC_ConfigureBoostMode+0x162>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800689a:	6093      	str	r3, [r2, #8]
}
 800689c:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 800689e:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80068a0:	f7ff fbc6 	bl	8006030 <HAL_GetREVID>
 80068a4:	f241 0303 	movw	r3, #4099	; 0x1003
 80068a8:	4298      	cmp	r0, r3
 80068aa:	d8e1      	bhi.n	8006870 <ADC_ConfigureBoostMode+0xec>
 80068ac:	e791      	b.n	80067d2 <ADC_ConfigureBoostMode+0x4e>
        freq /= 128UL;
 80068ae:	09c5      	lsrs	r5, r0, #7
        break;
 80068b0:	e789      	b.n	80067c6 <ADC_ConfigureBoostMode+0x42>
        freq /= 16UL;
 80068b2:	0905      	lsrs	r5, r0, #4
        break;
 80068b4:	e787      	b.n	80067c6 <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 80068b6:	4b12      	ldr	r3, [pc, #72]	; (8006900 <ADC_ConfigureBoostMode+0x17c>)
 80068b8:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 80068bc:	d2db      	bcs.n	8006876 <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80068be:	6822      	ldr	r2, [r4, #0]
 80068c0:	6893      	ldr	r3, [r2, #8]
 80068c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ca:	6093      	str	r3, [r2, #8]
}
 80068cc:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80068ce:	0c1b      	lsrs	r3, r3, #16
 80068d0:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80068d4:	f7ff fbac 	bl	8006030 <HAL_GetREVID>
 80068d8:	f241 0303 	movw	r3, #4099	; 0x1003
 80068dc:	4298      	cmp	r0, r3
 80068de:	d8c7      	bhi.n	8006870 <ADC_ConfigureBoostMode+0xec>
 80068e0:	e777      	b.n	80067d2 <ADC_ConfigureBoostMode+0x4e>
        freq /= 64UL;
 80068e2:	0985      	lsrs	r5, r0, #6
        break;
 80068e4:	e76f      	b.n	80067c6 <ADC_ConfigureBoostMode+0x42>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80068e6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80068ea:	6093      	str	r3, [r2, #8]
}
 80068ec:	bd38      	pop	{r3, r4, r5, pc}
 80068ee:	bf00      	nop
 80068f0:	40022000 	.word	0x40022000
 80068f4:	58026300 	.word	0x58026300
 80068f8:	01312d00 	.word	0x01312d00
 80068fc:	40022300 	.word	0x40022300
 8006900:	00bebc21 	.word	0x00bebc21
 8006904:	017d7841 	.word	0x017d7841
 8006908:	02faf081 	.word	0x02faf081

0800690c <HAL_ADC_Init>:
{
 800690c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 800690e:	2300      	movs	r3, #0
{
 8006910:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8006912:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8006914:	2800      	cmp	r0, #0
 8006916:	f000 80d0 	beq.w	8006aba <HAL_ADC_Init+0x1ae>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800691a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800691c:	4604      	mov	r4, r0
 800691e:	2d00      	cmp	r5, #0
 8006920:	f000 80ba 	beq.w	8006a98 <HAL_ADC_Init+0x18c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006924:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006926:	6893      	ldr	r3, [r2, #8]
 8006928:	009d      	lsls	r5, r3, #2
 800692a:	d503      	bpl.n	8006934 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800692c:	6891      	ldr	r1, [r2, #8]
 800692e:	4b71      	ldr	r3, [pc, #452]	; (8006af4 <HAL_ADC_Init+0x1e8>)
 8006930:	400b      	ands	r3, r1
 8006932:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006934:	6893      	ldr	r3, [r2, #8]
 8006936:	00d8      	lsls	r0, r3, #3
 8006938:	d416      	bmi.n	8006968 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800693a:	4b6f      	ldr	r3, [pc, #444]	; (8006af8 <HAL_ADC_Init+0x1ec>)
 800693c:	4d6f      	ldr	r5, [pc, #444]	; (8006afc <HAL_ADC_Init+0x1f0>)
 800693e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8006940:	6890      	ldr	r0, [r2, #8]
 8006942:	099b      	lsrs	r3, r3, #6
 8006944:	496e      	ldr	r1, [pc, #440]	; (8006b00 <HAL_ADC_Init+0x1f4>)
 8006946:	fba5 5303 	umull	r5, r3, r5, r3
 800694a:	4001      	ands	r1, r0
 800694c:	099b      	lsrs	r3, r3, #6
 800694e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006952:	3301      	adds	r3, #1
 8006954:	6091      	str	r1, [r2, #8]
 8006956:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006958:	9b01      	ldr	r3, [sp, #4]
 800695a:	b12b      	cbz	r3, 8006968 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 800695c:	9b01      	ldr	r3, [sp, #4]
 800695e:	3b01      	subs	r3, #1
 8006960:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006962:	9b01      	ldr	r3, [sp, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1f9      	bne.n	800695c <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006968:	6893      	ldr	r3, [r2, #8]
 800696a:	00d9      	lsls	r1, r3, #3
 800696c:	d424      	bmi.n	80069b8 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800696e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006970:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006972:	f043 0310 	orr.w	r3, r3, #16
 8006976:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006978:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800697a:	432b      	orrs	r3, r5
 800697c:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800697e:	6893      	ldr	r3, [r2, #8]
 8006980:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006984:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006986:	d11d      	bne.n	80069c4 <HAL_ADC_Init+0xb8>
 8006988:	06db      	lsls	r3, r3, #27
 800698a:	d41b      	bmi.n	80069c4 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 800698c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800698e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006992:	f043 0302 	orr.w	r3, r3, #2
 8006996:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006998:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800699a:	07de      	lsls	r6, r3, #31
 800699c:	d428      	bmi.n	80069f0 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800699e:	4b59      	ldr	r3, [pc, #356]	; (8006b04 <HAL_ADC_Init+0x1f8>)
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d017      	beq.n	80069d4 <HAL_ADC_Init+0xc8>
 80069a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d013      	beq.n	80069d4 <HAL_ADC_Init+0xc8>
 80069ac:	4b56      	ldr	r3, [pc, #344]	; (8006b08 <HAL_ADC_Init+0x1fc>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	07d9      	lsls	r1, r3, #31
 80069b2:	d41d      	bmi.n	80069f0 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80069b4:	4a55      	ldr	r2, [pc, #340]	; (8006b0c <HAL_ADC_Init+0x200>)
 80069b6:	e015      	b.n	80069e4 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80069b8:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069ba:	2500      	movs	r5, #0
 80069bc:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80069c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80069c2:	d0e1      	beq.n	8006988 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80069c6:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069c8:	f043 0310 	orr.w	r3, r3, #16
}
 80069cc:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069ce:	6563      	str	r3, [r4, #84]	; 0x54
}
 80069d0:	b002      	add	sp, #8
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80069d4:	4a4b      	ldr	r2, [pc, #300]	; (8006b04 <HAL_ADC_Init+0x1f8>)
 80069d6:	4b4e      	ldr	r3, [pc, #312]	; (8006b10 <HAL_ADC_Init+0x204>)
 80069d8:	6892      	ldr	r2, [r2, #8]
 80069da:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80069dc:	4313      	orrs	r3, r2
 80069de:	07d8      	lsls	r0, r3, #31
 80069e0:	d406      	bmi.n	80069f0 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80069e2:	4a4c      	ldr	r2, [pc, #304]	; (8006b14 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80069e4:	6893      	ldr	r3, [r2, #8]
 80069e6:	6861      	ldr	r1, [r4, #4]
 80069e8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80069ec:	430b      	orrs	r3, r1
 80069ee:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80069f0:	f7ff fb1e 	bl	8006030 <HAL_GetREVID>
 80069f4:	f241 0303 	movw	r3, #4099	; 0x1003
 80069f8:	68a1      	ldr	r1, [r4, #8]
 80069fa:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80069fc:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80069fe:	d851      	bhi.n	8006aa4 <HAL_ADC_Init+0x198>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006a00:	7d66      	ldrb	r6, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006a02:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006a04:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006a06:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
 8006a0a:	4302      	orrs	r2, r0
 8006a0c:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d103      	bne.n	8006a1a <HAL_ADC_Init+0x10e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006a12:	6a23      	ldr	r3, [r4, #32]
 8006a14:	3b01      	subs	r3, #1
 8006a16:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006a1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a1c:	b123      	cbz	r3, 8006a28 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006a1e:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006a22:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006a24:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006a26:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	493b      	ldr	r1, [pc, #236]	; (8006b18 <HAL_ADC_Init+0x20c>)
 8006a2c:	68d8      	ldr	r0, [r3, #12]
 8006a2e:	4001      	ands	r1, r0
 8006a30:	430a      	orrs	r2, r1
 8006a32:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a34:	689a      	ldr	r2, [r3, #8]
 8006a36:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006a3a:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a3c:	d11c      	bne.n	8006a78 <HAL_ADC_Init+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006a3e:	0712      	lsls	r2, r2, #28
 8006a40:	d41a      	bmi.n	8006a78 <HAL_ADC_Init+0x16c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006a42:	68d9      	ldr	r1, [r3, #12]
 8006a44:	4a35      	ldr	r2, [pc, #212]	; (8006b1c <HAL_ADC_Init+0x210>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006a46:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006a48:	400a      	ands	r2, r1
 8006a4a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006a4c:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 8006a50:	430a      	orrs	r2, r1
 8006a52:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8006a54:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8006a58:	2a01      	cmp	r2, #1
 8006a5a:	d03a      	beq.n	8006ad2 <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	f022 0201 	bic.w	r2, r2, #1
 8006a62:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006a64:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006a66:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a6a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006a72:	f7ff fe87 	bl	8006784 <ADC_ConfigureBoostMode>
 8006a76:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006a78:	68e2      	ldr	r2, [r4, #12]
 8006a7a:	2a01      	cmp	r2, #1
 8006a7c:	d021      	beq.n	8006ac2 <HAL_ADC_Init+0x1b6>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a80:	f022 020f 	bic.w	r2, r2, #15
 8006a84:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006a86:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8006a88:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006a8a:	f023 0303 	bic.w	r3, r3, #3
 8006a8e:	f043 0301 	orr.w	r3, r3, #1
 8006a92:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006a94:	b002      	add	sp, #8
 8006a96:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8006a98:	f7fd fda0 	bl	80045dc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006a9c:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8006a9e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8006aa2:	e73f      	b.n	8006924 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006aa4:	2910      	cmp	r1, #16
 8006aa6:	d1ab      	bne.n	8006a00 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006aa8:	7d60      	ldrb	r0, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006aaa:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006aac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006aae:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	f042 021c 	orr.w	r2, r2, #28
 8006ab8:	e7a9      	b.n	8006a0e <HAL_ADC_Init+0x102>
    return HAL_ERROR;
 8006aba:	2501      	movs	r5, #1
}
 8006abc:	4628      	mov	r0, r5
 8006abe:	b002      	add	sp, #8
 8006ac0:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006ac2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ac4:	69a2      	ldr	r2, [r4, #24]
 8006ac6:	f021 010f 	bic.w	r1, r1, #15
 8006aca:	3a01      	subs	r2, #1
 8006acc:	430a      	orrs	r2, r1
 8006ace:	631a      	str	r2, [r3, #48]	; 0x30
 8006ad0:	e7d9      	b.n	8006a86 <HAL_ADC_Init+0x17a>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006ad2:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8006ad6:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8006ad8:	3901      	subs	r1, #1
 8006ada:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006adc:	4332      	orrs	r2, r6
 8006ade:	691e      	ldr	r6, [r3, #16]
 8006ae0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006ae4:	490e      	ldr	r1, [pc, #56]	; (8006b20 <HAL_ADC_Init+0x214>)
 8006ae6:	4302      	orrs	r2, r0
 8006ae8:	4031      	ands	r1, r6
 8006aea:	430a      	orrs	r2, r1
 8006aec:	f042 0201 	orr.w	r2, r2, #1
 8006af0:	611a      	str	r2, [r3, #16]
 8006af2:	e7b7      	b.n	8006a64 <HAL_ADC_Init+0x158>
 8006af4:	5fffffc0 	.word	0x5fffffc0
 8006af8:	24000000 	.word	0x24000000
 8006afc:	053e2d63 	.word	0x053e2d63
 8006b00:	6fffffc0 	.word	0x6fffffc0
 8006b04:	40022000 	.word	0x40022000
 8006b08:	58026000 	.word	0x58026000
 8006b0c:	58026300 	.word	0x58026300
 8006b10:	40022100 	.word	0x40022100
 8006b14:	40022300 	.word	0x40022300
 8006b18:	fff0c003 	.word	0xfff0c003
 8006b1c:	ffffbffc 	.word	0xffffbffc
 8006b20:	fc00f81e 	.word	0xfc00f81e

08006b24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006b24:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b26:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8006b2a:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b2c:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8006b2e:	2a01      	cmp	r2, #1
 8006b30:	d04d      	beq.n	8006bce <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8006b32:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006b34:	4c2b      	ldr	r4, [pc, #172]	; (8006be4 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006b36:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8006b38:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006b3a:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006b3c:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006b3e:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8006b40:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006b44:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006b46:	d008      	beq.n	8006b5a <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b48:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b4e:	f041 0120 	orr.w	r1, r1, #32
 8006b52:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8006b54:	b01a      	add	sp, #104	; 0x68
 8006b56:	bcf0      	pop	{r4, r5, r6, r7}
 8006b58:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006b5a:	4c23      	ldr	r4, [pc, #140]	; (8006be8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8006b5c:	68a2      	ldr	r2, [r4, #8]
 8006b5e:	0752      	lsls	r2, r2, #29
 8006b60:	d50b      	bpl.n	8006b7a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006b62:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006b66:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b68:	f042 0220 	orr.w	r2, r2, #32
 8006b6c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8006b74:	b01a      	add	sp, #104	; 0x68
 8006b76:	bcf0      	pop	{r4, r5, r6, r7}
 8006b78:	4770      	bx	lr
 8006b7a:	68a8      	ldr	r0, [r5, #8]
 8006b7c:	f010 0004 	ands.w	r0, r0, #4
 8006b80:	d1f0      	bne.n	8006b64 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b82:	b1c6      	cbz	r6, 8006bb6 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006b84:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006bf0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8006b88:	684f      	ldr	r7, [r1, #4]
 8006b8a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8006b8e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006b92:	433a      	orrs	r2, r7
 8006b94:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b98:	68ad      	ldr	r5, [r5, #8]
 8006b9a:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b9c:	432a      	orrs	r2, r5
 8006b9e:	07d4      	lsls	r4, r2, #31
 8006ba0:	d413      	bmi.n	8006bca <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 8006ba2:	688a      	ldr	r2, [r1, #8]
 8006ba4:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8006ba8:	4910      	ldr	r1, [pc, #64]	; (8006bec <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006baa:	4316      	orrs	r6, r2
 8006bac:	4021      	ands	r1, r4
 8006bae:	430e      	orrs	r6, r1
 8006bb0:	f8cc 6008 	str.w	r6, [ip, #8]
 8006bb4:	e7db      	b.n	8006b6e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006bb6:	490e      	ldr	r1, [pc, #56]	; (8006bf0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8006bb8:	688a      	ldr	r2, [r1, #8]
 8006bba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006bbe:	608a      	str	r2, [r1, #8]
 8006bc0:	68a8      	ldr	r0, [r5, #8]
 8006bc2:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006bc4:	4302      	orrs	r2, r0
 8006bc6:	07d0      	lsls	r0, r2, #31
 8006bc8:	d505      	bpl.n	8006bd6 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bca:	2000      	movs	r0, #0
 8006bcc:	e7cf      	b.n	8006b6e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8006bce:	2002      	movs	r0, #2
}
 8006bd0:	b01a      	add	sp, #104	; 0x68
 8006bd2:	bcf0      	pop	{r4, r5, r6, r7}
 8006bd4:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006bd6:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bd8:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006bda:	4a04      	ldr	r2, [pc, #16]	; (8006bec <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006bdc:	4022      	ands	r2, r4
 8006bde:	608a      	str	r2, [r1, #8]
 8006be0:	e7c5      	b.n	8006b6e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006be2:	bf00      	nop
 8006be4:	40022000 	.word	0x40022000
 8006be8:	40022100 	.word	0x40022100
 8006bec:	fffff0e0 	.word	0xfffff0e0
 8006bf0:	40022300 	.word	0x40022300

08006bf4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bf4:	4907      	ldr	r1, [pc, #28]	; (8006c14 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006bf6:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8006bf8:	4b07      	ldr	r3, [pc, #28]	; (8006c18 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bfa:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006bfc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c00:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c02:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8006c06:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006c08:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c0c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8006c0e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8006c10:	60cb      	str	r3, [r1, #12]
 8006c12:	4770      	bx	lr
 8006c14:	e000ed00 	.word	0xe000ed00
 8006c18:	05fa0000 	.word	0x05fa0000

08006c1c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c1c:	4b19      	ldr	r3, [pc, #100]	; (8006c84 <HAL_NVIC_SetPriority+0x68>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c24:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c26:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c2a:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c2c:	2d04      	cmp	r5, #4
 8006c2e:	bf28      	it	cs
 8006c30:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c32:	2c06      	cmp	r4, #6
 8006c34:	d919      	bls.n	8006c6a <HAL_NVIC_SetPriority+0x4e>
 8006c36:	3b03      	subs	r3, #3
 8006c38:	f04f 34ff 	mov.w	r4, #4294967295
 8006c3c:	409c      	lsls	r4, r3
 8006c3e:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c42:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8006c46:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c48:	fa04 f405 	lsl.w	r4, r4, r5
 8006c4c:	ea21 0104 	bic.w	r1, r1, r4
 8006c50:	fa01 f103 	lsl.w	r1, r1, r3
 8006c54:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006c58:	db0a      	blt.n	8006c70 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c5a:	0109      	lsls	r1, r1, #4
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <HAL_NVIC_SetPriority+0x6c>)
 8006c5e:	b2c9      	uxtb	r1, r1
 8006c60:	4403      	add	r3, r0
 8006c62:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006c66:	bc30      	pop	{r4, r5}
 8006c68:	4770      	bx	lr
 8006c6a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	e7e8      	b.n	8006c42 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c70:	f000 000f 	and.w	r0, r0, #15
 8006c74:	0109      	lsls	r1, r1, #4
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <HAL_NVIC_SetPriority+0x70>)
 8006c78:	b2c9      	uxtb	r1, r1
 8006c7a:	4403      	add	r3, r0
 8006c7c:	7619      	strb	r1, [r3, #24]
 8006c7e:	bc30      	pop	{r4, r5}
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	e000ed00 	.word	0xe000ed00
 8006c88:	e000e100 	.word	0xe000e100
 8006c8c:	e000ecfc 	.word	0xe000ecfc

08006c90 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006c90:	2800      	cmp	r0, #0
 8006c92:	db07      	blt.n	8006ca4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c94:	2301      	movs	r3, #1
 8006c96:	f000 011f 	and.w	r1, r0, #31
 8006c9a:	4a03      	ldr	r2, [pc, #12]	; (8006ca8 <HAL_NVIC_EnableIRQ+0x18>)
 8006c9c:	0940      	lsrs	r0, r0, #5
 8006c9e:	408b      	lsls	r3, r1
 8006ca0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	e000e100 	.word	0xe000e100

08006cac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cac:	3801      	subs	r0, #1
 8006cae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006cb2:	d20d      	bcs.n	8006cd0 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cb4:	4b07      	ldr	r3, [pc, #28]	; (8006cd4 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006cb6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006cb8:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006cba:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cbc:	25f0      	movs	r5, #240	; 0xf0
 8006cbe:	4c06      	ldr	r4, [pc, #24]	; (8006cd8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cc0:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006cc2:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cc4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006cca:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8006ccc:	bc30      	pop	{r4, r5}
 8006cce:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	4770      	bx	lr
 8006cd4:	e000e010 	.word	0xe000e010
 8006cd8:	e000ed00 	.word	0xe000ed00

08006cdc <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006cdc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006ce0:	4a04      	ldr	r2, [pc, #16]	; (8006cf4 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	4904      	ldr	r1, [pc, #16]	; (8006cf8 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006ce6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cec:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 8006cee:	6048      	str	r0, [r1, #4]
}
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	e000ed00 	.word	0xe000ed00
 8006cf8:	e000ed90 	.word	0xe000ed90

08006cfc <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006cfc:	4a06      	ldr	r2, [pc, #24]	; (8006d18 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006cfe:	f040 0001 	orr.w	r0, r0, #1
 8006d02:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <HAL_MPU_Enable+0x20>)
 8006d04:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006d06:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d0c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006d0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006d12:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006d16:	4770      	bx	lr
 8006d18:	e000ed00 	.word	0xe000ed00
 8006d1c:	e000ed90 	.word	0xe000ed90

08006d20 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006d20:	4a12      	ldr	r2, [pc, #72]	; (8006d6c <HAL_MPU_ConfigRegion+0x4c>)
 8006d22:	7843      	ldrb	r3, [r0, #1]
 8006d24:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8006d26:	7801      	ldrb	r1, [r0, #0]
 8006d28:	b1e9      	cbz	r1, 8006d66 <HAL_MPU_ConfigRegion+0x46>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006d2a:	6843      	ldr	r3, [r0, #4]
{
 8006d2c:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 8006d2e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006d30:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d32:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006d34:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006d36:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006d38:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d3a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006d3e:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006d40:	430b      	orrs	r3, r1
 8006d42:	7a01      	ldrb	r1, [r0, #8]
 8006d44:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006d48:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006d4a:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006d4e:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006d50:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8006d54:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8006d58:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8006d5c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8006d60:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d62:	6113      	str	r3, [r2, #16]
}
 8006d64:	4770      	bx	lr
    MPU->RBAR = 0x00;
 8006d66:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8006d68:	6111      	str	r1, [r2, #16]
 8006d6a:	4770      	bx	lr
 8006d6c:	e000ed90 	.word	0xe000ed90

08006d70 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006d70:	b470      	push	{r4, r5, r6}
 8006d72:	9c03      	ldr	r4, [sp, #12]

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006d74:	e9d0 5600 	ldrd	r5, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006d78:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8006d7c:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006d7e:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006d82:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8006d86:	ea43 0304 	orr.w	r3, r3, r4
 8006d8a:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006d8c:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006d8e:	d008      	beq.n	8006da2 <DMA2D_SetConfig+0x32>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8006d90:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8006d94:	d002      	beq.n	8006d9c <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006d96:	60e9      	str	r1, [r5, #12]
  }
}
 8006d98:	bc70      	pop	{r4, r5, r6}
 8006d9a:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8006d9c:	6169      	str	r1, [r5, #20]
}
 8006d9e:	bc70      	pop	{r4, r5, r6}
 8006da0:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006da2:	6883      	ldr	r3, [r0, #8]
 8006da4:	b1b3      	cbz	r3, 8006dd4 <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d017      	beq.n	8006dda <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006daa:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006dac:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006db0:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006db4:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006db6:	d01e      	beq.n	8006df6 <DMA2D_SetConfig+0x86>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006db8:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006dba:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006dbe:	d00f      	beq.n	8006de0 <DMA2D_SetConfig+0x70>
      tmp2 = (tmp2 >> 20U);
 8006dc0:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 8006dc2:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006dc4:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 8006dc6:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006dc8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8006dcc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8006dd0:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006dd4:	63a9      	str	r1, [r5, #56]	; 0x38
}
 8006dd6:	bc70      	pop	{r4, r5, r6}
 8006dd8:	4770      	bx	lr
      tmp = (tmp3 | tmp2 | tmp4);
 8006dda:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006dde:	e7f9      	b.n	8006dd4 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 8006de0:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 8006de2:	0ae4      	lsrs	r4, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006de4:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 8006de6:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006de8:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8006dec:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8006df0:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8006df4:	e7ee      	b.n	8006dd4 <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 8006df6:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 8006df8:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006dfa:	02c9      	lsls	r1, r1, #11
 8006dfc:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8006e00:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8006e04:	e7e6      	b.n	8006dd4 <DMA2D_SetConfig+0x64>
 8006e06:	bf00      	nop

08006e08 <HAL_DMA2D_MspInit>:
}
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop

08006e0c <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	d036      	beq.n	8006e7e <HAL_DMA2D_Init+0x72>
{
 8006e10:	b570      	push	{r4, r5, r6, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006e12:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8006e16:	4604      	mov	r4, r0
 8006e18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e1c:	b353      	cbz	r3, 8006e74 <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006e1e:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006e20:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006e22:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006e24:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006e26:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006e2a:	4916      	ldr	r1, [pc, #88]	; (8006e84 <HAL_DMA2D_Init+0x78>)
 8006e2c:	681e      	ldr	r6, [r3, #0]
 8006e2e:	6862      	ldr	r2, [r4, #4]
 8006e30:	4031      	ands	r1, r6
 8006e32:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006e34:	4814      	ldr	r0, [pc, #80]	; (8006e88 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006e36:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006e38:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006e3a:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006e3c:	69a1      	ldr	r1, [r4, #24]
 8006e3e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8006e40:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006e42:	4912      	ldr	r1, [pc, #72]	; (8006e8c <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006e44:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006e46:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006e48:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006e4a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006e4c:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e50:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006e52:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006e54:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006e56:	0552      	lsls	r2, r2, #21
 8006e58:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006e5a:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006e5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006e5e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 8006e62:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006e64:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006e6c:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006e6e:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8006e74:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8006e78:	f7ff ffc6 	bl	8006e08 <HAL_DMA2D_MspInit>
 8006e7c:	e7cf      	b.n	8006e1e <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 8006e7e:	2001      	movs	r0, #1
}
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	fff8ffbf 	.word	0xfff8ffbf
 8006e88:	fffffef8 	.word	0xfffffef8
 8006e8c:	ffff0000 	.word	0xffff0000

08006e90 <HAL_DMA2D_Start>:
{
 8006e90:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8006e92:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
{
 8006e96:	b083      	sub	sp, #12
  __HAL_LOCK(hdma2d);
 8006e98:	2d01      	cmp	r5, #1
 8006e9a:	d011      	beq.n	8006ec0 <HAL_DMA2D_Start+0x30>
 8006e9c:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006e9e:	9f08      	ldr	r7, [sp, #32]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ea0:	2502      	movs	r5, #2
 8006ea2:	4604      	mov	r4, r0
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006ea4:	9700      	str	r7, [sp, #0]
  __HAL_LOCK(hdma2d);
 8006ea6:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006eaa:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006eae:	f7ff ff5f 	bl	8006d70 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8006eb2:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8006eb4:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8006eb6:	6813      	ldr	r3, [r2, #0]
 8006eb8:	4333      	orrs	r3, r6
 8006eba:	6013      	str	r3, [r2, #0]
}
 8006ebc:	b003      	add	sp, #12
 8006ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma2d);
 8006ec0:	2002      	movs	r0, #2
}
 8006ec2:	b003      	add	sp, #12
 8006ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ec6:	bf00      	nop

08006ec8 <HAL_DMA2D_CLUTLoad>:
{
 8006ec8:	b430      	push	{r4, r5}
 8006eca:	b084      	sub	sp, #16
  __HAL_LOCK(hdma2d);
 8006ecc:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
{
 8006ed0:	ad04      	add	r5, sp, #16
  __HAL_LOCK(hdma2d);
 8006ed2:	2c01      	cmp	r4, #1
{
 8006ed4:	e905 000e 	stmdb	r5, {r1, r2, r3}
 8006ed8:	e9dd 5301 	ldrd	r5, r3, [sp, #4]
 8006edc:	9903      	ldr	r1, [sp, #12]
  __HAL_LOCK(hdma2d);
 8006ede:	d02b      	beq.n	8006f38 <HAL_DMA2D_CLUTLoad+0x70>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ee0:	2202      	movs	r2, #2
  __HAL_LOCK(hdma2d);
 8006ee2:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ee4:	f880 2061 	strb.w	r2, [r0, #97]	; 0x61
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006ee8:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdma2d);
 8006eea:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006eee:	b18a      	cbz	r2, 8006f14 <HAL_DMA2D_CLUTLoad+0x4c>
    WRITE_REG(hdma2d->Instance->FGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8006ef0:	6802      	ldr	r2, [r0, #0]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM),
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	4c12      	ldr	r4, [pc, #72]	; (8006f40 <HAL_DMA2D_CLUTLoad+0x78>)
  return HAL_OK;
 8006ef6:	2000      	movs	r0, #0
    WRITE_REG(hdma2d->Instance->FGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8006ef8:	62d5      	str	r5, [r2, #44]	; 0x2c
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM),
 8006efa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006efe:	69d1      	ldr	r1, [r2, #28]
 8006f00:	400c      	ands	r4, r1
 8006f02:	4323      	orrs	r3, r4
 8006f04:	61d3      	str	r3, [r2, #28]
    SET_BIT(hdma2d->Instance->FGPFCCR, DMA2D_FGPFCCR_START);
 8006f06:	69d3      	ldr	r3, [r2, #28]
 8006f08:	f043 0320 	orr.w	r3, r3, #32
 8006f0c:	61d3      	str	r3, [r2, #28]
}
 8006f0e:	b004      	add	sp, #16
 8006f10:	bc30      	pop	{r4, r5}
 8006f12:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8006f14:	6802      	ldr	r2, [r0, #0]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 8006f16:	011b      	lsls	r3, r3, #4
 8006f18:	4c09      	ldr	r4, [pc, #36]	; (8006f40 <HAL_DMA2D_CLUTLoad+0x78>)
    WRITE_REG(hdma2d->Instance->BGCMAR, (uint32_t)CLUTCfg.pCLUT);
 8006f1a:	6315      	str	r5, [r2, #48]	; 0x30
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 8006f1c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006f20:	6a51      	ldr	r1, [r2, #36]	; 0x24
  return HAL_OK;
 8006f22:	9806      	ldr	r0, [sp, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CS | DMA2D_BGPFCCR_CCM),
 8006f24:	400c      	ands	r4, r1
 8006f26:	4323      	orrs	r3, r4
 8006f28:	6253      	str	r3, [r2, #36]	; 0x24
    SET_BIT(hdma2d->Instance->BGPFCCR, DMA2D_BGPFCCR_START);
 8006f2a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006f2c:	f043 0320 	orr.w	r3, r3, #32
 8006f30:	6253      	str	r3, [r2, #36]	; 0x24
}
 8006f32:	b004      	add	sp, #16
 8006f34:	bc30      	pop	{r4, r5}
 8006f36:	4770      	bx	lr
  __HAL_LOCK(hdma2d);
 8006f38:	2002      	movs	r0, #2
}
 8006f3a:	b004      	add	sp, #16
 8006f3c:	bc30      	pop	{r4, r5}
 8006f3e:	4770      	bx	lr
 8006f40:	ffff00ef 	.word	0xffff00ef

08006f44 <HAL_DMA2D_PollForTransfer>:
{
 8006f44:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8006f46:	2300      	movs	r3, #0
{
 8006f48:	b082      	sub	sp, #8
 8006f4a:	4605      	mov	r5, r0
 8006f4c:	460c      	mov	r4, r1
  __IO uint32_t isrflags = 0x0U;
 8006f4e:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006f50:	6803      	ldr	r3, [r0, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	07d2      	lsls	r2, r2, #31
 8006f56:	d40f      	bmi.n	8006f78 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006f58:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006f5a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006f5c:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 8006f5e:	0692      	lsls	r2, r2, #26
 8006f60:	d433      	bmi.n	8006fca <HAL_DMA2D_PollForTransfer+0x86>
  __HAL_UNLOCK(hdma2d);
 8006f62:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006f64:	2412      	movs	r4, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006f66:	2101      	movs	r1, #1
  return HAL_OK;
 8006f68:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006f6a:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8006f6c:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006f70:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
}
 8006f74:	b002      	add	sp, #8
 8006f76:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8006f78:	f7ff f842 	bl	8006000 <HAL_GetTick>
 8006f7c:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006f7e:	682b      	ldr	r3, [r5, #0]
 8006f80:	e001      	b.n	8006f86 <HAL_DMA2D_PollForTransfer+0x42>
      if (Timeout != HAL_MAX_DELAY)
 8006f82:	1c60      	adds	r0, r4, #1
 8006f84:	d148      	bne.n	8007018 <HAL_DMA2D_PollForTransfer+0xd4>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	0791      	lsls	r1, r2, #30
 8006f8a:	d4e5      	bmi.n	8006f58 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006f90:	9a01      	ldr	r2, [sp, #4]
 8006f92:	f012 0f21 	tst.w	r2, #33	; 0x21
 8006f96:	d0f4      	beq.n	8006f82 <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006f98:	9a01      	ldr	r2, [sp, #4]
 8006f9a:	0696      	lsls	r6, r2, #26
 8006f9c:	d503      	bpl.n	8006fa6 <HAL_DMA2D_PollForTransfer+0x62>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006f9e:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006fa0:	f042 0202 	orr.w	r2, r2, #2
 8006fa4:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006fa6:	9a01      	ldr	r2, [sp, #4]
 8006fa8:	07d4      	lsls	r4, r2, #31
 8006faa:	d503      	bpl.n	8006fb4 <HAL_DMA2D_PollForTransfer+0x70>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006fac:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006fae:	f042 0201 	orr.w	r2, r2, #1
 8006fb2:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006fb4:	2421      	movs	r4, #33	; 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006fb6:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 8006fb8:	2200      	movs	r2, #0
        return HAL_ERROR;
 8006fba:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006fbc:	609c      	str	r4, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006fbe:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 8006fc2:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
}
 8006fc6:	b002      	add	sp, #8
 8006fc8:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8006fca:	f7ff f819 	bl	8006000 <HAL_GetTick>
 8006fce:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	e001      	b.n	8006fd8 <HAL_DMA2D_PollForTransfer+0x94>
      if (Timeout != HAL_MAX_DELAY)
 8006fd4:	1c61      	adds	r1, r4, #1
 8006fd6:	d132      	bne.n	800703e <HAL_DMA2D_PollForTransfer+0xfa>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	06d2      	lsls	r2, r2, #27
 8006fdc:	d4c1      	bmi.n	8006f62 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006fe2:	9a01      	ldr	r2, [sp, #4]
 8006fe4:	f012 0f29 	tst.w	r2, #41	; 0x29
 8006fe8:	d0f4      	beq.n	8006fd4 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006fea:	9a01      	ldr	r2, [sp, #4]
 8006fec:	0716      	lsls	r6, r2, #28
 8006fee:	d503      	bpl.n	8006ff8 <HAL_DMA2D_PollForTransfer+0xb4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006ff0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006ff2:	f042 0204 	orr.w	r2, r2, #4
 8006ff6:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006ff8:	9a01      	ldr	r2, [sp, #4]
 8006ffa:	0694      	lsls	r4, r2, #26
 8006ffc:	d503      	bpl.n	8007006 <HAL_DMA2D_PollForTransfer+0xc2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006ffe:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8007000:	f042 0202 	orr.w	r2, r2, #2
 8007004:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007006:	9a01      	ldr	r2, [sp, #4]
 8007008:	07d0      	lsls	r0, r2, #31
 800700a:	d503      	bpl.n	8007014 <HAL_DMA2D_PollForTransfer+0xd0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800700c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800700e:	f042 0201 	orr.w	r2, r2, #1
 8007012:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007014:	2429      	movs	r4, #41	; 0x29
 8007016:	e7ce      	b.n	8006fb6 <HAL_DMA2D_PollForTransfer+0x72>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007018:	f7fe fff2 	bl	8006000 <HAL_GetTick>
 800701c:	1b80      	subs	r0, r0, r6
 800701e:	42a0      	cmp	r0, r4
 8007020:	d801      	bhi.n	8007026 <HAL_DMA2D_PollForTransfer+0xe2>
 8007022:	2c00      	cmp	r4, #0
 8007024:	d1ab      	bne.n	8006f7e <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007028:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 800702a:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800702c:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 8007030:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 8007032:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007036:	666b      	str	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007038:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
          return HAL_TIMEOUT;
 800703c:	e79a      	b.n	8006f74 <HAL_DMA2D_PollForTransfer+0x30>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800703e:	f7fe ffdf 	bl	8006000 <HAL_GetTick>
 8007042:	1b80      	subs	r0, r0, r6
 8007044:	42a0      	cmp	r0, r4
 8007046:	d8ee      	bhi.n	8007026 <HAL_DMA2D_PollForTransfer+0xe2>
 8007048:	2c00      	cmp	r4, #0
 800704a:	d1c1      	bne.n	8006fd0 <HAL_DMA2D_PollForTransfer+0x8c>
 800704c:	e7eb      	b.n	8007026 <HAL_DMA2D_PollForTransfer+0xe2>
 800704e:	bf00      	nop

08007050 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8007050:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 8007054:	2a01      	cmp	r2, #1
 8007056:	d063      	beq.n	8007120 <HAL_DMA2D_ConfigLayer+0xd0>
 8007058:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800705a:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800705e:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007060:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8007064:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 8007066:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007068:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 800706c:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007070:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007072:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8007074:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007076:	0512      	lsls	r2, r2, #20
 8007078:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800707a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800707e:	f1a4 0609 	sub.w	r6, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007082:	4322      	orrs	r2, r4
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007084:	2e01      	cmp	r6, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007086:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800708a:	d922      	bls.n	80070d2 <HAL_DMA2D_ConfigLayer+0x82>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800708c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800708e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007092:	b981      	cbnz	r1, 80070b6 <HAL_DMA2D_ConfigLayer+0x66>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	4923      	ldr	r1, [pc, #140]	; (8007124 <HAL_DMA2D_ConfigLayer+0xd4>)
 8007098:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800709a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800709c:	4029      	ands	r1, r5
 800709e:	430a      	orrs	r2, r1
 80070a0:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80070a2:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 80070a4:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80070a6:	2101      	movs	r1, #1
  return HAL_OK;
 80070a8:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80070aa:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 80070ae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 80070b2:	bc70      	pop	{r4, r5, r6}
 80070b4:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80070b6:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80070b8:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80070ba:	d129      	bne.n	8007110 <HAL_DMA2D_ConfigLayer+0xc0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80070bc:	69e6      	ldr	r6, [r4, #28]
 80070be:	491a      	ldr	r1, [pc, #104]	; (8007128 <HAL_DMA2D_ConfigLayer+0xd8>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80070c0:	6c05      	ldr	r5, [r0, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80070c2:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80070c4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80070c6:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 80070ca:	430a      	orrs	r2, r1
 80070cc:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80070ce:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80070d0:	e7e8      	b.n	80070a4 <HAL_DMA2D_ConfigLayer+0x54>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80070d2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80070d4:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 80070d8:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80070da:	b161      	cbz	r1, 80070f6 <HAL_DMA2D_ConfigLayer+0xa6>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80070dc:	6819      	ldr	r1, [r3, #0]
 80070de:	4c11      	ldr	r4, [pc, #68]	; (8007124 <HAL_DMA2D_ConfigLayer+0xd4>)
 80070e0:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80070e2:	6b45      	ldr	r5, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80070e4:	4034      	ands	r4, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80070e6:	6a86      	ldr	r6, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80070e8:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80070ec:	4322      	orrs	r2, r4
 80070ee:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80070f0:	610e      	str	r6, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80070f2:	620d      	str	r5, [r1, #32]
 80070f4:	e7d6      	b.n	80070a4 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80070f6:	6819      	ldr	r1, [r3, #0]
 80070f8:	4c0a      	ldr	r4, [pc, #40]	; (8007124 <HAL_DMA2D_ConfigLayer+0xd4>)
 80070fa:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80070fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80070fe:	402c      	ands	r4, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007100:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007102:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007106:	4322      	orrs	r2, r4
 8007108:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800710a:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800710c:	6288      	str	r0, [r1, #40]	; 0x28
 800710e:	e7c9      	b.n	80070a4 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007110:	69e5      	ldr	r5, [r4, #28]
 8007112:	4904      	ldr	r1, [pc, #16]	; (8007124 <HAL_DMA2D_ConfigLayer+0xd4>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007114:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007116:	4029      	ands	r1, r5
 8007118:	430a      	orrs	r2, r1
 800711a:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800711c:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800711e:	e7c1      	b.n	80070a4 <HAL_DMA2D_ConfigLayer+0x54>
  __HAL_LOCK(hdma2d);
 8007120:	2002      	movs	r0, #2
}
 8007122:	4770      	bx	lr
 8007124:	00ccfff0 	.word	0x00ccfff0
 8007128:	00c0fff0 	.word	0x00c0fff0

0800712c <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007130:	4605      	mov	r5, r0
 8007132:	4688      	mov	r8, r1
 8007134:	4617      	mov	r7, r2
 8007136:	4699      	mov	r9, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007138:	f7fe ff62 	bl	8006000 <HAL_GetTick>
 800713c:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800713e:	e005      	b.n	800714c <DSI_ShortWrite+0x20>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8007140:	f7fe ff5e 	bl	8006000 <HAL_GetTick>
 8007144:	1b84      	subs	r4, r0, r6
 8007146:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800714a:	d80e      	bhi.n	800716a <DSI_ShortWrite+0x3e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800714c:	682c      	ldr	r4, [r5, #0]
 800714e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007150:	07db      	lsls	r3, r3, #31
 8007152:	d5f5      	bpl.n	8007140 <DSI_ShortWrite+0x14>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007154:	ea47 2109 	orr.w	r1, r7, r9, lsl #8
 8007158:	9b08      	ldr	r3, [sp, #32]

  return HAL_OK;
 800715a:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800715c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007160:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 8007164:	66e1      	str	r1, [r4, #108]	; 0x6c
}
 8007166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800716a:	2003      	movs	r0, #3
}
 800716c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007170 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop

08007174 <HAL_DSI_Init>:
  if (hdsi == NULL)
 8007174:	2800      	cmp	r0, #0
 8007176:	f000 80b3 	beq.w	80072e0 <HAL_DSI_Init+0x16c>
{
 800717a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800717c:	7c43      	ldrb	r3, [r0, #17]
{
 800717e:	b083      	sub	sp, #12
 8007180:	460d      	mov	r5, r1
 8007182:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 80a8 	beq.w	80072da <HAL_DSI_Init+0x166>
  __HAL_DSI_REG_ENABLE(hdsi);
 800718a:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 800718c:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 800718e:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007190:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8007192:	9200      	str	r2, [sp, #0]
 8007194:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8007198:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800719c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80071a0:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80071a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 80071ac:	f7fe ff28 	bl	8006000 <HAL_GetTick>
 80071b0:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80071b2:	e006      	b.n	80071c2 <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80071b4:	f7fe ff24 	bl	8006000 <HAL_GetTick>
 80071b8:	1b83      	subs	r3, r0, r6
 80071ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071be:	f200 8089 	bhi.w	80072d4 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80071c8:	04d1      	lsls	r1, r2, #19
 80071ca:	d5f3      	bpl.n	80071b4 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80071cc:	686a      	ldr	r2, [r5, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 80071ce:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80071d0:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80071d4:	682e      	ldr	r6, [r5, #0]
 80071d6:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80071d8:	4942      	ldr	r1, [pc, #264]	; (80072e4 <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80071da:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 80071de:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80071e0:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80071e2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80071e6:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80071ea:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80071ee:	430a      	orrs	r2, r1
 80071f0:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80071f4:	9001      	str	r0, [sp, #4]
 80071f6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80071fa:	f042 0201 	orr.w	r2, r2, #1
 80071fe:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8007202:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	9301      	str	r3, [sp, #4]
 800720c:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 800720e:	f7fe fef7 	bl	8006000 <HAL_GetTick>
 8007212:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007214:	e005      	b.n	8007222 <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007216:	f7fe fef3 	bl	8006000 <HAL_GetTick>
 800721a:	1b80      	subs	r0, r0, r6
 800721c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007220:	d858      	bhi.n	80072d4 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007228:	05d2      	lsls	r2, r2, #23
 800722a:	d5f4      	bpl.n	8007216 <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800722c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007230:	f246 1ca8 	movw	ip, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007234:	6867      	ldr	r7, [r4, #4]
  hdsi->Instance->IER[0U] = 0U;
 8007236:	2100      	movs	r1, #0
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007238:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800723c:	68e6      	ldr	r6, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800723e:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007242:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8007246:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800724a:	f022 0203 	bic.w	r2, r2, #3
 800724e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007252:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007256:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007258:	4338      	orrs	r0, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800725a:	2a01      	cmp	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800725c:	f040 0001 	orr.w	r0, r0, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007260:	bf38      	it	cc
 8007262:	2201      	movcc	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007264:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8007268:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800726c:	4617      	mov	r7, r2
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800726e:	f020 0003 	bic.w	r0, r0, #3
 8007272:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007276:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800727a:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800727c:	4332      	orrs	r2, r6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800727e:	682d      	ldr	r5, [r5, #0]
 8007280:	f000 0003 	and.w	r0, r0, #3
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007284:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007288:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800728a:	fb0c f505 	mul.w	r5, ip, r5
 800728e:	4a16      	ldr	r2, [pc, #88]	; (80072e8 <HAL_DSI_Init+0x174>)
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007290:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007294:	fb02 f207 	mul.w	r2, r2, r7
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007298:	609e      	str	r6, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800729a:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800729c:	4082      	lsls	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800729e:	ea46 060e 	orr.w	r6, r6, lr
 80072a2:	609e      	str	r6, [r3, #8]
  hdsi->State = HAL_DSI_STATE_READY;
 80072a4:	2601      	movs	r6, #1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80072a6:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80072aa:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80072ae:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80072b2:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 80072b6:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80072b8:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 80072bc:	432a      	orrs	r2, r5
 80072be:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 80072c2:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80072c6:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80072ca:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 80072cc:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 80072ce:	7466      	strb	r6, [r4, #17]
}
 80072d0:	b003      	add	sp, #12
 80072d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 80072d4:	2003      	movs	r0, #3
}
 80072d6:	b003      	add	sp, #12
 80072d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 80072da:	f7ff ff49 	bl	8007170 <HAL_DSI_MspInit>
 80072de:	e754      	b.n	800718a <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 80072e0:	2001      	movs	r0, #1
}
 80072e2:	4770      	bx	lr
 80072e4:	fffc8603 	.word	0xfffc8603
 80072e8:	003d0900 	.word	0x003d0900

080072ec <HAL_DSI_TearingEffectCallback>:
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop

080072f0 <HAL_DSI_EndOfRefreshCallback>:
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop

080072f4 <HAL_DSI_ErrorCallback>:
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop

080072f8 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80072f8:	6803      	ldr	r3, [r0, #0]
 80072fa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80072fe:	07d1      	lsls	r1, r2, #31
{
 8007300:	b510      	push	{r4, lr}
 8007302:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007304:	d503      	bpl.n	800730e <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8007306:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800730a:	07d2      	lsls	r2, r2, #31
 800730c:	d462      	bmi.n	80073d4 <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800730e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007312:	0791      	lsls	r1, r2, #30
 8007314:	d503      	bpl.n	800731e <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8007316:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800731a:	0792      	lsls	r2, r2, #30
 800731c:	d44f      	bmi.n	80073be <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800731e:	69a3      	ldr	r3, [r4, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d04b      	beq.n	80073bc <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8007324:	6821      	ldr	r1, [r4, #0]
 8007326:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800732a:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800732e:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007332:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007334:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007338:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800733a:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800733c:	b119      	cbz	r1, 8007346 <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800733e:	6961      	ldr	r1, [r4, #20]
 8007340:	f041 0101 	orr.w	r1, r1, #1
 8007344:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8007346:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800734a:	d003      	beq.n	8007354 <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800734c:	6962      	ldr	r2, [r4, #20]
 800734e:	f042 0202 	orr.w	r2, r2, #2
 8007352:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8007354:	07d8      	lsls	r0, r3, #31
 8007356:	d503      	bpl.n	8007360 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8007358:	6962      	ldr	r2, [r4, #20]
 800735a:	f042 0204 	orr.w	r2, r2, #4
 800735e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8007360:	0799      	lsls	r1, r3, #30
 8007362:	d503      	bpl.n	800736c <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8007364:	6962      	ldr	r2, [r4, #20]
 8007366:	f042 0208 	orr.w	r2, r2, #8
 800736a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800736c:	f013 0f0c 	tst.w	r3, #12
 8007370:	d003      	beq.n	800737a <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8007372:	6962      	ldr	r2, [r4, #20]
 8007374:	f042 0210 	orr.w	r2, r2, #16
 8007378:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800737a:	06da      	lsls	r2, r3, #27
 800737c:	d503      	bpl.n	8007386 <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800737e:	6962      	ldr	r2, [r4, #20]
 8007380:	f042 0220 	orr.w	r2, r2, #32
 8007384:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8007386:	0698      	lsls	r0, r3, #26
 8007388:	d503      	bpl.n	8007392 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800738a:	6962      	ldr	r2, [r4, #20]
 800738c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007390:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8007392:	0659      	lsls	r1, r3, #25
 8007394:	d503      	bpl.n	800739e <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8007396:	6962      	ldr	r2, [r4, #20]
 8007398:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800739c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800739e:	061a      	lsls	r2, r3, #24
 80073a0:	d503      	bpl.n	80073aa <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80073a2:	6962      	ldr	r2, [r4, #20]
 80073a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073a8:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80073aa:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 80073ae:	d003      	beq.n	80073b8 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80073b0:	6963      	ldr	r3, [r4, #20]
 80073b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073b6:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80073b8:	6963      	ldr	r3, [r4, #20]
 80073ba:	b93b      	cbnz	r3, 80073cc <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80073bc:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80073be:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80073c0:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80073c2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80073c6:	f7ff ff93 	bl	80072f0 <HAL_DSI_EndOfRefreshCallback>
 80073ca:	e7a8      	b.n	800731e <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 80073cc:	4620      	mov	r0, r4
 80073ce:	f7ff ff91 	bl	80072f4 <HAL_DSI_ErrorCallback>
}
 80073d2:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80073d4:	2201      	movs	r2, #1
 80073d6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 80073da:	f7ff ff87 	bl	80072ec <HAL_DSI_TearingEffectCallback>
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	e795      	b.n	800730e <HAL_DSI_IRQHandler+0x16>
 80073e2:	bf00      	nop

080073e4 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80073e4:	7c03      	ldrb	r3, [r0, #16]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	f000 8113 	beq.w	8007612 <HAL_DSI_ConfigVideoMode+0x22e>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80073ec:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 80073ee:	2201      	movs	r2, #1
{
 80073f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 80073f4:	7402      	strb	r2, [r0, #16]
  if (VidCfg->ColorCoding == DSI_RGB666)
 80073f6:	4604      	mov	r4, r0
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80073f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 80073fa:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80073fc:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8007400:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8007404:	4e84      	ldr	r6, [pc, #528]	; (8007618 <HAL_DSI_ConfigVideoMode+0x234>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8007406:	2803      	cmp	r0, #3
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8007408:	4d84      	ldr	r5, [pc, #528]	; (800761c <HAL_DSI_ConfigVideoMode+0x238>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800740a:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800740e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8007410:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007414:	f022 0201 	bic.w	r2, r2, #1
 8007418:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800741c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800741e:	f022 0203 	bic.w	r2, r2, #3
 8007422:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8007424:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8007426:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800742a:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800742e:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8007430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007432:	ea06 0602 	and.w	r6, r6, r2
 8007436:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8007438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800743a:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800743e:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8007442:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8007444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007446:	ea02 0205 	and.w	r2, r2, r5
 800744a:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800744c:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 800744e:	ea47 0708 	orr.w	r7, r7, r8
 8007452:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8007454:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 8007456:	ea06 0605 	and.w	r6, r6, r5
 800745a:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800745c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800745e:	ea45 050e 	orr.w	r5, r5, lr
 8007462:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8007464:	68dd      	ldr	r5, [r3, #12]
 8007466:	f025 0503 	bic.w	r5, r5, #3
 800746a:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	ea42 020c 	orr.w	r2, r2, ip
 8007472:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007474:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8007476:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007478:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800747c:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007480:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8007482:	ea42 0206 	orr.w	r2, r2, r6
 8007486:	695d      	ldr	r5, [r3, #20]
 8007488:	ea42 0207 	orr.w	r2, r2, r7
 800748c:	ea42 0205 	orr.w	r2, r2, r5
 8007490:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8007492:	691a      	ldr	r2, [r3, #16]
 8007494:	f022 020f 	bic.w	r2, r2, #15
 8007498:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800749a:	691a      	ldr	r2, [r3, #16]
 800749c:	ea42 0200 	orr.w	r2, r2, r0
 80074a0:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80074a2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80074a6:	f022 020e 	bic.w	r2, r2, #14
 80074aa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80074ae:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80074b2:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80074b6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 80074ba:	d107      	bne.n	80074cc <HAL_DSI_ConfigVideoMode+0xe8>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80074bc:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80074be:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80074c0:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80074c4:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	432a      	orrs	r2, r5
 80074ca:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80074cc:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80074ce:	2600      	movs	r6, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80074d0:	4a53      	ldr	r2, [pc, #332]	; (8007620 <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80074d2:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80074d4:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80074d6:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80074da:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80074de:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80074e0:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80074e2:	4f50      	ldr	r7, [pc, #320]	; (8007624 <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80074e4:	4305      	orrs	r5, r0
 80074e6:	649d      	str	r5, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80074e8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80074ea:	4010      	ands	r0, r2
 80074ec:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80074ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80074f0:	484d      	ldr	r0, [pc, #308]	; (8007628 <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80074f2:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80074f6:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80074fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80074fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074fe:	4017      	ands	r7, r2
 8007500:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8007502:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8007504:	ea45 050e 	orr.w	r5, r5, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8007508:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800750c:	651d      	str	r5, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800750e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8007510:	4005      	ands	r5, r0
 8007512:	655d      	str	r5, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8007514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007516:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800751a:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800751e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8007520:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007522:	4002      	ands	r2, r0
 8007524:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8007526:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8007528:	4a3b      	ldr	r2, [pc, #236]	; (8007618 <HAL_DSI_ConfigVideoMode+0x234>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800752a:	ea47 070e 	orr.w	r7, r7, lr
 800752e:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8007530:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8007532:	4007      	ands	r7, r0

  return HAL_OK;
 8007534:	4630      	mov	r0, r6
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8007536:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8007538:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 800753a:	ea45 050c 	orr.w	r5, r5, ip
 800753e:	65dd      	str	r5, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8007540:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8007542:	402a      	ands	r2, r5
 8007544:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8007546:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8007548:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800754a:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800754e:	4315      	orrs	r5, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8007550:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8007554:	661d      	str	r5, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8007556:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8007558:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 800755c:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800755e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007560:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8007564:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8007568:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800756a:	699f      	ldr	r7, [r3, #24]
 800756c:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 8007570:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8007572:	699d      	ldr	r5, [r3, #24]
 8007574:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8007578:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800757c:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800757e:	699d      	ldr	r5, [r3, #24]
 8007580:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007584:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8007586:	699a      	ldr	r2, [r3, #24]
 8007588:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800758c:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8007590:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8007592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007594:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007598:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800759a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800759c:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80075a0:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80075a4:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80075a6:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80075a8:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 80075ac:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80075ae:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80075b0:	ea45 050e 	orr.w	r5, r5, lr
 80075b4:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80075b6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80075b8:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 80075bc:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80075be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075c0:	ea42 020c 	orr.w	r2, r2, ip
 80075c4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80075c6:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80075c8:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80075ca:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80075ce:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80075d2:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80075d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075d6:	432a      	orrs	r2, r5
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80075d8:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80075dc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80075de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80075e4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80075e6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80075e8:	ea45 050e 	orr.w	r5, r5, lr
 80075ec:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80075ee:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80075f0:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 80075f4:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80075f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80075f8:	ea41 010c 	orr.w	r1, r1, ip
 80075fc:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80075fe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007600:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8007604:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8007606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007608:	433a      	orrs	r2, r7
 800760a:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 800760c:	7426      	strb	r6, [r4, #16]
}
 800760e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 8007612:	2002      	movs	r0, #2
}
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	ffffc000 	.word	0xffffc000
 800761c:	ffffe000 	.word	0xffffe000
 8007620:	fffff000 	.word	0xfffff000
 8007624:	ffff8000 	.word	0xffff8000
 8007628:	fffffc00 	.word	0xfffffc00

0800762c <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800762c:	7c02      	ldrb	r2, [r0, #16]
 800762e:	2a01      	cmp	r2, #1
 8007630:	d00e      	beq.n	8007650 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007632:	6802      	ldr	r2, [r0, #0]
 8007634:	4603      	mov	r3, r0
{
 8007636:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007638:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800763a:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800763c:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 8007640:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007642:	62d4      	str	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8007644:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8007646:	4321      	orrs	r1, r4
 8007648:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 800764a:	741d      	strb	r5, [r3, #16]
}
 800764c:	bc30      	pop	{r4, r5}
 800764e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007650:	2002      	movs	r0, #2
}
 8007652:	4770      	bx	lr

08007654 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007654:	7c03      	ldrb	r3, [r0, #16]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d021      	beq.n	800769e <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800765a:	6803      	ldr	r3, [r0, #0]
 800765c:	2100      	movs	r1, #0
 800765e:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8007660:	4608      	mov	r0, r1
{
 8007662:	b410      	push	{r4}
 8007664:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 8007666:	9100      	str	r1, [sp, #0]
 8007668:	685c      	ldr	r4, [r3, #4]
 800766a:	f044 0401 	orr.w	r4, r4, #1
 800766e:	605c      	str	r4, [r3, #4]
 8007670:	685c      	ldr	r4, [r3, #4]
 8007672:	f004 0401 	and.w	r4, r4, #1
 8007676:	9400      	str	r4, [sp, #0]
 8007678:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800767a:	9101      	str	r1, [sp, #4]
 800767c:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8007680:	f044 0408 	orr.w	r4, r4, #8
 8007684:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 8007688:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 800768c:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800768e:	f003 0308 	and.w	r3, r3, #8
 8007692:	9301      	str	r3, [sp, #4]
 8007694:	9b01      	ldr	r3, [sp, #4]
}
 8007696:	b003      	add	sp, #12
 8007698:	f85d 4b04 	ldr.w	r4, [sp], #4
 800769c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800769e:	2002      	movs	r0, #2
}
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop

080076a4 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80076a4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80076a6:	7c05      	ldrb	r5, [r0, #16]
{
 80076a8:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80076aa:	2d01      	cmp	r5, #1
 80076ac:	d00a      	beq.n	80076c4 <HAL_DSI_ShortWrite+0x20>

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80076ae:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdsi);
 80076b0:	2501      	movs	r5, #1
 80076b2:	4604      	mov	r4, r0
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80076b4:	9600      	str	r6, [sp, #0]
  __HAL_LOCK(hdsi);
 80076b6:	7405      	strb	r5, [r0, #16]
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80076b8:	f7ff fd38 	bl	800712c <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80076bc:	2300      	movs	r3, #0
 80076be:	7423      	strb	r3, [r4, #16]

  return status;
}
 80076c0:	b002      	add	sp, #8
 80076c2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 80076c4:	2002      	movs	r0, #2
}
 80076c6:	b002      	add	sp, #8
 80076c8:	bd70      	pop	{r4, r5, r6, pc}
 80076ca:	bf00      	nop

080076cc <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80076cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d0:	4698      	mov	r8, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80076d2:	7c03      	ldrb	r3, [r0, #16]
{
 80076d4:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hdsi);
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d05e      	beq.n	8007798 <HAL_DSI_LongWrite+0xcc>
 80076da:	2301      	movs	r3, #1
 80076dc:	4607      	mov	r7, r0
 80076de:	4689      	mov	r9, r1
 80076e0:	4692      	mov	sl, r2
 80076e2:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80076e4:	f7fe fc8c 	bl	8006000 <HAL_GetTick>
 80076e8:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80076ea:	e005      	b.n	80076f8 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80076ec:	f7fe fc88 	bl	8006000 <HAL_GetTick>
 80076f0:	1b40      	subs	r0, r0, r5
 80076f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80076f6:	d84b      	bhi.n	8007790 <HAL_DSI_LongWrite+0xc4>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 80076fc:	f014 0401 	ands.w	r4, r4, #1
 8007700:	d0f4      	beq.n	80076ec <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007702:	4640      	mov	r0, r8
 8007704:	2803      	cmp	r0, #3
 8007706:	bf28      	it	cs
 8007708:	2003      	movcs	r0, #3

  for (count = 0U; count < nbBytes; count++)
 800770a:	f1b8 0f00 	cmp.w	r8, #0
 800770e:	d046      	beq.n	800779e <HAL_DSI_LongWrite+0xd2>
 8007710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007712:	1e5c      	subs	r4, r3, #1
 8007714:	2300      	movs	r3, #0
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8007716:	3301      	adds	r3, #1
 8007718:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800771c:	00dd      	lsls	r5, r3, #3
  for (count = 0U; count < nbBytes; count++)
 800771e:	4283      	cmp	r3, r0
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8007720:	fa02 f205 	lsl.w	r2, r2, r5
 8007724:	ea46 0602 	orr.w	r6, r6, r2
  for (count = 0U; count < nbBytes; count++)
 8007728:	d3f5      	bcc.n	8007716 <HAL_DSI_LongWrite+0x4a>
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 800772a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hdsi->Instance->GPDR = fifoword;
 800772c:	670e      	str	r6, [r1, #112]	; 0x70
  pparams += nbBytes;
 800772e:	181e      	adds	r6, r3, r0
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8007730:	ebb8 0000 	subs.w	r0, r8, r0
 8007734:	d017      	beq.n	8007766 <HAL_DSI_LongWrite+0x9a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007736:	2804      	cmp	r0, #4
 8007738:	4684      	mov	ip, r0
 800773a:	f04f 0500 	mov.w	r5, #0
 800773e:	bf28      	it	cs
 8007740:	f04f 0c04 	movcs.w	ip, #4
    fifoword = 0U;
 8007744:	462b      	mov	r3, r5
 8007746:	eb06 020c 	add.w	r2, r6, ip
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800774a:	f816 4b01 	ldrb.w	r4, [r6], #1
 800774e:	40ac      	lsls	r4, r5
    for (count = 0U; count < nbBytes; count++)
 8007750:	42b2      	cmp	r2, r6
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007752:	f105 0508 	add.w	r5, r5, #8
 8007756:	ea43 0304 	orr.w	r3, r3, r4
    for (count = 0U; count < nbBytes; count++)
 800775a:	d1f6      	bne.n	800774a <HAL_DSI_LongWrite+0x7e>
  while (uicounter != 0U)
 800775c:	ebb0 000c 	subs.w	r0, r0, ip
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 8007760:	4616      	mov	r6, r2
    hdsi->Instance->GPDR = fifoword;
 8007762:	670b      	str	r3, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8007764:	d1e7      	bne.n	8007736 <HAL_DSI_LongWrite+0x6a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8007766:	f108 0801 	add.w	r8, r8, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800776a:	ea4a 1389 	orr.w	r3, sl, r9, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800776e:	2200      	movs	r2, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007770:	ea4f 2908 	mov.w	r9, r8, lsl #8

  return HAL_OK;
 8007774:	4610      	mov	r0, r2
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007776:	46c8      	mov	r8, r9
 8007778:	fa1f f989 	uxth.w	r9, r9
 800777c:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 8007780:	ea43 0309 	orr.w	r3, r3, r9
 8007784:	ea43 0308 	orr.w	r3, r3, r8
 8007788:	66cb      	str	r3, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800778a:	743a      	strb	r2, [r7, #16]
}
 800778c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_TIMEOUT;
 8007790:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8007792:	743c      	strb	r4, [r7, #16]
}
 8007794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8007798:	2002      	movs	r0, #2
}
 800779a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdsi->Instance->GPDR = fifoword;
 800779e:	670e      	str	r6, [r1, #112]	; 0x70
  while (uicounter != 0U)
 80077a0:	e7e1      	b.n	8007766 <HAL_DSI_LongWrite+0x9a>
 80077a2:	bf00      	nop

080077a4 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 80077a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a8:	4615      	mov	r5, r2
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80077aa:	7c02      	ldrb	r2, [r0, #16]
{
 80077ac:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80077ae:	2a01      	cmp	r2, #1
{
 80077b0:	9c08      	ldr	r4, [sp, #32]
  __HAL_LOCK(hdsi);
 80077b2:	d070      	beq.n	8007896 <HAL_DSI_Read+0xf2>
 80077b4:	461e      	mov	r6, r3
 80077b6:	2301      	movs	r3, #1
 80077b8:	4607      	mov	r7, r0
 80077ba:	4688      	mov	r8, r1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 80077bc:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 80077be:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 80077c0:	d80d      	bhi.n	80077de <HAL_DSI_Read+0x3a>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 80077c2:	2c06      	cmp	r4, #6
 80077c4:	d017      	beq.n	80077f6 <HAL_DSI_Read+0x52>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 80077c6:	2c04      	cmp	r4, #4
 80077c8:	d04f      	beq.n	800786a <HAL_DSI_Read+0xc6>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80077ca:	2c14      	cmp	r4, #20
 80077cc:	d067      	beq.n	800789e <HAL_DSI_Read+0xfa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80077ce:	2c24      	cmp	r4, #36	; 0x24
 80077d0:	d052      	beq.n	8007878 <HAL_DSI_Read+0xd4>
      __HAL_UNLOCK(hdsi);
 80077d2:	2300      	movs	r3, #0
      return HAL_ERROR;
 80077d4:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 80077d6:	743b      	strb	r3, [r7, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 80077d8:	b002      	add	sp, #8
 80077da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 80077de:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 80077e2:	b2f3      	uxtb	r3, r6
 80077e4:	2237      	movs	r2, #55	; 0x37
 80077e6:	f8cd c000 	str.w	ip, [sp]
 80077ea:	f7ff fc9f 	bl	800712c <DSI_ShortWrite>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d1ef      	bne.n	80077d2 <HAL_DSI_Read+0x2e>
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 80077f2:	2c06      	cmp	r4, #6
 80077f4:	d1e7      	bne.n	80077c6 <HAL_DSI_Read+0x22>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80077f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 80077f8:	6839      	ldr	r1, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80077fa:	021a      	lsls	r2, r3, #8
 80077fc:	ea42 1388 	orr.w	r3, r2, r8, lsl #6
 8007800:	f043 0306 	orr.w	r3, r3, #6
 8007804:	66cb      	str	r3, [r1, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8007806:	f7fe fbfb 	bl	8006000 <HAL_GetTick>
 800780a:	4680      	mov	r8, r0
  while (((int32_t)(datasize)) > 0)
 800780c:	e006      	b.n	800781c <HAL_DSI_Read+0x78>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800780e:	f7fe fbf7 	bl	8006000 <HAL_GetTick>
 8007812:	eba0 0008 	sub.w	r0, r0, r8
 8007816:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800781a:	d81b      	bhi.n	8007854 <HAL_DSI_Read+0xb0>
  while (((int32_t)(datasize)) > 0)
 800781c:	2e00      	cmp	r6, #0
 800781e:	dd1f      	ble.n	8007860 <HAL_DSI_Read+0xbc>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8007824:	f011 0110 	ands.w	r1, r1, #16
 8007828:	d1f1      	bne.n	800780e <HAL_DSI_Read+0x6a>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800782a:	2e04      	cmp	r6, #4
 800782c:	4630      	mov	r0, r6
      fifoword = hdsi->Instance->GPDR;
 800782e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8007830:	bf28      	it	cs
 8007832:	2004      	movcs	r0, #4
      for (count = 0U; count < nbbytes; count++)
 8007834:	182b      	adds	r3, r5, r0
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8007836:	fa22 f401 	lsr.w	r4, r2, r1
 800783a:	3108      	adds	r1, #8
 800783c:	f805 4b01 	strb.w	r4, [r5], #1
      for (count = 0U; count < nbbytes; count++)
 8007840:	429d      	cmp	r5, r3
 8007842:	d1f8      	bne.n	8007836 <HAL_DSI_Read+0x92>
 8007844:	1a36      	subs	r6, r6, r0
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007846:	f7fe fbdb 	bl	8006000 <HAL_GetTick>
 800784a:	eba0 0008 	sub.w	r0, r0, r8
 800784e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007852:	d9e3      	bls.n	800781c <HAL_DSI_Read+0x78>
      __HAL_UNLOCK(hdsi);
 8007854:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8007856:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8007858:	743b      	strb	r3, [r7, #16]
}
 800785a:	b002      	add	sp, #8
 800785c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_UNLOCK(hdsi);
 8007860:	2000      	movs	r0, #0
 8007862:	7438      	strb	r0, [r7, #16]
}
 8007864:	b002      	add	sp, #8
 8007866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800786a:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800786e:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007870:	f043 0304 	orr.w	r3, r3, #4
 8007874:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8007876:	e7c6      	b.n	8007806 <HAL_DSI_Read+0x62>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800787a:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800787e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007880:	7852      	ldrb	r2, [r2, #1]
 8007882:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007884:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007888:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800788a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800788e:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8007892:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8007894:	e7b7      	b.n	8007806 <HAL_DSI_Read+0x62>
  __HAL_LOCK(hdsi);
 8007896:	2002      	movs	r0, #2
}
 8007898:	b002      	add	sp, #8
 800789a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800789e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80078a0:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80078a4:	7811      	ldrb	r1, [r2, #0]
 80078a6:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80078a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80078ac:	f043 0314 	orr.w	r3, r3, #20
 80078b0:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 80078b2:	e7a8      	b.n	8007806 <HAL_DSI_Read+0x62>

080078b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80078b8:	680e      	ldr	r6, [r1, #0]
{
 80078ba:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80078bc:	2e00      	cmp	r6, #0
 80078be:	f000 80d3 	beq.w	8007a68 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 80078c2:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078c4:	f8df a220 	ldr.w	sl, [pc, #544]	; 8007ae8 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80078c8:	f8df b220 	ldr.w	fp, [pc, #544]	; 8007aec <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80078cc:	46b1      	mov	r9, r6
 80078ce:	e020      	b.n	8007912 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 80078d0:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80078d2:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078d6:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80078da:	f04f 0e0f 	mov.w	lr, #15
 80078de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80078e2:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80078e4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078e8:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 80078ec:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80078ee:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80078f2:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80078f6:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80078fa:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 80078fe:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8007900:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007902:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007904:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 8007906:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 8007908:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800790a:	fa39 f203 	lsrs.w	r2, r9, r3
 800790e:	f000 80ab 	beq.w	8007a68 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007912:	2201      	movs	r2, #1
 8007914:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8007916:	ea12 0809 	ands.w	r8, r2, r9
 800791a:	d0f5      	beq.n	8007908 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800791c:	684c      	ldr	r4, [r1, #4]
 800791e:	005f      	lsls	r7, r3, #1
 8007920:	f024 0c10 	bic.w	ip, r4, #16
 8007924:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007928:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800792a:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800792e:	f200 809e 	bhi.w	8007a6e <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007932:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 8007936:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800793a:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800793c:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800793e:	ea2e 0e05 	bic.w	lr, lr, r5
 8007942:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007944:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007946:	68ce      	ldr	r6, [r1, #12]
 8007948:	40be      	lsls	r6, r7
 800794a:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800794e:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 8007950:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8007954:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007958:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800795c:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 800795e:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8007960:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007962:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007966:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007968:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800796c:	fa02 f207 	lsl.w	r2, r2, r7
 8007970:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8007974:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007976:	d0ab      	beq.n	80078d0 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 8007978:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800797a:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800797e:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007980:	fa02 f707 	lsl.w	r7, r2, r7
 8007984:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8007986:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007988:	00e6      	lsls	r6, r4, #3
 800798a:	d5bd      	bpl.n	8007908 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800798c:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 8007990:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007994:	f003 0203 	and.w	r2, r3, #3
 8007998:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800799a:	f046 0602 	orr.w	r6, r6, #2
 800799e:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80079a2:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079a4:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 80079a8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80079ac:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80079b0:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079b4:	f006 0602 	and.w	r6, r6, #2
 80079b8:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80079ba:	4e42      	ldr	r6, [pc, #264]	; (8007ac4 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079bc:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80079be:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 80079c0:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80079c2:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80079c6:	d020      	beq.n	8007a0a <HAL_GPIO_Init+0x156>
 80079c8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80079cc:	42b0      	cmp	r0, r6
 80079ce:	d056      	beq.n	8007a7e <HAL_GPIO_Init+0x1ca>
 80079d0:	4e3d      	ldr	r6, [pc, #244]	; (8007ac8 <HAL_GPIO_Init+0x214>)
 80079d2:	42b0      	cmp	r0, r6
 80079d4:	d058      	beq.n	8007a88 <HAL_GPIO_Init+0x1d4>
 80079d6:	4e3d      	ldr	r6, [pc, #244]	; (8007acc <HAL_GPIO_Init+0x218>)
 80079d8:	42b0      	cmp	r0, r6
 80079da:	d04b      	beq.n	8007a74 <HAL_GPIO_Init+0x1c0>
 80079dc:	4e3c      	ldr	r6, [pc, #240]	; (8007ad0 <HAL_GPIO_Init+0x21c>)
 80079de:	42b0      	cmp	r0, r6
 80079e0:	d05c      	beq.n	8007a9c <HAL_GPIO_Init+0x1e8>
 80079e2:	4e3c      	ldr	r6, [pc, #240]	; (8007ad4 <HAL_GPIO_Init+0x220>)
 80079e4:	42b0      	cmp	r0, r6
 80079e6:	d05e      	beq.n	8007aa6 <HAL_GPIO_Init+0x1f2>
 80079e8:	4e3b      	ldr	r6, [pc, #236]	; (8007ad8 <HAL_GPIO_Init+0x224>)
 80079ea:	42b0      	cmp	r0, r6
 80079ec:	d051      	beq.n	8007a92 <HAL_GPIO_Init+0x1de>
 80079ee:	4e3b      	ldr	r6, [pc, #236]	; (8007adc <HAL_GPIO_Init+0x228>)
 80079f0:	42b0      	cmp	r0, r6
 80079f2:	d05d      	beq.n	8007ab0 <HAL_GPIO_Init+0x1fc>
 80079f4:	4e3a      	ldr	r6, [pc, #232]	; (8007ae0 <HAL_GPIO_Init+0x22c>)
 80079f6:	42b0      	cmp	r0, r6
 80079f8:	d05f      	beq.n	8007aba <HAL_GPIO_Init+0x206>
 80079fa:	4e3a      	ldr	r6, [pc, #232]	; (8007ae4 <HAL_GPIO_Init+0x230>)
 80079fc:	42b0      	cmp	r0, r6
 80079fe:	bf0c      	ite	eq
 8007a00:	2609      	moveq	r6, #9
 8007a02:	260a      	movne	r6, #10
 8007a04:	fa06 f202 	lsl.w	r2, r6, r2
 8007a08:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a0a:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8007a0c:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 8007a10:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007a14:	03e5      	lsls	r5, r4, #15
    position++;
 8007a16:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 8007a1a:	bf54      	ite	pl
 8007a1c:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8007a1e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8007a22:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007a26:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 8007a28:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8007a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8007a30:	bf54      	ite	pl
 8007a32:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8007a34:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007a38:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 8007a3a:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8007a3e:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 8007a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8007a44:	bf54      	ite	pl
 8007a46:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8007a48:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007a4c:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 8007a4e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 8007a52:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8007a54:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 8007a56:	bf54      	ite	pl
 8007a58:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8007a5a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8007a5e:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a60:	fa39 f203 	lsrs.w	r2, r9, r3
 8007a64:	f47f af55 	bne.w	8007912 <HAL_GPIO_Init+0x5e>
  }
}
 8007a68:	b005      	add	sp, #20
 8007a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6e:	40bd      	lsls	r5, r7
 8007a70:	43ed      	mvns	r5, r5
 8007a72:	e775      	b.n	8007960 <HAL_GPIO_Init+0xac>
 8007a74:	2603      	movs	r6, #3
 8007a76:	fa06 f202 	lsl.w	r2, r6, r2
 8007a7a:	4315      	orrs	r5, r2
 8007a7c:	e7c5      	b.n	8007a0a <HAL_GPIO_Init+0x156>
 8007a7e:	2601      	movs	r6, #1
 8007a80:	fa06 f202 	lsl.w	r2, r6, r2
 8007a84:	4315      	orrs	r5, r2
 8007a86:	e7c0      	b.n	8007a0a <HAL_GPIO_Init+0x156>
 8007a88:	2602      	movs	r6, #2
 8007a8a:	fa06 f202 	lsl.w	r2, r6, r2
 8007a8e:	4315      	orrs	r5, r2
 8007a90:	e7bb      	b.n	8007a0a <HAL_GPIO_Init+0x156>
 8007a92:	2606      	movs	r6, #6
 8007a94:	fa06 f202 	lsl.w	r2, r6, r2
 8007a98:	4315      	orrs	r5, r2
 8007a9a:	e7b6      	b.n	8007a0a <HAL_GPIO_Init+0x156>
 8007a9c:	2604      	movs	r6, #4
 8007a9e:	fa06 f202 	lsl.w	r2, r6, r2
 8007aa2:	4315      	orrs	r5, r2
 8007aa4:	e7b1      	b.n	8007a0a <HAL_GPIO_Init+0x156>
 8007aa6:	2605      	movs	r6, #5
 8007aa8:	fa06 f202 	lsl.w	r2, r6, r2
 8007aac:	4315      	orrs	r5, r2
 8007aae:	e7ac      	b.n	8007a0a <HAL_GPIO_Init+0x156>
 8007ab0:	2607      	movs	r6, #7
 8007ab2:	fa06 f202 	lsl.w	r2, r6, r2
 8007ab6:	4315      	orrs	r5, r2
 8007ab8:	e7a7      	b.n	8007a0a <HAL_GPIO_Init+0x156>
 8007aba:	2608      	movs	r6, #8
 8007abc:	fa06 f202 	lsl.w	r2, r6, r2
 8007ac0:	4315      	orrs	r5, r2
 8007ac2:	e7a2      	b.n	8007a0a <HAL_GPIO_Init+0x156>
 8007ac4:	58020000 	.word	0x58020000
 8007ac8:	58020800 	.word	0x58020800
 8007acc:	58020c00 	.word	0x58020c00
 8007ad0:	58021000 	.word	0x58021000
 8007ad4:	58021400 	.word	0x58021400
 8007ad8:	58021800 	.word	0x58021800
 8007adc:	58021c00 	.word	0x58021c00
 8007ae0:	58022000 	.word	0x58022000
 8007ae4:	58022400 	.word	0x58022400
 8007ae8:	58024400 	.word	0x58024400
 8007aec:	58000080 	.word	0x58000080

08007af0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007af0:	b902      	cbnz	r2, 8007af4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007af2:	0409      	lsls	r1, r1, #16
 8007af4:	6181      	str	r1, [r0, #24]
  }
}
 8007af6:	4770      	bx	lr

08007af8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007af8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007afa:	ea01 0203 	and.w	r2, r1, r3
 8007afe:	ea21 0103 	bic.w	r1, r1, r3
 8007b02:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b06:	6181      	str	r1, [r0, #24]
}
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop

08007b0c <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007b0c:	4a04      	ldr	r2, [pc, #16]	; (8007b20 <HAL_HSEM_FastTake+0x14>)
 8007b0e:	3020      	adds	r0, #32
 8007b10:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <HAL_HSEM_FastTake+0x18>)
 8007b12:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8007b16:	1ac0      	subs	r0, r0, r3
 8007b18:	bf18      	it	ne
 8007b1a:	2001      	movne	r0, #1
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	58026400 	.word	0x58026400
 8007b24:	80000300 	.word	0x80000300

08007b28 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007b28:	4b02      	ldr	r3, [pc, #8]	; (8007b34 <HAL_HSEM_Release+0xc>)
 8007b2a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8007b2e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8007b32:	4770      	bx	lr
 8007b34:	58026400 	.word	0x58026400

08007b38 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007b38:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007b3a:	f04f 0c00 	mov.w	ip, #0
{
 8007b3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007b42:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007b44:	6804      	ldr	r4, [r0, #0]
 8007b46:	6848      	ldr	r0, [r1, #4]
{
 8007b48:	b083      	sub	sp, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007b4a:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007b4c:	68e5      	ldr	r5, [r4, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b4e:	f8d1 800c 	ldr.w	r8, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007b52:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007b56:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b5a:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007b5c:	eb05 0a00 	add.w	sl, r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007b60:	f40e 4570 	and.w	r5, lr, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007b64:	9001      	str	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b66:	f106 0b01 	add.w	fp, r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007b6a:	6888      	ldr	r0, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007b6c:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b6e:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007b70:	f100 0901 	add.w	r9, r0, #1
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007b74:	f8d1 e010 	ldr.w	lr, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b78:	f3c5 450b 	ubfx	r5, r5, #16, #12
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007b7c:	4f38      	ldr	r7, [pc, #224]	; (8007c60 <LTDC_SetConfig+0x128>)
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b7e:	445d      	add	r5, fp
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007b80:	f8d1 b018 	ldr.w	fp, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b84:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8007b88:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b8a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007b8e:	689d      	ldr	r5, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b90:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007b94:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b98:	44c2      	add	sl, r8
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007b9a:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007b9e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007ba0:	68e5      	ldr	r5, [r4, #12]
 8007ba2:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8007ba6:	444d      	add	r5, r9
 8007ba8:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8007bac:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007bae:	691d      	ldr	r5, [r3, #16]
 8007bb0:	f025 0507 	bic.w	r5, r5, #7
 8007bb4:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007bb6:	f8c3 e010 	str.w	lr, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007bba:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007bbc:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007bc0:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007bc4:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007bc8:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8007bcc:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 8007bd0:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 8007bd4:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8007bd8:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007bda:	695d      	ldr	r5, [r3, #20]
 8007bdc:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007be0:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007be2:	f8c3 8014 	str.w	r8, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007be6:	69dd      	ldr	r5, [r3, #28]
 8007be8:	402f      	ands	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007bea:	69cd      	ldr	r5, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007bec:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007bee:	e9d1 0708 	ldrd	r0, r7, [r1, #32]
 8007bf2:	4305      	orrs	r5, r0
 8007bf4:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007bf6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8007bf8:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007bfc:	629f      	str	r7, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007bfe:	f1be 0f00 	cmp.w	lr, #0
 8007c02:	d00b      	beq.n	8007c1c <LTDC_SetConfig+0xe4>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007c04:	f1be 0f01 	cmp.w	lr, #1
 8007c08:	d026      	beq.n	8007c58 <LTDC_SetConfig+0x120>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007c0a:	f1ae 0502 	sub.w	r5, lr, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007c0e:	2d02      	cmp	r5, #2
 8007c10:	d902      	bls.n	8007c18 <LTDC_SetConfig+0xe0>
 8007c12:	f1be 0f07 	cmp.w	lr, #7
 8007c16:	d121      	bne.n	8007c5c <LTDC_SetConfig+0x124>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8007c18:	2702      	movs	r7, #2
 8007c1a:	e000      	b.n	8007c1e <LTDC_SetConfig+0xe6>
    tmp = 4U;
 8007c1c:	2704      	movs	r7, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007c1e:	9801      	ldr	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007c20:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007c22:	1b80      	subs	r0, r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007c24:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007c28:	fb07 f000 	mul.w	r0, r7, r0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007c2c:	e9d1 6c0a 	ldrd	r6, ip, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007c30:	3007      	adds	r0, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007c32:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007c34:	fb06 f607 	mul.w	r6, r6, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007c38:	490a      	ldr	r1, [pc, #40]	; (8007c64 <LTDC_SetConfig+0x12c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007c3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8007c3e:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007c40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c42:	4001      	ands	r1, r0
 8007c44:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007c46:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007c4a:	58a3      	ldr	r3, [r4, r2]
 8007c4c:	f043 0301 	orr.w	r3, r3, #1
 8007c50:	50a3      	str	r3, [r4, r2]
}
 8007c52:	b003      	add	sp, #12
 8007c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3U;
 8007c58:	2703      	movs	r7, #3
 8007c5a:	e7e0      	b.n	8007c1e <LTDC_SetConfig+0xe6>
    tmp = 1U;
 8007c5c:	2701      	movs	r7, #1
 8007c5e:	e7de      	b.n	8007c1e <LTDC_SetConfig+0xe6>
 8007c60:	fffff8f8 	.word	0xfffff8f8
 8007c64:	fffff800 	.word	0xfffff800

08007c68 <HAL_LTDC_MspInit>:
}
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop

08007c6c <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d06d      	beq.n	8007d4c <HAL_LTDC_Init+0xe0>
{
 8007c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007c72:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8007c76:	4604      	mov	r4, r0
 8007c78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d060      	beq.n	8007d42 <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c80:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007c82:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c84:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007c86:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007c88:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007c8c:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007c8e:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007c90:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c94:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c98:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007c9a:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c9c:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007c9e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007ca2:	4e2b      	ldr	r6, [pc, #172]	; (8007d50 <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007ca4:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007ca6:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007ca8:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8007caa:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007cac:	4302      	orrs	r2, r0
 8007cae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007cb0:	689a      	ldr	r2, [r3, #8]
 8007cb2:	4032      	ands	r2, r6
 8007cb4:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007cb6:	6898      	ldr	r0, [r3, #8]
 8007cb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007cbc:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007cbe:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007cc2:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007cc6:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007cc8:	68d8      	ldr	r0, [r3, #12]
 8007cca:	4030      	ands	r0, r6
 8007ccc:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007cce:	68da      	ldr	r2, [r3, #12]
 8007cd0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007cd4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007cd6:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007cda:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007cde:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007ce0:	691a      	ldr	r2, [r3, #16]
 8007ce2:	4032      	ands	r2, r6
 8007ce4:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007ce6:	6918      	ldr	r0, [r3, #16]
 8007ce8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007cec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007cee:	ea40 000c 	orr.w	r0, r0, ip
 8007cf2:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007cf4:	6958      	ldr	r0, [r3, #20]
 8007cf6:	4006      	ands	r6, r0
 8007cf8:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007cfa:	695a      	ldr	r2, [r3, #20]
 8007cfc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007cfe:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8007d02:	4302      	orrs	r2, r0
 8007d04:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007d06:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007d08:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007d0c:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007d10:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007d14:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007d16:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007d18:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8007d1c:	4302      	orrs	r2, r0
  return HAL_OK;
 8007d1e:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007d20:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8007d24:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8007d28:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d2c:	f042 0206 	orr.w	r2, r2, #6
 8007d30:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8007d32:	699a      	ldr	r2, [r3, #24]
 8007d34:	432a      	orrs	r2, r5
 8007d36:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007d38:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8007d3c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 8007d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8007d42:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8007d46:	f7ff ff8f 	bl	8007c68 <HAL_LTDC_MspInit>
 8007d4a:	e799      	b.n	8007c80 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8007d4c:	2001      	movs	r0, #1
}
 8007d4e:	4770      	bx	lr
 8007d50:	f000f800 	.word	0xf000f800

08007d54 <HAL_LTDC_ErrorCallback>:
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop

08007d58 <HAL_LTDC_ReloadEventCallback>:
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop

08007d5c <HAL_LTDC_IRQHandler>:
{
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007d5e:	6803      	ldr	r3, [r0, #0]
{
 8007d60:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007d62:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007d64:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007d66:	0769      	lsls	r1, r5, #29
 8007d68:	d501      	bpl.n	8007d6e <HAL_LTDC_IRQHandler+0x12>
 8007d6a:	0772      	lsls	r2, r6, #29
 8007d6c:	d41d      	bmi.n	8007daa <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007d6e:	07ab      	lsls	r3, r5, #30
 8007d70:	d501      	bpl.n	8007d76 <HAL_LTDC_IRQHandler+0x1a>
 8007d72:	07b7      	lsls	r7, r6, #30
 8007d74:	d42d      	bmi.n	8007dd2 <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007d76:	07e8      	lsls	r0, r5, #31
 8007d78:	d501      	bpl.n	8007d7e <HAL_LTDC_IRQHandler+0x22>
 8007d7a:	07f1      	lsls	r1, r6, #31
 8007d7c:	d440      	bmi.n	8007e00 <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007d7e:	072a      	lsls	r2, r5, #28
 8007d80:	d501      	bpl.n	8007d86 <HAL_LTDC_IRQHandler+0x2a>
 8007d82:	0733      	lsls	r3, r6, #28
 8007d84:	d400      	bmi.n	8007d88 <HAL_LTDC_IRQHandler+0x2c>
}
 8007d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007d88:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007d8a:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 8007d8c:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 8007d8e:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007d92:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007d94:	f022 0208 	bic.w	r2, r2, #8
 8007d98:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007d9a:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8007d9c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007da0:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007da4:	f7ff ffd8 	bl	8007d58 <HAL_LTDC_ReloadEventCallback>
}
 8007da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007dac:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 8007dae:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007db0:	f022 0204 	bic.w	r2, r2, #4
 8007db4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007db6:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007db8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8007dbc:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007dc0:	f043 0301 	orr.w	r3, r3, #1
 8007dc4:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007dc8:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 8007dcc:	f7ff ffc2 	bl	8007d54 <HAL_LTDC_ErrorCallback>
 8007dd0:	e7cd      	b.n	8007d6e <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007dd2:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007dd4:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007dd6:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dda:	f022 0202 	bic.w	r2, r2, #2
 8007dde:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 8007de0:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007de2:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 8007de4:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007de6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8007dea:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007dee:	f043 0302 	orr.w	r3, r3, #2
 8007df2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007df6:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 8007dfa:	f7ff ffab 	bl	8007d54 <HAL_LTDC_ErrorCallback>
 8007dfe:	e7ba      	b.n	8007d76 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007e00:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007e02:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 8007e04:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 8007e06:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e0a:	f022 0201 	bic.w	r2, r2, #1
 8007e0e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007e10:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8007e12:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007e16:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8007e1a:	f7fc fb31 	bl	8004480 <HAL_LTDC_LineEventCallback>
 8007e1e:	e7ae      	b.n	8007d7e <HAL_LTDC_IRQHandler+0x22>

08007e20 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8007e20:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d028      	beq.n	8007e7a <HAL_LTDC_ConfigLayer+0x5a>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e28:	2302      	movs	r3, #2
 8007e2a:	4694      	mov	ip, r2
{
 8007e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007e30:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007e32:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007e36:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e38:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007e3c:	fb04 0402 	mla	r4, r4, r2, r0
 8007e40:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8007e42:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007e46:	460f      	mov	r7, r1
 8007e48:	3438      	adds	r4, #56	; 0x38
 8007e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e56:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007e58:	4662      	mov	r2, ip
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007e5e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007e60:	f7ff fe6a 	bl	8007b38 <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8007e64:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007e66:	6832      	ldr	r2, [r6, #0]
  return HAL_OK;
 8007e68:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007e6a:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007e6e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007e72:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
}
 8007e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8007e7a:	2002      	movs	r0, #2
}
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop

08007e80 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8007e80:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 8007e84:	2a01      	cmp	r2, #1
 8007e86:	d017      	beq.n	8007eb8 <HAL_LTDC_ProgramLineEvent+0x38>
 8007e88:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e8a:	2002      	movs	r0, #2
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007e8c:	681a      	ldr	r2, [r3, #0]
{
 8007e8e:	b470      	push	{r4, r5, r6}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e90:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  hltdc->State = HAL_LTDC_STATE_READY;
 8007e94:	2501      	movs	r5, #1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007e96:	6b50      	ldr	r0, [r2, #52]	; 0x34
  __HAL_UNLOCK(hltdc);
 8007e98:	2400      	movs	r4, #0
  LTDC->LIPCR = (uint32_t)Line;
 8007e9a:	4e08      	ldr	r6, [pc, #32]	; (8007ebc <HAL_LTDC_ProgramLineEvent+0x3c>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007e9c:	f020 0001 	bic.w	r0, r0, #1
 8007ea0:	6350      	str	r0, [r2, #52]	; 0x34
  return HAL_OK;
 8007ea2:	4620      	mov	r0, r4
  LTDC->LIPCR = (uint32_t)Line;
 8007ea4:	6431      	str	r1, [r6, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8007ea6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8007ea8:	4329      	orrs	r1, r5
 8007eaa:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8007eac:	f883 50a1 	strb.w	r5, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007eb0:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
}
 8007eb4:	bc70      	pop	{r4, r5, r6}
 8007eb6:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8007eb8:	2002      	movs	r0, #2
}
 8007eba:	4770      	bx	lr
 8007ebc:	50001000 	.word	0x50001000

08007ec0 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007ec4:	f7fe f89c 	bl	8006000 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007ec8:	2c00      	cmp	r4, #0
 8007eca:	d05a      	beq.n	8007f82 <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007ecc:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8007ece:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007ed4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 8007ed8:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	f022 0201 	bic.w	r2, r2, #1
 8007ee2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007ee4:	e005      	b.n	8007ef2 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8007ee6:	f7fe f88b 	bl	8006000 <HAL_GetTick>
 8007eea:	1b43      	subs	r3, r0, r5
 8007eec:	2b05      	cmp	r3, #5
 8007eee:	d841      	bhi.n	8007f74 <HAL_MDMA_Init+0xb4>
 8007ef0:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007ef2:	68da      	ldr	r2, [r3, #12]
 8007ef4:	07d2      	lsls	r2, r2, #31
 8007ef6:	d4f6      	bmi.n	8007ee6 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007ef8:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8007efc:	69e1      	ldr	r1, [r4, #28]
 8007efe:	4302      	orrs	r2, r0
 8007f00:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 8007f04:	430a      	orrs	r2, r1
 8007f06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007f08:	432a      	orrs	r2, r5
 8007f0a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007f0c:	4302      	orrs	r2, r0
 8007f0e:	68a0      	ldr	r0, [r4, #8]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007f14:	432a      	orrs	r2, r5
 8007f16:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007f18:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007f1a:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007f1c:	6920      	ldr	r0, [r4, #16]
 8007f1e:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007f20:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007f22:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007f26:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007f2a:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007f2c:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007f2e:	d103      	bne.n	8007f38 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8007f30:	691a      	ldr	r2, [r3, #16]
 8007f32:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8007f36:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8007f38:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8007f3a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007f3c:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 8007f3e:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8007f40:	db30      	blt.n	8007fa4 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8007f42:	b292      	uxth	r2, r2
 8007f44:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8007f46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007f48:	2a00      	cmp	r2, #0
 8007f4a:	db1c      	blt.n	8007f86 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007f4c:	6a18      	ldr	r0, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007f4e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007f52:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8007f56:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007f58:	d021      	beq.n	8007f9e <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8007f5a:	b2c9      	uxtb	r1, r1
 8007f5c:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8007f5e:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8007f60:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8007f62:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8007f64:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007f66:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8007f68:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8007f6a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8007f6e:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007f74:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007f76:	2303      	movs	r3, #3
      return HAL_ERROR;
 8007f78:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007f7a:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007f7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007f80:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007f82:	2001      	movs	r0, #1
}
 8007f84:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007f86:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007f88:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007f8a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007f8e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8007f92:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007f94:	6a18      	ldr	r0, [r3, #32]
 8007f96:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8007f9a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007f9c:	d1dd      	bne.n	8007f5a <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	629a      	str	r2, [r3, #40]	; 0x28
 8007fa2:	e7dc      	b.n	8007f5e <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007fa4:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8007fa6:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007fa8:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8007fac:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007fae:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8007fb0:	621a      	str	r2, [r3, #32]
 8007fb2:	e7c8      	b.n	8007f46 <HAL_MDMA_Init+0x86>

08007fb4 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8007fb4:	b1f0      	cbz	r0, 8007ff4 <HAL_MDMA_DeInit+0x40>
  __HAL_MDMA_DISABLE(hmdma);
 8007fb6:	6802      	ldr	r2, [r0, #0]
  hmdma->Instance->CCR  = 0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	4601      	mov	r1, r0
  return HAL_OK;
 8007fbc:	4618      	mov	r0, r3
{
 8007fbe:	b430      	push	{r4, r5}
  __HAL_MDMA_DISABLE(hmdma);
 8007fc0:	68d4      	ldr	r4, [r2, #12]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007fc2:	251f      	movs	r5, #31
  __HAL_MDMA_DISABLE(hmdma);
 8007fc4:	f024 0401 	bic.w	r4, r4, #1
 8007fc8:	60d4      	str	r4, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8007fca:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8007fcc:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8007fce:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8007fd0:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8007fd2:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8007fd4:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8007fd6:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8007fd8:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8007fda:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8007fdc:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007fde:	6055      	str	r5, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007fe0:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
 8007fe2:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 8007fe6:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
  hmdma->LinkedListNodeCounter  = 0;
 8007fea:	664b      	str	r3, [r1, #100]	; 0x64
}
 8007fec:	bc30      	pop	{r4, r5}
  hmdma->LastLinkedListNodeAddress   = 0;
 8007fee:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
 8007ff2:	4770      	bx	lr
    return HAL_ERROR;
 8007ff4:	2001      	movs	r0, #1
}
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007ff8:	4a1c      	ldr	r2, [pc, #112]	; (800806c <HAL_PWREx_ConfigSupply+0x74>)
 8007ffa:	68d3      	ldr	r3, [r2, #12]
 8007ffc:	f003 0307 	and.w	r3, r3, #7
 8008000:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008002:	68d3      	ldr	r3, [r2, #12]
{
 8008004:	b570      	push	{r4, r5, r6, lr}
 8008006:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008008:	d005      	beq.n	8008016 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800800a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800800e:	1a18      	subs	r0, r3, r0
 8008010:	bf18      	it	ne
 8008012:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008014:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008016:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800801a:	4616      	mov	r6, r2
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800801c:	4303      	orrs	r3, r0
 800801e:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8008020:	f7fd ffee 	bl	8006000 <HAL_GetTick>
 8008024:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008026:	e005      	b.n	8008034 <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008028:	f7fd ffea 	bl	8006000 <HAL_GetTick>
 800802c:	1b43      	subs	r3, r0, r5
 800802e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008032:	d819      	bhi.n	8008068 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008034:	6873      	ldr	r3, [r6, #4]
 8008036:	049a      	lsls	r2, r3, #18
 8008038:	d5f6      	bpl.n	8008028 <HAL_PWREx_ConfigSupply+0x30>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800803a:	f1a4 031d 	sub.w	r3, r4, #29
 800803e:	2b01      	cmp	r3, #1
 8008040:	d905      	bls.n	800804e <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8008042:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008046:	2801      	cmp	r0, #1
 8008048:	d901      	bls.n	800804e <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 800804a:	2000      	movs	r0, #0
}
 800804c:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 800804e:	f7fd ffd7 	bl	8006000 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008052:	4d06      	ldr	r5, [pc, #24]	; (800806c <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8008054:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008056:	68eb      	ldr	r3, [r5, #12]
 8008058:	03db      	lsls	r3, r3, #15
 800805a:	d4f6      	bmi.n	800804a <HAL_PWREx_ConfigSupply+0x52>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800805c:	f7fd ffd0 	bl	8006000 <HAL_GetTick>
 8008060:	1b00      	subs	r0, r0, r4
 8008062:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008066:	d9f6      	bls.n	8008056 <HAL_PWREx_ConfigSupply+0x5e>
      return HAL_ERROR;
 8008068:	2001      	movs	r0, #1
}
 800806a:	bd70      	pop	{r4, r5, r6, pc}
 800806c:	58024800 	.word	0x58024800

08008070 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008070:	2800      	cmp	r0, #0
 8008072:	f000 81f7 	beq.w	8008464 <HAL_RCC_OscConfig+0x3f4>
{
 8008076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008078:	6803      	ldr	r3, [r0, #0]
 800807a:	4604      	mov	r4, r0
 800807c:	07d9      	lsls	r1, r3, #31
 800807e:	d52e      	bpl.n	80080de <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008080:	49b4      	ldr	r1, [pc, #720]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
 8008082:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008084:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008086:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800808a:	2a10      	cmp	r2, #16
 800808c:	f000 812c 	beq.w	80082e8 <HAL_RCC_OscConfig+0x278>
 8008090:	2a18      	cmp	r2, #24
 8008092:	f000 8124 	beq.w	80082de <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008096:	6863      	ldr	r3, [r4, #4]
 8008098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800809c:	f000 8167 	beq.w	800836e <HAL_RCC_OscConfig+0x2fe>
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 817f 	beq.w	80083a4 <HAL_RCC_OscConfig+0x334>
 80080a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080aa:	4baa      	ldr	r3, [pc, #680]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	f000 8278 	beq.w	80085a2 <HAL_RCC_OscConfig+0x532>
 80080b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80080be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c0:	f7fd ff9e 	bl	8006000 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080c4:	4ea3      	ldr	r6, [pc, #652]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 80080c6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080c8:	e005      	b.n	80080d6 <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080ca:	f7fd ff99 	bl	8006000 <HAL_GetTick>
 80080ce:	1b40      	subs	r0, r0, r5
 80080d0:	2864      	cmp	r0, #100	; 0x64
 80080d2:	f200 8165 	bhi.w	80083a0 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080d6:	6833      	ldr	r3, [r6, #0]
 80080d8:	039f      	lsls	r7, r3, #14
 80080da:	d5f6      	bpl.n	80080ca <HAL_RCC_OscConfig+0x5a>
 80080dc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080de:	0799      	lsls	r1, r3, #30
 80080e0:	d521      	bpl.n	8008126 <HAL_RCC_OscConfig+0xb6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080e2:	4a9c      	ldr	r2, [pc, #624]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
 80080e4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080e6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80080e8:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80080ec:	f040 80a8 	bne.w	8008240 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080f0:	4b98      	ldr	r3, [pc, #608]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	075b      	lsls	r3, r3, #29
 80080f6:	d503      	bpl.n	8008100 <HAL_RCC_OscConfig+0x90>
 80080f8:	68e3      	ldr	r3, [r4, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 80ed 	beq.w	80082da <HAL_RCC_OscConfig+0x26a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008100:	f7fd ff96 	bl	8006030 <HAL_GetREVID>
 8008104:	f241 0303 	movw	r3, #4099	; 0x1003
 8008108:	4298      	cmp	r0, r3
 800810a:	f200 8189 	bhi.w	8008420 <HAL_RCC_OscConfig+0x3b0>
 800810e:	6922      	ldr	r2, [r4, #16]
 8008110:	2a40      	cmp	r2, #64	; 0x40
 8008112:	f000 824e 	beq.w	80085b2 <HAL_RCC_OscConfig+0x542>
 8008116:	498f      	ldr	r1, [pc, #572]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
 8008118:	684b      	ldr	r3, [r1, #4]
 800811a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800811e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008122:	604b      	str	r3, [r1, #4]
 8008124:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008126:	06d9      	lsls	r1, r3, #27
 8008128:	d456      	bmi.n	80081d8 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800812a:	071d      	lsls	r5, r3, #28
 800812c:	d517      	bpl.n	800815e <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800812e:	6963      	ldr	r3, [r4, #20]
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 80b4 	beq.w	800829e <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008136:	4b87      	ldr	r3, [pc, #540]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
 8008138:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800813a:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 800813c:	f042 0201 	orr.w	r2, r2, #1
 8008140:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008142:	f7fd ff5d 	bl	8006000 <HAL_GetTick>
 8008146:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008148:	e005      	b.n	8008156 <HAL_RCC_OscConfig+0xe6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800814a:	f7fd ff59 	bl	8006000 <HAL_GetTick>
 800814e:	1b40      	subs	r0, r0, r5
 8008150:	2802      	cmp	r0, #2
 8008152:	f200 8125 	bhi.w	80083a0 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008156:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8008158:	0798      	lsls	r0, r3, #30
 800815a:	d5f6      	bpl.n	800814a <HAL_RCC_OscConfig+0xda>
 800815c:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800815e:	069a      	lsls	r2, r3, #26
 8008160:	d517      	bpl.n	8008192 <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008162:	69a3      	ldr	r3, [r4, #24]
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 8134 	beq.w	80083d2 <HAL_RCC_OscConfig+0x362>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800816a:	4b7a      	ldr	r3, [pc, #488]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
 800816c:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800816e:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8008170:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008174:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008176:	f7fd ff43 	bl	8006000 <HAL_GetTick>
 800817a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800817c:	e005      	b.n	800818a <HAL_RCC_OscConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800817e:	f7fd ff3f 	bl	8006000 <HAL_GetTick>
 8008182:	1b40      	subs	r0, r0, r5
 8008184:	2802      	cmp	r0, #2
 8008186:	f200 810b 	bhi.w	80083a0 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800818a:	6833      	ldr	r3, [r6, #0]
 800818c:	049f      	lsls	r7, r3, #18
 800818e:	d5f6      	bpl.n	800817e <HAL_RCC_OscConfig+0x10e>
 8008190:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008192:	0759      	lsls	r1, r3, #29
 8008194:	f100 80b2 	bmi.w	80082fc <HAL_RCC_OscConfig+0x28c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008198:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800819a:	b1d8      	cbz	r0, 80081d4 <HAL_RCC_OscConfig+0x164>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800819c:	4b6d      	ldr	r3, [pc, #436]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
 800819e:	691a      	ldr	r2, [r3, #16]
 80081a0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80081a4:	2a18      	cmp	r2, #24
 80081a6:	f000 81ce 	beq.w	8008546 <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081aa:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081ac:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081ae:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 80081b0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80081b4:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081b6:	f000 8161 	beq.w	800847c <HAL_RCC_OscConfig+0x40c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ba:	f7fd ff21 	bl	8006000 <HAL_GetTick>
 80081be:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081c0:	e005      	b.n	80081ce <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081c2:	f7fd ff1d 	bl	8006000 <HAL_GetTick>
 80081c6:	1b00      	subs	r0, r0, r4
 80081c8:	2802      	cmp	r0, #2
 80081ca:	f200 80e9 	bhi.w	80083a0 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081ce:	682b      	ldr	r3, [r5, #0]
 80081d0:	019b      	lsls	r3, r3, #6
 80081d2:	d4f6      	bmi.n	80081c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80081d4:	2000      	movs	r0, #0
}
 80081d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081d8:	4a5e      	ldr	r2, [pc, #376]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
 80081da:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081de:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80081e2:	2b08      	cmp	r3, #8
 80081e4:	d072      	beq.n	80082cc <HAL_RCC_OscConfig+0x25c>
 80081e6:	2b18      	cmp	r3, #24
 80081e8:	d06c      	beq.n	80082c4 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80081ea:	69e3      	ldr	r3, [r4, #28]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 8103 	beq.w	80083f8 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 80081f2:	4b58      	ldr	r3, [pc, #352]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
 80081f4:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081f6:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 80081f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80081fe:	f7fd feff 	bl	8006000 <HAL_GetTick>
 8008202:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008204:	e005      	b.n	8008212 <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008206:	f7fd fefb 	bl	8006000 <HAL_GetTick>
 800820a:	1b40      	subs	r0, r0, r5
 800820c:	2802      	cmp	r0, #2
 800820e:	f200 80c7 	bhi.w	80083a0 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008212:	6833      	ldr	r3, [r6, #0]
 8008214:	05db      	lsls	r3, r3, #23
 8008216:	d5f6      	bpl.n	8008206 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008218:	f7fd ff0a 	bl	8006030 <HAL_GetREVID>
 800821c:	f241 0303 	movw	r3, #4099	; 0x1003
 8008220:	4298      	cmp	r0, r3
 8008222:	f200 81e9 	bhi.w	80085f8 <HAL_RCC_OscConfig+0x588>
 8008226:	6a22      	ldr	r2, [r4, #32]
 8008228:	6873      	ldr	r3, [r6, #4]
 800822a:	2a20      	cmp	r2, #32
 800822c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008230:	bf0c      	ite	eq
 8008232:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8008236:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800823a:	6073      	str	r3, [r6, #4]
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	e774      	b.n	800812a <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008240:	2b18      	cmp	r3, #24
 8008242:	f000 810b 	beq.w	800845c <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008246:	68e2      	ldr	r2, [r4, #12]
 8008248:	2a00      	cmp	r2, #0
 800824a:	f000 80f3 	beq.w	8008434 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800824e:	4941      	ldr	r1, [pc, #260]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
 8008250:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008252:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008254:	f023 0319 	bic.w	r3, r3, #25
 8008258:	4313      	orrs	r3, r2
 800825a:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 800825c:	f7fd fed0 	bl	8006000 <HAL_GetTick>
 8008260:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008262:	e005      	b.n	8008270 <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008264:	f7fd fecc 	bl	8006000 <HAL_GetTick>
 8008268:	1b40      	subs	r0, r0, r5
 800826a:	2802      	cmp	r0, #2
 800826c:	f200 8098 	bhi.w	80083a0 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008270:	6833      	ldr	r3, [r6, #0]
 8008272:	075f      	lsls	r7, r3, #29
 8008274:	d5f6      	bpl.n	8008264 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008276:	f7fd fedb 	bl	8006030 <HAL_GetREVID>
 800827a:	f241 0303 	movw	r3, #4099	; 0x1003
 800827e:	4298      	cmp	r0, r3
 8008280:	f200 81c3 	bhi.w	800860a <HAL_RCC_OscConfig+0x59a>
 8008284:	6922      	ldr	r2, [r4, #16]
 8008286:	6873      	ldr	r3, [r6, #4]
 8008288:	2a40      	cmp	r2, #64	; 0x40
 800828a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800828e:	bf0c      	ite	eq
 8008290:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8008294:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8008298:	6073      	str	r3, [r6, #4]
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	e743      	b.n	8008126 <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 800829e:	4b2d      	ldr	r3, [pc, #180]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
 80082a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082a2:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 80082a4:	f022 0201 	bic.w	r2, r2, #1
 80082a8:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80082aa:	f7fd fea9 	bl	8006000 <HAL_GetTick>
 80082ae:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082b0:	e004      	b.n	80082bc <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082b2:	f7fd fea5 	bl	8006000 <HAL_GetTick>
 80082b6:	1b40      	subs	r0, r0, r5
 80082b8:	2802      	cmp	r0, #2
 80082ba:	d871      	bhi.n	80083a0 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082bc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80082be:	0799      	lsls	r1, r3, #30
 80082c0:	d4f7      	bmi.n	80082b2 <HAL_RCC_OscConfig+0x242>
 80082c2:	e74b      	b.n	800815c <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80082c4:	f002 0203 	and.w	r2, r2, #3
 80082c8:	2a01      	cmp	r2, #1
 80082ca:	d18e      	bne.n	80081ea <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082cc:	4b21      	ldr	r3, [pc, #132]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	05da      	lsls	r2, r3, #23
 80082d2:	d552      	bpl.n	800837a <HAL_RCC_OscConfig+0x30a>
 80082d4:	69e3      	ldr	r3, [r4, #28]
 80082d6:	2b80      	cmp	r3, #128	; 0x80
 80082d8:	d04f      	beq.n	800837a <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 80082da:	2001      	movs	r0, #1
}
 80082dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80082de:	f001 0103 	and.w	r1, r1, #3
 80082e2:	2902      	cmp	r1, #2
 80082e4:	f47f aed7 	bne.w	8008096 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082e8:	4a1a      	ldr	r2, [pc, #104]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
 80082ea:	6812      	ldr	r2, [r2, #0]
 80082ec:	0392      	lsls	r2, r2, #14
 80082ee:	f57f aef6 	bpl.w	80080de <HAL_RCC_OscConfig+0x6e>
 80082f2:	6862      	ldr	r2, [r4, #4]
 80082f4:	2a00      	cmp	r2, #0
 80082f6:	f47f aef2 	bne.w	80080de <HAL_RCC_OscConfig+0x6e>
 80082fa:	e7ee      	b.n	80082da <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 80082fc:	4b16      	ldr	r3, [pc, #88]	; (8008358 <HAL_RCC_OscConfig+0x2e8>)
 80082fe:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008300:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8008302:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008306:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008308:	f7fd fe7a 	bl	8006000 <HAL_GetTick>
 800830c:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800830e:	e004      	b.n	800831a <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008310:	f7fd fe76 	bl	8006000 <HAL_GetTick>
 8008314:	1b40      	subs	r0, r0, r5
 8008316:	2864      	cmp	r0, #100	; 0x64
 8008318:	d842      	bhi.n	80083a0 <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800831a:	6833      	ldr	r3, [r6, #0]
 800831c:	05da      	lsls	r2, r3, #23
 800831e:	d5f7      	bpl.n	8008310 <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008320:	68a3      	ldr	r3, [r4, #8]
 8008322:	2b01      	cmp	r3, #1
 8008324:	f000 817a 	beq.w	800861c <HAL_RCC_OscConfig+0x5ac>
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 814b 	beq.w	80085c4 <HAL_RCC_OscConfig+0x554>
 800832e:	2b05      	cmp	r3, #5
 8008330:	4b08      	ldr	r3, [pc, #32]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
 8008332:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008334:	f000 8187 	beq.w	8008646 <HAL_RCC_OscConfig+0x5d6>
 8008338:	f022 0201 	bic.w	r2, r2, #1
 800833c:	671a      	str	r2, [r3, #112]	; 0x70
 800833e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008340:	f022 0204 	bic.w	r2, r2, #4
 8008344:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008346:	f7fd fe5b 	bl	8006000 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800834a:	4e02      	ldr	r6, [pc, #8]	; (8008354 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800834c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008350:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008352:	e008      	b.n	8008366 <HAL_RCC_OscConfig+0x2f6>
 8008354:	58024400 	.word	0x58024400
 8008358:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800835c:	f7fd fe50 	bl	8006000 <HAL_GetTick>
 8008360:	1b40      	subs	r0, r0, r5
 8008362:	42b8      	cmp	r0, r7
 8008364:	d81c      	bhi.n	80083a0 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008366:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008368:	079b      	lsls	r3, r3, #30
 800836a:	d5f7      	bpl.n	800835c <HAL_RCC_OscConfig+0x2ec>
 800836c:	e714      	b.n	8008198 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800836e:	4aae      	ldr	r2, [pc, #696]	; (8008628 <HAL_RCC_OscConfig+0x5b8>)
 8008370:	6813      	ldr	r3, [r2, #0]
 8008372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008376:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008378:	e6a2      	b.n	80080c0 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800837a:	f7fd fe59 	bl	8006030 <HAL_GetREVID>
 800837e:	f241 0303 	movw	r3, #4099	; 0x1003
 8008382:	4298      	cmp	r0, r3
 8008384:	d870      	bhi.n	8008468 <HAL_RCC_OscConfig+0x3f8>
 8008386:	6a22      	ldr	r2, [r4, #32]
 8008388:	2a20      	cmp	r2, #32
 800838a:	f000 8153 	beq.w	8008634 <HAL_RCC_OscConfig+0x5c4>
 800838e:	49a6      	ldr	r1, [pc, #664]	; (8008628 <HAL_RCC_OscConfig+0x5b8>)
 8008390:	684b      	ldr	r3, [r1, #4]
 8008392:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008396:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800839a:	604b      	str	r3, [r1, #4]
 800839c:	6823      	ldr	r3, [r4, #0]
 800839e:	e6c4      	b.n	800812a <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 80083a0:	2003      	movs	r0, #3
}
 80083a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083a4:	4ba0      	ldr	r3, [pc, #640]	; (8008628 <HAL_RCC_OscConfig+0x5b8>)
 80083a6:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083a8:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80083b8:	f7fd fe22 	bl	8006000 <HAL_GetTick>
 80083bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083be:	e004      	b.n	80083ca <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083c0:	f7fd fe1e 	bl	8006000 <HAL_GetTick>
 80083c4:	1b40      	subs	r0, r0, r5
 80083c6:	2864      	cmp	r0, #100	; 0x64
 80083c8:	d8ea      	bhi.n	80083a0 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083ca:	6833      	ldr	r3, [r6, #0]
 80083cc:	0398      	lsls	r0, r3, #14
 80083ce:	d4f7      	bmi.n	80083c0 <HAL_RCC_OscConfig+0x350>
 80083d0:	e684      	b.n	80080dc <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 80083d2:	4b95      	ldr	r3, [pc, #596]	; (8008628 <HAL_RCC_OscConfig+0x5b8>)
 80083d4:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083d6:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 80083d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80083dc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80083de:	f7fd fe0f 	bl	8006000 <HAL_GetTick>
 80083e2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083e4:	e004      	b.n	80083f0 <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80083e6:	f7fd fe0b 	bl	8006000 <HAL_GetTick>
 80083ea:	1b40      	subs	r0, r0, r5
 80083ec:	2802      	cmp	r0, #2
 80083ee:	d8d7      	bhi.n	80083a0 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083f0:	6833      	ldr	r3, [r6, #0]
 80083f2:	0498      	lsls	r0, r3, #18
 80083f4:	d4f7      	bmi.n	80083e6 <HAL_RCC_OscConfig+0x376>
 80083f6:	e6cb      	b.n	8008190 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 80083f8:	4b8b      	ldr	r3, [pc, #556]	; (8008628 <HAL_RCC_OscConfig+0x5b8>)
 80083fa:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083fc:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 80083fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008402:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008404:	f7fd fdfc 	bl	8006000 <HAL_GetTick>
 8008408:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800840a:	e004      	b.n	8008416 <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800840c:	f7fd fdf8 	bl	8006000 <HAL_GetTick>
 8008410:	1b40      	subs	r0, r0, r5
 8008412:	2802      	cmp	r0, #2
 8008414:	d8c4      	bhi.n	80083a0 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008416:	6833      	ldr	r3, [r6, #0]
 8008418:	05df      	lsls	r7, r3, #23
 800841a:	d4f7      	bmi.n	800840c <HAL_RCC_OscConfig+0x39c>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	e684      	b.n	800812a <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008420:	4a81      	ldr	r2, [pc, #516]	; (8008628 <HAL_RCC_OscConfig+0x5b8>)
 8008422:	6921      	ldr	r1, [r4, #16]
 8008424:	6853      	ldr	r3, [r2, #4]
 8008426:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800842a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800842e:	6053      	str	r3, [r2, #4]
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	e678      	b.n	8008126 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 8008434:	4b7c      	ldr	r3, [pc, #496]	; (8008628 <HAL_RCC_OscConfig+0x5b8>)
 8008436:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008438:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 800843a:	f022 0201 	bic.w	r2, r2, #1
 800843e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008440:	f7fd fdde 	bl	8006000 <HAL_GetTick>
 8008444:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008446:	e004      	b.n	8008452 <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008448:	f7fd fdda 	bl	8006000 <HAL_GetTick>
 800844c:	1b40      	subs	r0, r0, r5
 800844e:	2802      	cmp	r0, #2
 8008450:	d8a6      	bhi.n	80083a0 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008452:	6833      	ldr	r3, [r6, #0]
 8008454:	0758      	lsls	r0, r3, #29
 8008456:	d4f7      	bmi.n	8008448 <HAL_RCC_OscConfig+0x3d8>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	e664      	b.n	8008126 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800845c:	0792      	lsls	r2, r2, #30
 800845e:	f47f aef2 	bne.w	8008246 <HAL_RCC_OscConfig+0x1d6>
 8008462:	e645      	b.n	80080f0 <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8008464:	2001      	movs	r0, #1
}
 8008466:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008468:	4a6f      	ldr	r2, [pc, #444]	; (8008628 <HAL_RCC_OscConfig+0x5b8>)
 800846a:	6a21      	ldr	r1, [r4, #32]
 800846c:	68d3      	ldr	r3, [r2, #12]
 800846e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008472:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008476:	60d3      	str	r3, [r2, #12]
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	e656      	b.n	800812a <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 800847c:	f7fd fdc0 	bl	8006000 <HAL_GetTick>
 8008480:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008482:	e004      	b.n	800848e <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008484:	f7fd fdbc 	bl	8006000 <HAL_GetTick>
 8008488:	1b80      	subs	r0, r0, r6
 800848a:	2802      	cmp	r0, #2
 800848c:	d888      	bhi.n	80083a0 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800848e:	682b      	ldr	r3, [r5, #0]
 8008490:	0199      	lsls	r1, r3, #6
 8008492:	d4f7      	bmi.n	8008484 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008494:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8008496:	4b65      	ldr	r3, [pc, #404]	; (800862c <HAL_RCC_OscConfig+0x5bc>)
 8008498:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800849a:	4013      	ands	r3, r2
 800849c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800849e:	4964      	ldr	r1, [pc, #400]	; (8008630 <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084a0:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084a2:	4e61      	ldr	r6, [pc, #388]	; (8008628 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084a4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80084a8:	62ab      	str	r3, [r5, #40]	; 0x28
 80084aa:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80084ac:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80084b0:	3f01      	subs	r7, #1
 80084b2:	1e50      	subs	r0, r2, #1
 80084b4:	3b01      	subs	r3, #1
 80084b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80084b8:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80084bc:	025b      	lsls	r3, r3, #9
 80084be:	0400      	lsls	r0, r0, #16
 80084c0:	3a01      	subs	r2, #1
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80084c8:	0612      	lsls	r2, r2, #24
 80084ca:	4303      	orrs	r3, r0
 80084cc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80084d0:	433b      	orrs	r3, r7
 80084d2:	4313      	orrs	r3, r2
 80084d4:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80084d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80084d8:	f023 0301 	bic.w	r3, r3, #1
 80084dc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80084de:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80084e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80084e2:	4011      	ands	r1, r2
 80084e4:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80084e8:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80084ea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80084ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80084ee:	f023 030c 	bic.w	r3, r3, #12
 80084f2:	4313      	orrs	r3, r2
 80084f4:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80084f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80084f8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80084fa:	f023 0302 	bic.w	r3, r3, #2
 80084fe:	4313      	orrs	r3, r2
 8008500:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008502:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008508:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800850a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800850c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008510:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008512:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008518:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800851a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800851c:	f043 0301 	orr.w	r3, r3, #1
 8008520:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8008522:	682b      	ldr	r3, [r5, #0]
 8008524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008528:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800852a:	f7fd fd69 	bl	8006000 <HAL_GetTick>
 800852e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008530:	e005      	b.n	800853e <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008532:	f7fd fd65 	bl	8006000 <HAL_GetTick>
 8008536:	1b00      	subs	r0, r0, r4
 8008538:	2802      	cmp	r0, #2
 800853a:	f63f af31 	bhi.w	80083a0 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800853e:	6833      	ldr	r3, [r6, #0]
 8008540:	019a      	lsls	r2, r3, #6
 8008542:	d5f6      	bpl.n	8008532 <HAL_RCC_OscConfig+0x4c2>
 8008544:	e646      	b.n	80081d4 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008546:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800854a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800854c:	f43f ae43 	beq.w	80081d6 <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008550:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008554:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008556:	428b      	cmp	r3, r1
 8008558:	f47f aebf 	bne.w	80082da <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800855c:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008560:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008562:	429a      	cmp	r2, r3
 8008564:	f47f aeb9 	bne.w	80082da <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008568:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800856a:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800856e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008570:	429a      	cmp	r2, r3
 8008572:	f47f aeb2 	bne.w	80082da <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008576:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008578:	f3c5 2246 	ubfx	r2, r5, #9, #7
 800857c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800857e:	429a      	cmp	r2, r3
 8008580:	f47f aeab 	bne.w	80082da <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008584:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008586:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800858a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800858c:	429a      	cmp	r2, r3
 800858e:	f47f aea4 	bne.w	80082da <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008592:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008594:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8008598:	3801      	subs	r0, #1
  return HAL_OK;
 800859a:	1a28      	subs	r0, r5, r0
 800859c:	bf18      	it	ne
 800859e:	2001      	movne	r0, #1
}
 80085a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80085ae:	601a      	str	r2, [r3, #0]
 80085b0:	e586      	b.n	80080c0 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085b2:	4a1d      	ldr	r2, [pc, #116]	; (8008628 <HAL_RCC_OscConfig+0x5b8>)
 80085b4:	6853      	ldr	r3, [r2, #4]
 80085b6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80085ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085be:	6053      	str	r3, [r2, #4]
 80085c0:	6823      	ldr	r3, [r4, #0]
 80085c2:	e5b0      	b.n	8008126 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085c4:	4b18      	ldr	r3, [pc, #96]	; (8008628 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085c6:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085cc:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085ce:	f022 0201 	bic.w	r2, r2, #1
 80085d2:	671a      	str	r2, [r3, #112]	; 0x70
 80085d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80085d6:	f022 0204 	bic.w	r2, r2, #4
 80085da:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80085dc:	f7fd fd10 	bl	8006000 <HAL_GetTick>
 80085e0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085e2:	e005      	b.n	80085f0 <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085e4:	f7fd fd0c 	bl	8006000 <HAL_GetTick>
 80085e8:	1b40      	subs	r0, r0, r5
 80085ea:	42b8      	cmp	r0, r7
 80085ec:	f63f aed8 	bhi.w	80083a0 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085f0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80085f2:	0798      	lsls	r0, r3, #30
 80085f4:	d4f6      	bmi.n	80085e4 <HAL_RCC_OscConfig+0x574>
 80085f6:	e5cf      	b.n	8008198 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085f8:	68f3      	ldr	r3, [r6, #12]
 80085fa:	6a22      	ldr	r2, [r4, #32]
 80085fc:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008600:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008604:	60f3      	str	r3, [r6, #12]
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	e58f      	b.n	800812a <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800860a:	6873      	ldr	r3, [r6, #4]
 800860c:	6922      	ldr	r2, [r4, #16]
 800860e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008612:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008616:	6073      	str	r3, [r6, #4]
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	e584      	b.n	8008126 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800861c:	4a02      	ldr	r2, [pc, #8]	; (8008628 <HAL_RCC_OscConfig+0x5b8>)
 800861e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8008620:	f043 0301 	orr.w	r3, r3, #1
 8008624:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008626:	e68e      	b.n	8008346 <HAL_RCC_OscConfig+0x2d6>
 8008628:	58024400 	.word	0x58024400
 800862c:	fffffc0c 	.word	0xfffffc0c
 8008630:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008634:	4a08      	ldr	r2, [pc, #32]	; (8008658 <HAL_RCC_OscConfig+0x5e8>)
 8008636:	6853      	ldr	r3, [r2, #4]
 8008638:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800863c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008640:	6053      	str	r3, [r2, #4]
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	e571      	b.n	800812a <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008646:	f042 0204 	orr.w	r2, r2, #4
 800864a:	671a      	str	r2, [r3, #112]	; 0x70
 800864c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800864e:	f042 0201 	orr.w	r2, r2, #1
 8008652:	671a      	str	r2, [r3, #112]	; 0x70
 8008654:	e677      	b.n	8008346 <HAL_RCC_OscConfig+0x2d6>
 8008656:	bf00      	nop
 8008658:	58024400 	.word	0x58024400

0800865c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800865c:	4a47      	ldr	r2, [pc, #284]	; (800877c <HAL_RCC_GetSysClockFreq+0x120>)
 800865e:	6913      	ldr	r3, [r2, #16]
 8008660:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008664:	2b10      	cmp	r3, #16
 8008666:	d004      	beq.n	8008672 <HAL_RCC_GetSysClockFreq+0x16>
 8008668:	2b18      	cmp	r3, #24
 800866a:	d00d      	beq.n	8008688 <HAL_RCC_GetSysClockFreq+0x2c>
 800866c:	b11b      	cbz	r3, 8008676 <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800866e:	4844      	ldr	r0, [pc, #272]	; (8008780 <HAL_RCC_GetSysClockFreq+0x124>)
 8008670:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008672:	4844      	ldr	r0, [pc, #272]	; (8008784 <HAL_RCC_GetSysClockFreq+0x128>)
 8008674:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008676:	6813      	ldr	r3, [r2, #0]
 8008678:	0699      	lsls	r1, r3, #26
 800867a:	d54a      	bpl.n	8008712 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800867c:	6813      	ldr	r3, [r2, #0]
 800867e:	4842      	ldr	r0, [pc, #264]	; (8008788 <HAL_RCC_GetSysClockFreq+0x12c>)
 8008680:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008684:	40d8      	lsrs	r0, r3
 8008686:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008688:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800868a:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800868c:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800868e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8008690:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008694:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008698:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 800869a:	d038      	beq.n	800870e <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800869c:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80086a0:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086a4:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80086a8:	fb01 f105 	mul.w	r1, r1, r5
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	ee07 1a90 	vmov	s15, r1
 80086b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 80086b6:	d002      	beq.n	80086be <HAL_RCC_GetSysClockFreq+0x62>
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d02c      	beq.n	8008716 <HAL_RCC_GetSysClockFreq+0xba>
 80086bc:	b393      	cbz	r3, 8008724 <HAL_RCC_GetSysClockFreq+0xc8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086be:	ee07 0a90 	vmov	s15, r0
 80086c2:	ed9f 5a32 	vldr	s10, [pc, #200]	; 800878c <HAL_RCC_GetSysClockFreq+0x130>
 80086c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80086cc:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80086d0:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8008790 <HAL_RCC_GetSysClockFreq+0x134>
 80086d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d8:	ee07 3a90 	vmov	s15, r3
 80086dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80086e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086e4:	eee7 7a25 	vfma.f32	s15, s14, s11
 80086e8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80086ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80086f0:	4b22      	ldr	r3, [pc, #136]	; (800877c <HAL_RCC_GetSysClockFreq+0x120>)
 80086f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80086f8:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80086fa:	ee07 3a90 	vmov	s15, r3
 80086fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800870a:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800870e:	bc30      	pop	{r4, r5}
 8008710:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008712:	481d      	ldr	r0, [pc, #116]	; (8008788 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8008714:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008716:	ee07 0a90 	vmov	s15, r0
 800871a:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8008794 <HAL_RCC_GetSysClockFreq+0x138>
 800871e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008722:	e7d2      	b.n	80086ca <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008724:	6813      	ldr	r3, [r2, #0]
 8008726:	069b      	lsls	r3, r3, #26
 8008728:	d520      	bpl.n	800876c <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800872a:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800872c:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008730:	4915      	ldr	r1, [pc, #84]	; (8008788 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008732:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008736:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800873a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800873e:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008740:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008742:	eddf 4a13 	vldr	s9, [pc, #76]	; 8008790 <HAL_RCC_GetSysClockFreq+0x134>
 8008746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800874a:	ee06 1a10 	vmov	s12, r1
 800874e:	ee06 3a90 	vmov	s13, r3
 8008752:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008756:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800875a:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800875e:	eee7 6a24 	vfma.f32	s13, s14, s9
 8008762:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008766:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800876a:	e7c1      	b.n	80086f0 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800876c:	ee07 0a90 	vmov	s15, r0
 8008770:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8008798 <HAL_RCC_GetSysClockFreq+0x13c>
 8008774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008778:	e7a7      	b.n	80086ca <HAL_RCC_GetSysClockFreq+0x6e>
 800877a:	bf00      	nop
 800877c:	58024400 	.word	0x58024400
 8008780:	003d0900 	.word	0x003d0900
 8008784:	017d7840 	.word	0x017d7840
 8008788:	03d09000 	.word	0x03d09000
 800878c:	4a742400 	.word	0x4a742400
 8008790:	39000000 	.word	0x39000000
 8008794:	4bbebc20 	.word	0x4bbebc20
 8008798:	4c742400 	.word	0x4c742400

0800879c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800879c:	2800      	cmp	r0, #0
 800879e:	f000 810e 	beq.w	80089be <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087a2:	4a8d      	ldr	r2, [pc, #564]	; (80089d8 <HAL_RCC_ClockConfig+0x23c>)
 80087a4:	6813      	ldr	r3, [r2, #0]
 80087a6:	f003 030f 	and.w	r3, r3, #15
 80087aa:	428b      	cmp	r3, r1
{
 80087ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b0:	4604      	mov	r4, r0
 80087b2:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087b4:	d20c      	bcs.n	80087d0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087b6:	6813      	ldr	r3, [r2, #0]
 80087b8:	f023 030f 	bic.w	r3, r3, #15
 80087bc:	430b      	orrs	r3, r1
 80087be:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087c0:	6813      	ldr	r3, [r2, #0]
 80087c2:	f003 030f 	and.w	r3, r3, #15
 80087c6:	428b      	cmp	r3, r1
 80087c8:	d002      	beq.n	80087d0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80087ca:	2001      	movs	r0, #1
}
 80087cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	075f      	lsls	r7, r3, #29
 80087d4:	d50b      	bpl.n	80087ee <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087d6:	4981      	ldr	r1, [pc, #516]	; (80089dc <HAL_RCC_ClockConfig+0x240>)
 80087d8:	6920      	ldr	r0, [r4, #16]
 80087da:	698a      	ldr	r2, [r1, #24]
 80087dc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80087e0:	4290      	cmp	r0, r2
 80087e2:	d904      	bls.n	80087ee <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087e4:	698a      	ldr	r2, [r1, #24]
 80087e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80087ea:	4302      	orrs	r2, r0
 80087ec:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087ee:	071e      	lsls	r6, r3, #28
 80087f0:	d50b      	bpl.n	800880a <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80087f2:	497a      	ldr	r1, [pc, #488]	; (80089dc <HAL_RCC_ClockConfig+0x240>)
 80087f4:	6960      	ldr	r0, [r4, #20]
 80087f6:	69ca      	ldr	r2, [r1, #28]
 80087f8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80087fc:	4290      	cmp	r0, r2
 80087fe:	d904      	bls.n	800880a <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008800:	69ca      	ldr	r2, [r1, #28]
 8008802:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008806:	4302      	orrs	r2, r0
 8008808:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800880a:	06d8      	lsls	r0, r3, #27
 800880c:	d50b      	bpl.n	8008826 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800880e:	4973      	ldr	r1, [pc, #460]	; (80089dc <HAL_RCC_ClockConfig+0x240>)
 8008810:	69a0      	ldr	r0, [r4, #24]
 8008812:	69ca      	ldr	r2, [r1, #28]
 8008814:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008818:	4290      	cmp	r0, r2
 800881a:	d904      	bls.n	8008826 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800881c:	69ca      	ldr	r2, [r1, #28]
 800881e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008822:	4302      	orrs	r2, r0
 8008824:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008826:	0699      	lsls	r1, r3, #26
 8008828:	d50b      	bpl.n	8008842 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800882a:	496c      	ldr	r1, [pc, #432]	; (80089dc <HAL_RCC_ClockConfig+0x240>)
 800882c:	69e0      	ldr	r0, [r4, #28]
 800882e:	6a0a      	ldr	r2, [r1, #32]
 8008830:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008834:	4290      	cmp	r0, r2
 8008836:	d904      	bls.n	8008842 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008838:	6a0a      	ldr	r2, [r1, #32]
 800883a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800883e:	4302      	orrs	r2, r0
 8008840:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008842:	079a      	lsls	r2, r3, #30
 8008844:	f140 80ad 	bpl.w	80089a2 <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008848:	4864      	ldr	r0, [pc, #400]	; (80089dc <HAL_RCC_ClockConfig+0x240>)
 800884a:	68e1      	ldr	r1, [r4, #12]
 800884c:	6982      	ldr	r2, [r0, #24]
 800884e:	f002 020f 	and.w	r2, r2, #15
 8008852:	4291      	cmp	r1, r2
 8008854:	d904      	bls.n	8008860 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008856:	6982      	ldr	r2, [r0, #24]
 8008858:	f022 020f 	bic.w	r2, r2, #15
 800885c:	430a      	orrs	r2, r1
 800885e:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008860:	07d8      	lsls	r0, r3, #31
 8008862:	d531      	bpl.n	80088c8 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008864:	4a5d      	ldr	r2, [pc, #372]	; (80089dc <HAL_RCC_ClockConfig+0x240>)
 8008866:	68a1      	ldr	r1, [r4, #8]
 8008868:	6993      	ldr	r3, [r2, #24]
 800886a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800886e:	430b      	orrs	r3, r1
 8008870:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008872:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008874:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008876:	2902      	cmp	r1, #2
 8008878:	f000 80a3 	beq.w	80089c2 <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800887c:	2903      	cmp	r1, #3
 800887e:	f000 809a 	beq.w	80089b6 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008882:	2901      	cmp	r1, #1
 8008884:	f000 80a3 	beq.w	80089ce <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008888:	0758      	lsls	r0, r3, #29
 800888a:	d59e      	bpl.n	80087ca <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800888c:	4a53      	ldr	r2, [pc, #332]	; (80089dc <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800888e:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008892:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008894:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008896:	f023 0307 	bic.w	r3, r3, #7
 800889a:	430b      	orrs	r3, r1
 800889c:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 800889e:	f7fd fbaf 	bl	8006000 <HAL_GetTick>
 80088a2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088a4:	e005      	b.n	80088b2 <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088a6:	f7fd fbab 	bl	8006000 <HAL_GetTick>
 80088aa:	1b80      	subs	r0, r0, r6
 80088ac:	4540      	cmp	r0, r8
 80088ae:	f200 808c 	bhi.w	80089ca <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	6862      	ldr	r2, [r4, #4]
 80088b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088ba:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80088be:	d1f2      	bne.n	80088a6 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	0799      	lsls	r1, r3, #30
 80088c4:	d506      	bpl.n	80088d4 <HAL_RCC_ClockConfig+0x138>
 80088c6:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088c8:	4844      	ldr	r0, [pc, #272]	; (80089dc <HAL_RCC_ClockConfig+0x240>)
 80088ca:	6982      	ldr	r2, [r0, #24]
 80088cc:	f002 020f 	and.w	r2, r2, #15
 80088d0:	428a      	cmp	r2, r1
 80088d2:	d86a      	bhi.n	80089aa <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80088d4:	4940      	ldr	r1, [pc, #256]	; (80089d8 <HAL_RCC_ClockConfig+0x23c>)
 80088d6:	680a      	ldr	r2, [r1, #0]
 80088d8:	f002 020f 	and.w	r2, r2, #15
 80088dc:	42aa      	cmp	r2, r5
 80088de:	d90a      	bls.n	80088f6 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088e0:	680a      	ldr	r2, [r1, #0]
 80088e2:	f022 020f 	bic.w	r2, r2, #15
 80088e6:	432a      	orrs	r2, r5
 80088e8:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088ea:	680a      	ldr	r2, [r1, #0]
 80088ec:	f002 020f 	and.w	r2, r2, #15
 80088f0:	42aa      	cmp	r2, r5
 80088f2:	f47f af6a 	bne.w	80087ca <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088f6:	075a      	lsls	r2, r3, #29
 80088f8:	d50b      	bpl.n	8008912 <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80088fa:	4938      	ldr	r1, [pc, #224]	; (80089dc <HAL_RCC_ClockConfig+0x240>)
 80088fc:	6920      	ldr	r0, [r4, #16]
 80088fe:	698a      	ldr	r2, [r1, #24]
 8008900:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008904:	4290      	cmp	r0, r2
 8008906:	d204      	bcs.n	8008912 <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008908:	698a      	ldr	r2, [r1, #24]
 800890a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800890e:	4302      	orrs	r2, r0
 8008910:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008912:	071f      	lsls	r7, r3, #28
 8008914:	d50b      	bpl.n	800892e <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008916:	4931      	ldr	r1, [pc, #196]	; (80089dc <HAL_RCC_ClockConfig+0x240>)
 8008918:	6960      	ldr	r0, [r4, #20]
 800891a:	69ca      	ldr	r2, [r1, #28]
 800891c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008920:	4290      	cmp	r0, r2
 8008922:	d204      	bcs.n	800892e <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008924:	69ca      	ldr	r2, [r1, #28]
 8008926:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800892a:	4302      	orrs	r2, r0
 800892c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800892e:	06de      	lsls	r6, r3, #27
 8008930:	d50b      	bpl.n	800894a <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008932:	492a      	ldr	r1, [pc, #168]	; (80089dc <HAL_RCC_ClockConfig+0x240>)
 8008934:	69a0      	ldr	r0, [r4, #24]
 8008936:	69ca      	ldr	r2, [r1, #28]
 8008938:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800893c:	4290      	cmp	r0, r2
 800893e:	d204      	bcs.n	800894a <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008940:	69ca      	ldr	r2, [r1, #28]
 8008942:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008946:	4302      	orrs	r2, r0
 8008948:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800894a:	069d      	lsls	r5, r3, #26
 800894c:	d50b      	bpl.n	8008966 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800894e:	4a23      	ldr	r2, [pc, #140]	; (80089dc <HAL_RCC_ClockConfig+0x240>)
 8008950:	69e1      	ldr	r1, [r4, #28]
 8008952:	6a13      	ldr	r3, [r2, #32]
 8008954:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008958:	4299      	cmp	r1, r3
 800895a:	d204      	bcs.n	8008966 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800895c:	6a13      	ldr	r3, [r2, #32]
 800895e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008962:	430b      	orrs	r3, r1
 8008964:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008966:	f7ff fe79 	bl	800865c <HAL_RCC_GetSysClockFreq>
 800896a:	4b1c      	ldr	r3, [pc, #112]	; (80089dc <HAL_RCC_ClockConfig+0x240>)
 800896c:	4602      	mov	r2, r0
 800896e:	481c      	ldr	r0, [pc, #112]	; (80089e0 <HAL_RCC_ClockConfig+0x244>)
 8008970:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008972:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008974:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8008978:	4d1a      	ldr	r5, [pc, #104]	; (80089e4 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800897a:	f003 030f 	and.w	r3, r3, #15
 800897e:	4c1a      	ldr	r4, [pc, #104]	; (80089e8 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008980:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008982:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008984:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8008988:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800898a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 800898e:	4d17      	ldr	r5, [pc, #92]	; (80089ec <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008990:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008992:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8008996:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008998:	6023      	str	r3, [r4, #0]
}
 800899a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800899e:	f7fd bacd 	b.w	8005f3c <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089a2:	07da      	lsls	r2, r3, #31
 80089a4:	f53f af5e 	bmi.w	8008864 <HAL_RCC_ClockConfig+0xc8>
 80089a8:	e794      	b.n	80088d4 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089aa:	6982      	ldr	r2, [r0, #24]
 80089ac:	f022 020f 	bic.w	r2, r2, #15
 80089b0:	4311      	orrs	r1, r2
 80089b2:	6181      	str	r1, [r0, #24]
 80089b4:	e78e      	b.n	80088d4 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089b6:	019f      	lsls	r7, r3, #6
 80089b8:	f53f af68 	bmi.w	800888c <HAL_RCC_ClockConfig+0xf0>
 80089bc:	e705      	b.n	80087ca <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80089be:	2001      	movs	r0, #1
}
 80089c0:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089c2:	039b      	lsls	r3, r3, #14
 80089c4:	f53f af62 	bmi.w	800888c <HAL_RCC_ClockConfig+0xf0>
 80089c8:	e6ff      	b.n	80087ca <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 80089ca:	2003      	movs	r0, #3
 80089cc:	e6fe      	b.n	80087cc <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089ce:	05de      	lsls	r6, r3, #23
 80089d0:	f53f af5c 	bmi.w	800888c <HAL_RCC_ClockConfig+0xf0>
 80089d4:	e6f9      	b.n	80087ca <HAL_RCC_ClockConfig+0x2e>
 80089d6:	bf00      	nop
 80089d8:	52002000 	.word	0x52002000
 80089dc:	58024400 	.word	0x58024400
 80089e0:	0800a2f4 	.word	0x0800a2f4
 80089e4:	24001068 	.word	0x24001068
 80089e8:	24000004 	.word	0x24000004
 80089ec:	24000000 	.word	0x24000000

080089f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089f0:	b538      	push	{r3, r4, r5, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089f2:	f7ff fe33 	bl	800865c <HAL_RCC_GetSysClockFreq>
 80089f6:	4b0b      	ldr	r3, [pc, #44]	; (8008a24 <HAL_RCC_GetHCLKFreq+0x34>)
 80089f8:	490b      	ldr	r1, [pc, #44]	; (8008a28 <HAL_RCC_GetHCLKFreq+0x38>)
 80089fa:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089fc:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089fe:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a02:	4c0a      	ldr	r4, [pc, #40]	; (8008a2c <HAL_RCC_GetHCLKFreq+0x3c>)
 8008a04:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a08:	4d09      	ldr	r5, [pc, #36]	; (8008a30 <HAL_RCC_GetHCLKFreq+0x40>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a0a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a0c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a0e:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a12:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a16:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a1a:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 8008a1e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a20:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	58024400 	.word	0x58024400
 8008a28:	0800a2f4 	.word	0x0800a2f4
 8008a2c:	24000004 	.word	0x24000004
 8008a30:	24000000 	.word	0x24000000

08008a34 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a34:	4a3b      	ldr	r2, [pc, #236]	; (8008b24 <RCCEx_PLL2_Config+0xf0>)
{
 8008a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a38:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008a3a:	f003 0303 	and.w	r3, r3, #3
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	d069      	beq.n	8008b16 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008a42:	6813      	ldr	r3, [r2, #0]
 8008a44:	4606      	mov	r6, r0
 8008a46:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a48:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8008a4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a4e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008a50:	f7fd fad6 	bl	8006000 <HAL_GetTick>
 8008a54:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a56:	e004      	b.n	8008a62 <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a58:	f7fd fad2 	bl	8006000 <HAL_GetTick>
 8008a5c:	1b43      	subs	r3, r0, r5
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d857      	bhi.n	8008b12 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	011a      	lsls	r2, r3, #4
 8008a66:	d4f7      	bmi.n	8008a58 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a6a:	6832      	ldr	r2, [r6, #0]
 8008a6c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a70:	492d      	ldr	r1, [pc, #180]	; (8008b28 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a72:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008a76:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a78:	6875      	ldr	r5, [r6, #4]
 8008a7a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008a7e:	3d01      	subs	r5, #1
 8008a80:	1e50      	subs	r0, r2, #1
 8008a82:	3b01      	subs	r3, #1
 8008a84:	6932      	ldr	r2, [r6, #16]
 8008a86:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008a8a:	025b      	lsls	r3, r3, #9
 8008a8c:	0400      	lsls	r0, r0, #16
 8008a8e:	3a01      	subs	r2, #1
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008a96:	0612      	lsls	r2, r2, #24
 8008a98:	4303      	orrs	r3, r0
 8008a9a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008a9e:	432b      	orrs	r3, r5
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008aa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008aa6:	6972      	ldr	r2, [r6, #20]
 8008aa8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008aac:	4313      	orrs	r3, r2
 8008aae:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ab0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ab2:	69b2      	ldr	r2, [r6, #24]
 8008ab4:	f023 0320 	bic.w	r3, r3, #32
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008abc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008abe:	f023 0310 	bic.w	r3, r3, #16
 8008ac2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008ac4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008ac6:	69f3      	ldr	r3, [r6, #28]
 8008ac8:	4011      	ands	r1, r2
 8008aca:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008ace:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008ad0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ad2:	f043 0310 	orr.w	r3, r3, #16
 8008ad6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ad8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008ada:	b1f7      	cbz	r7, 8008b1a <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008adc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008ade:	bf0c      	ite	eq
 8008ae0:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008ae4:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008ae8:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008aea:	4b0e      	ldr	r3, [pc, #56]	; (8008b24 <RCCEx_PLL2_Config+0xf0>)
 8008aec:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008aee:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 8008af0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008af4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008af6:	f7fd fa83 	bl	8006000 <HAL_GetTick>
 8008afa:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008afc:	e004      	b.n	8008b08 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008afe:	f7fd fa7f 	bl	8006000 <HAL_GetTick>
 8008b02:	1b00      	subs	r0, r0, r4
 8008b04:	2802      	cmp	r0, #2
 8008b06:	d804      	bhi.n	8008b12 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b08:	682b      	ldr	r3, [r5, #0]
 8008b0a:	011b      	lsls	r3, r3, #4
 8008b0c:	d5f7      	bpl.n	8008afe <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8008b0e:	2000      	movs	r0, #0
}
 8008b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008b12:	2003      	movs	r0, #3
}
 8008b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008b16:	2001      	movs	r0, #1
}
 8008b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b20:	e7e3      	b.n	8008aea <RCCEx_PLL2_Config+0xb6>
 8008b22:	bf00      	nop
 8008b24:	58024400 	.word	0x58024400
 8008b28:	ffff0007 	.word	0xffff0007

08008b2c <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b2c:	4a3b      	ldr	r2, [pc, #236]	; (8008c1c <RCCEx_PLL3_Config+0xf0>)
{
 8008b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b30:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008b32:	f003 0303 	and.w	r3, r3, #3
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d069      	beq.n	8008c0e <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008b3a:	6813      	ldr	r3, [r2, #0]
 8008b3c:	4606      	mov	r6, r0
 8008b3e:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b40:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8008b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b46:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008b48:	f7fd fa5a 	bl	8006000 <HAL_GetTick>
 8008b4c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b4e:	e004      	b.n	8008b5a <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b50:	f7fd fa56 	bl	8006000 <HAL_GetTick>
 8008b54:	1b43      	subs	r3, r0, r5
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d857      	bhi.n	8008c0a <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	009a      	lsls	r2, r3, #2
 8008b5e:	d4f7      	bmi.n	8008b50 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b62:	6832      	ldr	r2, [r6, #0]
 8008b64:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b68:	492d      	ldr	r1, [pc, #180]	; (8008c20 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b6a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008b6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b70:	6875      	ldr	r5, [r6, #4]
 8008b72:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008b76:	3d01      	subs	r5, #1
 8008b78:	1e50      	subs	r0, r2, #1
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	6932      	ldr	r2, [r6, #16]
 8008b7e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008b82:	025b      	lsls	r3, r3, #9
 8008b84:	0400      	lsls	r0, r0, #16
 8008b86:	3a01      	subs	r2, #1
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008b8e:	0612      	lsls	r2, r2, #24
 8008b90:	4303      	orrs	r3, r0
 8008b92:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008b96:	432b      	orrs	r3, r5
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008b9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008b9e:	6972      	ldr	r2, [r6, #20]
 8008ba0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008ba8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008baa:	69b2      	ldr	r2, [r6, #24]
 8008bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008bb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008bb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bba:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008bbc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008bbe:	69f3      	ldr	r3, [r6, #28]
 8008bc0:	4011      	ands	r1, r2
 8008bc2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008bc6:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008bc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bce:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008bd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008bd2:	b1f7      	cbz	r7, 8008c12 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008bd4:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008bd6:	bf0c      	ite	eq
 8008bd8:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008bdc:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008be0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008be2:	4b0e      	ldr	r3, [pc, #56]	; (8008c1c <RCCEx_PLL3_Config+0xf0>)
 8008be4:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008be6:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 8008be8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008bec:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008bee:	f7fd fa07 	bl	8006000 <HAL_GetTick>
 8008bf2:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008bf4:	e004      	b.n	8008c00 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008bf6:	f7fd fa03 	bl	8006000 <HAL_GetTick>
 8008bfa:	1b00      	subs	r0, r0, r4
 8008bfc:	2802      	cmp	r0, #2
 8008bfe:	d804      	bhi.n	8008c0a <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c00:	682b      	ldr	r3, [r5, #0]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	d5f7      	bpl.n	8008bf6 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8008c06:	2000      	movs	r0, #0
}
 8008c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008c0a:	2003      	movs	r0, #3
}
 8008c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008c0e:	2001      	movs	r0, #1
}
 8008c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008c12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008c16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c18:	e7e3      	b.n	8008be2 <RCCEx_PLL3_Config+0xb6>
 8008c1a:	bf00      	nop
 8008c1c:	58024400 	.word	0x58024400
 8008c20:	ffff0007 	.word	0xffff0007

08008c24 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c28:	6803      	ldr	r3, [r0, #0]
{
 8008c2a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c2c:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8008c30:	d01c      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008c32:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8008c34:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008c38:	f000 84c7 	beq.w	80095ca <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8008c3c:	d823      	bhi.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008c3e:	2a00      	cmp	r2, #0
 8008c40:	f000 842c 	beq.w	800949c <HAL_RCCEx_PeriphCLKConfig+0x878>
 8008c44:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008c48:	d120      	bne.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c4a:	2102      	movs	r1, #2
 8008c4c:	3004      	adds	r0, #4
 8008c4e:	f7ff fef1 	bl	8008a34 <RCCEx_PLL2_Config>
 8008c52:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008c54:	2e00      	cmp	r6, #0
 8008c56:	f040 84c0 	bne.w	80095da <HAL_RCCEx_PeriphCLKConfig+0x9b6>
 8008c5a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8008c5c:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008c5e:	48b0      	ldr	r0, [pc, #704]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008c60:	2600      	movs	r6, #0
 8008c62:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8008c64:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c6c:	05da      	lsls	r2, r3, #23
 8008c6e:	d511      	bpl.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008c70:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008c72:	2a04      	cmp	r2, #4
 8008c74:	f200 8580 	bhi.w	8009778 <HAL_RCCEx_PeriphCLKConfig+0xb54>
 8008c78:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008c7c:	04c104ba 	.word	0x04c104ba
 8008c80:	033b04b2 	.word	0x033b04b2
 8008c84:	033b      	.short	0x033b
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008c86:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8008c8a:	d0e8      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c8c:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008c8e:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c92:	d4ed      	bmi.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008c94:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008c96:	059f      	lsls	r7, r3, #22
 8008c98:	d51b      	bpl.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008c9a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008c9c:	2a80      	cmp	r2, #128	; 0x80
 8008c9e:	f000 84b7 	beq.w	8009610 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 8008ca2:	f200 8127 	bhi.w	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008ca6:	2a00      	cmp	r2, #0
 8008ca8:	f000 83e6 	beq.w	8009478 <HAL_RCCEx_PeriphCLKConfig+0x854>
 8008cac:	2a40      	cmp	r2, #64	; 0x40
 8008cae:	f040 8128 	bne.w	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	1d20      	adds	r0, r4, #4
 8008cb6:	f7ff febd 	bl	8008a34 <RCCEx_PLL2_Config>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008cbe:	2d00      	cmp	r5, #0
 8008cc0:	f040 83cc 	bne.w	800945c <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008cc4:	4996      	ldr	r1, [pc, #600]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008cc6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8008cc8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008cca:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8008cce:	4302      	orrs	r2, r0
 8008cd0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008cd2:	0558      	lsls	r0, r3, #21
 8008cd4:	d51f      	bpl.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008cd6:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8008cda:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8008cde:	f000 8462 	beq.w	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8008ce2:	f200 8111 	bhi.w	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8008ce6:	2a00      	cmp	r2, #0
 8008ce8:	f000 83c0 	beq.w	800946c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8008cec:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008cf0:	f040 8112 	bne.w	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	1d20      	adds	r0, r4, #4
 8008cf8:	f7ff fe9c 	bl	8008a34 <RCCEx_PLL2_Config>
 8008cfc:	6823      	ldr	r3, [r4, #0]
 8008cfe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008d00:	2d00      	cmp	r5, #0
 8008d02:	f040 83b1 	bne.w	8009468 <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008d06:	4986      	ldr	r1, [pc, #536]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008d08:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8008d0c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008d0e:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8008d12:	4302      	orrs	r2, r0
 8008d14:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008d16:	0519      	lsls	r1, r3, #20
 8008d18:	d51f      	bpl.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008d1a:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8008d1e:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8008d22:	f000 8437 	beq.w	8009594 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8008d26:	f200 80fd 	bhi.w	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008d2a:	2a00      	cmp	r2, #0
 8008d2c:	f000 83aa 	beq.w	8009484 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8008d30:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008d34:	f040 80fe 	bne.w	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d38:	2100      	movs	r1, #0
 8008d3a:	1d20      	adds	r0, r4, #4
 8008d3c:	f7ff fe7a 	bl	8008a34 <RCCEx_PLL2_Config>
 8008d40:	6823      	ldr	r3, [r4, #0]
 8008d42:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008d44:	2d00      	cmp	r5, #0
 8008d46:	f040 8387 	bne.w	8009458 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008d4a:	4975      	ldr	r1, [pc, #468]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008d4c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8008d50:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008d52:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8008d56:	4302      	orrs	r2, r0
 8008d58:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008d5a:	019a      	lsls	r2, r3, #6
 8008d5c:	d518      	bpl.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 8008d5e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008d60:	2a20      	cmp	r2, #32
 8008d62:	f000 840d 	beq.w	8009580 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008d66:	f200 80e8 	bhi.w	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x316>
 8008d6a:	b13a      	cbz	r2, 8008d7c <HAL_RCCEx_PeriphCLKConfig+0x158>
 8008d6c:	2a10      	cmp	r2, #16
 8008d6e:	f040 80e7 	bne.w	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d72:	496b      	ldr	r1, [pc, #428]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008d74:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008d76:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008d7a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008d7c:	2d00      	cmp	r5, #0
 8008d7e:	f040 83ba 	bne.w	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d82:	4967      	ldr	r1, [pc, #412]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008d84:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008d86:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8008d88:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008d8c:	4302      	orrs	r2, r0
 8008d8e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d90:	04df      	lsls	r7, r3, #19
 8008d92:	d51d      	bpl.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008d94:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008d96:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008d9a:	f000 840d 	beq.w	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8008d9e:	f200 80d2 	bhi.w	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8008da2:	2a00      	cmp	r2, #0
 8008da4:	f000 8374 	beq.w	8009490 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8008da8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008dac:	f040 80d3 	bne.w	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x332>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008db0:	2100      	movs	r1, #0
 8008db2:	1d20      	adds	r0, r4, #4
 8008db4:	f7ff fe3e 	bl	8008a34 <RCCEx_PLL2_Config>
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008dbc:	2d00      	cmp	r5, #0
 8008dbe:	f040 834f 	bne.w	8009460 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008dc2:	4957      	ldr	r1, [pc, #348]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008dc4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008dc6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008dc8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008dcc:	4302      	orrs	r2, r0
 8008dce:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008dd0:	0498      	lsls	r0, r3, #18
 8008dd2:	d51b      	bpl.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008dd4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008dd6:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8008dda:	f000 83bd 	beq.w	8009558 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008dde:	f200 80bd 	bhi.w	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x338>
 8008de2:	b14a      	cbz	r2, 8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008de4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008de8:	f040 80c2 	bne.w	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008dec:	2101      	movs	r1, #1
 8008dee:	1d20      	adds	r0, r4, #4
 8008df0:	f7ff fe20 	bl	8008a34 <RCCEx_PLL2_Config>
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008df8:	2d00      	cmp	r5, #0
 8008dfa:	f040 837e 	bne.w	80094fa <HAL_RCCEx_PeriphCLKConfig+0x8d6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008dfe:	4948      	ldr	r1, [pc, #288]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008e00:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8008e02:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008e04:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008e08:	4302      	orrs	r2, r0
 8008e0a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008e0c:	0459      	lsls	r1, r3, #17
 8008e0e:	d51d      	bpl.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008e10:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8008e14:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8008e18:	f000 83a8 	beq.w	800956c <HAL_RCCEx_PeriphCLKConfig+0x948>
 8008e1c:	f200 80ab 	bhi.w	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8008e20:	b14a      	cbz	r2, 8008e36 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8008e22:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008e26:	f040 80b0 	bne.w	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	1d20      	adds	r0, r4, #4
 8008e2e:	f7ff fe01 	bl	8008a34 <RCCEx_PLL2_Config>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008e36:	2d00      	cmp	r5, #0
 8008e38:	f040 8363 	bne.w	8009502 <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008e3c:	4938      	ldr	r1, [pc, #224]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008e3e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8008e42:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008e44:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8008e48:	4302      	orrs	r2, r0
 8008e4a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8008e4c:	015a      	lsls	r2, r3, #5
 8008e4e:	d509      	bpl.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->DsiClockSelection)
 8008e50:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008e52:	2a00      	cmp	r2, #0
 8008e54:	f000 8264 	beq.w	8009320 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 8008e58:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008e5c:	f000 825a 	beq.w	8009314 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8008e60:	2601      	movs	r6, #1
 8008e62:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e64:	041f      	lsls	r7, r3, #16
 8008e66:	d50d      	bpl.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch(PeriphClkInit->FdcanClockSelection)
 8008e68:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8008e6a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008e6e:	f000 8420 	beq.w	80096b2 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 8008e72:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8008e76:	f000 82ce 	beq.w	8009416 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8008e7a:	2a00      	cmp	r2, #0
 8008e7c:	f000 82d1 	beq.w	8009422 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8008e80:	2601      	movs	r6, #1
 8008e82:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008e84:	01d8      	lsls	r0, r3, #7
 8008e86:	f100 81cf 	bmi.w	8009228 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e8a:	0259      	lsls	r1, r3, #9
 8008e8c:	f100 81ef 	bmi.w	800926e <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008e90:	07df      	lsls	r7, r3, #31
 8008e92:	f140 8088 	bpl.w	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch(PeriphClkInit->Usart16ClockSelection)
 8008e96:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8008e98:	2a28      	cmp	r2, #40	; 0x28
 8008e9a:	f200 81cf 	bhi.w	800923c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8008e9e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008ea2:	007e      	.short	0x007e
 8008ea4:	01cd01cd 	.word	0x01cd01cd
 8008ea8:	01cd01cd 	.word	0x01cd01cd
 8008eac:	01cd01cd 	.word	0x01cd01cd
 8008eb0:	03d401cd 	.word	0x03d401cd
 8008eb4:	01cd01cd 	.word	0x01cd01cd
 8008eb8:	01cd01cd 	.word	0x01cd01cd
 8008ebc:	01cd01cd 	.word	0x01cd01cd
 8008ec0:	007701cd 	.word	0x007701cd
 8008ec4:	01cd01cd 	.word	0x01cd01cd
 8008ec8:	01cd01cd 	.word	0x01cd01cd
 8008ecc:	01cd01cd 	.word	0x01cd01cd
 8008ed0:	007e01cd 	.word	0x007e01cd
 8008ed4:	01cd01cd 	.word	0x01cd01cd
 8008ed8:	01cd01cd 	.word	0x01cd01cd
 8008edc:	01cd01cd 	.word	0x01cd01cd
 8008ee0:	007e01cd 	.word	0x007e01cd
 8008ee4:	01cd01cd 	.word	0x01cd01cd
 8008ee8:	01cd01cd 	.word	0x01cd01cd
 8008eec:	01cd01cd 	.word	0x01cd01cd
 8008ef0:	007e01cd 	.word	0x007e01cd
    switch(PeriphClkInit->Sai23ClockSelection)
 8008ef4:	2ac0      	cmp	r2, #192	; 0xc0
 8008ef6:	f43f aee2 	beq.w	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8008efa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008efe:	f43f aede 	beq.w	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8008f02:	2601      	movs	r6, #1
 8008f04:	4635      	mov	r5, r6
 8008f06:	e6e4      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008f08:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8008f0c:	f43f aef8 	beq.w	8008d00 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8008f10:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008f14:	f43f aef4 	beq.w	8008d00 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8008f18:	2601      	movs	r6, #1
 8008f1a:	4635      	mov	r5, r6
 8008f1c:	e6fb      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8008f1e:	bf00      	nop
 8008f20:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 8008f24:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8008f28:	f43f af0c 	beq.w	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8008f2c:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8008f30:	f43f af08 	beq.w	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8008f34:	2601      	movs	r6, #1
 8008f36:	4635      	mov	r5, r6
 8008f38:	e70f      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 8008f3a:	2a30      	cmp	r2, #48	; 0x30
 8008f3c:	f43f af1e 	beq.w	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x158>
 8008f40:	2601      	movs	r6, #1
 8008f42:	4635      	mov	r5, r6
 8008f44:	e724      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008f46:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8008f4a:	f43f af37 	beq.w	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008f4e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8008f52:	f43f af33 	beq.w	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008f56:	2601      	movs	r6, #1
 8008f58:	4635      	mov	r5, r6
 8008f5a:	e739      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008f5c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8008f60:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8008f64:	f43f af48 	beq.w	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008f68:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8008f6c:	f43f af44 	beq.w	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008f70:	2601      	movs	r6, #1
 8008f72:	4635      	mov	r5, r6
 8008f74:	e74a      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008f76:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8008f7a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8008f7e:	f43f af5a 	beq.w	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8008f82:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8008f86:	f43f af56 	beq.w	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8008f8a:	2601      	movs	r6, #1
 8008f8c:	4635      	mov	r5, r6
 8008f8e:	e75d      	b.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f90:	2101      	movs	r1, #1
 8008f92:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008f96:	f7ff fdc9 	bl	8008b2c <RCCEx_PLL3_Config>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008f9e:	2d00      	cmp	r5, #0
 8008fa0:	f000 82c0 	beq.w	8009524 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8008fa4:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008fa6:	0798      	lsls	r0, r3, #30
 8008fa8:	d516      	bpl.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008faa:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8008fac:	2a05      	cmp	r2, #5
 8008fae:	f200 83e6 	bhi.w	800977e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 8008fb2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008fb6:	000d      	.short	0x000d
 8008fb8:	00060336 	.word	0x00060336
 8008fbc:	000d000d 	.word	0x000d000d
 8008fc0:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008fc8:	f7ff fdb0 	bl	8008b2c <RCCEx_PLL3_Config>
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008fd0:	2d00      	cmp	r5, #0
 8008fd2:	f000 8279 	beq.w	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8008fd6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008fd8:	0759      	lsls	r1, r3, #29
 8008fda:	d517      	bpl.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008fdc:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8008fe0:	2a05      	cmp	r2, #5
 8008fe2:	f200 83c6 	bhi.w	8009772 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 8008fe6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008fea:	000d      	.short	0x000d
 8008fec:	00060326 	.word	0x00060326
 8008ff0:	000d000d 	.word	0x000d000d
 8008ff4:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008ffc:	f7ff fd96 	bl	8008b2c <RCCEx_PLL3_Config>
 8009000:	6823      	ldr	r3, [r4, #0]
 8009002:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009004:	2d00      	cmp	r5, #0
 8009006:	f000 826a 	beq.w	80094de <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800900a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800900c:	069a      	lsls	r2, r3, #26
 800900e:	d51d      	bpl.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009010:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8009014:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009018:	f000 8340 	beq.w	800969c <HAL_RCCEx_PeriphCLKConfig+0xa78>
 800901c:	f200 81af 	bhi.w	800937e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8009020:	b14a      	cbz	r2, 8009036 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8009022:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8009026:	f040 81b4 	bne.w	8009392 <HAL_RCCEx_PeriphCLKConfig+0x76e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800902a:	2100      	movs	r1, #0
 800902c:	1d20      	adds	r0, r4, #4
 800902e:	f7ff fd01 	bl	8008a34 <RCCEx_PLL2_Config>
 8009032:	6823      	ldr	r3, [r4, #0]
 8009034:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009036:	2d00      	cmp	r5, #0
 8009038:	f040 823c 	bne.w	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800903c:	49b3      	ldr	r1, [pc, #716]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800903e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8009042:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009044:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8009048:	4302      	orrs	r2, r0
 800904a:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800904c:	065f      	lsls	r7, r3, #25
 800904e:	d51d      	bpl.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009050:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8009054:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009058:	f000 8334 	beq.w	80096c4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 800905c:	f200 817f 	bhi.w	800935e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8009060:	b14a      	cbz	r2, 8009076 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009062:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009066:	f040 8184 	bne.w	8009372 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800906a:	2100      	movs	r1, #0
 800906c:	1d20      	adds	r0, r4, #4
 800906e:	f7ff fce1 	bl	8008a34 <RCCEx_PLL2_Config>
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009076:	2d00      	cmp	r5, #0
 8009078:	f040 8221 	bne.w	80094be <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800907c:	49a3      	ldr	r1, [pc, #652]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800907e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8009082:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009084:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8009088:	4302      	orrs	r2, r0
 800908a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800908c:	0618      	lsls	r0, r3, #24
 800908e:	d51d      	bpl.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009090:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8009094:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009098:	f000 831f 	beq.w	80096da <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800909c:	f200 814f 	bhi.w	800933e <HAL_RCCEx_PeriphCLKConfig+0x71a>
 80090a0:	b14a      	cbz	r2, 80090b6 <HAL_RCCEx_PeriphCLKConfig+0x492>
 80090a2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80090a6:	f040 8154 	bne.w	8009352 <HAL_RCCEx_PeriphCLKConfig+0x72e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090aa:	2100      	movs	r1, #0
 80090ac:	1d20      	adds	r0, r4, #4
 80090ae:	f7ff fcc1 	bl	8008a34 <RCCEx_PLL2_Config>
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80090b6:	2d00      	cmp	r5, #0
 80090b8:	f040 81f7 	bne.w	80094aa <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80090bc:	4993      	ldr	r1, [pc, #588]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80090be:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80090c2:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80090c4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80090c8:	4302      	orrs	r2, r0
 80090ca:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80090cc:	0719      	lsls	r1, r3, #28
 80090ce:	d50b      	bpl.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80090d0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80090d4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80090d8:	f000 831e 	beq.w	8009718 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80090dc:	488b      	ldr	r0, [pc, #556]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80090de:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80090e0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80090e4:	430a      	orrs	r2, r1
 80090e6:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80090e8:	06da      	lsls	r2, r3, #27
 80090ea:	d50b      	bpl.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80090ec:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80090f0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80090f4:	f000 8305 	beq.w	8009702 <HAL_RCCEx_PeriphCLKConfig+0xade>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80090f8:	4884      	ldr	r0, [pc, #528]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80090fa:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80090fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009100:	430a      	orrs	r2, r1
 8009102:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009104:	031f      	lsls	r7, r3, #12
 8009106:	d50e      	bpl.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->AdcClockSelection)
 8009108:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800910c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009110:	f000 816b 	beq.w	80093ea <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8009114:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8009118:	f000 816e 	beq.w	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 800911c:	2900      	cmp	r1, #0
 800911e:	f000 82e7 	beq.w	80096f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009122:	2601      	movs	r6, #1
 8009124:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009126:	0358      	lsls	r0, r3, #13
 8009128:	d50f      	bpl.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->UsbClockSelection)
 800912a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800912e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8009132:	f000 8144 	beq.w	80093be <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8009136:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800913a:	f000 8147 	beq.w	80093cc <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 800913e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8009142:	f000 82a2 	beq.w	800968a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8009146:	2601      	movs	r6, #1
 8009148:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800914a:	03d9      	lsls	r1, r3, #15
 800914c:	d517      	bpl.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->SdmmcClockSelection)
 800914e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009150:	2a00      	cmp	r2, #0
 8009152:	f000 8288 	beq.w	8009666 <HAL_RCCEx_PeriphCLKConfig+0xa42>
 8009156:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800915a:	f040 817a 	bne.w	8009452 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800915e:	2102      	movs	r1, #2
 8009160:	1d20      	adds	r0, r4, #4
 8009162:	f7ff fc67 	bl	8008a34 <RCCEx_PLL2_Config>
 8009166:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	2d00      	cmp	r5, #0
 800916c:	f040 81e5 	bne.w	800953a <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009170:	4966      	ldr	r1, [pc, #408]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009172:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009174:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009176:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800917a:	4302      	orrs	r2, r0
 800917c:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800917e:	009a      	lsls	r2, r3, #2
 8009180:	f100 815c 	bmi.w	800943c <HAL_RCCEx_PeriphCLKConfig+0x818>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009184:	039f      	lsls	r7, r3, #14
 8009186:	d43f      	bmi.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8009188:	1e30      	subs	r0, r6, #0
 800918a:	bf18      	it	ne
 800918c:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800918e:	02de      	lsls	r6, r3, #11
 8009190:	d506      	bpl.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009192:	495e      	ldr	r1, [pc, #376]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8009194:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8009196:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009198:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800919c:	432a      	orrs	r2, r5
 800919e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80091a0:	00dd      	lsls	r5, r3, #3
 80091a2:	d507      	bpl.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80091a4:	4959      	ldr	r1, [pc, #356]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80091a6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80091aa:	690a      	ldr	r2, [r1, #16]
 80091ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80091b0:	432a      	orrs	r2, r5
 80091b2:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80091b4:	0299      	lsls	r1, r3, #10
 80091b6:	d506      	bpl.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80091b8:	4954      	ldr	r1, [pc, #336]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80091ba:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80091bc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80091be:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80091c2:	432a      	orrs	r2, r5
 80091c4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80091c6:	005a      	lsls	r2, r3, #1
 80091c8:	d509      	bpl.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80091ca:	4a50      	ldr	r2, [pc, #320]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80091cc:	6911      	ldr	r1, [r2, #16]
 80091ce:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80091d2:	6111      	str	r1, [r2, #16]
 80091d4:	6911      	ldr	r1, [r2, #16]
 80091d6:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 80091da:	4329      	orrs	r1, r5
 80091dc:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80091de:	2b00      	cmp	r3, #0
 80091e0:	da06      	bge.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80091e2:	494a      	ldr	r1, [pc, #296]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80091e4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80091e6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80091e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80091ec:	432a      	orrs	r2, r5
 80091ee:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80091f0:	021b      	lsls	r3, r3, #8
 80091f2:	d507      	bpl.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80091f4:	4a45      	ldr	r2, [pc, #276]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80091f6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80091fa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80091fc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8009200:	430b      	orrs	r3, r1
 8009202:	6553      	str	r3, [r2, #84]	; 0x54
}
 8009204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8009208:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800920c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009210:	f000 8232 	beq.w	8009678 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8009214:	f240 80c3 	bls.w	800939e <HAL_RCCEx_PeriphCLKConfig+0x77a>
 8009218:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800921c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009220:	f000 80c0 	beq.w	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8009224:	2001      	movs	r0, #1
 8009226:	e7b2      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->FmcClockSelection)
 8009228:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800922a:	2a03      	cmp	r2, #3
 800922c:	f200 82aa 	bhi.w	8009784 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 8009230:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009234:	018a0010 	.word	0x018a0010
 8009238:	0010000a 	.word	0x0010000a
    switch(PeriphClkInit->Usart16ClockSelection)
 800923c:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800923e:	0798      	lsls	r0, r3, #30
    switch(PeriphClkInit->Usart16ClockSelection)
 8009240:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009242:	f57f aec9 	bpl.w	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8009246:	e6b0      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009248:	2102      	movs	r1, #2
 800924a:	1d20      	adds	r0, r4, #4
 800924c:	f7ff fbf2 	bl	8008a34 <RCCEx_PLL2_Config>
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009254:	2d00      	cmp	r5, #0
 8009256:	f040 8152 	bne.w	80094fe <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800925a:	492c      	ldr	r1, [pc, #176]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800925c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800925e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009260:	f022 0203 	bic.w	r2, r2, #3
 8009264:	4302      	orrs	r2, r0
 8009266:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009268:	0259      	lsls	r1, r3, #9
 800926a:	f57f ae11 	bpl.w	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800926e:	4b28      	ldr	r3, [pc, #160]	; (8009310 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8009270:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009272:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009278:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800927a:	f7fc fec1 	bl	8006000 <HAL_GetTick>
 800927e:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009280:	e005      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009282:	f7fc febd 	bl	8006000 <HAL_GetTick>
 8009286:	1bc0      	subs	r0, r0, r7
 8009288:	2864      	cmp	r0, #100	; 0x64
 800928a:	f200 81e8 	bhi.w	800965e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800928e:	f8d8 3000 	ldr.w	r3, [r8]
 8009292:	05da      	lsls	r2, r3, #23
 8009294:	d5f5      	bpl.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x65e>
    if(ret == HAL_OK)
 8009296:	2d00      	cmp	r5, #0
 8009298:	f040 8267 	bne.w	800976a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800929c:	4a1b      	ldr	r2, [pc, #108]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800929e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 80092a2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80092a4:	4059      	eors	r1, r3
 80092a6:	f411 7f40 	tst.w	r1, #768	; 0x300
 80092aa:	d00b      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80092ac:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80092ae:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80092b0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80092b4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80092b8:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092ba:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80092bc:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80092c0:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80092c2:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80092c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092c8:	f000 8231 	beq.w	800972e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092cc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80092d0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80092d4:	f000 823f 	beq.w	8009756 <HAL_RCCEx_PeriphCLKConfig+0xb32>
 80092d8:	490c      	ldr	r1, [pc, #48]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80092da:	690a      	ldr	r2, [r1, #16]
 80092dc:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80092e0:	610a      	str	r2, [r1, #16]
 80092e2:	4a0a      	ldr	r2, [pc, #40]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80092e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092e8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80092ea:	430b      	orrs	r3, r1
 80092ec:	6713      	str	r3, [r2, #112]	; 0x70
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	e5ce      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80092f2:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 80092f4:	2d00      	cmp	r5, #0
 80092f6:	f040 80b5 	bne.w	8009464 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092fa:	4904      	ldr	r1, [pc, #16]	; (800930c <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80092fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092fe:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009300:	f022 0207 	bic.w	r2, r2, #7
 8009304:	4302      	orrs	r2, r0
 8009306:	650a      	str	r2, [r1, #80]	; 0x50
 8009308:	e4c5      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800930a:	bf00      	nop
 800930c:	58024400 	.word	0x58024400
 8009310:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009314:	2101      	movs	r1, #1
 8009316:	1d20      	adds	r0, r4, #4
 8009318:	f7ff fb8c 	bl	8008a34 <RCCEx_PLL2_Config>
 800931c:	6823      	ldr	r3, [r4, #0]
 800931e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009320:	2d00      	cmp	r5, #0
 8009322:	f040 810c 	bne.w	800953e <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8009326:	49b9      	ldr	r1, [pc, #740]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009328:	041f      	lsls	r7, r3, #16
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800932a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800932c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800932e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009332:	ea42 0200 	orr.w	r2, r2, r0
 8009336:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009338:	f57f ada4 	bpl.w	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x260>
 800933c:	e594      	b.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800933e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8009342:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009346:	f43f aeb6 	beq.w	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x492>
 800934a:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800934e:	f43f aeb2 	beq.w	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x492>
 8009352:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009354:	0719      	lsls	r1, r3, #28
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009356:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009358:	f57f aec6 	bpl.w	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 800935c:	e6b8      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800935e:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8009362:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009366:	f43f ae86 	beq.w	8009076 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800936a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800936e:	f43f ae82 	beq.w	8009076 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009372:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009374:	0618      	lsls	r0, r3, #24
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009376:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009378:	f57f aea8 	bpl.w	80090cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800937c:	e688      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800937e:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8009382:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8009386:	f43f ae56 	beq.w	8009036 <HAL_RCCEx_PeriphCLKConfig+0x412>
 800938a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800938e:	f43f ae52 	beq.w	8009036 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8009392:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009394:	065f      	lsls	r7, r3, #25
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009396:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009398:	f57f ae78 	bpl.w	800908c <HAL_RCCEx_PeriphCLKConfig+0x468>
 800939c:	e658      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->RngClockSelection)
 800939e:	2a00      	cmp	r2, #0
 80093a0:	f47f af40 	bne.w	8009224 <HAL_RCCEx_PeriphCLKConfig+0x600>
    if(ret == HAL_OK)
 80093a4:	2d00      	cmp	r5, #0
 80093a6:	f47f af3d 	bne.w	8009224 <HAL_RCCEx_PeriphCLKConfig+0x600>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80093aa:	4d98      	ldr	r5, [pc, #608]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80093ac:	1e30      	subs	r0, r6, #0
 80093ae:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80093b0:	bf18      	it	ne
 80093b2:	2001      	movne	r0, #1
 80093b4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80093b8:	430a      	orrs	r2, r1
 80093ba:	656a      	str	r2, [r5, #84]	; 0x54
 80093bc:	e6e7      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x56a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093be:	2101      	movs	r1, #1
 80093c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80093c4:	f7ff fbb2 	bl	8008b2c <RCCEx_PLL3_Config>
 80093c8:	6823      	ldr	r3, [r4, #0]
 80093ca:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80093cc:	2d00      	cmp	r5, #0
 80093ce:	f040 80a4 	bne.w	800951a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80093d2:	498e      	ldr	r1, [pc, #568]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80093d4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80093d8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80093da:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80093de:	4302      	orrs	r2, r0
 80093e0:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80093e2:	03d9      	lsls	r1, r3, #15
 80093e4:	f57f aecb 	bpl.w	800917e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80093e8:	e6b1      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093ea:	2102      	movs	r1, #2
 80093ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80093f0:	f7ff fb9c 	bl	8008b2c <RCCEx_PLL3_Config>
 80093f4:	6823      	ldr	r3, [r4, #0]
 80093f6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80093f8:	2d00      	cmp	r5, #0
 80093fa:	f040 8089 	bne.w	8009510 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80093fe:	4983      	ldr	r1, [pc, #524]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009400:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8009404:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009406:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800940a:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800940c:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800940e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009410:	f57f ae9b 	bpl.w	800914a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009414:	e689      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009416:	2101      	movs	r1, #1
 8009418:	1d20      	adds	r0, r4, #4
 800941a:	f7ff fb0b 	bl	8008a34 <RCCEx_PLL2_Config>
 800941e:	6823      	ldr	r3, [r4, #0]
 8009420:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009422:	2d00      	cmp	r5, #0
 8009424:	d16f      	bne.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009426:	4979      	ldr	r1, [pc, #484]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009428:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800942a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800942c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009430:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009432:	01d8      	lsls	r0, r3, #7
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009434:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009436:	f57f ad28 	bpl.w	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x266>
 800943a:	e6f5      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800943c:	2102      	movs	r1, #2
 800943e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009442:	f7ff fb73 	bl	8008b2c <RCCEx_PLL3_Config>
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	2800      	cmp	r0, #0
 800944a:	f43f ae9b 	beq.w	8009184 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status=HAL_ERROR;
 800944e:	2601      	movs	r6, #1
 8009450:	e698      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->SdmmcClockSelection)
 8009452:	2601      	movs	r6, #1
 8009454:	4635      	mov	r5, r6
 8009456:	e692      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8009458:	462e      	mov	r6, r5
 800945a:	e47e      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800945c:	462e      	mov	r6, r5
 800945e:	e438      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xae>
 8009460:	462e      	mov	r6, r5
 8009462:	e4b5      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8009464:	462e      	mov	r6, r5
 8009466:	e416      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009468:	462e      	mov	r6, r5
 800946a:	e454      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800946c:	4967      	ldr	r1, [pc, #412]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800946e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009470:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009474:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009476:	e443      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009478:	4964      	ldr	r1, [pc, #400]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800947a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800947c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009480:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009482:	e41c      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009484:	4961      	ldr	r1, [pc, #388]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009486:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009488:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800948c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800948e:	e459      	b.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009490:	495e      	ldr	r1, [pc, #376]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009492:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009494:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009498:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800949a:	e48f      	b.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800949c:	485b      	ldr	r0, [pc, #364]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800949e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80094a0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80094a4:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80094a6:	f7ff bbda 	b.w	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80094aa:	0719      	lsls	r1, r3, #28
 80094ac:	462e      	mov	r6, r5
 80094ae:	f57f ae1b 	bpl.w	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 80094b2:	e60d      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80094b4:	065f      	lsls	r7, r3, #25
 80094b6:	462e      	mov	r6, r5
 80094b8:	f57f ade8 	bpl.w	800908c <HAL_RCCEx_PeriphCLKConfig+0x468>
 80094bc:	e5c8      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80094be:	0618      	lsls	r0, r3, #24
 80094c0:	462e      	mov	r6, r5
 80094c2:	f57f ae03 	bpl.w	80090cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80094c6:	e5e3      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80094c8:	4950      	ldr	r1, [pc, #320]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80094ca:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80094cc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80094ce:	f022 0207 	bic.w	r2, r2, #7
 80094d2:	4302      	orrs	r2, r0
 80094d4:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094d6:	0759      	lsls	r1, r3, #29
 80094d8:	f57f ad98 	bpl.w	800900c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80094dc:	e57e      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094de:	494b      	ldr	r1, [pc, #300]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80094e0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80094e4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80094e6:	f022 0207 	bic.w	r2, r2, #7
 80094ea:	4302      	orrs	r2, r0
 80094ec:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80094ee:	069a      	lsls	r2, r3, #26
 80094f0:	f57f adac 	bpl.w	800904c <HAL_RCCEx_PeriphCLKConfig+0x428>
 80094f4:	e58c      	b.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80094f6:	462e      	mov	r6, r5
 80094f8:	e44a      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80094fa:	462e      	mov	r6, r5
 80094fc:	e486      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80094fe:	462e      	mov	r6, r5
 8009500:	e4c3      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8009502:	462e      	mov	r6, r5
 8009504:	e4a2      	b.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x228>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009506:	01d8      	lsls	r0, r3, #7
 8009508:	462e      	mov	r6, r5
 800950a:	f57f acbe 	bpl.w	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x266>
 800950e:	e68b      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009510:	0358      	lsls	r0, r3, #13
 8009512:	462e      	mov	r6, r5
 8009514:	f57f ae19 	bpl.w	800914a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009518:	e607      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x506>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800951a:	03d9      	lsls	r1, r3, #15
 800951c:	462e      	mov	r6, r5
 800951e:	f57f ae2e 	bpl.w	800917e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8009522:	e614      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009524:	4939      	ldr	r1, [pc, #228]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009526:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009528:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800952a:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800952e:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009530:	0798      	lsls	r0, r3, #30
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009532:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009534:	f57f ad50 	bpl.w	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8009538:	e537      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x386>
 800953a:	462e      	mov	r6, r5
 800953c:	e61f      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800953e:	041f      	lsls	r7, r3, #16
 8009540:	462e      	mov	r6, r5
 8009542:	f57f ac9f 	bpl.w	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8009546:	e48f      	b.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009548:	4930      	ldr	r1, [pc, #192]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800954a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800954c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009550:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009552:	2d00      	cmp	r5, #0
 8009554:	d1d3      	bne.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8009556:	e680      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009558:	2101      	movs	r1, #1
 800955a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800955e:	f7ff fae5 	bl	8008b2c <RCCEx_PLL3_Config>
 8009562:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	2d00      	cmp	r5, #0
 8009568:	d1c7      	bne.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 800956a:	e448      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800956c:	2101      	movs	r1, #1
 800956e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009572:	f7ff fadb 	bl	8008b2c <RCCEx_PLL3_Config>
 8009576:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	2d00      	cmp	r5, #0
 800957c:	d1c1      	bne.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 800957e:	e45d      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009580:	2102      	movs	r1, #2
 8009582:	1d20      	adds	r0, r4, #4
 8009584:	f7ff fa56 	bl	8008a34 <RCCEx_PLL2_Config>
 8009588:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	2d00      	cmp	r5, #0
 800958e:	d1b2      	bne.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8009590:	f7ff bbf7 	b.w	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009594:	2100      	movs	r1, #0
 8009596:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800959a:	f7ff fac7 	bl	8008b2c <RCCEx_PLL3_Config>
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	4605      	mov	r5, r0
      break;
 80095a2:	f7ff bbcf 	b.w	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80095a6:	2100      	movs	r1, #0
 80095a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095ac:	f7ff fabe 	bl	8008b2c <RCCEx_PLL3_Config>
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	4605      	mov	r5, r0
      break;
 80095b4:	f7ff bba4 	b.w	8008d00 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80095b8:	2100      	movs	r1, #0
 80095ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095be:	f7ff fab5 	bl	8008b2c <RCCEx_PLL3_Config>
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	4605      	mov	r5, r0
      break;
 80095c6:	f7ff bbf9 	b.w	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095ca:	2102      	movs	r1, #2
 80095cc:	3024      	adds	r0, #36	; 0x24
 80095ce:	f7ff faad 	bl	8008b2c <RCCEx_PLL3_Config>
 80095d2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80095d4:	2e00      	cmp	r6, #0
 80095d6:	f43f ab40 	beq.w	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x36>
 80095da:	6823      	ldr	r3, [r4, #0]
 80095dc:	f7ff bb46 	b.w	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80095e0:	2100      	movs	r1, #0
 80095e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095e6:	f7ff faa1 	bl	8008b2c <RCCEx_PLL3_Config>
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	4605      	mov	r5, r0
      break;
 80095ee:	e681      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095f0:	4906      	ldr	r1, [pc, #24]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 80095f2:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095f4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80095f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80095fa:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80095fc:	e67a      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095fe:	2100      	movs	r1, #0
 8009600:	1d20      	adds	r0, r4, #4
 8009602:	f7ff fa17 	bl	8008a34 <RCCEx_PLL2_Config>
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	4605      	mov	r5, r0
      break;
 800960a:	e673      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800960c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009610:	2100      	movs	r1, #0
 8009612:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009616:	f7ff fa89 	bl	8008b2c <RCCEx_PLL3_Config>
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	4605      	mov	r5, r0
      break;
 800961e:	f7ff bb4e 	b.w	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009622:	2101      	movs	r1, #1
 8009624:	1d20      	adds	r0, r4, #4
 8009626:	f7ff fa05 	bl	8008a34 <RCCEx_PLL2_Config>
 800962a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	2d00      	cmp	r5, #0
 8009630:	f47f acd1 	bne.w	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8009634:	e748      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009636:	2101      	movs	r1, #1
 8009638:	1d20      	adds	r0, r4, #4
 800963a:	f7ff f9fb 	bl	8008a34 <RCCEx_PLL2_Config>
 800963e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009640:	6823      	ldr	r3, [r4, #0]
 8009642:	2d00      	cmp	r5, #0
 8009644:	f47f ace1 	bne.w	800900a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009648:	e749      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800964a:	2101      	movs	r1, #1
 800964c:	1d20      	adds	r0, r4, #4
 800964e:	f7ff f9f1 	bl	8008a34 <RCCEx_PLL2_Config>
 8009652:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009654:	6823      	ldr	r3, [r4, #0]
 8009656:	2d00      	cmp	r5, #0
 8009658:	f47f aca4 	bne.w	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x380>
 800965c:	e762      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x900>
            ret = HAL_TIMEOUT;
 800965e:	2603      	movs	r6, #3
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	4635      	mov	r5, r6
 8009664:	e414      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009666:	4949      	ldr	r1, [pc, #292]	; (800978c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009668:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800966a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800966e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009670:	2d00      	cmp	r5, #0
 8009672:	f47f af62 	bne.w	800953a <HAL_RCCEx_PeriphCLKConfig+0x916>
 8009676:	e57b      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009678:	4844      	ldr	r0, [pc, #272]	; (800978c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 800967a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800967c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8009680:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8009682:	2d00      	cmp	r5, #0
 8009684:	f47f adce 	bne.w	8009224 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8009688:	e68f      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800968a:	4940      	ldr	r1, [pc, #256]	; (800978c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 800968c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800968e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009692:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009694:	2d00      	cmp	r5, #0
 8009696:	f47f af40 	bne.w	800951a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800969a:	e69a      	b.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800969c:	2102      	movs	r1, #2
 800969e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80096a2:	f7ff fa43 	bl	8008b2c <RCCEx_PLL3_Config>
 80096a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	2d00      	cmp	r5, #0
 80096ac:	f47f af02 	bne.w	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x890>
 80096b0:	e4c4      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096b2:	4936      	ldr	r1, [pc, #216]	; (800978c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 80096b4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80096b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80096ba:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80096bc:	2d00      	cmp	r5, #0
 80096be:	f47f af22 	bne.w	8009506 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80096c2:	e6b0      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x802>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096c4:	2102      	movs	r1, #2
 80096c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80096ca:	f7ff fa2f 	bl	8008b2c <RCCEx_PLL3_Config>
 80096ce:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	2d00      	cmp	r5, #0
 80096d4:	f47f aef3 	bne.w	80094be <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80096d8:	e4d0      	b.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x458>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096da:	2102      	movs	r1, #2
 80096dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80096e0:	f7ff fa24 	bl	8008b2c <RCCEx_PLL3_Config>
 80096e4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	2d00      	cmp	r5, #0
 80096ea:	f47f aede 	bne.w	80094aa <HAL_RCCEx_PeriphCLKConfig+0x886>
 80096ee:	e4e5      	b.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096f0:	1d20      	adds	r0, r4, #4
 80096f2:	f7ff f99f 	bl	8008a34 <RCCEx_PLL2_Config>
 80096f6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	2d00      	cmp	r5, #0
 80096fc:	f47f af08 	bne.w	8009510 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009700:	e67d      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x7da>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009702:	2102      	movs	r1, #2
 8009704:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009708:	f7ff fa10 	bl	8008b2c <RCCEx_PLL3_Config>
 800970c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8009710:	b100      	cbz	r0, 8009714 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
        status = HAL_ERROR;
 8009712:	2601      	movs	r6, #1
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	e4ef      	b.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009718:	2102      	movs	r1, #2
 800971a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800971e:	f7ff fa05 	bl	8008b2c <RCCEx_PLL3_Config>
 8009722:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8009726:	b100      	cbz	r0, 800972a <HAL_RCCEx_PeriphCLKConfig+0xb06>
          status = HAL_ERROR;
 8009728:	2601      	movs	r6, #1
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	e4d6      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        tickstart = HAL_GetTick();
 800972e:	f7fc fc67 	bl	8006000 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009732:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800978c <HAL_RCCEx_PeriphCLKConfig+0xb68>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009736:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800973a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800973c:	e004      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xb24>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800973e:	f7fc fc5f 	bl	8006000 <HAL_GetTick>
 8009742:	1bc0      	subs	r0, r0, r7
 8009744:	4548      	cmp	r0, r9
 8009746:	d88a      	bhi.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009748:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800974c:	079b      	lsls	r3, r3, #30
 800974e:	d5f6      	bpl.n	800973e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8009750:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8009754:	e5ba      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x6a8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009756:	480d      	ldr	r0, [pc, #52]	; (800978c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8009758:	4a0d      	ldr	r2, [pc, #52]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
 800975a:	6901      	ldr	r1, [r0, #16]
 800975c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009760:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8009764:	430a      	orrs	r2, r1
 8009766:	6102      	str	r2, [r0, #16]
 8009768:	e5bb      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
 800976a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800976c:	462e      	mov	r6, r5
 800976e:	f7ff bb8f 	b.w	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009772:	2601      	movs	r6, #1
 8009774:	4635      	mov	r5, r6
 8009776:	e449      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009778:	2601      	movs	r6, #1
 800977a:	f7ff ba8b 	b.w	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800977e:	2601      	movs	r6, #1
 8009780:	4635      	mov	r5, r6
 8009782:	e429      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 8009784:	2601      	movs	r6, #1
 8009786:	4635      	mov	r5, r6
 8009788:	f7ff bb7f 	b.w	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x266>
 800978c:	58024400 	.word	0x58024400
 8009790:	00ffffcf 	.word	0x00ffffcf

08009794 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009794:	4b58      	ldr	r3, [pc, #352]	; (80098f8 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
{
 8009796:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009798:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800979a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800979c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800979e:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80097a2:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80097a6:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 80097a8:	d05c      	beq.n	8009864 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80097aa:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80097ae:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097b2:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80097b6:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 80097ba:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80097bc:	ee07 4a90 	vmov	s15, r4
 80097c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80097c4:	d003      	beq.n	80097ce <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 80097c6:	2902      	cmp	r1, #2
 80097c8:	d075      	beq.n	80098b6 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 80097ca:	2900      	cmp	r1, #0
 80097cc:	d04f      	beq.n	800986e <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80097ce:	ee07 2a90 	vmov	s15, r2
 80097d2:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 80097d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097dc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80097e0:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8009900 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 80097e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097e8:	ee06 3a90 	vmov	s13, r3
 80097ec:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80097f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80097f4:	eee7 6a05 	vfma.f32	s13, s14, s10
 80097f8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80097fc:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009800:	4a3d      	ldr	r2, [pc, #244]	; (80098f8 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
 8009802:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009806:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009808:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800980c:	ee07 3a10 	vmov	s14, r3
 8009810:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009814:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009816:	ee37 7a06 	vadd.f32	s14, s14, s12
 800981a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800981e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009822:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009826:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009828:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800982c:	ee07 3a10 	vmov	s14, r3
 8009830:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009834:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800983c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009840:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009844:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009846:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800984a:	ee07 3a90 	vmov	s15, r3
 800984e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009852:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800985a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800985e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009862:	4770      	bx	lr
 8009864:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009866:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800986a:	6082      	str	r2, [r0, #8]
}
 800986c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800986e:	6819      	ldr	r1, [r3, #0]
 8009870:	0689      	lsls	r1, r1, #26
 8009872:	d527      	bpl.n	80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009874:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009876:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800987a:	4a22      	ldr	r2, [pc, #136]	; (8009904 <HAL_RCCEx_GetPLL2ClockFreq+0x170>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800987c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009880:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800988a:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800988c:	eddf 4a1c 	vldr	s9, [pc, #112]	; 8009900 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 8009890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009894:	ee06 2a10 	vmov	s12, r2
 8009898:	ee06 3a90 	vmov	s13, r3
 800989c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80098a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80098a4:	eec6 5a27 	vdiv.f32	s11, s12, s15
 80098a8:	eee7 6a24 	vfma.f32	s13, s14, s9
 80098ac:	ee76 6a85 	vadd.f32	s13, s13, s10
 80098b0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80098b4:	e7a4      	b.n	8009800 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098b6:	ee07 2a90 	vmov	s15, r2
 80098ba:	eddf 6a13 	vldr	s13, [pc, #76]	; 8009908 <HAL_RCCEx_GetPLL2ClockFreq+0x174>
 80098be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098c2:	e78a      	b.n	80097da <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098c4:	ee07 2a90 	vmov	s15, r2
 80098c8:	ed9f 5a10 	vldr	s10, [pc, #64]	; 800990c <HAL_RCCEx_GetPLL2ClockFreq+0x178>
 80098cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80098d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098d6:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8009900 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 80098da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098de:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80098e2:	ee07 3a90 	vmov	s15, r3
 80098e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098ea:	eee7 7a25 	vfma.f32	s15, s14, s11
 80098ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 80098f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80098f6:	e783      	b.n	8009800 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80098f8:	58024400 	.word	0x58024400
 80098fc:	4a742400 	.word	0x4a742400
 8009900:	39000000 	.word	0x39000000
 8009904:	03d09000 	.word	0x03d09000
 8009908:	4bbebc20 	.word	0x4bbebc20
 800990c:	4c742400 	.word	0x4c742400

08009910 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009910:	4b58      	ldr	r3, [pc, #352]	; (8009a74 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
{
 8009912:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009914:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009916:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009918:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800991a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800991e:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009922:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8009924:	d05c      	beq.n	80099e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009926:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800992a:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800992e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009932:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8009936:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009938:	ee07 4a90 	vmov	s15, r4
 800993c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009940:	d003      	beq.n	800994a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8009942:	2902      	cmp	r1, #2
 8009944:	d075      	beq.n	8009a32 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8009946:	2900      	cmp	r1, #0
 8009948:	d04f      	beq.n	80099ea <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800994a:	ee07 2a90 	vmov	s15, r2
 800994e:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8009a78 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8009952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009958:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800995c:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8009a7c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 8009960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009964:	ee06 3a90 	vmov	s13, r3
 8009968:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800996c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009970:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009974:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009978:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800997c:	4a3d      	ldr	r2, [pc, #244]	; (8009a74 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
 800997e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009982:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009984:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009988:	ee07 3a10 	vmov	s14, r3
 800998c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009990:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009992:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800999a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800999e:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80099a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80099a4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80099a8:	ee07 3a10 	vmov	s14, r3
 80099ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099b0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80099b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099bc:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80099c0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80099c2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80099c6:	ee07 3a90 	vmov	s15, r3
 80099ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099ce:	ee77 7a86 	vadd.f32	s15, s15, s12
 80099d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099d6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80099da:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80099de:	4770      	bx	lr
 80099e0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80099e2:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80099e6:	6082      	str	r2, [r0, #8]
}
 80099e8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099ea:	6819      	ldr	r1, [r3, #0]
 80099ec:	0689      	lsls	r1, r1, #26
 80099ee:	d527      	bpl.n	8009a40 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099f0:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099f2:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099f6:	4a22      	ldr	r2, [pc, #136]	; (8009a80 <HAL_RCCEx_GetPLL3ClockFreq+0x170>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099f8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099fc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a06:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a08:	eddf 4a1c 	vldr	s9, [pc, #112]	; 8009a7c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 8009a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a10:	ee06 2a10 	vmov	s12, r2
 8009a14:	ee06 3a90 	vmov	s13, r3
 8009a18:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009a1c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009a20:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8009a24:	eee7 6a24 	vfma.f32	s13, s14, s9
 8009a28:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009a2c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009a30:	e7a4      	b.n	800997c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a32:	ee07 2a90 	vmov	s15, r2
 8009a36:	eddf 6a13 	vldr	s13, [pc, #76]	; 8009a84 <HAL_RCCEx_GetPLL3ClockFreq+0x174>
 8009a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a3e:	e78a      	b.n	8009956 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a40:	ee07 2a90 	vmov	s15, r2
 8009a44:	ed9f 5a10 	vldr	s10, [pc, #64]	; 8009a88 <HAL_RCCEx_GetPLL3ClockFreq+0x178>
 8009a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a52:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8009a7c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 8009a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5a:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8009a5e:	ee07 3a90 	vmov	s15, r3
 8009a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a66:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009a6a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009a6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009a72:	e783      	b.n	800997c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009a74:	58024400 	.word	0x58024400
 8009a78:	4a742400 	.word	0x4a742400
 8009a7c:	39000000 	.word	0x39000000
 8009a80:	03d09000 	.word	0x03d09000
 8009a84:	4bbebc20 	.word	0x4bbebc20
 8009a88:	4c742400 	.word	0x4c742400

08009a8c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a8c:	4b5c      	ldr	r3, [pc, #368]	; (8009c00 <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
{
 8009a8e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a90:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009a92:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009a94:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8009a96:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009a9a:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a9e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8009aa0:	d05c      	beq.n	8009b5c <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009aa2:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009aa6:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009aaa:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009aae:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8009ab2:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009ab4:	ee07 4a90 	vmov	s15, r4
 8009ab8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009abc:	d07e      	beq.n	8009bbc <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8009abe:	2902      	cmp	r1, #2
 8009ac0:	d075      	beq.n	8009bae <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8009ac2:	2900      	cmp	r1, #0
 8009ac4:	d04f      	beq.n	8009b66 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ac6:	ee07 2a90 	vmov	s15, r2
 8009aca:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009c04 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 8009ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009ad8:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 8009c08 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 8009adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae0:	ee06 3a90 	vmov	s13, r3
 8009ae4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009ae8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009aec:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009af0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009af4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009af8:	4a41      	ldr	r2, [pc, #260]	; (8009c00 <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
 8009afa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009afe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009b00:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009b04:	ee07 3a10 	vmov	s14, r3
 8009b08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009b0c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009b0e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b1a:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009b1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009b20:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009b24:	ee07 3a10 	vmov	s14, r3
 8009b28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b2c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b38:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009b3c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009b3e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009b42:	ee07 3a90 	vmov	s15, r3
 8009b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b4a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b52:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009b56:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009b5a:	4770      	bx	lr
 8009b5c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009b5e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009b62:	6082      	str	r2, [r0, #8]
}
 8009b64:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b66:	6819      	ldr	r1, [r3, #0]
 8009b68:	0689      	lsls	r1, r1, #26
 8009b6a:	d52e      	bpl.n	8009bca <HAL_RCCEx_GetPLL1ClockFreq+0x13e>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b6c:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b6e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b72:	4a26      	ldr	r2, [pc, #152]	; (8009c0c <HAL_RCCEx_GetPLL1ClockFreq+0x180>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b74:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b78:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b82:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b84:	eddf 4a20 	vldr	s9, [pc, #128]	; 8009c08 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 8009b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8c:	ee06 2a10 	vmov	s12, r2
 8009b90:	ee06 3a90 	vmov	s13, r3
 8009b94:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009b98:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009b9c:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8009ba0:	eee7 6a24 	vfma.f32	s13, s14, s9
 8009ba4:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009ba8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009bac:	e7a4      	b.n	8009af8 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bae:	ee07 2a90 	vmov	s15, r2
 8009bb2:	eddf 6a17 	vldr	s13, [pc, #92]	; 8009c10 <HAL_RCCEx_GetPLL1ClockFreq+0x184>
 8009bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bba:	e78a      	b.n	8009ad2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bbc:	ee07 2a90 	vmov	s15, r2
 8009bc0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8009c14 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8009bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bc8:	e783      	b.n	8009ad2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bca:	ee07 2a90 	vmov	s15, r2
 8009bce:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 8009c04 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 8009bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bdc:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8009c08 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
 8009be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be4:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8009be8:	ee07 3a90 	vmov	s15, r3
 8009bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bf0:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009bf4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009bf8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009bfc:	e77c      	b.n	8009af8 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
 8009bfe:	bf00      	nop
 8009c00:	58024400 	.word	0x58024400
 8009c04:	4c742400 	.word	0x4c742400
 8009c08:	39000000 	.word	0x39000000
 8009c0c:	03d09000 	.word	0x03d09000
 8009c10:	4bbebc20 	.word	0x4bbebc20
 8009c14:	4a742400 	.word	0x4a742400

08009c18 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009c18:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8009c1c:	b500      	push	{lr}
 8009c1e:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009c20:	d077      	beq.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009c22:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009c26:	d02e      	beq.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009c28:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009c2c:	f000 80cf 	beq.w	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009c30:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8009c34:	f000 8080 	beq.w	8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009c38:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009c3c:	d05a      	beq.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009c3e:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8009c42:	f000 8105 	beq.w	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009c46:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8009c4a:	f000 8110 	beq.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009c4e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8009c52:	f000 80e2 	beq.w	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009c56:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009c5a:	d13a      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009c5c:	4ba9      	ldr	r3, [pc, #676]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8009c64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c68:	f000 808e 	beq.w	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8009c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c70:	f000 812e 	beq.w	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009c74:	bb6b      	cbnz	r3, 8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c76:	4aa3      	ldr	r2, [pc, #652]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = HSE_VALUE;
 8009c78:	4ba3      	ldr	r3, [pc, #652]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c7a:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 8009c7c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009c80:	bf18      	it	ne
 8009c82:	4618      	movne	r0, r3
 8009c84:	e042      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009c86:	4a9f      	ldr	r2, [pc, #636]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009c88:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009c8a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8009c8e:	2b80      	cmp	r3, #128	; 0x80
 8009c90:	f000 8098 	beq.w	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009c94:	d921      	bls.n	8009cda <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8009c96:	2bc0      	cmp	r3, #192	; 0xc0
 8009c98:	d037      	beq.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c9e:	d118      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009ca0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ca2:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009ca4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ca8:	0749      	lsls	r1, r1, #29
 8009caa:	d502      	bpl.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 80ae 	beq.w	8009e0e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cb2:	4a94      	ldr	r2, [pc, #592]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009cb4:	6812      	ldr	r2, [r2, #0]
 8009cb6:	05d0      	lsls	r0, r2, #23
 8009cb8:	d503      	bpl.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8009cba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cbe:	f000 80fb 	beq.w	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cc2:	4a90      	ldr	r2, [pc, #576]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009cc4:	6812      	ldr	r2, [r2, #0]
 8009cc6:	0391      	lsls	r1, r2, #14
 8009cc8:	d503      	bpl.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cce:	f000 80bd 	beq.w	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      switch (srcclk)
 8009cd2:	2000      	movs	r0, #0
}
 8009cd4:	b005      	add	sp, #20
 8009cd6:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d04b      	beq.n	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009cde:	2b40      	cmp	r3, #64	; 0x40
 8009ce0:	d1f7      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ce2:	6810      	ldr	r0, [r2, #0]
 8009ce4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009ce8:	d010      	beq.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cea:	a801      	add	r0, sp, #4
 8009cec:	f7ff fd52 	bl	8009794 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009cf0:	9801      	ldr	r0, [sp, #4]
 8009cf2:	e00b      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009cf4:	4a83      	ldr	r2, [pc, #524]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009cf6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009cf8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8009cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d00:	d060      	beq.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009d02:	d936      	bls.n	8009d72 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8009d04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d08:	d178      	bne.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = EXTERNAL_CLOCK_VALUE;
 8009d0a:	4880      	ldr	r0, [pc, #512]	; (8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
}
 8009d0c:	b005      	add	sp, #20
 8009d0e:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009d12:	4b7c      	ldr	r3, [pc, #496]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d16:	f003 0307 	and.w	r3, r3, #7
 8009d1a:	2b04      	cmp	r3, #4
 8009d1c:	d8d9      	bhi.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009d1e:	a201      	add	r2, pc, #4	; (adr r2, 8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8009d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d24:	08009d89 	.word	0x08009d89
 8009d28:	08009dad 	.word	0x08009dad
 8009d2c:	08009d99 	.word	0x08009d99
 8009d30:	08009d0b 	.word	0x08009d0b
 8009d34:	08009d95 	.word	0x08009d95
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009d38:	4a72      	ldr	r2, [pc, #456]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d3a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009d3c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8009d40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d44:	d03e      	beq.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009d46:	d937      	bls.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8009d48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d4c:	d0dd      	beq.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009d4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d52:	d1be      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d54:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d56:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d5c:	0752      	lsls	r2, r2, #29
 8009d5e:	d5a8      	bpl.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1a6      	bne.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d64:	4b67      	ldr	r3, [pc, #412]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d66:	486a      	ldr	r0, [pc, #424]	; (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009d6e:	40d8      	lsrs	r0, r3
 8009d70:	e7cc      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d146      	bne.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d76:	6810      	ldr	r0, [r2, #0]
 8009d78:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009d7c:	d0c6      	beq.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d7e:	a801      	add	r0, sp, #4
 8009d80:	f7ff fe84 	bl	8009a8c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d84:	9802      	ldr	r0, [sp, #8]
 8009d86:	e7c1      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d88:	4b5e      	ldr	r3, [pc, #376]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d8a:	6818      	ldr	r0, [r3, #0]
 8009d8c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009d90:	d0bc      	beq.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009d92:	e7f4      	b.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d94:	4a5b      	ldr	r2, [pc, #364]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d96:	e783      	b.n	8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d98:	4b5a      	ldr	r3, [pc, #360]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d9a:	6818      	ldr	r0, [r3, #0]
 8009d9c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009da0:	d0b4      	beq.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009da2:	a801      	add	r0, sp, #4
 8009da4:	f7ff fdb4 	bl	8009910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009da8:	9801      	ldr	r0, [sp, #4]
 8009daa:	e7af      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dac:	4b55      	ldr	r3, [pc, #340]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009dae:	6818      	ldr	r0, [r3, #0]
 8009db0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009db4:	d0aa      	beq.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009db6:	e798      	b.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      switch (saiclocksource)
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d0dc      	beq.n	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009dc0:	d08f      	beq.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009dc2:	e786      	b.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009dc4:	6810      	ldr	r0, [r2, #0]
 8009dc6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009dca:	d09f      	beq.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009dcc:	e7e9      	b.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009dce:	4a4d      	ldr	r2, [pc, #308]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009dd0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009dd2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8009dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dda:	d0f3      	beq.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009ddc:	d806      	bhi.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0c9      	beq.n	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009de6:	f43f af7c 	beq.w	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009dea:	e772      	b.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009dec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009df0:	d08b      	beq.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009df2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009df6:	f43f af53 	beq.w	8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 8009dfa:	e76a      	b.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      switch (srcclk)
 8009dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e00:	d0a8      	beq.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009e02:	e766      	b.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e08:	f43f af6b 	beq.w	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009e0c:	e761      	b.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e0e:	6813      	ldr	r3, [r2, #0]
 8009e10:	483f      	ldr	r0, [pc, #252]	; (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009e12:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009e16:	40d8      	lsrs	r0, r3
 8009e18:	e778      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009e1a:	4a3a      	ldr	r2, [pc, #232]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e1c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009e1e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8009e22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e26:	d066      	beq.n	8009ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8009e28:	d82f      	bhi.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e2e:	d04f      	beq.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e34:	d131      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e36:	4b33      	ldr	r3, [pc, #204]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e38:	6818      	ldr	r0, [r3, #0]
 8009e3a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009e3e:	f43f af65 	beq.w	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e42:	a801      	add	r0, sp, #4
 8009e44:	f7ff fd64 	bl	8009910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009e48:	9802      	ldr	r0, [sp, #8]
 8009e4a:	e75f      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = HSE_VALUE;
 8009e4c:	482e      	ldr	r0, [pc, #184]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009e4e:	e75d      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009e50:	4a2c      	ldr	r2, [pc, #176]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e52:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8009e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e5c:	d02e      	beq.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8009e5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e62:	f43f af77 	beq.w	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f47f af33 	bne.w	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009e6c:	e739      	b.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009e6e:	4b25      	ldr	r3, [pc, #148]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 8009e72:	03d2      	lsls	r2, r2, #15
 8009e74:	d589      	bpl.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x172>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e76:	6818      	ldr	r0, [r3, #0]
 8009e78:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009e7c:	f43f af46 	beq.w	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e80:	a801      	add	r0, sp, #4
 8009e82:	f7ff fc87 	bl	8009794 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009e86:	9803      	ldr	r0, [sp, #12]
 8009e88:	e740      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8009e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e8e:	d02a      	beq.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 8009e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e94:	f43f aeef 	beq.w	8009c76 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8009e98:	e71b      	b.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f47f af19 	bne.w	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009ea0:	f7fe fda6 	bl	80089f0 <HAL_RCC_GetHCLKFreq>
 8009ea4:	4b17      	ldr	r3, [pc, #92]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009ea6:	4a1b      	ldr	r2, [pc, #108]	; (8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8009ea8:	6a1b      	ldr	r3, [r3, #32]
 8009eaa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009eae:	5cd3      	ldrb	r3, [r2, r3]
 8009eb0:	f003 031f 	and.w	r3, r3, #31
 8009eb4:	40d8      	lsrs	r0, r3
          break;
 8009eb6:	e729      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = CSI_VALUE;
 8009eb8:	4817      	ldr	r0, [pc, #92]	; (8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8009eba:	e727      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ebc:	6810      	ldr	r0, [r2, #0]
 8009ebe:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009ec2:	f43f af23 	beq.w	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ec6:	a801      	add	r0, sp, #4
 8009ec8:	f7ff fd22 	bl	8009910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009ecc:	9803      	ldr	r0, [sp, #12]
 8009ece:	e71d      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ed0:	4b0c      	ldr	r3, [pc, #48]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009ed2:	6818      	ldr	r0, [r3, #0]
 8009ed4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009ed8:	f43f af18 	beq.w	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009edc:	a801      	add	r0, sp, #4
 8009ede:	f7ff fc59 	bl	8009794 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ee2:	9802      	ldr	r0, [sp, #8]
 8009ee4:	e712      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009ee6:	4a07      	ldr	r2, [pc, #28]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = CSI_VALUE;
 8009ee8:	4b0b      	ldr	r3, [pc, #44]	; (8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009eea:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 8009eec:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8009ef0:	bf18      	it	ne
 8009ef2:	4618      	movne	r0, r3
 8009ef4:	e70a      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ef6:	6810      	ldr	r0, [r2, #0]
 8009ef8:	f010 0004 	ands.w	r0, r0, #4
 8009efc:	f43f af06 	beq.w	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009f00:	e730      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8009f02:	bf00      	nop
 8009f04:	58024400 	.word	0x58024400
 8009f08:	017d7840 	.word	0x017d7840
 8009f0c:	00bb8000 	.word	0x00bb8000
 8009f10:	03d09000 	.word	0x03d09000
 8009f14:	0800a2f4 	.word	0x0800a2f4
 8009f18:	003d0900 	.word	0x003d0900

08009f1c <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop

08009f20 <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 8009f20:	b318      	cbz	r0, 8009f6a <HAL_SDRAM_Init+0x4a>
{
 8009f22:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009f24:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009f28:	460d      	mov	r5, r1
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009f30:	b1b3      	cbz	r3, 8009f60 <HAL_SDRAM_Init+0x40>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f32:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009f34:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f36:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009f3a:	f851 0b04 	ldr.w	r0, [r1], #4
 8009f3e:	f000 f851 	bl	8009fe4 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009f42:	4629      	mov	r1, r5
 8009f44:	e9d4 0200 	ldrd	r0, r2, [r4]
 8009f48:	f000 f888 	bl	800a05c <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 8009f4c:	4a08      	ldr	r2, [pc, #32]	; (8009f70 <HAL_SDRAM_Init+0x50>)
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009f4e:	2101      	movs	r1, #1
  return HAL_OK;
 8009f50:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8009f52:	6813      	ldr	r3, [r2, #0]
 8009f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f58:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009f5a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 8009f5e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8009f60:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8009f64:	f7ff ffda 	bl	8009f1c <HAL_SDRAM_MspInit>
 8009f68:	e7e3      	b.n	8009f32 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8009f6a:	2001      	movs	r0, #1
}
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	52004000 	.word	0x52004000

08009f74 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009f74:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009f76:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8009f7a:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009f7c:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009f7e:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8009f80:	d004      	beq.n	8009f8c <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009f82:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8009f86:	2c01      	cmp	r4, #1
 8009f88:	d001      	beq.n	8009f8e <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8009f8a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8009f8c:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f8e:	2302      	movs	r3, #2
 8009f90:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009f92:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f94:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009f98:	f000 f8ac 	bl	800a0f4 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009f9c:	6833      	ldr	r3, [r6, #0]
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	d003      	beq.n	8009faa <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 8009fa2:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009fa4:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
 8009fa8:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009faa:	2305      	movs	r3, #5
  return HAL_OK;
 8009fac:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009fae:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}

08009fb4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009fb4:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009fb6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8009fba:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	b2d8      	uxtb	r0, r3
 8009fc0:	d005      	beq.n	8009fce <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009fc2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	b2dd      	uxtb	r5, r3
 8009fca:	d001      	beq.n	8009fd0 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8009fcc:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8009fce:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009fd0:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009fd2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009fd4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009fd8:	f000 f8a2 	bl	800a120 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 8009fdc:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009fde:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8009fe2:	bd38      	pop	{r3, r4, r5, pc}

08009fe4 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009fe4:	680b      	ldr	r3, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009fe6:	6802      	ldr	r2, [r0, #0]
{
 8009fe8:	b470      	push	{r4, r5, r6}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009fea:	b9c3      	cbnz	r3, 800a01e <FMC_SDRAM_Init+0x3a>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009fec:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009ff0:	684c      	ldr	r4, [r1, #4]
 8009ff2:	698e      	ldr	r6, [r1, #24]
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8009ffa:	4323      	orrs	r3, r4
 8009ffc:	690c      	ldr	r4, [r1, #16]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	694a      	ldr	r2, [r1, #20]
 800a002:	432b      	orrs	r3, r5
 800a004:	69cd      	ldr	r5, [r1, #28]
 800a006:	4323      	orrs	r3, r4
 800a008:	4313      	orrs	r3, r2
 800a00a:	4333      	orrs	r3, r6
 800a00c:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800a010:	432b      	orrs	r3, r5
 800a012:	4323      	orrs	r3, r4
 800a014:	4313      	orrs	r3, r2
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800a016:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a018:	6003      	str	r3, [r0, #0]
}
 800a01a:	2000      	movs	r0, #0
 800a01c:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a01e:	69cb      	ldr	r3, [r1, #28]
 800a020:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a024:	68ce      	ldr	r6, [r1, #12]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a026:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a028:	4b0b      	ldr	r3, [pc, #44]	; (800a058 <FMC_SDRAM_Init+0x74>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a02a:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
 800a02e:	432a      	orrs	r2, r5
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a030:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a032:	4322      	orrs	r2, r4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a034:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a036:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a038:	6842      	ldr	r2, [r0, #4]
 800a03a:	4013      	ands	r3, r2
 800a03c:	432b      	orrs	r3, r5
 800a03e:	690d      	ldr	r5, [r1, #16]
 800a040:	4323      	orrs	r3, r4
 800a042:	4333      	orrs	r3, r6
 800a044:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800a048:	432b      	orrs	r3, r5
 800a04a:	4323      	orrs	r3, r4
 800a04c:	4313      	orrs	r3, r2
}
 800a04e:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a050:	6043      	str	r3, [r0, #4]
}
 800a052:	2000      	movs	r0, #0
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	ffff8000 	.word	0xffff8000

0800a05c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a05c:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a05e:	bb0a      	cbnz	r2, 800a0a4 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a060:	684c      	ldr	r4, [r1, #4]
 800a062:	6882      	ldr	r2, [r0, #8]
 800a064:	680d      	ldr	r5, [r1, #0]
 800a066:	1e63      	subs	r3, r4, #1
 800a068:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800a06c:	688c      	ldr	r4, [r1, #8]
 800a06e:	1e6e      	subs	r6, r5, #1
 800a070:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800a074:	1e65      	subs	r5, r4, #1
 800a076:	68cc      	ldr	r4, [r1, #12]
 800a078:	4333      	orrs	r3, r6
 800a07a:	690a      	ldr	r2, [r1, #16]
 800a07c:	1e66      	subs	r6, r4, #1
 800a07e:	694c      	ldr	r4, [r1, #20]
 800a080:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a084:	1e55      	subs	r5, r2, #1
 800a086:	698a      	ldr	r2, [r1, #24]
 800a088:	1e61      	subs	r1, r4, #1
 800a08a:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 800a08e:	3a01      	subs	r2, #1
 800a090:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800a094:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800a098:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800a09c:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a09e:	6083      	str	r3, [r0, #8]
}
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a0a4:	6882      	ldr	r2, [r0, #8]
 800a0a6:	68cb      	ldr	r3, [r1, #12]
 800a0a8:	4c11      	ldr	r4, [pc, #68]	; (800a0f0 <FMC_SDRAM_Timing_Init+0x94>)
 800a0aa:	1e5d      	subs	r5, r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a0ac:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a0ae:	4014      	ands	r4, r2
 800a0b0:	694a      	ldr	r2, [r1, #20]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a0b2:	1e5e      	subs	r6, r3, #1
 800a0b4:	680b      	ldr	r3, [r1, #0]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a0b6:	3a01      	subs	r2, #1
 800a0b8:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a0bc:	688d      	ldr	r5, [r1, #8]
 800a0be:	3b01      	subs	r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a0c0:	ea44 5402 	orr.w	r4, r4, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a0c4:	3d01      	subs	r5, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a0c6:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a0c8:	68c2      	ldr	r2, [r0, #12]
 800a0ca:	690c      	ldr	r4, [r1, #16]
 800a0cc:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800a0d0:	6989      	ldr	r1, [r1, #24]
 800a0d2:	3c01      	subs	r4, #1
 800a0d4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 800a0d8:	3901      	subs	r1, #1
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a0e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a0e4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
 800a0e8:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a0ea:	60c3      	str	r3, [r0, #12]
}
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	4770      	bx	lr
 800a0f0:	ff0f0fff 	.word	0xff0f0fff

0800a0f4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a0f4:	b470      	push	{r4, r5, r6}
 800a0f6:	4602      	mov	r2, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800a0f8:	68ce      	ldr	r6, [r1, #12]
 800a0fa:	4c08      	ldr	r4, [pc, #32]	; (800a11c <FMC_SDRAM_SendCommand+0x28>)
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800a0fc:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800a0fe:	e9d1 3500 	ldrd	r3, r5, [r1]
 800a102:	6889      	ldr	r1, [r1, #8]
 800a104:	432b      	orrs	r3, r5
 800a106:	6915      	ldr	r5, [r2, #16]
 800a108:	3901      	subs	r1, #1
 800a10a:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 800a10e:	402c      	ands	r4, r5
 800a110:	4323      	orrs	r3, r4
 800a112:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
}
 800a116:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800a118:	6113      	str	r3, [r2, #16]
}
 800a11a:	4770      	bx	lr
 800a11c:	ffc00000 	.word	0xffc00000

0800a120 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a120:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a122:	4b05      	ldr	r3, [pc, #20]	; (800a138 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800a124:	2000      	movs	r0, #0
{
 800a126:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a128:	6954      	ldr	r4, [r2, #20]
 800a12a:	4023      	ands	r3, r4
}
 800a12c:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a130:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800a134:	6151      	str	r1, [r2, #20]
}
 800a136:	4770      	bx	lr
 800a138:	ffffc001 	.word	0xffffc001

0800a13c <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800a13c:	4603      	mov	r3, r0
 800a13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 800a142:	4c15      	ldr	r4, [pc, #84]	; (800a198 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 800a144:	2500      	movs	r5, #0
 800a146:	4e15      	ldr	r6, [pc, #84]	; (800a19c <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800a148:	4628      	mov	r0, r5
 800a14a:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800a14e:	e9d3 7200 	ldrd	r7, r2, [r3]
 800a152:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800a156:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  DrawProp->LcdLayer = 0;
 800a15a:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800a15c:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 800a160:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 800a162:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 800a164:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 800a166:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 800a16a:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 800a16e:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 800a172:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800a176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800a178:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 800a17a:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800a17c:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800a17e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 800a180:	6a23      	ldr	r3, [r4, #32]
 800a182:	f106 0118 	add.w	r1, r6, #24
 800a186:	4628      	mov	r0, r5
 800a188:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800a18a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a18c:	f106 011c 	add.w	r1, r6, #28
 800a190:	4628      	mov	r0, r5
}
 800a192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800a196:	4718      	bx	r3
 800a198:	24001628 	.word	0x24001628
 800a19c:	240015e8 	.word	0x240015e8

0800a1a0 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 800a1a0:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 800a1a2:	4b05      	ldr	r3, [pc, #20]	; (800a1b8 <UTIL_LCD_SetLayer+0x18>)
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	b133      	cbz	r3, 800a1b6 <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 800a1a8:	4d04      	ldr	r5, [pc, #16]	; (800a1bc <UTIL_LCD_SetLayer+0x1c>)
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	4601      	mov	r1, r0
 800a1ae:	6928      	ldr	r0, [r5, #16]
 800a1b0:	4798      	blx	r3
 800a1b2:	b900      	cbnz	r0, 800a1b6 <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 800a1b4:	60ec      	str	r4, [r5, #12]
    }
  }
}
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}
 800a1b8:	24001628 	.word	0x24001628
 800a1bc:	240015e8 	.word	0x240015e8

0800a1c0 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 800a1c0:	4a02      	ldr	r2, [pc, #8]	; (800a1cc <UTIL_LCD_SetTextColor+0xc>)
 800a1c2:	68d3      	ldr	r3, [r2, #12]
 800a1c4:	015b      	lsls	r3, r3, #5
 800a1c6:	50d0      	str	r0, [r2, r3]
}
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	240015e8 	.word	0x240015e8

0800a1d0 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 800a1d0:	4b02      	ldr	r3, [pc, #8]	; (800a1dc <UTIL_LCD_SetBackColor+0xc>)
 800a1d2:	68da      	ldr	r2, [r3, #12]
 800a1d4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a1d8:	6058      	str	r0, [r3, #4]
}
 800a1da:	4770      	bx	lr
 800a1dc:	240015e8 	.word	0x240015e8

0800a1e0 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 800a1e0:	4b02      	ldr	r3, [pc, #8]	; (800a1ec <UTIL_LCD_SetFont+0xc>)
 800a1e2:	68da      	ldr	r2, [r3, #12]
 800a1e4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a1e8:	6098      	str	r0, [r3, #8]
}
 800a1ea:	4770      	bx	lr
 800a1ec:	240015e8 	.word	0x240015e8

0800a1f0 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800a1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800a1f2:	4e13      	ldr	r6, [pc, #76]	; (800a240 <UTIL_LCD_FillRect+0x50>)
{
 800a1f4:	4615      	mov	r5, r2
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	461c      	mov	r4, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800a1fa:	69f7      	ldr	r7, [r6, #28]
{
 800a1fc:	462b      	mov	r3, r5
 800a1fe:	460a      	mov	r2, r1
 800a200:	9d08      	ldr	r5, [sp, #32]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800a202:	2f02      	cmp	r7, #2
 800a204:	d008      	beq.n	800a218 <UTIL_LCD_FillRect+0x28>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 800a206:	4f0f      	ldr	r7, [pc, #60]	; (800a244 <UTIL_LCD_FillRect+0x54>)
 800a208:	4601      	mov	r1, r0
 800a20a:	e9cd 4500 	strd	r4, r5, [sp]
 800a20e:	693c      	ldr	r4, [r7, #16]
 800a210:	6930      	ldr	r0, [r6, #16]
 800a212:	47a0      	blx	r4
  }
}
 800a214:	b003      	add	sp, #12
 800a216:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 800a218:	096f      	lsrs	r7, r5, #5
 800a21a:	9400      	str	r4, [sp, #0]
 800a21c:	0a29      	lsrs	r1, r5, #8
 800a21e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 800a222:	f407 64fc 	and.w	r4, r7, #2016	; 0x7e0
 800a226:	f401 4778 	and.w	r7, r1, #63488	; 0xf800
 800a22a:	4601      	mov	r1, r0
 800a22c:	6930      	ldr	r0, [r6, #16]
 800a22e:	433c      	orrs	r4, r7
 800a230:	4e04      	ldr	r6, [pc, #16]	; (800a244 <UTIL_LCD_FillRect+0x54>)
 800a232:	4325      	orrs	r5, r4
 800a234:	6934      	ldr	r4, [r6, #16]
 800a236:	9501      	str	r5, [sp, #4]
 800a238:	47a0      	blx	r4
}
 800a23a:	b003      	add	sp, #12
 800a23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a23e:	bf00      	nop
 800a240:	240015e8 	.word	0x240015e8
 800a244:	24001628 	.word	0x24001628

0800a248 <UTIL_LCD_Clear>:
{
 800a248:	b500      	push	{lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800a24a:	2100      	movs	r1, #0
{
 800a24c:	b083      	sub	sp, #12
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800a24e:	4a05      	ldr	r2, [pc, #20]	; (800a264 <UTIL_LCD_Clear+0x1c>)
 800a250:	9000      	str	r0, [sp, #0]
 800a252:	4608      	mov	r0, r1
 800a254:	6993      	ldr	r3, [r2, #24]
 800a256:	6952      	ldr	r2, [r2, #20]
 800a258:	f7ff ffca 	bl	800a1f0 <UTIL_LCD_FillRect>
}
 800a25c:	b003      	add	sp, #12
 800a25e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a262:	bf00      	nop
 800a264:	240015e8 	.word	0x240015e8

0800a268 <__libc_init_array>:
 800a268:	b570      	push	{r4, r5, r6, lr}
 800a26a:	4d0d      	ldr	r5, [pc, #52]	; (800a2a0 <__libc_init_array+0x38>)
 800a26c:	4c0d      	ldr	r4, [pc, #52]	; (800a2a4 <__libc_init_array+0x3c>)
 800a26e:	1b64      	subs	r4, r4, r5
 800a270:	10a4      	asrs	r4, r4, #2
 800a272:	2600      	movs	r6, #0
 800a274:	42a6      	cmp	r6, r4
 800a276:	d109      	bne.n	800a28c <__libc_init_array+0x24>
 800a278:	4d0b      	ldr	r5, [pc, #44]	; (800a2a8 <__libc_init_array+0x40>)
 800a27a:	4c0c      	ldr	r4, [pc, #48]	; (800a2ac <__libc_init_array+0x44>)
 800a27c:	f000 f82e 	bl	800a2dc <_init>
 800a280:	1b64      	subs	r4, r4, r5
 800a282:	10a4      	asrs	r4, r4, #2
 800a284:	2600      	movs	r6, #0
 800a286:	42a6      	cmp	r6, r4
 800a288:	d105      	bne.n	800a296 <__libc_init_array+0x2e>
 800a28a:	bd70      	pop	{r4, r5, r6, pc}
 800a28c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a290:	4798      	blx	r3
 800a292:	3601      	adds	r6, #1
 800a294:	e7ee      	b.n	800a274 <__libc_init_array+0xc>
 800a296:	f855 3b04 	ldr.w	r3, [r5], #4
 800a29a:	4798      	blx	r3
 800a29c:	3601      	adds	r6, #1
 800a29e:	e7f2      	b.n	800a286 <__libc_init_array+0x1e>
 800a2a0:	0801405c 	.word	0x0801405c
 800a2a4:	0801405c 	.word	0x0801405c
 800a2a8:	0801405c 	.word	0x0801405c
 800a2ac:	08014060 	.word	0x08014060

0800a2b0 <memcpy>:
 800a2b0:	440a      	add	r2, r1
 800a2b2:	4291      	cmp	r1, r2
 800a2b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2b8:	d100      	bne.n	800a2bc <memcpy+0xc>
 800a2ba:	4770      	bx	lr
 800a2bc:	b510      	push	{r4, lr}
 800a2be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2c6:	4291      	cmp	r1, r2
 800a2c8:	d1f9      	bne.n	800a2be <memcpy+0xe>
 800a2ca:	bd10      	pop	{r4, pc}

0800a2cc <memset>:
 800a2cc:	4402      	add	r2, r0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d100      	bne.n	800a2d6 <memset+0xa>
 800a2d4:	4770      	bx	lr
 800a2d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a2da:	e7f9      	b.n	800a2d0 <memset+0x4>

0800a2dc <_init>:
 800a2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2de:	bf00      	nop
 800a2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2e2:	bc08      	pop	{r3}
 800a2e4:	469e      	mov	lr, r3
 800a2e6:	4770      	bx	lr

0800a2e8 <_fini>:
 800a2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ea:	bf00      	nop
 800a2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ee:	bc08      	pop	{r3}
 800a2f0:	469e      	mov	lr, r3
 800a2f2:	4770      	bx	lr
