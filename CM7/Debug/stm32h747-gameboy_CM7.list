
stm32h747-gameboy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aa0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08004d38  08004d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ee0  08004ee0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ee0  08004ee0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ee0  08004ee0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ee0  08004ee0  00014ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ee4  08004ee4  00014ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  24000000  08004ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  2400005c  08004f44  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000334  08004f44  00020334  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000324dc  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050ce  00000000  00000000  00052566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000122dd  00000000  00000000  00057634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00069918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001af0  00000000  00000000  0006aa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004304f  00000000  00000000  0006c508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eeef  00000000  00000000  000af557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001b57bf  00000000  00000000  000ce446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00283c05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003708  00000000  00000000  00283c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400005c 	.word	0x2400005c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004d20 	.word	0x08004d20

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000060 	.word	0x24000060
 80002d4:	08004d20 	.word	0x08004d20

080002d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemInit+0xb8>)
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002da:	492e      	ldr	r1, [pc, #184]	; (8000394 <SystemInit+0xbc>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80002e0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80002e4:	b430      	push	{r4, r5}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ea:	691a      	ldr	r2, [r3, #16]
 80002ec:	f042 0210 	orr.w	r2, r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f2:	680b      	ldr	r3, [r1, #0]
 80002f4:	f003 030f 	and.w	r3, r3, #15
 80002f8:	2b06      	cmp	r3, #6
 80002fa:	d805      	bhi.n	8000308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80002fc:	680b      	ldr	r3, [r1, #0]
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	f043 0307 	orr.w	r3, r3, #7
 8000306:	600b      	str	r3, [r1, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <SystemInit+0xc0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030c:	4a23      	ldr	r2, [pc, #140]	; (800039c <SystemInit+0xc4>)
  RCC->CR |= RCC_CR_HSION;
 800030e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000310:	4820      	ldr	r0, [pc, #128]	; (8000394 <SystemInit+0xbc>)
  RCC->CR |= RCC_CR_HSION;
 8000312:	f041 0101 	orr.w	r1, r1, #1
 8000316:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000318:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800031a:	6819      	ldr	r1, [r3, #0]
 800031c:	400a      	ands	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000320:	6803      	ldr	r3, [r0, #0]
 8000322:	071b      	lsls	r3, r3, #28
 8000324:	d505      	bpl.n	8000332 <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000326:	6803      	ldr	r3, [r0, #0]
 8000328:	f023 030f 	bic.w	r3, r3, #15
 800032c:	f043 0307 	orr.w	r3, r3, #7
 8000330:	6003      	str	r3, [r0, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <SystemInit+0xc0>)
 8000334:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000336:	491a      	ldr	r1, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
  RCC->PLLCKSELR = 0x02020200;
 8000338:	4c1a      	ldr	r4, [pc, #104]	; (80003a4 <SystemInit+0xcc>)
  RCC->PLLCFGR = 0x01FF0000;
 800033a:	481b      	ldr	r0, [pc, #108]	; (80003a8 <SystemInit+0xd0>)
  RCC->D1CFGR = 0x00000000;
 800033c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800033e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000340:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000342:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000344:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000346:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800034a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800034c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800034e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000350:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000352:	6818      	ldr	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000354:	4c15      	ldr	r4, [pc, #84]	; (80003ac <SystemInit+0xd4>)
  RCC->CR &= 0xFFFBFFFFU;
 8000356:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800035a:	4d15      	ldr	r5, [pc, #84]	; (80003b0 <SystemInit+0xd8>)
 800035c:	4915      	ldr	r1, [pc, #84]	; (80003b4 <SystemInit+0xdc>)
  RCC->CR &= 0xFFFBFFFFU;
 800035e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000360:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8000362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000368:	6263      	str	r3, [r4, #36]	; 0x24
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800036a:	682b      	ldr	r3, [r5, #0]
 800036c:	4019      	ands	r1, r3
 800036e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000372:	d202      	bcs.n	800037a <SystemInit+0xa2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <SystemInit+0xe0>)
 8000376:	2201      	movs	r2, #1
 8000378:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800037a:	4910      	ldr	r1, [pc, #64]	; (80003bc <SystemInit+0xe4>)
 800037c:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <SystemInit+0xb8>)
 8000382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000386:	6008      	str	r0, [r1, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000388:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800038a:	bc30      	pop	{r4, r5}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	52002000 	.word	0x52002000
 8000398:	58024400 	.word	0x58024400
 800039c:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a0:	01010280 	.word	0x01010280
 80003a4:	02020200 	.word	0x02020200
 80003a8:	01ff0000 	.word	0x01ff0000
 80003ac:	580000c0 	.word	0x580000c0
 80003b0:	5c001000 	.word	0x5c001000
 80003b4:	ffff0000 	.word	0xffff0000
 80003b8:	51008108 	.word	0x51008108
 80003bc:	52004000 	.word	0x52004000

080003c0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003c2:	2004      	movs	r0, #4
{
 80003c4:	b09f      	sub	sp, #124	; 0x7c
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003c6:	f002 ff4d 	bl	8003264 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003ca:	4a2f      	ldr	r2, [pc, #188]	; (8000488 <SystemClock_Config+0xc8>)
 80003cc:	2300      	movs	r3, #0
 80003ce:	9301      	str	r3, [sp, #4]
 80003d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80003d2:	4b2e      	ldr	r3, [pc, #184]	; (800048c <SystemClock_Config+0xcc>)
 80003d4:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003d8:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003da:	62d1      	str	r1, [r2, #44]	; 0x2c
 80003dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80003de:	f002 0201 	and.w	r2, r2, #1
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	699a      	ldr	r2, [r3, #24]
 80003e6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80003ea:	619a      	str	r2, [r3, #24]
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003f2:	9301      	str	r3, [sp, #4]
 80003f4:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003f6:	6983      	ldr	r3, [r0, #24]
 80003f8:	049b      	lsls	r3, r3, #18
 80003fa:	d5fc      	bpl.n	80003f6 <SystemClock_Config+0x36>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003fc:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003fe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000402:	2200      	movs	r2, #0
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000404:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000406:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000408:	21a0      	movs	r1, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800040a:	2504      	movs	r5, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800040c:	940b      	str	r4, [sp, #44]	; 0x2c

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800040e:	2408      	movs	r4, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000410:	900c      	str	r0, [sp, #48]	; 0x30
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000412:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000414:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000416:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000418:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 800041a:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800041c:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800041e:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000420:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000424:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000428:	e9cd 6116 	strd	r6, r1, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800042c:	f002 ff56 	bl	80032dc <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8000430:	b108      	cbz	r0, 8000436 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000432:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000434:	e7fe      	b.n	8000434 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000436:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000438:	273f      	movs	r7, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043a:	2603      	movs	r6, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800043c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000440:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000442:	4629      	mov	r1, r5
 8000444:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000446:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000448:	e9cd 7603 	strd	r7, r6, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800044c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000450:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000454:	f003 fad8 	bl	8003a08 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8000458:	b108      	cbz	r0, 800045e <SystemClock_Config+0x9e>
 800045a:	b672      	cpsid	i
  while (1)
 800045c:	e7fe      	b.n	800045c <SystemClock_Config+0x9c>
  __HAL_RCC_CSI_ENABLE() ;
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <SystemClock_Config+0xd0>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000466:	601a      	str	r2, [r3, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000468:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800046c:	f042 0202 	orr.w	r2, r2, #2
 8000470:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000474:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000478:	f003 0302 	and.w	r3, r3, #2
 800047c:	9302      	str	r3, [sp, #8]
 800047e:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 8000480:	f001 fd96 	bl	8001fb0 <HAL_EnableCompensationCell>
}
 8000484:	b01f      	add	sp, #124	; 0x7c
 8000486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000488:	58000400 	.word	0x58000400
 800048c:	58024800 	.word	0x58024800
 8000490:	58024400 	.word	0x58024400

08000494 <main>:
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000498:	496b      	ldr	r1, [pc, #428]	; (8000648 <main+0x1b4>)
 800049a:	e002      	b.n	80004a2 <main+0xe>
 800049c:	3b01      	subs	r3, #1
 800049e:	f000 80cf 	beq.w	8000640 <main+0x1ac>
 80004a2:	680a      	ldr	r2, [r1, #0]
 80004a4:	0410      	lsls	r0, r2, #16
 80004a6:	d4f9      	bmi.n	800049c <main+0x8>
{
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 80004ac:	f001 fd26 	bl	8001efc <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004b0:	4a66      	ldr	r2, [pc, #408]	; (800064c <main+0x1b8>)
 80004b2:	6953      	ldr	r3, [r2, #20]
 80004b4:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 80004b8:	d111      	bne.n	80004de <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004be:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80004c2:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80004c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004ca:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004ce:	6953      	ldr	r3, [r2, #20]
 80004d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004da:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004de:	4a5b      	ldr	r2, [pc, #364]	; (800064c <main+0x1b8>)
 80004e0:	6953      	ldr	r3, [r2, #20]
 80004e2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80004e6:	d124      	bne.n	8000532 <main+0x9e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004ec:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004f0:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004f4:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004f8:	f3c5 304e 	ubfx	r0, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004fc:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000500:	0140      	lsls	r0, r0, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000502:	ea00 0406 	and.w	r4, r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000506:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000508:	ea44 7183 	orr.w	r1, r4, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800050c:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800050e:	f8c2 1260 	str.w	r1, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000512:	1c59      	adds	r1, r3, #1
 8000514:	d1f8      	bne.n	8000508 <main+0x74>
    } while(sets-- != 0U);
 8000516:	3820      	subs	r0, #32
 8000518:	f110 0f20 	cmn.w	r0, #32
 800051c:	d1f1      	bne.n	8000502 <main+0x6e>
 800051e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000522:	6953      	ldr	r3, [r2, #20]
 8000524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800052e:	f3bf 8f6f 	isb	sy
__HAL_RCC_HSEM_CLK_ENABLE();
 8000532:	4c45      	ldr	r4, [pc, #276]	; (8000648 <main+0x1b4>)
  SystemClock_Config();
 8000534:	f7ff ff44 	bl	80003c0 <SystemClock_Config>
HAL_HSEM_FastTake(HSEM_ID_0);
 8000538:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 800053a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800053e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000542:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000546:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800054a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800054e:	9302      	str	r3, [sp, #8]
 8000550:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000552:	f002 fc2f 	bl	8002db4 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000556:	2100      	movs	r1, #0
 8000558:	4608      	mov	r0, r1
 800055a:	f002 fc39 	bl	8002dd0 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800055e:	4623      	mov	r3, r4
 8000560:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000564:	e001      	b.n	800056a <main+0xd6>
 8000566:	3a01      	subs	r2, #1
 8000568:	d06c      	beq.n	8000644 <main+0x1b0>
 800056a:	6819      	ldr	r1, [r3, #0]
 800056c:	0409      	lsls	r1, r1, #16
 800056e:	d5fa      	bpl.n	8000566 <main+0xd2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000570:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000574:	2501      	movs	r5, #1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000578:	f44f 4670 	mov.w	r6, #61440	; 0xf000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057c:	f042 0204 	orr.w	r2, r2, #4
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000580:	a907      	add	r1, sp, #28
 8000582:	4833      	ldr	r0, [pc, #204]	; (8000650 <main+0x1bc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000584:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000588:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800058c:	f002 0204 	and.w	r2, r2, #4
 8000590:	9204      	str	r2, [sp, #16]
 8000592:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000598:	432a      	orrs	r2, r5
 800059a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800059e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80005a2:	402a      	ands	r2, r5
 80005a4:	9205      	str	r2, [sp, #20]
 80005a6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80005ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005b0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80005b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005be:	9206      	str	r2, [sp, #24]
 80005c0:	9a06      	ldr	r2, [sp, #24]
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80005c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80005ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	9409      	str	r4, [sp, #36]	; 0x24
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	940a      	str	r4, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80005da:	9607      	str	r6, [sp, #28]
	  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005dc:	9303      	str	r3, [sp, #12]
 80005de:	9b03      	ldr	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80005e2:	f002 fac5 	bl	8002b70 <HAL_GPIO_Init>
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 80005e6:	4629      	mov	r1, r5
 80005e8:	4620      	mov	r0, r4
 80005ea:	f001 fb23 	bl	8001c34 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80005ee:	4819      	ldr	r0, [pc, #100]	; (8000654 <main+0x1c0>)
 80005f0:	f004 faf4 	bl	8004bdc <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 80005f4:	4620      	mov	r0, r4
 80005f6:	f004 fb23 	bl	8004c40 <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(LCD_COLOR_ARGB8888_WHITE);
 80005fa:	f04f 30ff 	mov.w	r0, #4294967295
 80005fe:	f004 fb5b 	bl	8004cb8 <UTIL_LCD_Clear>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8000602:	f04f 30ff 	mov.w	r0, #4294967295
 8000606:	f004 fb57 	bl	8004cb8 <UTIL_LCD_Clear>
	  UTIL_LCD_FillRect(50, 50, 400, 400, UTIL_LCD_COLOR_BLACK);
 800060a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800060e:	2132      	movs	r1, #50	; 0x32
 8000610:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000614:	4608      	mov	r0, r1
 8000616:	9200      	str	r2, [sp, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	f004 fb21 	bl	8004c60 <UTIL_LCD_FillRect>
	  HAL_Delay(100);
 800061e:	2064      	movs	r0, #100	; 0x64
 8000620:	f001 fcae 	bl	8001f80 <HAL_Delay>
	  UTIL_LCD_FillRect(50, 50, 400, 400, UTIL_LCD_COLOR_YELLOW);
 8000624:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000628:	2132      	movs	r1, #50	; 0x32
 800062a:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 800062e:	4608      	mov	r0, r1
 8000630:	9200      	str	r2, [sp, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	f004 fb14 	bl	8004c60 <UTIL_LCD_FillRect>
	  HAL_Delay(100);
 8000638:	2064      	movs	r0, #100	; 0x64
 800063a:	f001 fca1 	bl	8001f80 <HAL_Delay>
  while(1){
 800063e:	e7e4      	b.n	800060a <main+0x176>
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
  while (1)
 8000642:	e7fe      	b.n	8000642 <main+0x1ae>
 8000644:	b672      	cpsid	i
 8000646:	e7fe      	b.n	8000646 <main+0x1b2>
 8000648:	58024400 	.word	0x58024400
 800064c:	e000ed00 	.word	0xe000ed00
 8000650:	58022000 	.word	0x58022000
 8000654:	08004eb4 	.word	0x08004eb4

08000658 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800065c:	e7fe      	b.n	800065c <HardFault_Handler>
 800065e:	bf00      	nop

08000660 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000660:	e7fe      	b.n	8000660 <MemManage_Handler>
 8000662:	bf00      	nop

08000664 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000664:	e7fe      	b.n	8000664 <BusFault_Handler>
 8000666:	bf00      	nop

08000668 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000668:	e7fe      	b.n	8000668 <UsageFault_Handler>
 800066a:	bf00      	nop

0800066c <SVC_Handler>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <DebugMon_Handler>:
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop

08000674 <PendSV_Handler>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000678:	f001 bc70 	b.w	8001f5c <HAL_IncTick>

0800067c <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 800067c:	4801      	ldr	r0, [pc, #4]	; (8000684 <LTDC_IRQHandler+0x8>)
 800067e:	f002 bcc3 	b.w	8003008 <HAL_LTDC_IRQHandler>
 8000682:	bf00      	nop
 8000684:	240001b4 	.word	0x240001b4

08000688 <LTDC_ER_IRQHandler>:
 8000688:	f7ff bff8 	b.w	800067c <LTDC_IRQHandler>

0800068c <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 800068c:	4801      	ldr	r0, [pc, #4]	; (8000694 <DSI_IRQHandler+0x8>)
 800068e:	f001 bf91 	b.w	80025b4 <HAL_DSI_IRQHandler>
 8000692:	bf00      	nop
 8000694:	24000278 	.word	0x24000278

08000698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800069c:	f7ff fe1c 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006a2:	490d      	ldr	r1, [pc, #52]	; (80006d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a8:	e002      	b.n	80006b0 <LoopCopyDataInit>

080006aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ae:	3304      	adds	r3, #4

080006b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b4:	d3f9      	bcc.n	80006aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006b8:	4c0a      	ldr	r4, [pc, #40]	; (80006e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006bc:	e001      	b.n	80006c2 <LoopFillZerobss>

080006be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c0:	3204      	adds	r2, #4

080006c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c4:	d3fb      	bcc.n	80006be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006c6:	f004 fb07 	bl	8004cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ca:	f7ff fee3 	bl	8000494 <main>
  bx  lr
 80006ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006d0:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80006d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80006d8:	2400005c 	.word	0x2400005c
  ldr r2, =_sidata
 80006dc:	08004ee8 	.word	0x08004ee8
  ldr r2, =_sbss
 80006e0:	2400005c 	.word	0x2400005c
  ldr r4, =_ebss
 80006e4:	24000334 	.word	0x24000334

080006e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC3_IRQHandler>
	...

080006ec <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80006ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                     pRegMode->BurstType     |\
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80006ee:	4c0e      	ldr	r4, [pc, #56]	; (8000728 <IS42S32800J_ModeRegConfig+0x3c>)
 80006f0:	2304      	movs	r3, #4
{
 80006f2:	460a      	mov	r2, r1
  Command.CommandTarget          = pRegMode->TargetBank;
  Command.AutoRefreshNumber      = 1;
 80006f4:	2601      	movs	r6, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80006f6:	6023      	str	r3, [r4, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80006f8:	69d7      	ldr	r7, [r2, #28]
 80006fa:	e9d1 3503 	ldrd	r3, r5, [r1, #12]
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80006fe:	4621      	mov	r1, r4
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000700:	432b      	orrs	r3, r5
                     pRegMode->BurstType     |\
 8000702:	6955      	ldr	r5, [r2, #20]
 8000704:	432b      	orrs	r3, r5
                     pRegMode->CASLatency    |\
 8000706:	6995      	ldr	r5, [r2, #24]
 8000708:	432b      	orrs	r3, r5
  Command.CommandTarget          = pRegMode->TargetBank;
 800070a:	6815      	ldr	r5, [r2, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800070c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
 8000710:	60a6      	str	r6, [r4, #8]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000712:	433b      	orrs	r3, r7
  Command.CommandTarget          = pRegMode->TargetBank;
 8000714:	6065      	str	r5, [r4, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 8000716:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000718:	f004 f97c 	bl	8004a14 <HAL_SDRAM_SendCommand>
 800071c:	3800      	subs	r0, #0
 800071e:	bf18      	it	ne
 8000720:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8000722:	4240      	negs	r0, r0
 8000724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000726:	bf00      	nop
 8000728:	24000078 	.word	0x24000078

0800072c <IS42S32800J_Init>:
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800072c:	680a      	ldr	r2, [r1, #0]
{
 800072e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8000730:	4c22      	ldr	r4, [pc, #136]	; (80007bc <IS42S32800J_Init+0x90>)
 8000732:	2301      	movs	r3, #1
  Command.ModeRegisterDefinition = 0;
 8000734:	2700      	movs	r7, #0
{
 8000736:	460d      	mov	r5, r1
  Command.CommandTarget          = Interface;
 8000738:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800073a:	4621      	mov	r1, r4
 800073c:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8000740:	4606      	mov	r6, r0
  Command.ModeRegisterDefinition = 0;
 8000742:	60e7      	str	r7, [r4, #12]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8000744:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 8000746:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000748:	f004 f964 	bl	8004a14 <HAL_SDRAM_SendCommand>
 800074c:	2800      	cmp	r0, #0
 800074e:	d132      	bne.n	80007b6 <IS42S32800J_Init+0x8a>
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000750:	f001 fc10 	bl	8001f74 <HAL_GetTick>
 8000754:	4607      	mov	r7, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000756:	f001 fc0d 	bl	8001f74 <HAL_GetTick>
 800075a:	4287      	cmp	r7, r0
 800075c:	d0fb      	beq.n	8000756 <IS42S32800J_Init+0x2a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800075e:	682a      	ldr	r2, [r5, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8000760:	2002      	movs	r0, #2
  Command.AutoRefreshNumber      = 1;
 8000762:	2101      	movs	r1, #1
  Command.ModeRegisterDefinition = 0;
 8000764:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
 8000766:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000768:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 800076c:	6020      	str	r0, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800076e:	4630      	mov	r0, r6
  Command.AutoRefreshNumber      = 1;
 8000770:	60a1      	str	r1, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000772:	4912      	ldr	r1, [pc, #72]	; (80007bc <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8000774:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000776:	f004 f94d 	bl	8004a14 <HAL_SDRAM_SendCommand>
 800077a:	4603      	mov	r3, r0
 800077c:	b9d8      	cbnz	r0, 80007b6 <IS42S32800J_Init+0x8a>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 800077e:	6828      	ldr	r0, [r5, #0]
  Command.AutoRefreshNumber      = 8;
 8000780:	2708      	movs	r7, #8
  Command.CommandMode            = RefreshMode;
 8000782:	6869      	ldr	r1, [r5, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000784:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = Interface;
 8000788:	6060      	str	r0, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800078a:	4630      	mov	r0, r6
  Command.CommandMode            = RefreshMode;
 800078c:	6021      	str	r1, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800078e:	490b      	ldr	r1, [pc, #44]	; (80007bc <IS42S32800J_Init+0x90>)
  Command.ModeRegisterDefinition = 0;
 8000790:	60e3      	str	r3, [r4, #12]
  Command.AutoRefreshNumber      = 8;
 8000792:	60a7      	str	r7, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000794:	f004 f93e 	bl	8004a14 <HAL_SDRAM_SendCommand>
 8000798:	b968      	cbnz	r0, 80007b6 <IS42S32800J_Init+0x8a>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 800079a:	4629      	mov	r1, r5
 800079c:	4630      	mov	r0, r6
 800079e:	f7ff ffa5 	bl	80006ec <IS42S32800J_ModeRegConfig>
 80007a2:	b940      	cbnz	r0, 80007b6 <IS42S32800J_Init+0x8a>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80007a4:	68a9      	ldr	r1, [r5, #8]
 80007a6:	4630      	mov	r0, r6
 80007a8:	f004 f954 	bl	8004a54 <HAL_SDRAM_ProgramRefreshRate>
 80007ac:	3800      	subs	r0, #0
 80007ae:	bf18      	it	ne
 80007b0:	2001      	movne	r0, #1
 80007b2:	4240      	negs	r0, r0
}
 80007b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = IS42S32800J_ERROR;
 80007b6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80007ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007bc:	24000078 	.word	0x24000078

080007c0 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop

080007c8 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 80007ca:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	600b      	str	r3, [r1, #0]
}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	24000088 	.word	0x24000088

080007d8 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 80007d8:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 80007da:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	600b      	str	r3, [r1, #0]
}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	24000088 	.word	0x24000088

080007e8 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <OTM8009A_GetXSize+0x1c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	b123      	cbz	r3, 80007f8 <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 80007ee:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 80007f2:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 80007f4:	600b      	str	r3, [r1, #0]
}
 80007f6:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 80007f8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 80007fc:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 80007fe:	600b      	str	r3, [r1, #0]
}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	24000088 	.word	0x24000088

08000808 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <OTM8009A_GetYSize+0x1c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	b123      	cbz	r3, 8000818 <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 800080e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 8000812:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 8000814:	600b      	str	r3, [r1, #0]
}
 8000816:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 8000818:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 800081c:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 800081e:	600b      	str	r3, [r1, #0]
}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	24000088 	.word	0x24000088

08000828 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop

08000838 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop

08000840 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8000840:	f04f 30ff 	mov.w	r0, #4294967295
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop

08000848 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop

08000850 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8000858:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800085a:	6884      	ldr	r4, [r0, #8]
 800085c:	8800      	ldrh	r0, [r0, #0]
 800085e:	46a4      	mov	ip, r4
}
 8000860:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000864:	4760      	bx	ip
 8000866:	bf00      	nop

08000868 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000868:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800086a:	6844      	ldr	r4, [r0, #4]
 800086c:	8800      	ldrh	r0, [r0, #0]
 800086e:	46a4      	mov	ip, r4
}
 8000870:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000874:	4760      	bx	ip
 8000876:	bf00      	nop

08000878 <OTM8009A_Init>:
{
 8000878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800087c:	2300      	movs	r3, #0
 800087e:	f100 0710 	add.w	r7, r0, #16
{
 8000882:	b082      	sub	sp, #8
 8000884:	4680      	mov	r8, r0
 8000886:	4689      	mov	r9, r1
 8000888:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800088a:	4619      	mov	r1, r3
 800088c:	4ae0      	ldr	r2, [pc, #896]	; (8000c10 <OTM8009A_Init+0x398>)
 800088e:	4638      	mov	r0, r7
 8000890:	f000 fcd6 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8000894:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000896:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8000898:	4ade      	ldr	r2, [pc, #888]	; (8000c14 <OTM8009A_Init+0x39c>)
 800089a:	21ff      	movs	r1, #255	; 0xff
 800089c:	4638      	mov	r0, r7
 800089e:	f000 fccf 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80008a2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80008a4:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80008a6:	4adc      	ldr	r2, [pc, #880]	; (8000c18 <OTM8009A_Init+0x3a0>)
 80008a8:	4619      	mov	r1, r3
 80008aa:	4638      	mov	r0, r7
 80008ac:	f000 fcc8 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80008b0:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80008b2:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80008b4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80008b6:	4ad9      	ldr	r2, [pc, #868]	; (8000c1c <OTM8009A_Init+0x3a4>)
 80008b8:	21ff      	movs	r1, #255	; 0xff
 80008ba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80008bc:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80008be:	f000 fcbf 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80008c2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80008c4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80008c6:	4ad4      	ldr	r2, [pc, #848]	; (8000c18 <OTM8009A_Init+0x3a0>)
 80008c8:	4619      	mov	r1, r3
 80008ca:	4638      	mov	r0, r7
 80008cc:	f000 fcb8 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80008d0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80008d2:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80008d4:	2300      	movs	r3, #0
 80008d6:	4ad2      	ldr	r2, [pc, #840]	; (8000c20 <OTM8009A_Init+0x3a8>)
 80008d8:	21c4      	movs	r1, #196	; 0xc4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80008da:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80008dc:	4638      	mov	r0, r7
 80008de:	f000 fcaf 	bl	8001240 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80008e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80008e6:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 80008e8:	4798      	blx	r3
 80008ea:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80008ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80008f0:	4798      	blx	r3
 80008f2:	1b00      	subs	r0, r0, r4
 80008f4:	2809      	cmp	r0, #9
 80008f6:	d9f9      	bls.n	80008ec <OTM8009A_Init+0x74>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80008f8:	2300      	movs	r3, #0
 80008fa:	4aca      	ldr	r2, [pc, #808]	; (8000c24 <OTM8009A_Init+0x3ac>)
 80008fc:	4638      	mov	r0, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	f000 fc9e 	bl	8001240 <otm8009a_write_reg>
 8000904:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8000906:	2300      	movs	r3, #0
 8000908:	4ac7      	ldr	r2, [pc, #796]	; (8000c28 <OTM8009A_Init+0x3b0>)
 800090a:	21c4      	movs	r1, #196	; 0xc4
 800090c:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800090e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8000910:	f000 fc96 	bl	8001240 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8000914:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8000918:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 800091a:	4798      	blx	r3
 800091c:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800091e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8000922:	4798      	blx	r3
 8000924:	1b40      	subs	r0, r0, r5
 8000926:	2809      	cmp	r0, #9
 8000928:	d9f9      	bls.n	800091e <OTM8009A_Init+0xa6>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800092a:	2300      	movs	r3, #0
 800092c:	4abf      	ldr	r2, [pc, #764]	; (8000c2c <OTM8009A_Init+0x3b4>)
 800092e:	4638      	mov	r0, r7
 8000930:	4619      	mov	r1, r3
 8000932:	f000 fc85 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8000936:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8000938:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800093a:	4abd      	ldr	r2, [pc, #756]	; (8000c30 <OTM8009A_Init+0x3b8>)
 800093c:	21c5      	movs	r1, #197	; 0xc5
 800093e:	4638      	mov	r0, r7
 8000940:	f000 fc7e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8000944:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8000946:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8000948:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800094a:	4619      	mov	r1, r3
 800094c:	4ab9      	ldr	r2, [pc, #740]	; (8000c34 <OTM8009A_Init+0x3bc>)
 800094e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8000950:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8000952:	f000 fc75 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8000956:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8000958:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800095a:	4ab7      	ldr	r2, [pc, #732]	; (8000c38 <OTM8009A_Init+0x3c0>)
 800095c:	21c5      	movs	r1, #197	; 0xc5
 800095e:	4638      	mov	r0, r7
 8000960:	f000 fc6e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8000964:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8000966:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8000968:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800096a:	4619      	mov	r1, r3
 800096c:	4ab3      	ldr	r2, [pc, #716]	; (8000c3c <OTM8009A_Init+0x3c4>)
 800096e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8000970:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8000972:	f000 fc65 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8000976:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8000978:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800097a:	4ab1      	ldr	r2, [pc, #708]	; (8000c40 <OTM8009A_Init+0x3c8>)
 800097c:	21c0      	movs	r1, #192	; 0xc0
 800097e:	4638      	mov	r0, r7
 8000980:	f000 fc5e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000984:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8000986:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8000988:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800098a:	4619      	mov	r1, r3
 800098c:	4aa0      	ldr	r2, [pc, #640]	; (8000c10 <OTM8009A_Init+0x398>)
 800098e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8000990:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000992:	f000 fc55 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8000996:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000998:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800099a:	4aaa      	ldr	r2, [pc, #680]	; (8000c44 <OTM8009A_Init+0x3cc>)
 800099c:	21d9      	movs	r1, #217	; 0xd9
 800099e:	4638      	mov	r0, r7
 80009a0:	f000 fc4e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80009a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80009a6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80009a8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80009aa:	4619      	mov	r1, r3
 80009ac:	4aa6      	ldr	r2, [pc, #664]	; (8000c48 <OTM8009A_Init+0x3d0>)
 80009ae:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80009b0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80009b2:	f000 fc45 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80009b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80009b8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80009ba:	4aa4      	ldr	r2, [pc, #656]	; (8000c4c <OTM8009A_Init+0x3d4>)
 80009bc:	21c1      	movs	r1, #193	; 0xc1
 80009be:	4638      	mov	r0, r7
 80009c0:	f000 fc3e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80009c4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80009c6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80009c8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80009ca:	4619      	mov	r1, r3
 80009cc:	4aa0      	ldr	r2, [pc, #640]	; (8000c50 <OTM8009A_Init+0x3d8>)
 80009ce:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80009d0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80009d2:	f000 fc35 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80009d6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80009d8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80009da:	4a9e      	ldr	r2, [pc, #632]	; (8000c54 <OTM8009A_Init+0x3dc>)
 80009dc:	21c1      	movs	r1, #193	; 0xc1
 80009de:	4638      	mov	r0, r7
 80009e0:	f000 fc2e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80009e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80009e6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80009e8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80009ea:	4619      	mov	r1, r3
 80009ec:	4a9a      	ldr	r2, [pc, #616]	; (8000c58 <OTM8009A_Init+0x3e0>)
 80009ee:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80009f0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80009f2:	f000 fc25 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80009f6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80009f8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80009fa:	4a98      	ldr	r2, [pc, #608]	; (8000c5c <OTM8009A_Init+0x3e4>)
 80009fc:	21c5      	movs	r1, #197	; 0xc5
 80009fe:	4638      	mov	r0, r7
 8000a00:	f000 fc1e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8000a04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8000a06:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8000a08:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4a94      	ldr	r2, [pc, #592]	; (8000c60 <OTM8009A_Init+0x3e8>)
 8000a0e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8000a10:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8000a12:	f000 fc15 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8000a16:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8000a18:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8000a1a:	4a87      	ldr	r2, [pc, #540]	; (8000c38 <OTM8009A_Init+0x3c0>)
 8000a1c:	21c5      	movs	r1, #197	; 0xc5
 8000a1e:	4638      	mov	r0, r7
 8000a20:	f000 fc0e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000a24:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8000a26:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8000a28:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4a78      	ldr	r2, [pc, #480]	; (8000c10 <OTM8009A_Init+0x398>)
 8000a2e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8000a30:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000a32:	f000 fc05 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8000a36:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000a38:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8000a3a:	4a8a      	ldr	r2, [pc, #552]	; (8000c64 <OTM8009A_Init+0x3ec>)
 8000a3c:	21d8      	movs	r1, #216	; 0xd8
 8000a3e:	4638      	mov	r0, r7
 8000a40:	f000 fbfe 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8000a44:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000a46:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8000a48:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4a86      	ldr	r2, [pc, #536]	; (8000c68 <OTM8009A_Init+0x3f0>)
 8000a4e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8000a50:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8000a52:	f000 fbf5 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8000a56:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8000a58:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8000a5a:	4a84      	ldr	r2, [pc, #528]	; (8000c6c <OTM8009A_Init+0x3f4>)
 8000a5c:	21c5      	movs	r1, #197	; 0xc5
 8000a5e:	4638      	mov	r0, r7
 8000a60:	f000 fbee 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8000a64:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8000a66:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8000a68:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4a80      	ldr	r2, [pc, #512]	; (8000c70 <OTM8009A_Init+0x3f8>)
 8000a6e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8000a70:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8000a72:	f000 fbe5 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8000a76:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8000a78:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8000a7a:	4a7e      	ldr	r2, [pc, #504]	; (8000c74 <OTM8009A_Init+0x3fc>)
 8000a7c:	21c0      	movs	r1, #192	; 0xc0
 8000a7e:	4638      	mov	r0, r7
 8000a80:	f000 fbde 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8000a84:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8000a86:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8000a88:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4a7a      	ldr	r2, [pc, #488]	; (8000c78 <OTM8009A_Init+0x400>)
 8000a8e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8000a90:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8000a92:	f000 fbd5 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8000a96:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8000a98:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8000a9a:	4a78      	ldr	r2, [pc, #480]	; (8000c7c <OTM8009A_Init+0x404>)
 8000a9c:	21c5      	movs	r1, #197	; 0xc5
 8000a9e:	4638      	mov	r0, r7
 8000aa0:	f000 fbce 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8000aa4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8000aa6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8000aa8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4a66      	ldr	r2, [pc, #408]	; (8000c48 <OTM8009A_Init+0x3d0>)
 8000aae:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8000ab0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8000ab2:	f000 fbc5 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8000ab6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8000ab8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8000aba:	4a71      	ldr	r2, [pc, #452]	; (8000c80 <OTM8009A_Init+0x408>)
 8000abc:	21c4      	movs	r1, #196	; 0xc4
 8000abe:	4638      	mov	r0, r7
 8000ac0:	f000 fbbe 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8000ac4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8000ac6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8000ac8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8000aca:	4619      	mov	r1, r3
 8000acc:	4a60      	ldr	r2, [pc, #384]	; (8000c50 <OTM8009A_Init+0x3d8>)
 8000ace:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8000ad0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8000ad2:	f000 fbb5 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8000ad6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8000ad8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8000ada:	4a6a      	ldr	r2, [pc, #424]	; (8000c84 <OTM8009A_Init+0x40c>)
 8000adc:	21c1      	movs	r1, #193	; 0xc1
 8000ade:	4638      	mov	r0, r7
 8000ae0:	f000 fbae 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8000ae4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8000ae6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8000ae8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8000aea:	4619      	mov	r1, r3
 8000aec:	4a66      	ldr	r2, [pc, #408]	; (8000c88 <OTM8009A_Init+0x410>)
 8000aee:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8000af0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8000af2:	f000 fba5 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8000af6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8000af8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8000afa:	4a64      	ldr	r2, [pc, #400]	; (8000c8c <OTM8009A_Init+0x414>)
 8000afc:	21b3      	movs	r1, #179	; 0xb3
 8000afe:	4638      	mov	r0, r7
 8000b00:	f000 fb9e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000b04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8000b06:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8000b08:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4a42      	ldr	r2, [pc, #264]	; (8000c18 <OTM8009A_Init+0x3a0>)
 8000b0e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8000b10:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000b12:	f000 fb95 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8000b16:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000b18:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8000b1a:	4a5d      	ldr	r2, [pc, #372]	; (8000c90 <OTM8009A_Init+0x418>)
 8000b1c:	21ce      	movs	r1, #206	; 0xce
 8000b1e:	4638      	mov	r0, r7
 8000b20:	f000 fb8e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000b24:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000b26:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8000b28:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4a59      	ldr	r2, [pc, #356]	; (8000c94 <OTM8009A_Init+0x41c>)
 8000b2e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8000b30:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000b32:	f000 fb85 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8000b36:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000b38:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8000b3a:	4a57      	ldr	r2, [pc, #348]	; (8000c98 <OTM8009A_Init+0x420>)
 8000b3c:	21ce      	movs	r1, #206	; 0xce
 8000b3e:	4638      	mov	r0, r7
 8000b40:	f000 fb7e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000b44:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000b46:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8000b48:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4a53      	ldr	r2, [pc, #332]	; (8000c9c <OTM8009A_Init+0x424>)
 8000b4e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8000b50:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000b52:	f000 fb75 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8000b56:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000b58:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8000b5a:	4a51      	ldr	r2, [pc, #324]	; (8000ca0 <OTM8009A_Init+0x428>)
 8000b5c:	21ce      	movs	r1, #206	; 0xce
 8000b5e:	4638      	mov	r0, r7
 8000b60:	f000 fb6e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000b64:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000b66:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8000b68:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4a4d      	ldr	r2, [pc, #308]	; (8000ca4 <OTM8009A_Init+0x42c>)
 8000b6e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8000b70:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000b72:	f000 fb65 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8000b76:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000b78:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8000b7a:	4a4b      	ldr	r2, [pc, #300]	; (8000ca8 <OTM8009A_Init+0x430>)
 8000b7c:	21cf      	movs	r1, #207	; 0xcf
 8000b7e:	4638      	mov	r0, r7
 8000b80:	f000 fb5e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000b84:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000b86:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8000b88:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4a47      	ldr	r2, [pc, #284]	; (8000cac <OTM8009A_Init+0x434>)
 8000b8e:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8000b90:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000b92:	f000 fb55 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8000b96:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000b98:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8000b9a:	4a45      	ldr	r2, [pc, #276]	; (8000cb0 <OTM8009A_Init+0x438>)
 8000b9c:	21cf      	movs	r1, #207	; 0xcf
 8000b9e:	4638      	mov	r0, r7
 8000ba0:	f000 fb4e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000ba4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000ba6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8000ba8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000baa:	4619      	mov	r1, r3
 8000bac:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <OTM8009A_Init+0x3a0>)
 8000bae:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8000bb0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000bb2:	f000 fb45 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8000bb6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000bb8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8000bba:	4a3e      	ldr	r2, [pc, #248]	; (8000cb4 <OTM8009A_Init+0x43c>)
 8000bbc:	21cb      	movs	r1, #203	; 0xcb
 8000bbe:	4638      	mov	r0, r7
 8000bc0:	f000 fb3e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8000bc4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000bc6:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8000bc8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4a3a      	ldr	r2, [pc, #232]	; (8000cb8 <OTM8009A_Init+0x440>)
 8000bce:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8000bd0:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8000bd2:	f000 fb35 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8000bd6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8000bd8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8000bda:	4a38      	ldr	r2, [pc, #224]	; (8000cbc <OTM8009A_Init+0x444>)
 8000bdc:	21cb      	movs	r1, #203	; 0xcb
 8000bde:	4638      	mov	r0, r7
 8000be0:	f000 fb2e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000be4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8000be6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8000be8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000bea:	4619      	mov	r1, r3
 8000bec:	4a29      	ldr	r2, [pc, #164]	; (8000c94 <OTM8009A_Init+0x41c>)
 8000bee:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8000bf0:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000bf2:	f000 fb25 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8000bf6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000bf8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8000bfa:	4a31      	ldr	r2, [pc, #196]	; (8000cc0 <OTM8009A_Init+0x448>)
 8000bfc:	21cb      	movs	r1, #203	; 0xcb
 8000bfe:	4638      	mov	r0, r7
 8000c00:	f000 fb1e 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000c04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000c06:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8000c08:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	e05a      	b.n	8000cc4 <OTM8009A_Init+0x44c>
 8000c0e:	bf00      	nop
 8000c10:	08004e81 	.word	0x08004e81
 8000c14:	08004d50 	.word	0x08004d50
 8000c18:	08004e82 	.word	0x08004e82
 8000c1c:	08004ddc 	.word	0x08004ddc
 8000c20:	08004e83 	.word	0x08004e83
 8000c24:	08004e84 	.word	0x08004e84
 8000c28:	08004e85 	.word	0x08004e85
 8000c2c:	08004e86 	.word	0x08004e86
 8000c30:	08004e87 	.word	0x08004e87
 8000c34:	08004e88 	.word	0x08004e88
 8000c38:	08004e89 	.word	0x08004e89
 8000c3c:	08004e8a 	.word	0x08004e8a
 8000c40:	08004e8b 	.word	0x08004e8b
 8000c44:	08004e8c 	.word	0x08004e8c
 8000c48:	08004e8d 	.word	0x08004e8d
 8000c4c:	08004e8e 	.word	0x08004e8e
 8000c50:	08004e8f 	.word	0x08004e8f
 8000c54:	08004e90 	.word	0x08004e90
 8000c58:	08004e91 	.word	0x08004e91
 8000c5c:	08004e92 	.word	0x08004e92
 8000c60:	08004e93 	.word	0x08004e93
 8000c64:	08004e50 	.word	0x08004e50
 8000c68:	08004e94 	.word	0x08004e94
 8000c6c:	08004e95 	.word	0x08004e95
 8000c70:	08004e96 	.word	0x08004e96
 8000c74:	08004e97 	.word	0x08004e97
 8000c78:	08004e98 	.word	0x08004e98
 8000c7c:	08004e99 	.word	0x08004e99
 8000c80:	08004e9a 	.word	0x08004e9a
 8000c84:	08004e9b 	.word	0x08004e9b
 8000c88:	08004e9c 	.word	0x08004e9c
 8000c8c:	08004e54 	.word	0x08004e54
 8000c90:	08004e58 	.word	0x08004e58
 8000c94:	08004e9d 	.word	0x08004e9d
 8000c98:	08004e60 	.word	0x08004e60
 8000c9c:	08004e9e 	.word	0x08004e9e
 8000ca0:	08004e70 	.word	0x08004e70
 8000ca4:	08004e9f 	.word	0x08004e9f
 8000ca8:	08004d54 	.word	0x08004d54
 8000cac:	08004ea0 	.word	0x08004ea0
 8000cb0:	08004ead 	.word	0x08004ead
 8000cb4:	08004d60 	.word	0x08004d60
 8000cb8:	08004ea1 	.word	0x08004ea1
 8000cbc:	08004d6c 	.word	0x08004d6c
 8000cc0:	08004d7c 	.word	0x08004d7c
 8000cc4:	4ad1      	ldr	r2, [pc, #836]	; (800100c <OTM8009A_Init+0x794>)
 8000cc6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8000cc8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000cca:	f000 fab9 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8000cce:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000cd0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8000cd2:	4acf      	ldr	r2, [pc, #828]	; (8001010 <OTM8009A_Init+0x798>)
 8000cd4:	21cb      	movs	r1, #203	; 0xcb
 8000cd6:	4638      	mov	r0, r7
 8000cd8:	f000 fab2 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000cdc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000cde:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8000ce0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4acb      	ldr	r2, [pc, #812]	; (8001014 <OTM8009A_Init+0x79c>)
 8000ce6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8000ce8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000cea:	f000 faa9 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8000cee:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000cf0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8000cf2:	4ac9      	ldr	r2, [pc, #804]	; (8001018 <OTM8009A_Init+0x7a0>)
 8000cf4:	21cb      	movs	r1, #203	; 0xcb
 8000cf6:	4638      	mov	r0, r7
 8000cf8:	f000 faa2 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000cfc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000cfe:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8000d00:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000d02:	4619      	mov	r1, r3
 8000d04:	4ac5      	ldr	r2, [pc, #788]	; (800101c <OTM8009A_Init+0x7a4>)
 8000d06:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8000d08:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000d0a:	f000 fa99 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8000d0e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000d10:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8000d12:	4ac3      	ldr	r2, [pc, #780]	; (8001020 <OTM8009A_Init+0x7a8>)
 8000d14:	21cb      	movs	r1, #203	; 0xcb
 8000d16:	4638      	mov	r0, r7
 8000d18:	f000 fa92 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8000d1c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000d1e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8000d20:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8000d22:	4619      	mov	r1, r3
 8000d24:	4abf      	ldr	r2, [pc, #764]	; (8001024 <OTM8009A_Init+0x7ac>)
 8000d26:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8000d28:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8000d2a:	f000 fa89 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8000d2e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8000d30:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8000d32:	4abd      	ldr	r2, [pc, #756]	; (8001028 <OTM8009A_Init+0x7b0>)
 8000d34:	21cb      	movs	r1, #203	; 0xcb
 8000d36:	4638      	mov	r0, r7
 8000d38:	f000 fa82 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8000d3c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8000d3e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8000d40:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8000d42:	4619      	mov	r1, r3
 8000d44:	4ab9      	ldr	r2, [pc, #740]	; (800102c <OTM8009A_Init+0x7b4>)
 8000d46:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8000d48:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8000d4a:	f000 fa79 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8000d4e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8000d50:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8000d52:	4ab7      	ldr	r2, [pc, #732]	; (8001030 <OTM8009A_Init+0x7b8>)
 8000d54:	21cb      	movs	r1, #203	; 0xcb
 8000d56:	4638      	mov	r0, r7
 8000d58:	f000 fa72 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000d5c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8000d5e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8000d60:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000d62:	4619      	mov	r1, r3
 8000d64:	4ab3      	ldr	r2, [pc, #716]	; (8001034 <OTM8009A_Init+0x7bc>)
 8000d66:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8000d68:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000d6a:	f000 fa69 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8000d6e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000d70:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8000d72:	4ab1      	ldr	r2, [pc, #708]	; (8001038 <OTM8009A_Init+0x7c0>)
 8000d74:	21cc      	movs	r1, #204	; 0xcc
 8000d76:	4638      	mov	r0, r7
 8000d78:	f000 fa62 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8000d7c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000d7e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8000d80:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8000d82:	4619      	mov	r1, r3
 8000d84:	4aad      	ldr	r2, [pc, #692]	; (800103c <OTM8009A_Init+0x7c4>)
 8000d86:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8000d88:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8000d8a:	f000 fa59 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8000d8e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8000d90:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8000d92:	4aab      	ldr	r2, [pc, #684]	; (8001040 <OTM8009A_Init+0x7c8>)
 8000d94:	21cc      	movs	r1, #204	; 0xcc
 8000d96:	4638      	mov	r0, r7
 8000d98:	f000 fa52 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000d9c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8000d9e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8000da0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000da2:	4619      	mov	r1, r3
 8000da4:	4aa7      	ldr	r2, [pc, #668]	; (8001044 <OTM8009A_Init+0x7cc>)
 8000da6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8000da8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000daa:	f000 fa49 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8000dae:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000db0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8000db2:	4aa5      	ldr	r2, [pc, #660]	; (8001048 <OTM8009A_Init+0x7d0>)
 8000db4:	21cc      	movs	r1, #204	; 0xcc
 8000db6:	4638      	mov	r0, r7
 8000db8:	f000 fa42 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000dbc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000dbe:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8000dc0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4a91      	ldr	r2, [pc, #580]	; (800100c <OTM8009A_Init+0x794>)
 8000dc6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8000dc8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000dca:	f000 fa39 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8000dce:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000dd0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8000dd2:	4a9e      	ldr	r2, [pc, #632]	; (800104c <OTM8009A_Init+0x7d4>)
 8000dd4:	21cc      	movs	r1, #204	; 0xcc
 8000dd6:	4638      	mov	r0, r7
 8000dd8:	f000 fa32 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000ddc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000dde:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8000de0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000de2:	4619      	mov	r1, r3
 8000de4:	4a8b      	ldr	r2, [pc, #556]	; (8001014 <OTM8009A_Init+0x79c>)
 8000de6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8000de8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000dea:	f000 fa29 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8000dee:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000df0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8000df2:	4a97      	ldr	r2, [pc, #604]	; (8001050 <OTM8009A_Init+0x7d8>)
 8000df4:	21cc      	movs	r1, #204	; 0xcc
 8000df6:	4638      	mov	r0, r7
 8000df8:	f000 fa22 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000dfc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000dfe:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8000e00:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000e02:	4619      	mov	r1, r3
 8000e04:	4a85      	ldr	r2, [pc, #532]	; (800101c <OTM8009A_Init+0x7a4>)
 8000e06:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8000e08:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000e0a:	f000 fa19 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8000e0e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000e10:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8000e12:	4a90      	ldr	r2, [pc, #576]	; (8001054 <OTM8009A_Init+0x7dc>)
 8000e14:	21cc      	movs	r1, #204	; 0xcc
 8000e16:	4638      	mov	r0, r7
 8000e18:	f000 fa12 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8000e1c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000e1e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8000e20:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8000e22:	4619      	mov	r1, r3
 8000e24:	4a8c      	ldr	r2, [pc, #560]	; (8001058 <OTM8009A_Init+0x7e0>)
 8000e26:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8000e28:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8000e2a:	f000 fa09 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8000e2e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8000e30:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8000e32:	4a8a      	ldr	r2, [pc, #552]	; (800105c <OTM8009A_Init+0x7e4>)
 8000e34:	21c5      	movs	r1, #197	; 0xc5
 8000e36:	4638      	mov	r0, r7
 8000e38:	f000 fa02 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8000e3c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8000e3e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8000e40:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8000e42:	4619      	mov	r1, r3
 8000e44:	4a86      	ldr	r2, [pc, #536]	; (8001060 <OTM8009A_Init+0x7e8>)
 8000e46:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8000e48:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8000e4a:	f000 f9f9 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8000e4e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8000e50:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8000e52:	4a84      	ldr	r2, [pc, #528]	; (8001064 <OTM8009A_Init+0x7ec>)
 8000e54:	21f5      	movs	r1, #245	; 0xf5
 8000e56:	4638      	mov	r0, r7
 8000e58:	f000 f9f2 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8000e5c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8000e5e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8000e60:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8000e62:	4619      	mov	r1, r3
 8000e64:	4a80      	ldr	r2, [pc, #512]	; (8001068 <OTM8009A_Init+0x7f0>)
 8000e66:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8000e68:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8000e6a:	f000 f9e9 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8000e6e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8000e70:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8000e72:	4a7e      	ldr	r2, [pc, #504]	; (800106c <OTM8009A_Init+0x7f4>)
 8000e74:	21c6      	movs	r1, #198	; 0xc6
 8000e76:	4638      	mov	r0, r7
 8000e78:	f000 f9e2 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000e7c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8000e7e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8000e80:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000e82:	4619      	mov	r1, r3
 8000e84:	4a7a      	ldr	r2, [pc, #488]	; (8001070 <OTM8009A_Init+0x7f8>)
 8000e86:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8000e88:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000e8a:	f000 f9d9 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8000e8e:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000e90:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8000e92:	4a78      	ldr	r2, [pc, #480]	; (8001074 <OTM8009A_Init+0x7fc>)
 8000e94:	21ff      	movs	r1, #255	; 0xff
 8000e96:	4638      	mov	r0, r7
 8000e98:	f000 f9d2 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000e9c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000e9e:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000ea0:	4a73      	ldr	r2, [pc, #460]	; (8001070 <OTM8009A_Init+0x7f8>)
 8000ea2:	4619      	mov	r1, r3
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8000ea4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000ea6:	4638      	mov	r0, r7
 8000ea8:	f000 f9ca 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000eac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8000eae:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000eb0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4a6e      	ldr	r2, [pc, #440]	; (8001070 <OTM8009A_Init+0x7f8>)
 8000eb6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000eb8:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000eba:	f000 f9c1 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8000ebe:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000ec0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8000ec2:	4a6d      	ldr	r2, [pc, #436]	; (8001078 <OTM8009A_Init+0x800>)
 8000ec4:	21e1      	movs	r1, #225	; 0xe1
 8000ec6:	4638      	mov	r0, r7
 8000ec8:	f000 f9ba 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000ecc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000ece:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8000ed0:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4a66      	ldr	r2, [pc, #408]	; (8001070 <OTM8009A_Init+0x7f8>)
 8000ed6:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8000ed8:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000eda:	f000 f9b1 	bl	8001240 <otm8009a_write_reg>
 8000ede:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8000ee0:	2310      	movs	r3, #16
 8000ee2:	4a66      	ldr	r2, [pc, #408]	; (800107c <OTM8009A_Init+0x804>)
 8000ee4:	21e2      	movs	r1, #226	; 0xe2
 8000ee6:	4638      	mov	r0, r7
 8000ee8:	f000 f9aa 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000eec:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8000eee:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4a63      	ldr	r2, [pc, #396]	; (8001080 <OTM8009A_Init+0x808>)
 8000ef4:	2111      	movs	r1, #17
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8000ef6:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8000ef8:	4638      	mov	r0, r7
 8000efa:	f000 f9a1 	bl	8001240 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8000efe:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8000f02:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8000f04:	4798      	blx	r3
 8000f06:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8000f08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8000f0c:	4798      	blx	r3
 8000f0e:	1b40      	subs	r0, r0, r5
 8000f10:	2877      	cmp	r0, #119	; 0x77
 8000f12:	d9f9      	bls.n	8000f08 <OTM8009A_Init+0x690>
  switch(ColorCoding)
 8000f14:	f1b9 0f00 	cmp.w	r9, #0
 8000f18:	d074      	beq.n	8001004 <OTM8009A_Init+0x78c>
 8000f1a:	f1b9 0f02 	cmp.w	r9, #2
 8000f1e:	d14f      	bne.n	8000fc0 <OTM8009A_Init+0x748>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8000f20:	2300      	movs	r3, #0
 8000f22:	4a58      	ldr	r2, [pc, #352]	; (8001084 <OTM8009A_Init+0x80c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8000f24:	213a      	movs	r1, #58	; 0x3a
 8000f26:	4638      	mov	r0, r7
 8000f28:	f000 f98a 	bl	8001240 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8000f2c:	4d56      	ldr	r5, [pc, #344]	; (8001088 <OTM8009A_Init+0x810>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000f2e:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8000f32:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8000f34:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000f38:	d046      	beq.n	8000fc8 <OTM8009A_Init+0x750>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8000f3e:	2300      	movs	r3, #0
 8000f40:	4a52      	ldr	r2, [pc, #328]	; (800108c <OTM8009A_Init+0x814>)
 8000f42:	2151      	movs	r1, #81	; 0x51
 8000f44:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8000f46:	469a      	mov	sl, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8000f48:	f000 f97a 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8000f4c:	4a50      	ldr	r2, [pc, #320]	; (8001090 <OTM8009A_Init+0x818>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8000f4e:	eb04 0900 	add.w	r9, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8000f52:	4653      	mov	r3, sl
 8000f54:	2153      	movs	r1, #83	; 0x53
 8000f56:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8000f58:	f8c5 a008 	str.w	sl, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8000f5c:	f000 f970 	bl	8001240 <otm8009a_write_reg>
 8000f60:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8000f62:	4653      	mov	r3, sl
 8000f64:	4a4b      	ldr	r2, [pc, #300]	; (8001094 <OTM8009A_Init+0x81c>)
 8000f66:	2155      	movs	r1, #85	; 0x55
 8000f68:	4638      	mov	r0, r7
 8000f6a:	f000 f969 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8000f6e:	444c      	add	r4, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8000f70:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8000f72:	4653      	mov	r3, sl
 8000f74:	4a48      	ldr	r2, [pc, #288]	; (8001098 <OTM8009A_Init+0x820>)
 8000f76:	215e      	movs	r1, #94	; 0x5e
 8000f78:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8000f7a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8000f7c:	f000 f960 	bl	8001240 <otm8009a_write_reg>
 8000f80:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8000f82:	4653      	mov	r3, sl
 8000f84:	4a45      	ldr	r2, [pc, #276]	; (800109c <OTM8009A_Init+0x824>)
 8000f86:	2129      	movs	r1, #41	; 0x29
 8000f88:	4638      	mov	r0, r7
 8000f8a:	f000 f959 	bl	8001240 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8000f8e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8000f90:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000f92:	4653      	mov	r3, sl
 8000f94:	4651      	mov	r1, sl
 8000f96:	4a36      	ldr	r2, [pc, #216]	; (8001070 <OTM8009A_Init+0x7f8>)
 8000f98:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8000f9a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000f9c:	f000 f950 	bl	8001240 <otm8009a_write_reg>
 8000fa0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8000fa2:	4653      	mov	r3, sl
 8000fa4:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000fa6:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8000fa8:	4a3d      	ldr	r2, [pc, #244]	; (80010a0 <OTM8009A_Init+0x828>)
 8000faa:	212c      	movs	r1, #44	; 0x2c
 8000fac:	f000 f948 	bl	8001240 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8000fb0:	42c4      	cmn	r4, r0
}
 8000fb2:	bf14      	ite	ne
 8000fb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000fb8:	4650      	moveq	r0, sl
 8000fba:	b002      	add	sp, #8
 8000fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000fc0:	f1ba 0f01 	cmp.w	sl, #1
 8000fc4:	4d30      	ldr	r5, [pc, #192]	; (8001088 <OTM8009A_Init+0x810>)
 8000fc6:	d1b8      	bne.n	8000f3a <OTM8009A_Init+0x6c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8000fc8:	2660      	movs	r6, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f10d 0207 	add.w	r2, sp, #7
 8000fd0:	2136      	movs	r1, #54	; 0x36
 8000fd2:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8000fd4:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8000fd8:	f000 f932 	bl	8001240 <otm8009a_write_reg>
 8000fdc:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8000fde:	2304      	movs	r3, #4
 8000fe0:	4a30      	ldr	r2, [pc, #192]	; (80010a4 <OTM8009A_Init+0x82c>)
 8000fe2:	212a      	movs	r1, #42	; 0x2a
 8000fe4:	4638      	mov	r0, r7
 8000fe6:	f000 f92b 	bl	8001240 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8000fea:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8000fec:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8000fee:	2304      	movs	r3, #4
 8000ff0:	4a2d      	ldr	r2, [pc, #180]	; (80010a8 <OTM8009A_Init+0x830>)
 8000ff2:	212b      	movs	r1, #43	; 0x2b
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8000ff4:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8000ff6:	4638      	mov	r0, r7
 8000ff8:	f000 f922 	bl	8001240 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8000ffc:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001000:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8001002:	e79c      	b.n	8000f3e <OTM8009A_Init+0x6c6>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8001004:	464b      	mov	r3, r9
 8001006:	4a29      	ldr	r2, [pc, #164]	; (80010ac <OTM8009A_Init+0x834>)
 8001008:	e78c      	b.n	8000f24 <OTM8009A_Init+0x6ac>
 800100a:	bf00      	nop
 800100c:	08004e9e 	.word	0x08004e9e
 8001010:	08004d8c 	.word	0x08004d8c
 8001014:	08004e9f 	.word	0x08004e9f
 8001018:	08004d98 	.word	0x08004d98
 800101c:	08004ea0 	.word	0x08004ea0
 8001020:	08004da8 	.word	0x08004da8
 8001024:	08004ea2 	.word	0x08004ea2
 8001028:	08004db8 	.word	0x08004db8
 800102c:	08004ea3 	.word	0x08004ea3
 8001030:	08004dc4 	.word	0x08004dc4
 8001034:	08004e82 	.word	0x08004e82
 8001038:	08004dd0 	.word	0x08004dd0
 800103c:	08004ea1 	.word	0x08004ea1
 8001040:	08004de0 	.word	0x08004de0
 8001044:	08004e9d 	.word	0x08004e9d
 8001048:	08004df0 	.word	0x08004df0
 800104c:	08004e00 	.word	0x08004e00
 8001050:	08004e0c 	.word	0x08004e0c
 8001054:	08004e1c 	.word	0x08004e1c
 8001058:	08004e8d 	.word	0x08004e8d
 800105c:	08004eae 	.word	0x08004eae
 8001060:	08004eaf 	.word	0x08004eaf
 8001064:	08004eb0 	.word	0x08004eb0
 8001068:	08004eb1 	.word	0x08004eb1
 800106c:	08004eb2 	.word	0x08004eb2
 8001070:	08004e81 	.word	0x08004e81
 8001074:	08004e2c 	.word	0x08004e2c
 8001078:	08004e30 	.word	0x08004e30
 800107c:	08004e40 	.word	0x08004e40
 8001080:	08004ea4 	.word	0x08004ea4
 8001084:	08004ea5 	.word	0x08004ea5
 8001088:	24000088 	.word	0x24000088
 800108c:	08004ea7 	.word	0x08004ea7
 8001090:	08004ea8 	.word	0x08004ea8
 8001094:	08004ea9 	.word	0x08004ea9
 8001098:	08004eaa 	.word	0x08004eaa
 800109c:	08004eab 	.word	0x08004eab
 80010a0:	08004eac 	.word	0x08004eac
 80010a4:	08004d48 	.word	0x08004d48
 80010a8:	08004d4c 	.word	0x08004d4c
 80010ac:	08004ea6 	.word	0x08004ea6

080010b0 <OTM8009A_SetBrightness>:
{
 80010b0:	b570      	push	{r4, r5, r6, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80010b2:	ebc1 2401 	rsb	r4, r1, r1, lsl #8
 80010b6:	4e0b      	ldr	r6, [pc, #44]	; (80010e4 <OTM8009A_SetBrightness+0x34>)
{
 80010b8:	b082      	sub	sp, #8
 80010ba:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80010bc:	fba6 6404 	umull	r6, r4, r6, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80010c0:	2300      	movs	r3, #0
 80010c2:	f10d 0207 	add.w	r2, sp, #7
 80010c6:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80010c8:	0964      	lsrs	r4, r4, #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80010ca:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80010cc:	f88d 4007 	strb.w	r4, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80010d0:	f000 f8b6 	bl	8001240 <otm8009a_write_reg>
 80010d4:	b918      	cbnz	r0, 80010de <OTM8009A_SetBrightness+0x2e>
    OTM8009ACtx.Brightness = Brightness;
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <OTM8009A_SetBrightness+0x38>)
 80010d8:	609d      	str	r5, [r3, #8]
}
 80010da:	b002      	add	sp, #8
 80010dc:	bd70      	pop	{r4, r5, r6, pc}
    ret = OTM8009A_ERROR;
 80010de:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80010e2:	e7fa      	b.n	80010da <OTM8009A_SetBrightness+0x2a>
 80010e4:	51eb851f 	.word	0x51eb851f
 80010e8:	24000088 	.word	0x24000088

080010ec <OTM8009A_DisplayOn>:
{
 80010ec:	b500      	push	{lr}
 80010ee:	b083      	sub	sp, #12
  uint8_t display = 0;
 80010f0:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 80010f2:	2129      	movs	r1, #41	; 0x29
 80010f4:	3010      	adds	r0, #16
 80010f6:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 80010fa:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 80010fe:	f000 f89f 	bl	8001240 <otm8009a_write_reg>
 8001102:	3800      	subs	r0, #0
 8001104:	bf18      	it	ne
 8001106:	2001      	movne	r0, #1
}
 8001108:	4240      	negs	r0, r0
 800110a:	b003      	add	sp, #12
 800110c:	f85d fb04 	ldr.w	pc, [sp], #4

08001110 <OTM8009A_DisplayOff>:
{
 8001110:	b500      	push	{lr}
 8001112:	b083      	sub	sp, #12
  uint8_t display = 0;
 8001114:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8001116:	2128      	movs	r1, #40	; 0x28
 8001118:	3010      	adds	r0, #16
 800111a:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 800111e:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8001122:	f000 f88d 	bl	8001240 <otm8009a_write_reg>
 8001126:	3800      	subs	r0, #0
 8001128:	bf18      	it	ne
 800112a:	2001      	movne	r0, #1
}
 800112c:	4240      	negs	r0, r0
 800112e:	b003      	add	sp, #12
 8001130:	f85d fb04 	ldr.w	pc, [sp], #4

08001134 <OTM8009A_SetOrientation>:
{
 8001134:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8001136:	2360      	movs	r3, #96	; 0x60
{
 8001138:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 800113a:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 800113c:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800113e:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8001142:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8001146:	d83e      	bhi.n	80011c6 <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001148:	d020      	beq.n	800118c <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 800114a:	f100 0510 	add.w	r5, r0, #16
 800114e:	4633      	mov	r3, r6
 8001150:	f10d 0207 	add.w	r2, sp, #7
 8001154:	2136      	movs	r1, #54	; 0x36
 8001156:	4628      	mov	r0, r5
 8001158:	f000 f872 	bl	8001240 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800115c:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 800115e:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001160:	4a1a      	ldr	r2, [pc, #104]	; (80011cc <OTM8009A_SetOrientation+0x98>)
 8001162:	212a      	movs	r1, #42	; 0x2a
 8001164:	4628      	mov	r0, r5
 8001166:	f000 f86b 	bl	8001240 <otm8009a_write_reg>
 800116a:	4607      	mov	r7, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800116c:	2304      	movs	r3, #4
 800116e:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001170:	443c      	add	r4, r7
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001172:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <OTM8009A_SetOrientation+0x9c>)
 8001174:	212b      	movs	r1, #43	; 0x2b
 8001176:	f000 f863 	bl	8001240 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800117c:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800117e:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 8001180:	3800      	subs	r0, #0
 8001182:	bf18      	it	ne
 8001184:	2001      	movne	r0, #1
 8001186:	4240      	negs	r0, r0
}
 8001188:	b003      	add	sp, #12
 800118a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800118c:	f100 0510 	add.w	r5, r0, #16
 8001190:	4633      	mov	r3, r6
 8001192:	460f      	mov	r7, r1
 8001194:	f10d 0206 	add.w	r2, sp, #6
 8001198:	2136      	movs	r1, #54	; 0x36
 800119a:	4628      	mov	r0, r5
 800119c:	f000 f850 	bl	8001240 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80011a0:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80011a2:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <OTM8009A_SetOrientation+0x98>)
 80011a6:	212a      	movs	r1, #42	; 0x2a
 80011a8:	4628      	mov	r0, r5
 80011aa:	f000 f849 	bl	8001240 <otm8009a_write_reg>
 80011ae:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80011b0:	2304      	movs	r3, #4
 80011b2:	4628      	mov	r0, r5
 80011b4:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <OTM8009A_SetOrientation+0x9c>)
 80011b6:	212b      	movs	r1, #43	; 0x2b
 80011b8:	f000 f842 	bl	8001240 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80011bc:	4434      	add	r4, r6
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80011c0:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80011c2:	601f      	str	r7, [r3, #0]
 80011c4:	e7dc      	b.n	8001180 <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 80011c6:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80011ca:	e7dd      	b.n	8001188 <OTM8009A_SetOrientation+0x54>
 80011cc:	08004d48 	.word	0x08004d48
 80011d0:	08004d4c 	.word	0x08004d4c
 80011d4:	24000088 	.word	0x24000088

080011d8 <OTM8009A_ReadID>:
{ 
 80011d8:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 80011da:	3010      	adds	r0, #16
 80011dc:	21da      	movs	r1, #218	; 0xda
{ 
 80011de:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 80011e0:	2300      	movs	r3, #0
 80011e2:	f000 f825 	bl	8001230 <otm8009a_read_reg>
 80011e6:	3800      	subs	r0, #0
 80011e8:	bf18      	it	ne
 80011ea:	2001      	movne	r0, #1
}  
 80011ec:	4240      	negs	r0, r0
 80011ee:	bd08      	pop	{r3, pc}

080011f0 <OTM8009A_DrawVLine>:
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <OTM8009A_GetPixel>:
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop

08001200 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8001200:	b178      	cbz	r0, 8001222 <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001202:	684a      	ldr	r2, [r1, #4]
 8001204:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 8001206:	2000      	movs	r0, #0
{
 8001208:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 800120a:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 800120e:	4906      	ldr	r1, [pc, #24]	; (8001228 <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001210:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8001212:	4a06      	ldr	r2, [pc, #24]	; (800122c <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 8001214:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8001218:	e9c3 1305 	strd	r1, r3, [r3, #20]
}
 800121c:	bc30      	pop	{r4, r5}
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 800121e:	611a      	str	r2, [r3, #16]
}
 8001220:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8001222:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001226:	4770      	bx	lr
 8001228:	08000859 	.word	0x08000859
 800122c:	08000869 	.word	0x08000869

08001230 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8001230:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001232:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8001236:	46a4      	mov	ip, r4
}
 8001238:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800123c:	4760      	bx	ip
 800123e:	bf00      	nop

08001240 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8001240:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8001242:	6804      	ldr	r4, [r0, #0]
 8001244:	6880      	ldr	r0, [r0, #8]
 8001246:	46a4      	mov	ip, r4
}
 8001248:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800124c:	4760      	bx	ip
 800124e:	bf00      	nop

08001250 <BSP_GetTick>:
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
  return (int32_t)HAL_GetTick();
 8001250:	f000 be90 	b.w	8001f74 <HAL_GetTick>

08001254 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8001254:	b910      	cbnz	r0, 800125c <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8001256:	4b03      	ldr	r3, [pc, #12]	; (8001264 <BSP_LCD_SetActiveLayer+0x10>)
 8001258:	6099      	str	r1, [r3, #8]
 800125a:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800125c:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	2400025c 	.word	0x2400025c

08001268 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 8001268:	b918      	cbnz	r0, 8001272 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800126a:	4b03      	ldr	r3, [pc, #12]	; (8001278 <BSP_LCD_GetPixelFormat+0x10>)
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	600b      	str	r3, [r1, #0]
 8001270:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8001272:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 8001276:	4770      	bx	lr
 8001278:	2400025c 	.word	0x2400025c

0800127c <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800127c:	b948      	cbnz	r0, 8001292 <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <BSP_LCD_GetXSize+0x1c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001284:	b11b      	cbz	r3, 800128e <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <BSP_LCD_GetXSize+0x20>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	600b      	str	r3, [r1, #0]
 800128c:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 800128e:	4618      	mov	r0, r3
  }

  return ret;
}
 8001290:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8001292:	f06f 0001 	mvn.w	r0, #1
 8001296:	4770      	bx	lr
 8001298:	24000098 	.word	0x24000098
 800129c:	2400025c 	.word	0x2400025c

080012a0 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80012a0:	b948      	cbnz	r0, 80012b6 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <BSP_LCD_GetYSize+0x1c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a8:	b11b      	cbz	r3, 80012b2 <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <BSP_LCD_GetYSize+0x20>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	600b      	str	r3, [r1, #0]
 80012b0:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 80012b2:	4618      	mov	r0, r3
  }

  return ret;
}
 80012b4:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80012b6:	f06f 0001 	mvn.w	r0, #1
 80012ba:	4770      	bx	lr
 80012bc:	24000098 	.word	0x24000098
 80012c0:	2400025c 	.word	0x2400025c

080012c4 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80012c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012c8:	e9dd b409 	ldrd	fp, r4, [sp, #36]	; 0x24
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 80012cc:	b39c      	cbz	r4, 8001336 <BSP_LCD_FillRGBRect+0x72>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80012ce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80012d2:	4d1a      	ldr	r5, [pc, #104]	; (800133c <BSP_LCD_FillRGBRect+0x78>)
 80012d4:	eb04 0802 	add.w	r8, r4, r2
 80012d8:	eb0b 0e01 	add.w	lr, fp, r1
 80012dc:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80012e0:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8001340 <BSP_LCD_FillRGBRect+0x7c>
 80012e4:	2734      	movs	r7, #52	; 0x34
    for(j = 0; j < Width; j++)
 80012e6:	f1bb 0f00 	cmp.w	fp, #0
 80012ea:	d021      	beq.n	8001330 <BSP_LCD_FillRGBRect+0x6c>
 80012ec:	460c      	mov	r4, r1
 80012ee:	e00a      	b.n	8001306 <BSP_LCD_FillRGBRect+0x42>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80012f0:	682e      	ldr	r6, [r5, #0]
 80012f2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80012f4:	fb06 4602 	mla	r6, r6, r2, r4
 80012f8:	3401      	adds	r4, #1
 80012fa:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    for(j = 0; j < Width; j++)
 80012fe:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 8001300:	6928      	ldr	r0, [r5, #16]
 8001302:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 8001304:	d014      	beq.n	8001330 <BSP_LCD_FillRGBRect+0x6c>
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001306:	68a8      	ldr	r0, [r5, #8]
 8001308:	f8d3 9000 	ldr.w	r9, [r3]
 800130c:	fb07 c000 	mla	r0, r7, r0, ip
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8001310:	fa1f fa89 	uxth.w	sl, r9
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001314:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8001316:	2e00      	cmp	r6, #0
 8001318:	d0ea      	beq.n	80012f0 <BSP_LCD_FillRGBRect+0x2c>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800131a:	682e      	ldr	r6, [r5, #0]
 800131c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800131e:	fb06 4602 	mla	r6, r6, r2, r4
 8001322:	3401      	adds	r4, #1
 8001324:	f820 a016 	strh.w	sl, [r0, r6, lsl #1]
    for(j = 0; j < Width; j++)
 8001328:	4574      	cmp	r4, lr
      pData += Lcd_Ctx[Instance].BppFactor;
 800132a:	6928      	ldr	r0, [r5, #16]
 800132c:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 800132e:	d1ea      	bne.n	8001306 <BSP_LCD_FillRGBRect+0x42>
  for(i = 0; i < Height; i++)
 8001330:	3201      	adds	r2, #1
 8001332:	4542      	cmp	r2, r8
 8001334:	d1d7      	bne.n	80012e6 <BSP_LCD_FillRGBRect+0x22>
}
 8001336:	2000      	movs	r0, #0
 8001338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800133c:	2400025c 	.word	0x2400025c
 8001340:	240001b4 	.word	0x240001b4

08001344 <BSP_LCD_ReadPixel>:
{
 8001344:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001346:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800134a:	4e10      	ldr	r6, [pc, #64]	; (800138c <BSP_LCD_ReadPixel+0x48>)
 800134c:	4f10      	ldr	r7, [pc, #64]	; (8001390 <BSP_LCD_ReadPixel+0x4c>)
 800134e:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8001352:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 8001356:	0080      	lsls	r0, r0, #2
 8001358:	68ac      	ldr	r4, [r5, #8]
 800135a:	fb0c 7404 	mla	r4, ip, r4, r7
 800135e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001360:	b94d      	cbnz	r5, 8001376 <BSP_LCD_ReadPixel+0x32>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8001362:	5830      	ldr	r0, [r6, r0]
 8001364:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8001366:	fb00 1202 	mla	r2, r0, r2, r1
}
 800136a:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800136c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 8001370:	bcf0      	pop	{r4, r5, r6, r7}
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8001376:	5835      	ldr	r5, [r6, r0]
 8001378:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800137a:	fb05 1202 	mla	r2, r5, r2, r1
 800137e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 8001382:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8001384:	b292      	uxth	r2, r2
}
 8001386:	bcf0      	pop	{r4, r5, r6, r7}
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	4770      	bx	lr
 800138c:	2400025c 	.word	0x2400025c
 8001390:	240001b4 	.word	0x240001b4

08001394 <BSP_LCD_WritePixel>:
{
 8001394:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001396:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800139a:	4e0f      	ldr	r6, [pc, #60]	; (80013d8 <BSP_LCD_WritePixel+0x44>)
 800139c:	4f0f      	ldr	r7, [pc, #60]	; (80013dc <BSP_LCD_WritePixel+0x48>)
 800139e:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80013a2:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 80013a6:	0080      	lsls	r0, r0, #2
 80013a8:	68ac      	ldr	r4, [r5, #8]
 80013aa:	fb0c 7404 	mla	r4, ip, r4, r7
 80013ae:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80013b0:	b945      	cbnz	r5, 80013c4 <BSP_LCD_WritePixel+0x30>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80013b2:	5830      	ldr	r0, [r6, r0]
 80013b4:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 80013b6:	fb00 1202 	mla	r2, r0, r2, r1
  }

  return BSP_ERROR_NONE;
}
 80013ba:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80013bc:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 80013c0:	bcf0      	pop	{r4, r5, r6, r7}
 80013c2:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80013c4:	5835      	ldr	r5, [r6, r0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80013ca:	fb05 1202 	mla	r2, r5, r2, r1
}
 80013ce:	bcf0      	pop	{r4, r5, r6, r7}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80013d0:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 80013d4:	2000      	movs	r0, #0
 80013d6:	4770      	bx	lr
 80013d8:	2400025c 	.word	0x2400025c
 80013dc:	240001b4 	.word	0x240001b4

080013e0 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 80013e0:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80013e2:	2406      	movs	r4, #6
{
 80013e4:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80013e6:	9101      	str	r1, [sp, #4]
 80013e8:	4601      	mov	r1, r0
 80013ea:	9202      	str	r2, [sp, #8]
 80013ec:	9400      	str	r4, [sp, #0]
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <DSI_IO_Read+0x24>)
 80013f0:	f001 fb36 	bl	8002a60 <HAL_DSI_Read>
 80013f4:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 80013f6:	bf14      	ite	ne
 80013f8:	f06f 0007 	mvnne.w	r0, #7
 80013fc:	2000      	moveq	r0, #0
 80013fe:	b004      	add	sp, #16
 8001400:	bd10      	pop	{r4, pc}
 8001402:	bf00      	nop
 8001404:	24000278 	.word	0x24000278

08001408 <BSP_LCD_DrawBitmap>:
{
 8001408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800140c:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8001410:	4e4f      	ldr	r6, [pc, #316]	; (8001550 <BSP_LCD_DrawBitmap+0x148>)
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8001412:	7d1c      	ldrb	r4, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8001414:	f04f 0934 	mov.w	r9, #52	; 0x34
 8001418:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 800141c:	f856 802c 	ldr.w	r8, [r6, ip, lsl #2]
 8001420:	f8df e138 	ldr.w	lr, [pc, #312]	; 800155c <BSP_LCD_DrawBitmap+0x154>
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8001424:	0424      	lsls	r4, r4, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8001426:	fb08 1202 	mla	r2, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800142a:	f893 c013 	ldrb.w	ip, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800142e:	68b9      	ldr	r1, [r7, #8]
{
 8001430:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8001432:	7b1d      	ldrb	r5, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8001434:	eb04 240c 	add.w	r4, r4, ip, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8001438:	fb09 e101 	mla	r1, r9, r1, lr
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800143c:	f893 800b 	ldrb.w	r8, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8001440:	f893 c01d 	ldrb.w	ip, [r3, #29]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8001444:	042d      	lsls	r5, r5, #16
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8001446:	f893 a018 	ldrb.w	sl, [r3, #24]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800144a:	f893 901c 	ldrb.w	r9, [r3, #28]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800144e:	eb05 2508 	add.w	r5, r5, r8, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8001452:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8001454:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8001458:	f8d7 8010 	ldr.w	r8, [r7, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800145c:	eb09 290c 	add.w	r9, r9, ip, lsl #8
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8001460:	7c9f      	ldrb	r7, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8001462:	f893 e017 	ldrb.w	lr, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8001466:	fb08 1802 	mla	r8, r8, r2, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800146a:	f893 c00a 	ldrb.w	ip, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800146e:	443c      	add	r4, r7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8001470:	eb0a 2a0e 	add.w	sl, sl, lr, lsl #8
 8001474:	7d9f      	ldrb	r7, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8001476:	4465      	add	r5, ip
 8001478:	7b59      	ldrb	r1, [r3, #13]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800147a:	44ba      	add	sl, r7
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800147c:	7d5f      	ldrb	r7, [r3, #21]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800147e:	eb05 6101 	add.w	r1, r5, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 8001482:	f1a9 0520 	sub.w	r5, r9, #32
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8001486:	7e5a      	ldrb	r2, [r3, #25]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8001488:	eb04 6407 	add.w	r4, r4, r7, lsl #24
  if ((bit_pixel/8U) == 4U)
 800148c:	2d07      	cmp	r5, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800148e:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8001492:	9403      	str	r4, [sp, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8001494:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 8001498:	d957      	bls.n	800154a <BSP_LCD_DrawBitmap+0x142>
  else if ((bit_pixel/8U) == 2U)
 800149a:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 800149e:	2c08      	cmp	r4, #8
 80014a0:	bf34      	ite	cc
 80014a2:	f04f 0b02 	movcc.w	fp, #2
 80014a6:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 80014aa:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 80014ae:	9c03      	ldr	r4, [sp, #12]
 80014b0:	f10a 35ff 	add.w	r5, sl, #4294967295
 80014b4:	fb04 f909 	mul.w	r9, r4, r9
 80014b8:	fb09 1505 	mla	r5, r9, r5, r1
 80014bc:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 80014be:	f1ba 0f00 	cmp.w	sl, #0
 80014c2:	d03e      	beq.n	8001542 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 80014c4:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 80014c6:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 80014ca:	2700      	movs	r7, #0
 80014cc:	4c21      	ldr	r4, [pc, #132]	; (8001554 <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 80014ce:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 80014d2:	e006      	b.n	80014e2 <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80014d4:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 80014d6:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80014d8:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 80014da:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80014dc:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 80014e0:	d02f      	beq.n	8001542 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 80014e2:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 80014e4:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80014e6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80014ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80014ee:	2b02      	cmp	r3, #2
  hlcd_dma2d.Instance = DMA2D;
 80014f0:	4919      	ldr	r1, [pc, #100]	; (8001558 <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 80014f2:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  for(index=0; index < height; index++)
 80014f6:	f107 0701 	add.w	r7, r7, #1
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80014fa:	bf18      	it	ne
 80014fc:	4613      	movne	r3, r2
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80014fe:	64e2      	str	r2, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8001500:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8001502:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8001506:	e9c4 1000 	strd	r1, r0, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800150a:	4812      	ldr	r0, [pc, #72]	; (8001554 <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.Init.OutputOffset = 0;
 800150c:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8001510:	f000 fe18 	bl	8002144 <HAL_DMA2D_Init>
 8001514:	2800      	cmp	r0, #0
 8001516:	d1dd      	bne.n	80014d4 <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8001518:	2101      	movs	r1, #1
 800151a:	480e      	ldr	r0, [pc, #56]	; (8001554 <BSP_LCD_DrawBitmap+0x14c>)
 800151c:	f000 fef6 	bl	800230c <HAL_DMA2D_ConfigLayer>
 8001520:	2800      	cmp	r0, #0
 8001522:	d1d7      	bne.n	80014d4 <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8001524:	2001      	movs	r0, #1
 8001526:	9b03      	ldr	r3, [sp, #12]
 8001528:	4642      	mov	r2, r8
 800152a:	4629      	mov	r1, r5
 800152c:	9000      	str	r0, [sp, #0]
 800152e:	4809      	ldr	r0, [pc, #36]	; (8001554 <BSP_LCD_DrawBitmap+0x14c>)
 8001530:	f000 fe4a 	bl	80021c8 <HAL_DMA2D_Start>
 8001534:	2800      	cmp	r0, #0
 8001536:	d1cd      	bne.n	80014d4 <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8001538:	2132      	movs	r1, #50	; 0x32
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <BSP_LCD_DrawBitmap+0x14c>)
 800153c:	f000 fe60 	bl	8002200 <HAL_DMA2D_PollForTransfer>
 8001540:	e7c8      	b.n	80014d4 <BSP_LCD_DrawBitmap+0xcc>
}
 8001542:	2000      	movs	r0, #0
 8001544:	b005      	add	sp, #20
 8001546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 800154a:	f04f 0b00 	mov.w	fp, #0
 800154e:	e7ac      	b.n	80014aa <BSP_LCD_DrawBitmap+0xa2>
 8001550:	2400025c 	.word	0x2400025c
 8001554:	24000294 	.word	0x24000294
 8001558:	52001000 	.word	0x52001000
 800155c:	240001b4 	.word	0x240001b4

08001560 <LL_FillBuffer>:
{
 8001560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(Lcd_Ctx[Instance].PixelFormat)
 8001564:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001568:	4c28      	ldr	r4, [pc, #160]	; (800160c <LL_FillBuffer+0xac>)
{
 800156a:	4617      	mov	r7, r2
 800156c:	b082      	sub	sp, #8
  switch(Lcd_Ctx[Instance].PixelFormat)
 800156e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8001572:	4698      	mov	r8, r3
 8001574:	460e      	mov	r6, r1
 8001576:	9b08      	ldr	r3, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
 8001578:	68c2      	ldr	r2, [r0, #12]
{
 800157a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  switch(Lcd_Ctx[Instance].PixelFormat)
 800157c:	2a02      	cmp	r2, #2
 800157e:	d00f      	beq.n	80015a0 <LL_FillBuffer+0x40>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8001580:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8001582:	4c23      	ldr	r4, [pc, #140]	; (8001610 <LL_FillBuffer+0xb0>)
 8001584:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 8001588:	4922      	ldr	r1, [pc, #136]	; (8001614 <LL_FillBuffer+0xb4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800158a:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800158c:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800158e:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 8001590:	e9c4 1c00 	strd	r1, ip, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8001594:	f000 fdd6 	bl	8002144 <HAL_DMA2D_Init>
 8001598:	b308      	cbz	r0, 80015de <LL_FillBuffer+0x7e>
}
 800159a:	b002      	add	sp, #8
 800159c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 80015a0:	f3c5 1045 	ubfx	r0, r5, #5, #6
 80015a4:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 80015a8:	f005 041f 	and.w	r4, r5, #31
 80015ac:	eb00 15c0 	add.w	r5, r0, r0, lsl #7
 80015b0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80015b4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80015b8:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 80015bc:	3521      	adds	r5, #33	; 0x21
 80015be:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 80015c2:	3117      	adds	r1, #23
 80015c4:	09ad      	lsrs	r5, r5, #6
 80015c6:	0989      	lsrs	r1, r1, #6
 80015c8:	022d      	lsls	r5, r5, #8
 80015ca:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 80015ce:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80015d2:	3017      	adds	r0, #23
 80015d4:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 80015d8:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 80015dc:	e7d1      	b.n	8001582 <LL_FillBuffer+0x22>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80015de:	2101      	movs	r1, #1
 80015e0:	4620      	mov	r0, r4
 80015e2:	f000 fe93 	bl	800230c <HAL_DMA2D_ConfigLayer>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d1d7      	bne.n	800159a <LL_FillBuffer+0x3a>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80015ea:	463b      	mov	r3, r7
 80015ec:	4632      	mov	r2, r6
 80015ee:	4629      	mov	r1, r5
 80015f0:	4620      	mov	r0, r4
 80015f2:	f8cd 8000 	str.w	r8, [sp]
 80015f6:	f000 fde7 	bl	80021c8 <HAL_DMA2D_Start>
 80015fa:	2800      	cmp	r0, #0
 80015fc:	d1cd      	bne.n	800159a <LL_FillBuffer+0x3a>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80015fe:	4620      	mov	r0, r4
 8001600:	2119      	movs	r1, #25
}
 8001602:	b002      	add	sp, #8
 8001604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8001608:	f000 bdfa 	b.w	8002200 <HAL_DMA2D_PollForTransfer>
 800160c:	2400025c 	.word	0x2400025c
 8001610:	24000294 	.word	0x24000294
 8001614:	52001000 	.word	0x52001000

08001618 <BSP_LCD_DrawHLine>:
{
 8001618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800161c:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 8001620:	4f12      	ldr	r7, [pc, #72]	; (800166c <BSP_LCD_DrawHLine+0x54>)
{
 8001622:	460c      	mov	r4, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8001624:	f8df e048 	ldr.w	lr, [pc, #72]	; 8001670 <BSP_LCD_DrawHLine+0x58>
 8001628:	eb07 018c 	add.w	r1, r7, ip, lsl #2
 800162c:	f04f 0834 	mov.w	r8, #52	; 0x34
 8001630:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8001634:	eb04 0c03 	add.w	ip, r4, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8001638:	688d      	ldr	r5, [r1, #8]
{
 800163a:	b082      	sub	sp, #8
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800163c:	690e      	ldr	r6, [r1, #16]
 800163e:	fb02 4207 	mla	r2, r2, r7, r4
 8001642:	fb08 e505 	mla	r5, r8, r5, lr
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8001646:	4567      	cmp	r7, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8001648:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 800164a:	bf38      	it	cc
 800164c:	1b3b      	subcc	r3, r7, r4
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 800164e:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8001650:	fb06 1102 	mla	r1, r6, r2, r1
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8001654:	9a08      	ldr	r2, [sp, #32]
 8001656:	9400      	str	r4, [sp, #0]
 8001658:	9201      	str	r2, [sp, #4]
 800165a:	461a      	mov	r2, r3
 800165c:	2301      	movs	r3, #1
 800165e:	f7ff ff7f 	bl	8001560 <LL_FillBuffer>
}
 8001662:	4620      	mov	r0, r4
 8001664:	b002      	add	sp, #8
 8001666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800166a:	bf00      	nop
 800166c:	2400025c 	.word	0x2400025c
 8001670:	240001b4 	.word	0x240001b4

08001674 <BSP_LCD_DrawVLine>:
{
 8001674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8001678:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 800167c:	4c11      	ldr	r4, [pc, #68]	; (80016c4 <BSP_LCD_DrawVLine+0x50>)
 800167e:	4d12      	ldr	r5, [pc, #72]	; (80016c8 <BSP_LCD_DrawVLine+0x54>)
 8001680:	f04f 0834 	mov.w	r8, #52	; 0x34
 8001684:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8001688:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800168c:	eb02 0c03 	add.w	ip, r2, r3
{
 8001690:	b082      	sub	sp, #8
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8001692:	68be      	ldr	r6, [r7, #8]
 8001694:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8001698:	3c01      	subs	r4, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800169a:	fb08 5606 	mla	r6, r8, r6, r5
 800169e:	693d      	ldr	r5, [r7, #16]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80016a0:	687f      	ldr	r7, [r7, #4]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80016a2:	6df6      	ldr	r6, [r6, #92]	; 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80016a4:	45bc      	cmp	ip, r7
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80016a6:	fb05 6101 	mla	r1, r5, r1, r6
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 80016aa:	bf88      	it	hi
 80016ac:	1abb      	subhi	r3, r7, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 80016ae:	9a08      	ldr	r2, [sp, #32]
 80016b0:	e9cd 4200 	strd	r4, r2, [sp]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f7ff ff53 	bl	8001560 <LL_FillBuffer>
}
 80016ba:	2000      	movs	r0, #0
 80016bc:	b002      	add	sp, #8
 80016be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016c2:	bf00      	nop
 80016c4:	2400025c 	.word	0x2400025c
 80016c8:	240001b4 	.word	0x240001b4

080016cc <BSP_LCD_FillRect>:
{
 80016cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80016ce:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 80016d2:	4f0e      	ldr	r7, [pc, #56]	; (800170c <BSP_LCD_FillRect+0x40>)
 80016d4:	f04f 0e34 	mov.w	lr, #52	; 0x34
 80016d8:	4d0d      	ldr	r5, [pc, #52]	; (8001710 <BSP_LCD_FillRect+0x44>)
 80016da:	eb07 0684 	add.w	r6, r7, r4, lsl #2
 80016de:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
{
 80016e2:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80016e4:	68b7      	ldr	r7, [r6, #8]
 80016e6:	fb02 1104 	mla	r1, r2, r4, r1
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80016ea:	1ae4      	subs	r4, r4, r3
 80016ec:	461a      	mov	r2, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80016ee:	fb0e 5507 	mla	r5, lr, r7, r5
 80016f2:	6937      	ldr	r7, [r6, #16]
{
 80016f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80016f6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80016f8:	9400      	str	r4, [sp, #0]
 80016fa:	fb07 3101 	mla	r1, r7, r1, r3
 80016fe:	9b08      	ldr	r3, [sp, #32]
 8001700:	9601      	str	r6, [sp, #4]
 8001702:	f7ff ff2d 	bl	8001560 <LL_FillBuffer>
}
 8001706:	2000      	movs	r0, #0
 8001708:	b003      	add	sp, #12
 800170a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170c:	2400025c 	.word	0x2400025c
 8001710:	240001b4 	.word	0x240001b4

08001714 <LTDC_MspInit.part.0>:
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <LTDC_MspInit.part.0+0x38>)
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
 8001716:	b082      	sub	sp, #8
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001718:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800171c:	f042 0208 	orr.w	r2, r2, #8
 8001720:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8001724:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8001728:	f002 0208 	and.w	r2, r2, #8
 800172c:	9201      	str	r2, [sp, #4]
 800172e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_LTDC_FORCE_RESET();
 8001730:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001734:	f042 0208 	orr.w	r2, r2, #8
 8001738:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 800173c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001740:	f022 0208 	bic.w	r2, r2, #8
 8001744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8001748:	b002      	add	sp, #8
 800174a:	4770      	bx	lr
 800174c:	58024400 	.word	0x58024400

08001750 <DMA2D_MspInit.part.0>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <DMA2D_MspInit.part.0+0x30>)
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
 8001752:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001754:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001758:	f042 0210 	orr.w	r2, r2, #16
 800175c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001760:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001764:	f002 0210 	and.w	r2, r2, #16
 8001768:	9201      	str	r2, [sp, #4]
 800176a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800176c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800176e:	f042 0210 	orr.w	r2, r2, #16
 8001772:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001774:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001776:	f022 0210 	bic.w	r2, r2, #16
 800177a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800177c:	b002      	add	sp, #8
 800177e:	4770      	bx	lr
 8001780:	58024400 	.word	0x58024400

08001784 <DSI_MspInit.part.0>:
    __HAL_RCC_DSI_CLK_ENABLE();
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <DSI_MspInit.part.0+0x38>)
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
 8001786:	b082      	sub	sp, #8
    __HAL_RCC_DSI_CLK_ENABLE();
 8001788:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800178c:	f042 0210 	orr.w	r2, r2, #16
 8001790:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8001794:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8001798:	f002 0210 	and.w	r2, r2, #16
 800179c:	9201      	str	r2, [sp, #4]
 800179e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DSI_FORCE_RESET();
 80017a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80017a4:	f042 0210 	orr.w	r2, r2, #16
 80017a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 80017ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80017b0:	f022 0210 	bic.w	r2, r2, #16
 80017b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80017b8:	b002      	add	sp, #8
 80017ba:	4770      	bx	lr
 80017bc:	58024400 	.word	0x58024400

080017c0 <DSI_IO_Write>:
  if(Size <= 1U)
 80017c0:	2b01      	cmp	r3, #1
{
 80017c2:	b530      	push	{r4, r5, lr}
 80017c4:	460d      	mov	r5, r1
 80017c6:	b083      	sub	sp, #12
 80017c8:	4601      	mov	r1, r0
  if(Size <= 1U)
 80017ca:	d909      	bls.n	80017e0 <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 80017cc:	480a      	ldr	r0, [pc, #40]	; (80017f8 <DSI_IO_Write+0x38>)
 80017ce:	e9cd 5200 	strd	r5, r2, [sp]
 80017d2:	2239      	movs	r2, #57	; 0x39
 80017d4:	f001 f8d8 	bl	8002988 <HAL_DSI_LongWrite>
 80017d8:	b958      	cbnz	r0, 80017f2 <DSI_IO_Write+0x32>
  int32_t ret = BSP_ERROR_NONE;
 80017da:	2000      	movs	r0, #0
}
 80017dc:	b003      	add	sp, #12
 80017de:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 80017e0:	5cd0      	ldrb	r0, [r2, r3]
 80017e2:	462b      	mov	r3, r5
 80017e4:	2215      	movs	r2, #21
 80017e6:	9000      	str	r0, [sp, #0]
 80017e8:	4803      	ldr	r0, [pc, #12]	; (80017f8 <DSI_IO_Write+0x38>)
 80017ea:	f001 f8b9 	bl	8002960 <HAL_DSI_ShortWrite>
 80017ee:	2800      	cmp	r0, #0
 80017f0:	d0f3      	beq.n	80017da <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 80017f2:	f06f 0007 	mvn.w	r0, #7
 80017f6:	e7f1      	b.n	80017dc <DSI_IO_Write+0x1c>
 80017f8:	24000278 	.word	0x24000278

080017fc <BSP_LCD_Reset>:
  LCD_RESET_GPIO_CLK_ENABLE();
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <BSP_LCD_Reset+0x5c>)
 80017fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
{
 8001806:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 8001808:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 800180c:	b087      	sub	sp, #28
  LCD_RESET_GPIO_CLK_ENABLE();
 800180e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8001812:	2508      	movs	r5, #8
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8001814:	4c11      	ldr	r4, [pc, #68]	; (800185c <BSP_LCD_Reset+0x60>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001816:	2601      	movs	r6, #1
  LCD_RESET_GPIO_CLK_ENABLE();
 8001818:	f003 0340 	and.w	r3, r3, #64	; 0x40
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2703      	movs	r7, #3
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800181e:	4620      	mov	r0, r4
 8001820:	a901      	add	r1, sp, #4
  LCD_RESET_GPIO_CLK_ENABLE();
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8001826:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	9704      	str	r7, [sp, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800182a:	e9cd 6602 	strd	r6, r6, [sp, #8]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800182e:	f001 f99f 	bl	8002b70 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8001832:	4629      	mov	r1, r5
 8001834:	4620      	mov	r0, r4
 8001836:	2200      	movs	r2, #0
 8001838:	f001 fab8 	bl	8002dac <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800183c:	2014      	movs	r0, #20
 800183e:	f000 fb9f 	bl	8001f80 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8001842:	4632      	mov	r2, r6
 8001844:	4629      	mov	r1, r5
 8001846:	4620      	mov	r0, r4
 8001848:	f001 fab0 	bl	8002dac <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800184c:	200a      	movs	r0, #10
 800184e:	f000 fb97 	bl	8001f80 <HAL_Delay>
}
 8001852:	b007      	add	sp, #28
 8001854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001856:	bf00      	nop
 8001858:	58024400 	.word	0x58024400
 800185c:	58021800 	.word	0x58021800

08001860 <MX_DSIHOST_DSI_Init>:
{
 8001860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdsi->Instance = DSI;
 8001864:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
{
 8001868:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800186a:	2500      	movs	r5, #0
  hdsi->Init.TXEscapeCkdiv = 4;
 800186c:	f04f 0904 	mov.w	r9, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001870:	2601      	movs	r6, #1
  PLLInit.PLLNDIV = 100;
 8001872:	f04f 0e64 	mov.w	lr, #100	; 0x64
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8001876:	f04f 0c05 	mov.w	ip, #5
  hdsi->Instance = DSI;
 800187a:	6007      	str	r7, [r0, #0]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800187c:	60c6      	str	r6, [r0, #12]
{
 800187e:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8001880:	4669      	mov	r1, sp
{
 8001882:	4604      	mov	r4, r0
 8001884:	4690      	mov	r8, r2
 8001886:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8001888:	9502      	str	r5, [sp, #8]
  hdsi->Init.TXEscapeCkdiv = 4;
 800188a:	e9c0 5901 	strd	r5, r9, [r0, #4]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800188e:	e9cd ec00 	strd	lr, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8001892:	f000 fdcd 	bl	8002430 <HAL_DSI_Init>
 8001896:	b118      	cbz	r0, 80018a0 <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 8001898:	4630      	mov	r0, r6
}
 800189a:	b01e      	add	sp, #120	; 0x78
 800189c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80018a0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80018a4:	4a22      	ldr	r2, [pc, #136]	; (8001930 <MX_DSIHOST_DSI_Init+0xd0>)
 80018a6:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 80018a8:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80018aa:	fb03 2207 	mla	r2, r3, r7, r2
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 80018b0:	2402      	movs	r4, #2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 80018b2:	2110      	movs	r1, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80018b4:	fba3 2302 	umull	r2, r3, r3, r2
  VidCfg.NullPacketSize = 0xFFFU;
 80018b8:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 80018bc:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 80018c0:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80018c4:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 80018c6:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80018c8:	9505      	str	r5, [sp, #20]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80018ca:	950a      	str	r5, [sp, #40]	; 0x28
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 80018cc:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 80018ce:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 80018d2:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 80018d6:	f44f 6800 	mov.w	r8, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 80018da:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80018dc:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 80018de:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.Mode = DSI_VID_MODE_BURST;
 80018e2:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 80018e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.NullPacketSize = 0xFFFU;
 80018e8:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 80018ea:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.ColorCoding = PixelFormat;
 80018ee:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 80018f2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 80018f6:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 80018fa:	9614      	str	r6, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 80018fc:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8001900:	270f      	movs	r7, #15
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8001902:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8001906:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800190a:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800190e:	a903      	add	r1, sp, #12
  VidCfg.LPVACTLargestPacketSize = 4;
 8001910:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8001914:	e9cd e517 	strd	lr, r5, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8001918:	e9cd 8419 	strd	r8, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800191c:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8001920:	f000 febe 	bl	80026a0 <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 8001924:	3800      	subs	r0, #0
 8001926:	bf18      	it	ne
 8001928:	2001      	movne	r0, #1
}
 800192a:	b01e      	add	sp, #120	; 0x78
 800192c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001930:	0042c1d8 	.word	0x0042c1d8
 8001934:	4c751ce3 	.word	0x4c751ce3

08001938 <MX_LTDC_Init>:
{
 8001938:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Instance = LTDC;
 800193a:	4d0e      	ldr	r5, [pc, #56]	; (8001974 <MX_LTDC_Init+0x3c>)
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800193c:	f101 0423 	add.w	r4, r1, #35	; 0x23
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8001940:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8001942:	2701      	movs	r7, #1
  hltdc->Instance = LTDC;
 8001944:	6005      	str	r5, [r0, #0]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8001946:	250f      	movs	r5, #15
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8001948:	2623      	movs	r6, #35	; 0x23
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800194a:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 800194c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800194e:	1954      	adds	r4, r2, r5
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001950:	2100      	movs	r1, #0
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8001952:	321f      	adds	r2, #31
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8001954:	6147      	str	r7, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8001956:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8001958:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800195a:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 800195c:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 800195e:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8001962:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8001964:	6181      	str	r1, [r0, #24]
}
 8001966:	bcf0      	pop	{r4, r5, r6, r7}
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001968:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800196c:	e9c0 1103 	strd	r1, r1, [r0, #12]
  return HAL_LTDC_Init(hltdc);
 8001970:	f001 bad0 	b.w	8002f14 <HAL_LTDC_Init>
 8001974:	50001000 	.word	0x50001000

08001978 <MX_LTDC_ConfigLayer>:
{
 8001978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197a:	4613      	mov	r3, r2
 800197c:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 800197e:	24ff      	movs	r4, #255	; 0xff
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8001980:	460a      	mov	r2, r1
  pLayerCfg.WindowY0 = Config->Y0;
 8001982:	6899      	ldr	r1, [r3, #8]
  pLayerCfg.Alpha0 = 0;
 8001984:	2500      	movs	r5, #0
  pLayerCfg.Alpha = 255;
 8001986:	9406      	str	r4, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001988:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.WindowY0 = Config->Y0;
 800198c:	9103      	str	r1, [sp, #12]
  pLayerCfg.Alpha0 = 0;
 800198e:	9507      	str	r5, [sp, #28]
  pLayerCfg.Backcolor.Blue = 0;
 8001990:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 8001994:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  pLayerCfg.WindowX1 = Config->X1;
 8001998:	e9d3 4600 	ldrd	r4, r6, [r3]
  pLayerCfg.WindowX0 = Config->X0;
 800199c:	9401      	str	r4, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800199e:	1b34      	subs	r4, r6, r4
  pLayerCfg.WindowX1 = Config->X1;
 80019a0:	9602      	str	r6, [sp, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80019a2:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 80019a4:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 80019a6:	68dc      	ldr	r4, [r3, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80019a8:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 80019aa:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80019ac:	910c      	str	r1, [sp, #48]	; 0x30
  pLayerCfg.FBStartAdress = Config->Address;
 80019ae:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80019b2:	e9cd 7608 	strd	r7, r6, [sp, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 80019b6:	9105      	str	r1, [sp, #20]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80019b8:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 80019ba:	930a      	str	r3, [sp, #40]	; 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80019bc:	f001 fb86 	bl	80030cc <HAL_LTDC_ConfigLayer>
}
 80019c0:	b00f      	add	sp, #60	; 0x3c
 80019c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019c4 <MX_LTDC_ClockConfig>:
{
 80019c4:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 80019c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 80019ca:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 80019cc:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 80019ce:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 80019d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 80019d4:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 80019d6:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80019d8:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 80019da:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 80019dc:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80019de:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 80019e0:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 80019e2:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 80019e6:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80019ea:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80019ee:	f002 fa2d 	bl	8003e4c <HAL_RCCEx_PeriphCLKConfig>
}
 80019f2:	b031      	add	sp, #196	; 0xc4
 80019f4:	bd30      	pop	{r4, r5, pc}
 80019f6:	bf00      	nop

080019f8 <BSP_LCD_InitEx>:
{
 80019f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 80019fc:	2901      	cmp	r1, #1
{
 80019fe:	b093      	sub	sp, #76	; 0x4c
 8001a00:	461d      	mov	r5, r3
 8001a02:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8001a06:	9103      	str	r1, [sp, #12]
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8001a08:	f200 80f2 	bhi.w	8001bf0 <BSP_LCD_InitEx+0x1f8>
 8001a0c:	1e03      	subs	r3, r0, #0
 8001a0e:	bf18      	it	ne
 8001a10:	2301      	movne	r3, #1
 8001a12:	2800      	cmp	r0, #0
 8001a14:	f040 80ec 	bne.w	8001bf0 <BSP_LCD_InitEx+0x1f8>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8001a18:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8001a1a:	2901      	cmp	r1, #1
 8001a1c:	f200 80e8 	bhi.w	8001bf0 <BSP_LCD_InitEx+0x1f8>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001a20:	2a02      	cmp	r2, #2
 8001a22:	f000 80ab 	beq.w	8001b7c <BSP_LCD_InitEx+0x184>
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 8001a26:	9301      	str	r3, [sp, #4]
      Lcd_Ctx[Instance].BppFactor = 4U;
 8001a28:	2104      	movs	r1, #4
      dsi_pixel_format = DSI_RGB888;
 8001a2a:	2305      	movs	r3, #5
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001a2c:	4c72      	ldr	r4, [pc, #456]	; (8001bf8 <BSP_LCD_InitEx+0x200>)
    BSP_LCD_Reset(Instance);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	4f72      	ldr	r7, [pc, #456]	; (8001bfc <BSP_LCD_InitEx+0x204>)
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001a32:	2600      	movs	r6, #0
 8001a34:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8001a36:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8001a3a:	6139      	str	r1, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001a3c:	f04f 0b02 	mov.w	fp, #2
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8001a40:	60fa      	str	r2, [r7, #12]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8001a42:	f04f 0a04 	mov.w	sl, #4
    Lcd_Ctx[Instance].XSize  = Width;
 8001a46:	603d      	str	r5, [r7, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8001a48:	f8c7 8004 	str.w	r8, [r7, #4]
    BSP_LCD_Reset(Instance);
 8001a4c:	f7ff fed6 	bl	80017fc <BSP_LCD_Reset>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001a50:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001a54:	2201      	movs	r2, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001a56:	a90c      	add	r1, sp, #48	; 0x30
 8001a58:	4869      	ldr	r0, [pc, #420]	; (8001c00 <BSP_LCD_InitEx+0x208>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001a5a:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 8001a5e:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8001a62:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8001a66:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001a6a:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001a6e:	920d      	str	r2, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001a70:	960e      	str	r6, [sp, #56]	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001a72:	f8cd c014 	str.w	ip, [sp, #20]
 8001a76:	f8dd c014 	ldr.w	ip, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001a7a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001a7e:	f001 f877 	bl	8002b70 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001a82:	2201      	movs	r2, #1
 8001a84:	4649      	mov	r1, r9
 8001a86:	485e      	ldr	r0, [pc, #376]	; (8001c00 <BSP_LCD_InitEx+0x208>)
 8001a88:	f001 f990 	bl	8002dac <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 8001a8c:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8001a90:	a90c      	add	r1, sp, #48	; 0x30
 8001a92:	485b      	ldr	r0, [pc, #364]	; (8001c00 <BSP_LCD_InitEx+0x208>)
  LCD_TE_GPIO_CLK_ENABLE();
 8001a94:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
    hlcd_dma2d.Instance = DMA2D;
 8001a98:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8001c30 <BSP_LCD_InitEx+0x238>
  LCD_TE_GPIO_CLK_ENABLE();
 8001a9c:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
 8001aa0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8001aa4:	960d      	str	r6, [sp, #52]	; 0x34
  LCD_TE_GPIO_CLK_ENABLE();
 8001aa6:	f404 7400 	and.w	r4, r4, #512	; 0x200
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001aaa:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8001aae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  LCD_TE_GPIO_CLK_ENABLE();
 8001ab2:	9406      	str	r4, [sp, #24]
 8001ab4:	9c06      	ldr	r4, [sp, #24]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8001ab6:	f001 f85b 	bl	8002b70 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 8001aba:	2201      	movs	r2, #1
 8001abc:	4651      	mov	r1, sl
 8001abe:	4850      	ldr	r0, [pc, #320]	; (8001c00 <BSP_LCD_InitEx+0x208>)
 8001ac0:	f001 f974 	bl	8002dac <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8001ac4:	4632      	mov	r2, r6
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	2058      	movs	r0, #88	; 0x58
 8001aca:	f000 fa8d 	bl	8001fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001ace:	2058      	movs	r0, #88	; 0x58
 8001ad0:	f000 fac4 	bl	800205c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8001ad4:	4632      	mov	r2, r6
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	205a      	movs	r0, #90	; 0x5a
 8001ada:	f000 fa85 	bl	8001fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001ade:	205a      	movs	r0, #90	; 0x5a
 8001ae0:	f000 fabc 	bl	800205c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 8001ae4:	4632      	mov	r2, r6
 8001ae6:	210f      	movs	r1, #15
 8001ae8:	207b      	movs	r0, #123	; 0x7b
 8001aea:	f000 fa7d 	bl	8001fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001aee:	207b      	movs	r0, #123	; 0x7b
 8001af0:	f000 fab4 	bl	800205c <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 8001af4:	4c43      	ldr	r4, [pc, #268]	; (8001c04 <BSP_LCD_InitEx+0x20c>)
    hlcd_dma2d.Instance = DMA2D;
 8001af6:	4844      	ldr	r0, [pc, #272]	; (8001c08 <BSP_LCD_InitEx+0x210>)
    hlcd_dsi.Instance = DSI;
 8001af8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001afc:	4943      	ldr	r1, [pc, #268]	; (8001c0c <BSP_LCD_InitEx+0x214>)
    hlcd_ltdc.Instance = LTDC;
 8001afe:	4e44      	ldr	r6, [pc, #272]	; (8001c10 <BSP_LCD_InitEx+0x218>)
    hlcd_dsi.Instance = DSI;
 8001b00:	600a      	str	r2, [r1, #0]
    hlcd_ltdc.Instance = LTDC;
 8001b02:	6026      	str	r6, [r4, #0]
    hlcd_dma2d.Instance = DMA2D;
 8001b04:	f8c9 0000 	str.w	r0, [r9]
  if(hltdc->Instance == LTDC)
 8001b08:	f7ff fe04 	bl	8001714 <LTDC_MspInit.part.0>
  if(hdma2d->Instance == DMA2D)
 8001b0c:	f8d9 2000 	ldr.w	r2, [r9]
 8001b10:	9b02      	ldr	r3, [sp, #8]
 8001b12:	4282      	cmp	r2, r0
 8001b14:	d03a      	beq.n	8001b8c <BSP_LCD_InitEx+0x194>
  if(hdsi->Instance == DSI)
 8001b16:	680a      	ldr	r2, [r1, #0]
 8001b18:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001b1c:	d031      	beq.n	8001b82 <BSP_LCD_InitEx+0x18a>
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8001b1e:	4642      	mov	r2, r8
 8001b20:	4629      	mov	r1, r5
 8001b22:	483a      	ldr	r0, [pc, #232]	; (8001c0c <BSP_LCD_InitEx+0x214>)
 8001b24:	f7ff fe9c 	bl	8001860 <MX_DSIHOST_DSI_Init>
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	d15c      	bne.n	8001be6 <BSP_LCD_InitEx+0x1ee>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8001b2c:	4835      	ldr	r0, [pc, #212]	; (8001c04 <BSP_LCD_InitEx+0x20c>)
 8001b2e:	f7ff ff49 	bl	80019c4 <MX_LTDC_ClockConfig>
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d157      	bne.n	8001be6 <BSP_LCD_InitEx+0x1ee>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8001b36:	4642      	mov	r2, r8
 8001b38:	4629      	mov	r1, r5
 8001b3a:	4832      	ldr	r0, [pc, #200]	; (8001c04 <BSP_LCD_InitEx+0x20c>)
 8001b3c:	f7ff fefc 	bl	8001938 <MX_LTDC_Init>
 8001b40:	2800      	cmp	r0, #0
 8001b42:	d150      	bne.n	8001be6 <BSP_LCD_InitEx+0x1ee>
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8001b44:	f000 f8b2 	bl	8001cac <BSP_SDRAM_Init>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d14c      	bne.n	8001be6 <BSP_LCD_InitEx+0x1ee>
      config.PixelFormat = ltdc_pixel_format;
 8001b4c:	9c01      	ldr	r4, [sp, #4]
      config.Address     = LCD_LAYER_0_ADDRESS;
 8001b4e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8001b52:	4601      	mov	r1, r0
      config.X0          = 0;
 8001b54:	900c      	str	r0, [sp, #48]	; 0x30
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8001b56:	aa0c      	add	r2, sp, #48	; 0x30
      config.Y1          = Height;
 8001b58:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      config.Y0          = 0;
 8001b5c:	e9cd 500d 	strd	r5, r0, [sp, #52]	; 0x34
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8001b60:	4828      	ldr	r0, [pc, #160]	; (8001c04 <BSP_LCD_InitEx+0x20c>)
      config.Address     = LCD_LAYER_0_ADDRESS;
 8001b62:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8001b66:	f7ff ff07 	bl	8001978 <MX_LTDC_ConfigLayer>
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	b190      	cbz	r0, 8001b94 <BSP_LCD_InitEx+0x19c>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8001b6e:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61bb      	str	r3, [r7, #24]
}
 8001b76:	b013      	add	sp, #76	; 0x4c
 8001b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Lcd_Ctx[Instance].BppFactor = 2U;
 8001b7c:	4611      	mov	r1, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 8001b7e:	9201      	str	r2, [sp, #4]
 8001b80:	e754      	b.n	8001a2c <BSP_LCD_InitEx+0x34>
 8001b82:	9302      	str	r3, [sp, #8]
 8001b84:	f7ff fdfe 	bl	8001784 <DSI_MspInit.part.0>
 8001b88:	9b02      	ldr	r3, [sp, #8]
 8001b8a:	e7c8      	b.n	8001b1e <BSP_LCD_InitEx+0x126>
 8001b8c:	f7ff fde0 	bl	8001750 <DMA2D_MspInit.part.0>
 8001b90:	9b02      	ldr	r3, [sp, #8]
 8001b92:	e7c0      	b.n	8001b16 <BSP_LCD_InitEx+0x11e>
        (void)HAL_DSI_Start(&hlcd_dsi);
 8001b94:	481d      	ldr	r0, [pc, #116]	; (8001c0c <BSP_LCD_InitEx+0x214>)
 8001b96:	f000 febb 	bl	8002910 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8001b9a:	2104      	movs	r1, #4
 8001b9c:	481b      	ldr	r0, [pc, #108]	; (8001c0c <BSP_LCD_InitEx+0x214>)
 8001b9e:	f000 fea3 	bl	80028e8 <HAL_DSI_ConfigFlowControl>
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <BSP_LCD_InitEx+0x21c>)
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8001ba4:	4d1c      	ldr	r5, [pc, #112]	; (8001c18 <BSP_LCD_InitEx+0x220>)
 8001ba6:	a908      	add	r1, sp, #32
  IOCtx.WriteReg    = DSI_IO_Write;
 8001ba8:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <BSP_LCD_InitEx+0x224>)
  IOCtx.GetTick     = BSP_GetTick;
 8001baa:	930b      	str	r3, [sp, #44]	; 0x2c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8001bac:	4628      	mov	r0, r5
  IOCtx.ReadReg     = DSI_IO_Read;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <BSP_LCD_InitEx+0x228>)
  IOCtx.Address     = 0;
 8001bb0:	f8ad 4020 	strh.w	r4, [sp, #32]
  IOCtx.ReadReg     = DSI_IO_Read;
 8001bb4:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8001bb8:	f7ff fb22 	bl	8001200 <OTM8009A_RegisterBusIO>
 8001bbc:	b980      	cbnz	r0, 8001be0 <BSP_LCD_InitEx+0x1e8>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 8001bbe:	4c19      	ldr	r4, [pc, #100]	; (8001c24 <BSP_LCD_InitEx+0x22c>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8001bc0:	4628      	mov	r0, r5
 8001bc2:	a907      	add	r1, sp, #28
    Lcd_CompObj = &OTM8009AObj;
 8001bc4:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8001bc6:	f7ff fb07 	bl	80011d8 <OTM8009A_ReadID>
 8001bca:	b948      	cbnz	r0, 8001be0 <BSP_LCD_InitEx+0x1e8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <BSP_LCD_InitEx+0x230>)
 8001bce:	4d17      	ldr	r5, [pc, #92]	; (8001c2c <BSP_LCD_InitEx+0x234>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8001bd0:	6820      	ldr	r0, [r4, #0]
 8001bd2:	9a03      	ldr	r2, [sp, #12]
 8001bd4:	9901      	ldr	r1, [sp, #4]
 8001bd6:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8001bd8:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8001bda:	47a0      	blx	r4
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	d0c8      	beq.n	8001b72 <BSP_LCD_InitEx+0x17a>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001be0:	f06f 0006 	mvn.w	r0, #6
 8001be4:	e7c5      	b.n	8001b72 <BSP_LCD_InitEx+0x17a>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001be6:	f06f 0003 	mvn.w	r0, #3
}
 8001bea:	b013      	add	sp, #76	; 0x4c
 8001bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8001bf0:	f06f 0001 	mvn.w	r0, #1
 8001bf4:	e7bf      	b.n	8001b76 <BSP_LCD_InitEx+0x17e>
 8001bf6:	bf00      	nop
 8001bf8:	58024400 	.word	0x58024400
 8001bfc:	2400025c 	.word	0x2400025c
 8001c00:	58022400 	.word	0x58022400
 8001c04:	240001b4 	.word	0x240001b4
 8001c08:	52001000 	.word	0x52001000
 8001c0c:	24000278 	.word	0x24000278
 8001c10:	50001000 	.word	0x50001000
 8001c14:	08001251 	.word	0x08001251
 8001c18:	2400009c 	.word	0x2400009c
 8001c1c:	080017c1 	.word	0x080017c1
 8001c20:	080013e1 	.word	0x080013e1
 8001c24:	24000094 	.word	0x24000094
 8001c28:	24000008 	.word	0x24000008
 8001c2c:	24000098 	.word	0x24000098
 8001c30:	24000294 	.word	0x24000294

08001c34 <BSP_LCD_Init>:
{
 8001c34:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8001c36:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 8001c3a:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8001c3c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001c40:	2201      	movs	r2, #1
 8001c42:	9400      	str	r4, [sp, #0]
 8001c44:	f7ff fed8 	bl	80019f8 <BSP_LCD_InitEx>
}
 8001c48:	b002      	add	sp, #8
 8001c4a:	bd10      	pop	{r4, pc}

08001c4c <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8001c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8001c4e:	4915      	ldr	r1, [pc, #84]	; (8001ca4 <MX_SDRAM_Init+0x58>)

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001c50:	2620      	movs	r6, #32
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001c52:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8001c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001c58:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 8001c5c:	b089      	sub	sp, #36	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <MX_SDRAM_Init+0x5c>)
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8001c60:	f44f 77c0 	mov.w	r7, #384	; 0x180
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8001c64:	6001      	str	r1, [r0, #0]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8001c66:	2101      	movs	r1, #1
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001c68:	6106      	str	r6, [r0, #16]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001c6a:	2604      	movs	r6, #4
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001c6c:	6145      	str	r5, [r0, #20]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001c6e:	2500      	movs	r5, #0
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8001c70:	6202      	str	r2, [r0, #32]

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 8001c72:	2202      	movs	r2, #2
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001c74:	6244      	str	r4, [r0, #36]	; 0x24
  sdram_timing.ExitSelfRefreshDelay = 7;
 8001c76:	2407      	movs	r4, #7
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8001c78:	6187      	str	r7, [r0, #24]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001c7a:	60c6      	str	r6, [r0, #12]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001c7c:	61c5      	str	r5, [r0, #28]
  sdram_timing.SelfRefreshTime      = 4;
 8001c7e:	9603      	str	r6, [sp, #12]
  sdram_timing.LoadToActiveDelay    = 2;
 8001c80:	9201      	str	r2, [sp, #4]
  sdram_timing.RowCycleDelay        = 7;
  sdram_timing.WriteRecoveryTime    = 2;
  sdram_timing.RPDelay              = 2;
  sdram_timing.RCDDelay             = 2;
 8001c82:	9207      	str	r2, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8001c84:	9402      	str	r4, [sp, #8]
  sdram_timing.RowCycleDelay        = 7;
 8001c86:	9404      	str	r4, [sp, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8001c88:	e9c0 1101 	strd	r1, r1, [r0, #4]

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8001c8c:	eb0d 0106 	add.w	r1, sp, r6
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001c90:	629d      	str	r5, [r3, #40]	; 0x28
  sdram_timing.RPDelay              = 2;
 8001c92:	e9cd 2205 	strd	r2, r2, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8001c96:	f002 fe93 	bl	80049c0 <HAL_SDRAM_Init>
  {
    return  HAL_ERROR;
  }
  return HAL_OK;
}
 8001c9a:	1b40      	subs	r0, r0, r5
 8001c9c:	bf18      	it	ne
 8001c9e:	2001      	movne	r0, #1
 8001ca0:	b009      	add	sp, #36	; 0x24
 8001ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca4:	52004140 	.word	0x52004140
 8001ca8:	240002fc 	.word	0x240002fc

08001cac <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
 8001cac:	2800      	cmp	r0, #0
 8001cae:	f040 80e1 	bne.w	8001e74 <BSP_SDRAM_Init+0x1c8>
{
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001cb2:	4b73      	ldr	r3, [pc, #460]	; (8001e80 <BSP_SDRAM_Init+0x1d4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001cb4:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 8001cb6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001cba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
 8001cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8001cc0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
 8001cc4:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_FMC_CLK_ENABLE();
 8001cc6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001cca:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001ccc:	2002      	movs	r0, #2
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001cce:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001cd0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2703      	movs	r7, #3
  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8001cd6:	f240 2602 	movw	r6, #514	; 0x202
  __HAL_RCC_FMC_CLK_ENABLE();
 8001cda:	9201      	str	r2, [sp, #4]
 8001cdc:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8001cde:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001ce8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001cec:	400a      	ands	r2, r1
 8001cee:	9202      	str	r2, [sp, #8]
 8001cf0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001cf6:	f042 0208 	orr.w	r2, r2, #8
 8001cfa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001cfe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d02:	f002 0208 	and.w	r2, r2, #8
 8001d06:	9203      	str	r2, [sp, #12]
 8001d08:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d0e:	f042 0210 	orr.w	r2, r2, #16
 8001d12:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001d16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d1a:	f002 0210 	and.w	r2, r2, #16
 8001d1e:	9204      	str	r2, [sp, #16]
 8001d20:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d26:	f042 0220 	orr.w	r2, r2, #32
 8001d2a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001d2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d32:	f002 0220 	and.w	r2, r2, #32
 8001d36:	9205      	str	r2, [sp, #20]
 8001d38:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d3a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d42:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001d46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d4a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001d4e:	9206      	str	r2, [sp, #24]
 8001d50:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d5a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001d5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d62:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001d66:	9207      	str	r2, [sp, #28]
 8001d68:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d6a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d72:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001d76:	f24c 7203 	movw	r2, #50947	; 0xc703
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001d7e:	900a      	str	r0, [sp, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001d84:	483f      	ldr	r0, [pc, #252]	; (8001e84 <BSP_SDRAM_Init+0x1d8>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001d86:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001d88:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d8a:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001d8c:	9209      	str	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d8e:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001d90:	940d      	str	r4, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d92:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001d94:	f000 feec 	bl	8002b70 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001d98:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001d9c:	a909      	add	r1, sp, #36	; 0x24
 8001d9e:	483a      	ldr	r0, [pc, #232]	; (8001e88 <BSP_SDRAM_Init+0x1dc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001da0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001da2:	f000 fee5 	bl	8002b70 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001da6:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001daa:	a909      	add	r1, sp, #36	; 0x24
 8001dac:	4837      	ldr	r0, [pc, #220]	; (8001e8c <BSP_SDRAM_Init+0x1e0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001dae:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001db0:	f000 fede 	bl	8002b70 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8001db4:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001db8:	a909      	add	r1, sp, #36	; 0x24
 8001dba:	4835      	ldr	r0, [pc, #212]	; (8001e90 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8001dbc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001dbe:	f000 fed7 	bl	8002b70 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8001dc2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8001dc6:	a909      	add	r1, sp, #36	; 0x24
 8001dc8:	4832      	ldr	r0, [pc, #200]	; (8001e94 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8001dca:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8001dcc:	f000 fed0 	bl	8002b70 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001dd0:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001dd4:	a909      	add	r1, sp, #36	; 0x24
 8001dd6:	4830      	ldr	r0, [pc, #192]	; (8001e98 <BSP_SDRAM_Init+0x1ec>)
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8001dd8:	4c30      	ldr	r4, [pc, #192]	; (8001e9c <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001dda:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001ddc:	f000 fec8 	bl	8002b70 <HAL_GPIO_Init>
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8001de0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8001de4:	f640 0008 	movw	r0, #2056	; 0x808
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8001de8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8001dec:	2120      	movs	r1, #32
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8001dee:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8001df0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8001df4:	60a3      	str	r3, [r4, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8001df6:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8001df8:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
  mdma_handle.Init.BufferTransferLength     = 128;
  mdma_handle.Init.SourceBlockAddressOffset = 0;
  mdma_handle.Init.DestBlockAddressOffset   = 0;
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8001dfa:	4a29      	ldr	r2, [pc, #164]	; (8001ea0 <BSP_SDRAM_Init+0x1f4>)
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8001dfc:	60e3      	str	r3, [r4, #12]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8001dfe:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength     = 128;
 8001e00:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8001e02:	61e1      	str	r1, [r4, #28]
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8001e04:	6022      	str	r2, [r4, #0]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001e06:	6125      	str	r5, [r4, #16]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8001e08:	e9c4 6005 	strd	r6, r0, [r4, #20]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8001e0c:	4e25      	ldr	r6, [pc, #148]	; (8001ea4 <BSP_SDRAM_Init+0x1f8>)

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8001e0e:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8001e10:	6334      	str	r4, [r6, #48]	; 0x30
 8001e12:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8001e14:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8001e18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8001e1c:	f001 fa00 	bl	8003220 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8001e20:	4620      	mov	r0, r4
 8001e22:	f001 f983 	bl	800312c <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8001e26:	462a      	mov	r2, r5
 8001e28:	210f      	movs	r1, #15
 8001e2a:	207a      	movs	r0, #122	; 0x7a
 8001e2c:	f000 f8dc 	bl	8001fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8001e30:	207a      	movs	r0, #122	; 0x7a
 8001e32:	f000 f913 	bl	800205c <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8001e36:	4630      	mov	r0, r6
 8001e38:	f7ff ff08 	bl	8001c4c <MX_SDRAM_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	b9e0      	cbnz	r0, 8001e7a <BSP_SDRAM_Init+0x1ce>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8001e40:	4919      	ldr	r1, [pc, #100]	; (8001ea8 <BSP_SDRAM_Init+0x1fc>)
 8001e42:	f04f 0c08 	mov.w	ip, #8
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8001e46:	f44f 7200 	mov.w	r2, #512	; 0x200
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8001e4a:	f240 6503 	movw	r5, #1539	; 0x603
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8001e4e:	2430      	movs	r4, #48	; 0x30
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8001e50:	4630      	mov	r0, r6
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8001e52:	604f      	str	r7, [r1, #4]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8001e54:	60cb      	str	r3, [r1, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8001e56:	610b      	str	r3, [r1, #16]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8001e58:	618b      	str	r3, [r1, #24]
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8001e5a:	f8c1 c000 	str.w	ip, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8001e5e:	608d      	str	r5, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8001e60:	614c      	str	r4, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8001e62:	61ca      	str	r2, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8001e64:	f7fe fc62 	bl	800072c <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	bf18      	it	ne
 8001e6c:	f06f 0004 	mvnne.w	r0, #4
}
 8001e70:	b00f      	add	sp, #60	; 0x3c
 8001e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8001e74:	f06f 0001 	mvn.w	r0, #1
}
 8001e78:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
 8001e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7e:	e7f7      	b.n	8001e70 <BSP_SDRAM_Init+0x1c4>
 8001e80:	58024400 	.word	0x58024400
 8001e84:	58020c00 	.word	0x58020c00
 8001e88:	58021000 	.word	0x58021000
 8001e8c:	58021400 	.word	0x58021400
 8001e90:	58021800 	.word	0x58021800
 8001e94:	58021c00 	.word	0x58021c00
 8001e98:	58022000 	.word	0x58022000
 8001e9c:	240000bc 	.word	0x240000bc
 8001ea0:	52000040 	.word	0x52000040
 8001ea4:	240002fc 	.word	0x240002fc
 8001ea8:	24000128 	.word	0x24000128

08001eac <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <HAL_InitTick+0x40>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	b90b      	cbnz	r3, 8001eba <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001eb6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001eb8:	4770      	bx	lr
{
 8001eba:	b510      	push	{r4, lr}
 8001ebc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ebe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ec2:	4a0c      	ldr	r2, [pc, #48]	; (8001ef4 <HAL_InitTick+0x44>)
 8001ec4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec8:	6810      	ldr	r0, [r2, #0]
 8001eca:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ece:	f000 f8d3 	bl	8002078 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed2:	2c0f      	cmp	r4, #15
 8001ed4:	d800      	bhi.n	8001ed8 <HAL_InitTick+0x28>
 8001ed6:	b108      	cbz	r0, 8001edc <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001ed8:	2001      	movs	r0, #1
}
 8001eda:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001edc:	2200      	movs	r2, #0
 8001ede:	4621      	mov	r1, r4
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f000 f880 	bl	8001fe8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_InitTick+0x48>)
 8001eea:	2000      	movs	r0, #0
 8001eec:	601c      	str	r4, [r3, #0]
}
 8001eee:	bd10      	pop	{r4, pc}
 8001ef0:	24000054 	.word	0x24000054
 8001ef4:	24000000 	.word	0x24000000
 8001ef8:	24000058 	.word	0x24000058

08001efc <HAL_Init>:
{
 8001efc:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001efe:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f00:	4c12      	ldr	r4, [pc, #72]	; (8001f4c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f02:	f000 f85d 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f06:	4d12      	ldr	r5, [pc, #72]	; (8001f50 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f08:	f001 fcde 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <HAL_Init+0x58>)
 8001f0e:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f10:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f12:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f14:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f16:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f1a:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f1c:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f1e:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f20:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 8001f24:	4c0c      	ldr	r4, [pc, #48]	; (8001f58 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f26:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f2a:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8001f30:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f32:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f34:	f7ff ffbc 	bl	8001eb0 <HAL_InitTick>
 8001f38:	b110      	cbz	r0, 8001f40 <HAL_Init+0x44>
    return HAL_ERROR;
 8001f3a:	2401      	movs	r4, #1
}
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	bd38      	pop	{r3, r4, r5, pc}
 8001f40:	4604      	mov	r4, r0
  HAL_MspInit();
 8001f42:	f7ff ffb3 	bl	8001eac <HAL_MspInit>
}
 8001f46:	4620      	mov	r0, r4
 8001f48:	bd38      	pop	{r3, r4, r5, pc}
 8001f4a:	bf00      	nop
 8001f4c:	08004d38 	.word	0x08004d38
 8001f50:	24000004 	.word	0x24000004
 8001f54:	58024400 	.word	0x58024400
 8001f58:	24000000 	.word	0x24000000

08001f5c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001f5c:	4a03      	ldr	r2, [pc, #12]	; (8001f6c <HAL_IncTick+0x10>)
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <HAL_IncTick+0x14>)
 8001f60:	6811      	ldr	r1, [r2, #0]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	440b      	add	r3, r1
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	24000330 	.word	0x24000330
 8001f70:	24000054 	.word	0x24000054

08001f74 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f74:	4b01      	ldr	r3, [pc, #4]	; (8001f7c <HAL_GetTick+0x8>)
 8001f76:	6818      	ldr	r0, [r3, #0]
}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	24000330 	.word	0x24000330

08001f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f80:	b538      	push	{r3, r4, r5, lr}
 8001f82:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff fff6 	bl	8001f74 <HAL_GetTick>
 8001f88:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8a:	1c63      	adds	r3, r4, #1
 8001f8c:	d002      	beq.n	8001f94 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8e:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <HAL_Delay+0x20>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f94:	f7ff ffee 	bl	8001f74 <HAL_GetTick>
 8001f98:	1b43      	subs	r3, r0, r5
 8001f9a:	42a3      	cmp	r3, r4
 8001f9c:	d3fa      	bcc.n	8001f94 <HAL_Delay+0x14>
  {
  }
}
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}
 8001fa0:	24000054 	.word	0x24000054

08001fa4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001fa4:	4b01      	ldr	r3, [pc, #4]	; (8001fac <HAL_GetREVID+0x8>)
 8001fa6:	6818      	ldr	r0, [r3, #0]
}
 8001fa8:	0c00      	lsrs	r0, r0, #16
 8001faa:	4770      	bx	lr
 8001fac:	5c001000 	.word	0x5c001000

08001fb0 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8001fb0:	4a02      	ldr	r2, [pc, #8]	; (8001fbc <HAL_EnableCompensationCell+0xc>)
 8001fb2:	6a13      	ldr	r3, [r2, #32]
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6213      	str	r3, [r2, #32]
}
 8001fba:	4770      	bx	lr
 8001fbc:	58000400 	.word	0x58000400

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc0:	4907      	ldr	r1, [pc, #28]	; (8001fe0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc2:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fce:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001fd2:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd8:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001fda:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001fdc:	60cb      	str	r3, [r1, #12]
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00
 8001fe4:	05fa0000 	.word	0x05fa0000

08001fe8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_NVIC_SetPriority+0x68>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff0:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff2:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff6:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff8:	2d04      	cmp	r5, #4
 8001ffa:	bf28      	it	cs
 8001ffc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffe:	2c06      	cmp	r4, #6
 8002000:	d919      	bls.n	8002036 <HAL_NVIC_SetPriority+0x4e>
 8002002:	3b03      	subs	r3, #3
 8002004:	f04f 34ff 	mov.w	r4, #4294967295
 8002008:	409c      	lsls	r4, r3
 800200a:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200e:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8002012:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	fa04 f405 	lsl.w	r4, r4, r5
 8002018:	ea21 0104 	bic.w	r1, r1, r4
 800201c:	fa01 f103 	lsl.w	r1, r1, r3
 8002020:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002024:	db0a      	blt.n	800203c <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002026:	0109      	lsls	r1, r1, #4
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_NVIC_SetPriority+0x6c>)
 800202a:	b2c9      	uxtb	r1, r1
 800202c:	4403      	add	r3, r0
 800202e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002032:	bc30      	pop	{r4, r5}
 8002034:	4770      	bx	lr
 8002036:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002038:	4613      	mov	r3, r2
 800203a:	e7e8      	b.n	800200e <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	f000 000f 	and.w	r0, r0, #15
 8002040:	0109      	lsls	r1, r1, #4
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_NVIC_SetPriority+0x70>)
 8002044:	b2c9      	uxtb	r1, r1
 8002046:	4403      	add	r3, r0
 8002048:	7619      	strb	r1, [r3, #24]
 800204a:	bc30      	pop	{r4, r5}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000ed00 	.word	0xe000ed00
 8002054:	e000e100 	.word	0xe000e100
 8002058:	e000ecfc 	.word	0xe000ecfc

0800205c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800205c:	2800      	cmp	r0, #0
 800205e:	db07      	blt.n	8002070 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002060:	2301      	movs	r3, #1
 8002062:	f000 011f 	and.w	r1, r0, #31
 8002066:	4a03      	ldr	r2, [pc, #12]	; (8002074 <HAL_NVIC_EnableIRQ+0x18>)
 8002068:	0940      	lsrs	r0, r0, #5
 800206a:	408b      	lsls	r3, r1
 800206c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000e100 	.word	0xe000e100

08002078 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	3801      	subs	r0, #1
 800207a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800207e:	d20d      	bcs.n	800209c <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002082:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002084:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002086:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002088:	25f0      	movs	r5, #240	; 0xf0
 800208a:	4c06      	ldr	r4, [pc, #24]	; (80020a4 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208c:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800208e:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002090:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8002098:	bc30      	pop	{r4, r5}
 800209a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800209c:	2001      	movs	r0, #1
 800209e:	4770      	bx	lr
 80020a0:	e000e010 	.word	0xe000e010
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80020a8:	b470      	push	{r4, r5, r6}
 80020aa:	9c03      	ldr	r4, [sp, #12]

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80020ac:	e9d0 5600 	ldrd	r5, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80020b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80020b4:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80020b6:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80020ba:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 80020be:	ea43 0304 	orr.w	r3, r3, r4
 80020c2:	646b      	str	r3, [r5, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80020c4:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80020c6:	d008      	beq.n	80020da <DMA2D_SetConfig+0x32>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80020c8:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 80020cc:	d002      	beq.n	80020d4 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80020ce:	60e9      	str	r1, [r5, #12]
  }
}
 80020d0:	bc70      	pop	{r4, r5, r6}
 80020d2:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80020d4:	6169      	str	r1, [r5, #20]
}
 80020d6:	bc70      	pop	{r4, r5, r6}
 80020d8:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80020da:	6883      	ldr	r3, [r0, #8]
 80020dc:	b1b3      	cbz	r3, 800210c <DMA2D_SetConfig+0x64>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d017      	beq.n	8002112 <DMA2D_SetConfig+0x6a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80020e2:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80020e4:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80020e8:	f401 447f 	and.w	r4, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80020ec:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80020ee:	d01e      	beq.n	800212e <DMA2D_SetConfig+0x86>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80020f0:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80020f2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80020f6:	d00f      	beq.n	8002118 <DMA2D_SetConfig+0x70>
      tmp2 = (tmp2 >> 20U);
 80020f8:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 80020fa:	0b24      	lsrs	r4, r4, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80020fc:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 80020fe:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002100:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8002104:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8002108:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800210c:	63a9      	str	r1, [r5, #56]	; 0x38
}
 800210e:	bc70      	pop	{r4, r5, r6}
 8002110:	4770      	bx	lr
      tmp = (tmp3 | tmp2 | tmp4);
 8002112:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8002116:	e7f9      	b.n	800210c <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 8002118:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 800211a:	0ae4      	lsrs	r4, r4, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800211c:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 800211e:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002120:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 8002124:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8002128:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800212c:	e7ee      	b.n	800210c <DMA2D_SetConfig+0x64>
      tmp2 = (tmp2 >> 19U);
 800212e:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 8002130:	0aa4      	lsrs	r4, r4, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002132:	02c9      	lsls	r1, r1, #11
 8002134:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8002138:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800213c:	e7e6      	b.n	800210c <DMA2D_SetConfig+0x64>
 800213e:	bf00      	nop

08002140 <HAL_DMA2D_MspInit>:
}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop

08002144 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8002144:	2800      	cmp	r0, #0
 8002146:	d036      	beq.n	80021b6 <HAL_DMA2D_Init+0x72>
{
 8002148:	b570      	push	{r4, r5, r6, lr}
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800214a:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800214e:	4604      	mov	r4, r0
 8002150:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002154:	b353      	cbz	r3, 80021ac <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002156:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002158:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800215a:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800215c:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800215e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002162:	4916      	ldr	r1, [pc, #88]	; (80021bc <HAL_DMA2D_Init+0x78>)
 8002164:	681e      	ldr	r6, [r3, #0]
 8002166:	6862      	ldr	r2, [r4, #4]
 8002168:	4031      	ands	r1, r6
 800216a:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800216c:	4814      	ldr	r0, [pc, #80]	; (80021c0 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800216e:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002170:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002172:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002174:	69a1      	ldr	r1, [r4, #24]
 8002176:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8002178:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800217a:	4912      	ldr	r1, [pc, #72]	; (80021c4 <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800217c:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800217e:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002180:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002182:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002184:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002188:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800218a:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800218c:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800218e:	0552      	lsls	r2, r2, #21
 8002190:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002192:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002194:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002196:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 800219a:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800219c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80021a0:	430a      	orrs	r2, r1
 80021a2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80021a4:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80021a6:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 80021aa:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 80021ac:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 80021b0:	f7ff ffc6 	bl	8002140 <HAL_DMA2D_MspInit>
 80021b4:	e7cf      	b.n	8002156 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 80021b6:	2001      	movs	r0, #1
}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	fff8ffbf 	.word	0xfff8ffbf
 80021c0:	fffffef8 	.word	0xfffffef8
 80021c4:	ffff0000 	.word	0xffff0000

080021c8 <HAL_DMA2D_Start>:
{
 80021c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 80021ca:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
{
 80021ce:	b083      	sub	sp, #12
  __HAL_LOCK(hdma2d);
 80021d0:	2d01      	cmp	r5, #1
 80021d2:	d011      	beq.n	80021f8 <HAL_DMA2D_Start+0x30>
 80021d4:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80021d6:	9f08      	ldr	r7, [sp, #32]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021d8:	2502      	movs	r5, #2
 80021da:	4604      	mov	r4, r0
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80021dc:	9700      	str	r7, [sp, #0]
  __HAL_LOCK(hdma2d);
 80021de:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021e2:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80021e6:	f7ff ff5f 	bl	80020a8 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80021ea:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 80021ec:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80021ee:	6813      	ldr	r3, [r2, #0]
 80021f0:	4333      	orrs	r3, r6
 80021f2:	6013      	str	r3, [r2, #0]
}
 80021f4:	b003      	add	sp, #12
 80021f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma2d);
 80021f8:	2002      	movs	r0, #2
}
 80021fa:	b003      	add	sp, #12
 80021fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021fe:	bf00      	nop

08002200 <HAL_DMA2D_PollForTransfer>:
{
 8002200:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8002202:	2300      	movs	r3, #0
{
 8002204:	b082      	sub	sp, #8
 8002206:	4605      	mov	r5, r0
 8002208:	460c      	mov	r4, r1
  __IO uint32_t isrflags = 0x0U;
 800220a:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800220c:	6803      	ldr	r3, [r0, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	07d2      	lsls	r2, r2, #31
 8002212:	d40f      	bmi.n	8002234 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002214:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002216:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002218:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800221a:	0692      	lsls	r2, r2, #26
 800221c:	d433      	bmi.n	8002286 <HAL_DMA2D_PollForTransfer+0x86>
  __HAL_UNLOCK(hdma2d);
 800221e:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002220:	2412      	movs	r4, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002222:	2101      	movs	r1, #1
  return HAL_OK;
 8002224:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002226:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8002228:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800222c:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
}
 8002230:	b002      	add	sp, #8
 8002232:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002234:	f7ff fe9e 	bl	8001f74 <HAL_GetTick>
 8002238:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800223a:	682b      	ldr	r3, [r5, #0]
 800223c:	e001      	b.n	8002242 <HAL_DMA2D_PollForTransfer+0x42>
      if (Timeout != HAL_MAX_DELAY)
 800223e:	1c60      	adds	r0, r4, #1
 8002240:	d148      	bne.n	80022d4 <HAL_DMA2D_PollForTransfer+0xd4>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	0791      	lsls	r1, r2, #30
 8002246:	d4e5      	bmi.n	8002214 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800224c:	9a01      	ldr	r2, [sp, #4]
 800224e:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002252:	d0f4      	beq.n	800223e <HAL_DMA2D_PollForTransfer+0x3e>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002254:	9a01      	ldr	r2, [sp, #4]
 8002256:	0696      	lsls	r6, r2, #26
 8002258:	d503      	bpl.n	8002262 <HAL_DMA2D_PollForTransfer+0x62>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800225a:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800225c:	f042 0202 	orr.w	r2, r2, #2
 8002260:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002262:	9a01      	ldr	r2, [sp, #4]
 8002264:	07d4      	lsls	r4, r2, #31
 8002266:	d503      	bpl.n	8002270 <HAL_DMA2D_PollForTransfer+0x70>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002268:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002270:	2421      	movs	r4, #33	; 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002272:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 8002274:	2200      	movs	r2, #0
        return HAL_ERROR;
 8002276:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002278:	609c      	str	r4, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800227a:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 800227e:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
}
 8002282:	b002      	add	sp, #8
 8002284:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002286:	f7ff fe75 	bl	8001f74 <HAL_GetTick>
 800228a:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800228c:	682b      	ldr	r3, [r5, #0]
 800228e:	e001      	b.n	8002294 <HAL_DMA2D_PollForTransfer+0x94>
      if (Timeout != HAL_MAX_DELAY)
 8002290:	1c61      	adds	r1, r4, #1
 8002292:	d132      	bne.n	80022fa <HAL_DMA2D_PollForTransfer+0xfa>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	06d2      	lsls	r2, r2, #27
 8002298:	d4c1      	bmi.n	800221e <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800229e:	9a01      	ldr	r2, [sp, #4]
 80022a0:	f012 0f29 	tst.w	r2, #41	; 0x29
 80022a4:	d0f4      	beq.n	8002290 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80022a6:	9a01      	ldr	r2, [sp, #4]
 80022a8:	0716      	lsls	r6, r2, #28
 80022aa:	d503      	bpl.n	80022b4 <HAL_DMA2D_PollForTransfer+0xb4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80022ac:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80022ae:	f042 0204 	orr.w	r2, r2, #4
 80022b2:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80022b4:	9a01      	ldr	r2, [sp, #4]
 80022b6:	0694      	lsls	r4, r2, #26
 80022b8:	d503      	bpl.n	80022c2 <HAL_DMA2D_PollForTransfer+0xc2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80022ba:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80022bc:	f042 0202 	orr.w	r2, r2, #2
 80022c0:	666a      	str	r2, [r5, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80022c2:	9a01      	ldr	r2, [sp, #4]
 80022c4:	07d0      	lsls	r0, r2, #31
 80022c6:	d503      	bpl.n	80022d0 <HAL_DMA2D_PollForTransfer+0xd0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80022c8:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	666a      	str	r2, [r5, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80022d0:	2429      	movs	r4, #41	; 0x29
 80022d2:	e7ce      	b.n	8002272 <HAL_DMA2D_PollForTransfer+0x72>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022d4:	f7ff fe4e 	bl	8001f74 <HAL_GetTick>
 80022d8:	1b80      	subs	r0, r0, r6
 80022da:	42a0      	cmp	r0, r4
 80022dc:	d801      	bhi.n	80022e2 <HAL_DMA2D_PollForTransfer+0xe2>
 80022de:	2c00      	cmp	r4, #0
 80022e0:	d1ab      	bne.n	800223a <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80022e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80022e4:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 80022e6:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80022e8:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 80022ec:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 80022ee:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80022f2:	666b      	str	r3, [r5, #100]	; 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80022f4:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
          return HAL_TIMEOUT;
 80022f8:	e79a      	b.n	8002230 <HAL_DMA2D_PollForTransfer+0x30>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022fa:	f7ff fe3b 	bl	8001f74 <HAL_GetTick>
 80022fe:	1b80      	subs	r0, r0, r6
 8002300:	42a0      	cmp	r0, r4
 8002302:	d8ee      	bhi.n	80022e2 <HAL_DMA2D_PollForTransfer+0xe2>
 8002304:	2c00      	cmp	r4, #0
 8002306:	d1c1      	bne.n	800228c <HAL_DMA2D_PollForTransfer+0x8c>
 8002308:	e7eb      	b.n	80022e2 <HAL_DMA2D_PollForTransfer+0xe2>
 800230a:	bf00      	nop

0800230c <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800230c:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 8002310:	2a01      	cmp	r2, #1
 8002312:	d063      	beq.n	80023dc <HAL_DMA2D_ConfigLayer+0xd0>
 8002314:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002316:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800231a:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800231c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8002320:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 8002322:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002324:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 8002328:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800232c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800232e:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8002330:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002332:	0512      	lsls	r2, r2, #20
 8002334:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002336:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800233a:	f1a4 0609 	sub.w	r6, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800233e:	4322      	orrs	r2, r4
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002340:	2e01      	cmp	r6, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002342:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002346:	d922      	bls.n	800238e <HAL_DMA2D_ConfigLayer+0x82>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002348:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800234a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800234e:	b981      	cbnz	r1, 8002372 <HAL_DMA2D_ConfigLayer+0x66>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	4923      	ldr	r1, [pc, #140]	; (80023e0 <HAL_DMA2D_ConfigLayer+0xd4>)
 8002354:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002356:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002358:	4029      	ands	r1, r5
 800235a:	430a      	orrs	r2, r1
 800235c:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800235e:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 8002360:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002362:	2101      	movs	r1, #1
  return HAL_OK;
 8002364:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002366:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800236a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 800236e:	bc70      	pop	{r4, r5, r6}
 8002370:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002372:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002374:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002376:	d129      	bne.n	80023cc <HAL_DMA2D_ConfigLayer+0xc0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002378:	69e6      	ldr	r6, [r4, #28]
 800237a:	491a      	ldr	r1, [pc, #104]	; (80023e4 <HAL_DMA2D_ConfigLayer+0xd8>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800237c:	6c05      	ldr	r5, [r0, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800237e:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002380:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002382:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 8002386:	430a      	orrs	r2, r1
 8002388:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800238a:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800238c:	e7e8      	b.n	8002360 <HAL_DMA2D_ConfigLayer+0x54>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800238e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002390:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8002394:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002396:	b161      	cbz	r1, 80023b2 <HAL_DMA2D_ConfigLayer+0xa6>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002398:	6819      	ldr	r1, [r3, #0]
 800239a:	4c11      	ldr	r4, [pc, #68]	; (80023e0 <HAL_DMA2D_ConfigLayer+0xd4>)
 800239c:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800239e:	6b45      	ldr	r5, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80023a0:	4034      	ands	r4, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80023a2:	6a86      	ldr	r6, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80023a4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80023a8:	4322      	orrs	r2, r4
 80023aa:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80023ac:	610e      	str	r6, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80023ae:	620d      	str	r5, [r1, #32]
 80023b0:	e7d6      	b.n	8002360 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80023b2:	6819      	ldr	r1, [r3, #0]
 80023b4:	4c0a      	ldr	r4, [pc, #40]	; (80023e0 <HAL_DMA2D_ConfigLayer+0xd4>)
 80023b6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80023b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80023ba:	402c      	ands	r4, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80023bc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80023be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80023c2:	4322      	orrs	r2, r4
 80023c4:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80023c6:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80023c8:	6288      	str	r0, [r1, #40]	; 0x28
 80023ca:	e7c9      	b.n	8002360 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80023cc:	69e5      	ldr	r5, [r4, #28]
 80023ce:	4904      	ldr	r1, [pc, #16]	; (80023e0 <HAL_DMA2D_ConfigLayer+0xd4>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80023d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80023d2:	4029      	ands	r1, r5
 80023d4:	430a      	orrs	r2, r1
 80023d6:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80023d8:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80023da:	e7c1      	b.n	8002360 <HAL_DMA2D_ConfigLayer+0x54>
  __HAL_LOCK(hdma2d);
 80023dc:	2002      	movs	r0, #2
}
 80023de:	4770      	bx	lr
 80023e0:	00ccfff0 	.word	0x00ccfff0
 80023e4:	00c0fff0 	.word	0x00c0fff0

080023e8 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80023e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023ec:	4605      	mov	r5, r0
 80023ee:	4688      	mov	r8, r1
 80023f0:	4617      	mov	r7, r2
 80023f2:	4699      	mov	r9, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80023f4:	f7ff fdbe 	bl	8001f74 <HAL_GetTick>
 80023f8:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80023fa:	e005      	b.n	8002408 <DSI_ShortWrite+0x20>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80023fc:	f7ff fdba 	bl	8001f74 <HAL_GetTick>
 8002400:	1b84      	subs	r4, r0, r6
 8002402:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002406:	d80e      	bhi.n	8002426 <DSI_ShortWrite+0x3e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002408:	682c      	ldr	r4, [r5, #0]
 800240a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800240c:	07db      	lsls	r3, r3, #31
 800240e:	d5f5      	bpl.n	80023fc <DSI_ShortWrite+0x14>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002410:	ea47 2109 	orr.w	r1, r7, r9, lsl #8
 8002414:	9b08      	ldr	r3, [sp, #32]

  return HAL_OK;
 8002416:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800241c:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 8002420:	66e1      	str	r1, [r4, #108]	; 0x6c
}
 8002422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8002426:	2003      	movs	r0, #3
}
 8002428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800242c <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop

08002430 <HAL_DSI_Init>:
  if (hdsi == NULL)
 8002430:	2800      	cmp	r0, #0
 8002432:	f000 80b3 	beq.w	800259c <HAL_DSI_Init+0x16c>
{
 8002436:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002438:	7c43      	ldrb	r3, [r0, #17]
{
 800243a:	b083      	sub	sp, #12
 800243c:	460d      	mov	r5, r1
 800243e:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80a8 	beq.w	8002596 <HAL_DSI_Init+0x166>
  __HAL_DSI_REG_ENABLE(hdsi);
 8002446:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002448:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 800244a:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 800244c:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800244e:	9200      	str	r2, [sp, #0]
 8002450:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002454:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002458:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800245c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8002468:	f7ff fd84 	bl	8001f74 <HAL_GetTick>
 800246c:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800246e:	e006      	b.n	800247e <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002470:	f7ff fd80 	bl	8001f74 <HAL_GetTick>
 8002474:	1b83      	subs	r3, r0, r6
 8002476:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800247a:	f200 8089 	bhi.w	8002590 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002484:	04d1      	lsls	r1, r2, #19
 8002486:	d5f3      	bpl.n	8002470 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8002488:	686a      	ldr	r2, [r5, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 800248a:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800248c:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8002490:	682e      	ldr	r6, [r5, #0]
 8002492:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002494:	4942      	ldr	r1, [pc, #264]	; (80025a0 <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8002496:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 800249a:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800249c:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800249e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80024a2:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80024a6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80024aa:	430a      	orrs	r2, r1
 80024ac:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80024b0:	9001      	str	r0, [sp, #4]
 80024b2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80024be:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 80024ca:	f7ff fd53 	bl	8001f74 <HAL_GetTick>
 80024ce:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80024d0:	e005      	b.n	80024de <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80024d2:	f7ff fd4f 	bl	8001f74 <HAL_GetTick>
 80024d6:	1b80      	subs	r0, r0, r6
 80024d8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80024dc:	d858      	bhi.n	8002590 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80024e4:	05d2      	lsls	r2, r2, #23
 80024e6:	d5f4      	bpl.n	80024d2 <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80024e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80024ec:	f246 1ca8 	movw	ip, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80024f0:	6867      	ldr	r7, [r4, #4]
  hdsi->Instance->IER[0U] = 0U;
 80024f2:	2100      	movs	r1, #0
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80024f4:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80024f8:	68e6      	ldr	r6, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80024fa:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80024fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002502:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002506:	f022 0203 	bic.w	r2, r2, #3
 800250a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800250e:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002512:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002514:	4338      	orrs	r0, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002516:	2a01      	cmp	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002518:	f040 0001 	orr.w	r0, r0, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800251c:	bf38      	it	cc
 800251e:	2201      	movcc	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002520:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002524:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002528:	4617      	mov	r7, r2
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800252a:	f020 0003 	bic.w	r0, r0, #3
 800252e:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002532:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002536:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002538:	4332      	orrs	r2, r6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800253a:	682d      	ldr	r5, [r5, #0]
 800253c:	f000 0003 	and.w	r0, r0, #3
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002540:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002544:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002546:	fb0c f505 	mul.w	r5, ip, r5
 800254a:	4a16      	ldr	r2, [pc, #88]	; (80025a4 <HAL_DSI_Init+0x174>)
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800254c:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002550:	fb02 f207 	mul.w	r2, r2, r7
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002554:	609e      	str	r6, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002556:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002558:	4082      	lsls	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800255a:	ea46 060e 	orr.w	r6, r6, lr
 800255e:	609e      	str	r6, [r3, #8]
  hdsi->State = HAL_DSI_STATE_READY;
 8002560:	2601      	movs	r6, #1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002562:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002566:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800256a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800256e:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 8002572:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002574:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 8002578:	432a      	orrs	r2, r5
 800257a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800257e:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002582:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002586:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8002588:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800258a:	7466      	strb	r6, [r4, #17]
}
 800258c:	b003      	add	sp, #12
 800258e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 8002590:	2003      	movs	r0, #3
}
 8002592:	b003      	add	sp, #12
 8002594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 8002596:	f7ff ff49 	bl	800242c <HAL_DSI_MspInit>
 800259a:	e754      	b.n	8002446 <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 800259c:	2001      	movs	r0, #1
}
 800259e:	4770      	bx	lr
 80025a0:	fffc8603 	.word	0xfffc8603
 80025a4:	003d0900 	.word	0x003d0900

080025a8 <HAL_DSI_TearingEffectCallback>:
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop

080025ac <HAL_DSI_EndOfRefreshCallback>:
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop

080025b0 <HAL_DSI_ErrorCallback>:
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop

080025b4 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80025b4:	6803      	ldr	r3, [r0, #0]
 80025b6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80025ba:	07d1      	lsls	r1, r2, #31
{
 80025bc:	b510      	push	{r4, lr}
 80025be:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80025c0:	d503      	bpl.n	80025ca <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80025c2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80025c6:	07d2      	lsls	r2, r2, #31
 80025c8:	d462      	bmi.n	8002690 <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80025ca:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80025ce:	0791      	lsls	r1, r2, #30
 80025d0:	d503      	bpl.n	80025da <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80025d2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80025d6:	0792      	lsls	r2, r2, #30
 80025d8:	d44f      	bmi.n	800267a <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80025da:	69a3      	ldr	r3, [r4, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d04b      	beq.n	8002678 <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80025e0:	6821      	ldr	r1, [r4, #0]
 80025e2:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80025e6:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80025ea:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80025ee:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80025f0:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80025f4:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80025f6:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80025f8:	b119      	cbz	r1, 8002602 <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80025fa:	6961      	ldr	r1, [r4, #20]
 80025fc:	f041 0101 	orr.w	r1, r1, #1
 8002600:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8002602:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8002606:	d003      	beq.n	8002610 <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8002608:	6962      	ldr	r2, [r4, #20]
 800260a:	f042 0202 	orr.w	r2, r2, #2
 800260e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8002610:	07d8      	lsls	r0, r3, #31
 8002612:	d503      	bpl.n	800261c <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8002614:	6962      	ldr	r2, [r4, #20]
 8002616:	f042 0204 	orr.w	r2, r2, #4
 800261a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800261c:	0799      	lsls	r1, r3, #30
 800261e:	d503      	bpl.n	8002628 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8002620:	6962      	ldr	r2, [r4, #20]
 8002622:	f042 0208 	orr.w	r2, r2, #8
 8002626:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8002628:	f013 0f0c 	tst.w	r3, #12
 800262c:	d003      	beq.n	8002636 <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800262e:	6962      	ldr	r2, [r4, #20]
 8002630:	f042 0210 	orr.w	r2, r2, #16
 8002634:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8002636:	06da      	lsls	r2, r3, #27
 8002638:	d503      	bpl.n	8002642 <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800263a:	6962      	ldr	r2, [r4, #20]
 800263c:	f042 0220 	orr.w	r2, r2, #32
 8002640:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8002642:	0698      	lsls	r0, r3, #26
 8002644:	d503      	bpl.n	800264e <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8002646:	6962      	ldr	r2, [r4, #20]
 8002648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800264c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800264e:	0659      	lsls	r1, r3, #25
 8002650:	d503      	bpl.n	800265a <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8002652:	6962      	ldr	r2, [r4, #20]
 8002654:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002658:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800265a:	061a      	lsls	r2, r3, #24
 800265c:	d503      	bpl.n	8002666 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800265e:	6962      	ldr	r2, [r4, #20]
 8002660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002664:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8002666:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800266a:	d003      	beq.n	8002674 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800266c:	6963      	ldr	r3, [r4, #20]
 800266e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002672:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8002674:	6963      	ldr	r3, [r4, #20]
 8002676:	b93b      	cbnz	r3, 8002688 <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8002678:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800267a:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800267c:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800267e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8002682:	f7ff ff93 	bl	80025ac <HAL_DSI_EndOfRefreshCallback>
 8002686:	e7a8      	b.n	80025da <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 8002688:	4620      	mov	r0, r4
 800268a:	f7ff ff91 	bl	80025b0 <HAL_DSI_ErrorCallback>
}
 800268e:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8002690:	2201      	movs	r2, #1
 8002692:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8002696:	f7ff ff87 	bl	80025a8 <HAL_DSI_TearingEffectCallback>
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	e795      	b.n	80025ca <HAL_DSI_IRQHandler+0x16>
 800269e:	bf00      	nop

080026a0 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80026a0:	7c03      	ldrb	r3, [r0, #16]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	f000 8113 	beq.w	80028ce <HAL_DSI_ConfigVideoMode+0x22e>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80026a8:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 80026aa:	2201      	movs	r2, #1
{
 80026ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 80026b0:	7402      	strb	r2, [r0, #16]
  if (VidCfg->ColorCoding == DSI_RGB666)
 80026b2:	4604      	mov	r4, r0
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80026b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 80026b6:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80026b8:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80026bc:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80026c0:	4e84      	ldr	r6, [pc, #528]	; (80028d4 <HAL_DSI_ConfigVideoMode+0x234>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80026c2:	2803      	cmp	r0, #3
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80026c4:	4d84      	ldr	r5, [pc, #528]	; (80028d8 <HAL_DSI_ConfigVideoMode+0x238>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80026c6:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80026ca:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80026cc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80026d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026da:	f022 0203 	bic.w	r2, r2, #3
 80026de:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80026e0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80026e2:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80026e6:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80026ea:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80026ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026ee:	ea06 0602 	and.w	r6, r6, r2
 80026f2:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80026f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026f6:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80026fa:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80026fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002702:	ea02 0205 	and.w	r2, r2, r5
 8002706:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8002708:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 800270a:	ea47 0708 	orr.w	r7, r7, r8
 800270e:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8002710:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 8002712:	ea06 0605 	and.w	r6, r6, r5
 8002716:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8002718:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800271a:	ea45 050e 	orr.w	r5, r5, lr
 800271e:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002720:	68dd      	ldr	r5, [r3, #12]
 8002722:	f025 0503 	bic.w	r5, r5, #3
 8002726:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	ea42 020c 	orr.w	r2, r2, ip
 800272e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002730:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8002732:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002734:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8002738:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800273c:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800273e:	ea42 0206 	orr.w	r2, r2, r6
 8002742:	695d      	ldr	r5, [r3, #20]
 8002744:	ea42 0207 	orr.w	r2, r2, r7
 8002748:	ea42 0205 	orr.w	r2, r2, r5
 800274c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	f022 020f 	bic.w	r2, r2, #15
 8002754:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	ea42 0200 	orr.w	r2, r2, r0
 800275c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800275e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002762:	f022 020e 	bic.w	r2, r2, #14
 8002766:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800276a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800276e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8002772:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 8002776:	d107      	bne.n	8002788 <HAL_DSI_ConfigVideoMode+0xe8>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8002778:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800277a:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800277c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8002780:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	432a      	orrs	r2, r5
 8002786:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8002788:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800278a:	2600      	movs	r6, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800278c:	4a53      	ldr	r2, [pc, #332]	; (80028dc <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800278e:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8002790:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002792:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8002796:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800279a:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800279c:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800279e:	4f50      	ldr	r7, [pc, #320]	; (80028e0 <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80027a0:	4305      	orrs	r5, r0
 80027a2:	649d      	str	r5, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80027a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80027a6:	4010      	ands	r0, r2
 80027a8:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80027aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80027ac:	484d      	ldr	r0, [pc, #308]	; (80028e4 <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80027ae:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80027b2:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80027b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80027b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027ba:	4017      	ands	r7, r2
 80027bc:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80027be:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80027c0:	ea45 050e 	orr.w	r5, r5, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80027c4:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80027c8:	651d      	str	r5, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80027ca:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80027cc:	4005      	ands	r5, r0
 80027ce:	655d      	str	r5, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80027d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027d2:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80027d6:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80027da:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80027dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027de:	4002      	ands	r2, r0
 80027e0:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80027e2:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80027e4:	4a3b      	ldr	r2, [pc, #236]	; (80028d4 <HAL_DSI_ConfigVideoMode+0x234>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80027e6:	ea47 070e 	orr.w	r7, r7, lr
 80027ea:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80027ec:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 80027ee:	4007      	ands	r7, r0

  return HAL_OK;
 80027f0:	4630      	mov	r0, r6
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80027f2:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80027f4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 80027f6:	ea45 050c 	orr.w	r5, r5, ip
 80027fa:	65dd      	str	r5, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80027fc:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80027fe:	402a      	ands	r2, r5
 8002800:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002802:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8002804:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002806:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800280a:	4315      	orrs	r5, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800280c:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002810:	661d      	str	r5, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8002812:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8002814:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 8002818:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800281a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800281c:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8002820:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002824:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8002826:	699f      	ldr	r7, [r3, #24]
 8002828:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 800282c:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800282e:	699d      	ldr	r5, [r3, #24]
 8002830:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002834:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8002838:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800283a:	699d      	ldr	r5, [r3, #24]
 800283c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8002840:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8002842:	699a      	ldr	r2, [r3, #24]
 8002844:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8002848:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800284c:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800284e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002850:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002854:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002856:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8002858:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800285c:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002860:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8002862:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8002864:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 8002868:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800286a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800286c:	ea45 050e 	orr.w	r5, r5, lr
 8002870:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8002872:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8002874:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8002878:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800287a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800287c:	ea42 020c 	orr.w	r2, r2, ip
 8002880:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002882:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002884:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002886:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800288a:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800288e:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002892:	432a      	orrs	r2, r5
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002894:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002898:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800289a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800289c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80028a2:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80028a4:	ea45 050e 	orr.w	r5, r5, lr
 80028a8:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80028aa:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80028ac:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 80028b0:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80028b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028b4:	ea41 010c 	orr.w	r1, r1, ip
 80028b8:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80028ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028bc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80028c0:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80028c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028c4:	433a      	orrs	r2, r7
 80028c6:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 80028c8:	7426      	strb	r6, [r4, #16]
}
 80028ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 80028ce:	2002      	movs	r0, #2
}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	ffffc000 	.word	0xffffc000
 80028d8:	ffffe000 	.word	0xffffe000
 80028dc:	fffff000 	.word	0xfffff000
 80028e0:	ffff8000 	.word	0xffff8000
 80028e4:	fffffc00 	.word	0xfffffc00

080028e8 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80028e8:	7c02      	ldrb	r2, [r0, #16]
 80028ea:	2a01      	cmp	r2, #1
 80028ec:	d00e      	beq.n	800290c <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80028ee:	6802      	ldr	r2, [r0, #0]
 80028f0:	4603      	mov	r3, r0
{
 80028f2:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80028f4:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80028f6:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80028f8:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 80028fc:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80028fe:	62d4      	str	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8002900:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8002902:	4321      	orrs	r1, r4
 8002904:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 8002906:	741d      	strb	r5, [r3, #16]
}
 8002908:	bc30      	pop	{r4, r5}
 800290a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800290c:	2002      	movs	r0, #2
}
 800290e:	4770      	bx	lr

08002910 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002910:	7c03      	ldrb	r3, [r0, #16]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d021      	beq.n	800295a <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8002916:	6803      	ldr	r3, [r0, #0]
 8002918:	2100      	movs	r1, #0
 800291a:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 800291c:	4608      	mov	r0, r1
{
 800291e:	b410      	push	{r4}
 8002920:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 8002922:	9100      	str	r1, [sp, #0]
 8002924:	685c      	ldr	r4, [r3, #4]
 8002926:	f044 0401 	orr.w	r4, r4, #1
 800292a:	605c      	str	r4, [r3, #4]
 800292c:	685c      	ldr	r4, [r3, #4]
 800292e:	f004 0401 	and.w	r4, r4, #1
 8002932:	9400      	str	r4, [sp, #0]
 8002934:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002936:	9101      	str	r1, [sp, #4]
 8002938:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 800293c:	f044 0408 	orr.w	r4, r4, #8
 8002940:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 8002944:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 8002948:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	9b01      	ldr	r3, [sp, #4]
}
 8002952:	b003      	add	sp, #12
 8002954:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002958:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800295a:	2002      	movs	r0, #2
}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop

08002960 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8002960:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002962:	7c05      	ldrb	r5, [r0, #16]
{
 8002964:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8002966:	2d01      	cmp	r5, #1
 8002968:	d00a      	beq.n	8002980 <HAL_DSI_ShortWrite+0x20>

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800296a:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdsi);
 800296c:	2501      	movs	r5, #1
 800296e:	4604      	mov	r4, r0
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8002970:	9600      	str	r6, [sp, #0]
  __HAL_LOCK(hdsi);
 8002972:	7405      	strb	r5, [r0, #16]
   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8002974:	f7ff fd38 	bl	80023e8 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002978:	2300      	movs	r3, #0
 800297a:	7423      	strb	r3, [r4, #16]

  return status;
}
 800297c:	b002      	add	sp, #8
 800297e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 8002980:	2002      	movs	r0, #2
}
 8002982:	b002      	add	sp, #8
 8002984:	bd70      	pop	{r4, r5, r6, pc}
 8002986:	bf00      	nop

08002988 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8002988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800298c:	4698      	mov	r8, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800298e:	7c03      	ldrb	r3, [r0, #16]
{
 8002990:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hdsi);
 8002992:	2b01      	cmp	r3, #1
 8002994:	d05e      	beq.n	8002a54 <HAL_DSI_LongWrite+0xcc>
 8002996:	2301      	movs	r3, #1
 8002998:	4607      	mov	r7, r0
 800299a:	4689      	mov	r9, r1
 800299c:	4692      	mov	sl, r2
 800299e:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80029a0:	f7ff fae8 	bl	8001f74 <HAL_GetTick>
 80029a4:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80029a6:	e005      	b.n	80029b4 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80029a8:	f7ff fae4 	bl	8001f74 <HAL_GetTick>
 80029ac:	1b40      	subs	r0, r0, r5
 80029ae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80029b2:	d84b      	bhi.n	8002a4c <HAL_DSI_LongWrite+0xc4>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80029b4:	6839      	ldr	r1, [r7, #0]
 80029b6:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 80029b8:	f014 0401 	ands.w	r4, r4, #1
 80029bc:	d0f4      	beq.n	80029a8 <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80029be:	4640      	mov	r0, r8
 80029c0:	2803      	cmp	r0, #3
 80029c2:	bf28      	it	cs
 80029c4:	2003      	movcs	r0, #3

  for (count = 0U; count < nbBytes; count++)
 80029c6:	f1b8 0f00 	cmp.w	r8, #0
 80029ca:	d046      	beq.n	8002a5a <HAL_DSI_LongWrite+0xd2>
 80029cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029ce:	1e5c      	subs	r4, r3, #1
 80029d0:	2300      	movs	r3, #0
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80029d2:	3301      	adds	r3, #1
 80029d4:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 80029d8:	00dd      	lsls	r5, r3, #3
  for (count = 0U; count < nbBytes; count++)
 80029da:	4283      	cmp	r3, r0
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80029dc:	fa02 f205 	lsl.w	r2, r2, r5
 80029e0:	ea46 0602 	orr.w	r6, r6, r2
  for (count = 0U; count < nbBytes; count++)
 80029e4:	d3f5      	bcc.n	80029d2 <HAL_DSI_LongWrite+0x4a>
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 80029e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hdsi->Instance->GPDR = fifoword;
 80029e8:	670e      	str	r6, [r1, #112]	; 0x70
  pparams += nbBytes;
 80029ea:	181e      	adds	r6, r3, r0
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80029ec:	ebb8 0000 	subs.w	r0, r8, r0
 80029f0:	d017      	beq.n	8002a22 <HAL_DSI_LongWrite+0x9a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80029f2:	2804      	cmp	r0, #4
 80029f4:	4684      	mov	ip, r0
 80029f6:	f04f 0500 	mov.w	r5, #0
 80029fa:	bf28      	it	cs
 80029fc:	f04f 0c04 	movcs.w	ip, #4
    fifoword = 0U;
 8002a00:	462b      	mov	r3, r5
 8002a02:	eb06 020c 	add.w	r2, r6, ip
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002a06:	f816 4b01 	ldrb.w	r4, [r6], #1
 8002a0a:	40ac      	lsls	r4, r5
    for (count = 0U; count < nbBytes; count++)
 8002a0c:	42b2      	cmp	r2, r6
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002a0e:	f105 0508 	add.w	r5, r5, #8
 8002a12:	ea43 0304 	orr.w	r3, r3, r4
    for (count = 0U; count < nbBytes; count++)
 8002a16:	d1f6      	bne.n	8002a06 <HAL_DSI_LongWrite+0x7e>
  while (uicounter != 0U)
 8002a18:	ebb0 000c 	subs.w	r0, r0, ip
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 8002a1c:	4616      	mov	r6, r2
    hdsi->Instance->GPDR = fifoword;
 8002a1e:	670b      	str	r3, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8002a20:	d1e7      	bne.n	80029f2 <HAL_DSI_LongWrite+0x6a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8002a22:	f108 0801 	add.w	r8, r8, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002a26:	ea4a 1389 	orr.w	r3, sl, r9, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002a2a:	2200      	movs	r2, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002a2c:	ea4f 2908 	mov.w	r9, r8, lsl #8

  return HAL_OK;
 8002a30:	4610      	mov	r0, r2
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002a32:	46c8      	mov	r8, r9
 8002a34:	fa1f f989 	uxth.w	r9, r9
 8002a38:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 8002a3c:	ea43 0309 	orr.w	r3, r3, r9
 8002a40:	ea43 0308 	orr.w	r3, r3, r8
 8002a44:	66cb      	str	r3, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8002a46:	743a      	strb	r2, [r7, #16]
}
 8002a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_TIMEOUT;
 8002a4c:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8002a4e:	743c      	strb	r4, [r7, #16]
}
 8002a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8002a54:	2002      	movs	r0, #2
}
 8002a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdsi->Instance->GPDR = fifoword;
 8002a5a:	670e      	str	r6, [r1, #112]	; 0x70
  while (uicounter != 0U)
 8002a5c:	e7e1      	b.n	8002a22 <HAL_DSI_LongWrite+0x9a>
 8002a5e:	bf00      	nop

08002a60 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8002a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a64:	4615      	mov	r5, r2
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002a66:	7c02      	ldrb	r2, [r0, #16]
{
 8002a68:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8002a6a:	2a01      	cmp	r2, #1
{
 8002a6c:	9c08      	ldr	r4, [sp, #32]
  __HAL_LOCK(hdsi);
 8002a6e:	d070      	beq.n	8002b52 <HAL_DSI_Read+0xf2>
 8002a70:	461e      	mov	r6, r3
 8002a72:	2301      	movs	r3, #1
 8002a74:	4607      	mov	r7, r0
 8002a76:	4688      	mov	r8, r1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8002a78:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8002a7a:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8002a7c:	d80d      	bhi.n	8002a9a <HAL_DSI_Read+0x3a>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8002a7e:	2c06      	cmp	r4, #6
 8002a80:	d017      	beq.n	8002ab2 <HAL_DSI_Read+0x52>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8002a82:	2c04      	cmp	r4, #4
 8002a84:	d04f      	beq.n	8002b26 <HAL_DSI_Read+0xc6>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8002a86:	2c14      	cmp	r4, #20
 8002a88:	d067      	beq.n	8002b5a <HAL_DSI_Read+0xfa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8002a8a:	2c24      	cmp	r4, #36	; 0x24
 8002a8c:	d052      	beq.n	8002b34 <HAL_DSI_Read+0xd4>
      __HAL_UNLOCK(hdsi);
 8002a8e:	2300      	movs	r3, #0
      return HAL_ERROR;
 8002a90:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8002a92:	743b      	strb	r3, [r7, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8002a94:	b002      	add	sp, #8
 8002a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8002a9a:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8002a9e:	b2f3      	uxtb	r3, r6
 8002aa0:	2237      	movs	r2, #55	; 0x37
 8002aa2:	f8cd c000 	str.w	ip, [sp]
 8002aa6:	f7ff fc9f 	bl	80023e8 <DSI_ShortWrite>
 8002aaa:	2800      	cmp	r0, #0
 8002aac:	d1ef      	bne.n	8002a8e <HAL_DSI_Read+0x2e>
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8002aae:	2c06      	cmp	r4, #6
 8002ab0:	d1e7      	bne.n	8002a82 <HAL_DSI_Read+0x22>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8002ab4:	6839      	ldr	r1, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002ab6:	021a      	lsls	r2, r3, #8
 8002ab8:	ea42 1388 	orr.w	r3, r2, r8, lsl #6
 8002abc:	f043 0306 	orr.w	r3, r3, #6
 8002ac0:	66cb      	str	r3, [r1, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002ac2:	f7ff fa57 	bl	8001f74 <HAL_GetTick>
 8002ac6:	4680      	mov	r8, r0
  while (((int32_t)(datasize)) > 0)
 8002ac8:	e006      	b.n	8002ad8 <HAL_DSI_Read+0x78>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002aca:	f7ff fa53 	bl	8001f74 <HAL_GetTick>
 8002ace:	eba0 0008 	sub.w	r0, r0, r8
 8002ad2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002ad6:	d81b      	bhi.n	8002b10 <HAL_DSI_Read+0xb0>
  while (((int32_t)(datasize)) > 0)
 8002ad8:	2e00      	cmp	r6, #0
 8002ada:	dd1f      	ble.n	8002b1c <HAL_DSI_Read+0xbc>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8002ae0:	f011 0110 	ands.w	r1, r1, #16
 8002ae4:	d1f1      	bne.n	8002aca <HAL_DSI_Read+0x6a>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8002ae6:	2e04      	cmp	r6, #4
 8002ae8:	4630      	mov	r0, r6
      fifoword = hdsi->Instance->GPDR;
 8002aea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8002aec:	bf28      	it	cs
 8002aee:	2004      	movcs	r0, #4
      for (count = 0U; count < nbbytes; count++)
 8002af0:	182b      	adds	r3, r5, r0
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8002af2:	fa22 f401 	lsr.w	r4, r2, r1
 8002af6:	3108      	adds	r1, #8
 8002af8:	f805 4b01 	strb.w	r4, [r5], #1
      for (count = 0U; count < nbbytes; count++)
 8002afc:	429d      	cmp	r5, r3
 8002afe:	d1f8      	bne.n	8002af2 <HAL_DSI_Read+0x92>
 8002b00:	1a36      	subs	r6, r6, r0
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002b02:	f7ff fa37 	bl	8001f74 <HAL_GetTick>
 8002b06:	eba0 0008 	sub.w	r0, r0, r8
 8002b0a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b0e:	d9e3      	bls.n	8002ad8 <HAL_DSI_Read+0x78>
      __HAL_UNLOCK(hdsi);
 8002b10:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8002b12:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8002b14:	743b      	strb	r3, [r7, #16]
}
 8002b16:	b002      	add	sp, #8
 8002b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_UNLOCK(hdsi);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	7438      	strb	r0, [r7, #16]
}
 8002b20:	b002      	add	sp, #8
 8002b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002b26:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8002b2a:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002b2c:	f043 0304 	orr.w	r3, r3, #4
 8002b30:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8002b32:	e7c6      	b.n	8002ac2 <HAL_DSI_Read+0x62>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8002b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002b36:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8002b3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002b3c:	7852      	ldrb	r2, [r2, #1]
 8002b3e:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002b40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8002b44:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002b46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b4a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8002b4e:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8002b50:	e7b7      	b.n	8002ac2 <HAL_DSI_Read+0x62>
  __HAL_LOCK(hdsi);
 8002b52:	2002      	movs	r0, #2
}
 8002b54:	b002      	add	sp, #8
 8002b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8002b5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002b5c:	ea4f 1388 	mov.w	r3, r8, lsl #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8002b60:	7811      	ldrb	r1, [r2, #0]
 8002b62:	683a      	ldr	r2, [r7, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002b64:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b68:	f043 0314 	orr.w	r3, r3, #20
 8002b6c:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8002b6e:	e7a8      	b.n	8002ac2 <HAL_DSI_Read+0x62>

08002b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b74:	680e      	ldr	r6, [r1, #0]
{
 8002b76:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b78:	2e00      	cmp	r6, #0
 8002b7a:	f000 80d3 	beq.w	8002d24 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 8002b7e:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b80:	f8df a220 	ldr.w	sl, [pc, #544]	; 8002da4 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b84:	f8df b220 	ldr.w	fp, [pc, #544]	; 8002da8 <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b88:	46b1      	mov	r9, r6
 8002b8a:	e020      	b.n	8002bce <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 8002b8c:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b8e:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b92:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b96:	f04f 0e0f 	mov.w	lr, #15
 8002b9a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b9e:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ba0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ba4:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 8002ba8:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002baa:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bae:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bb2:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bb6:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8002bba:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8002bbc:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bbe:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bc0:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 8002bc2:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 8002bc4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bc6:	fa39 f203 	lsrs.w	r2, r9, r3
 8002bca:	f000 80ab 	beq.w	8002d24 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bce:	2201      	movs	r2, #1
 8002bd0:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8002bd2:	ea12 0809 	ands.w	r8, r2, r9
 8002bd6:	d0f5      	beq.n	8002bc4 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bd8:	684c      	ldr	r4, [r1, #4]
 8002bda:	005f      	lsls	r7, r3, #1
 8002bdc:	f024 0c10 	bic.w	ip, r4, #16
 8002be0:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002be4:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002be6:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bea:	f200 809e 	bhi.w	8002d2a <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bee:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 8002bf2:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bf6:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bf8:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bfa:	ea2e 0e05 	bic.w	lr, lr, r5
 8002bfe:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c00:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c02:	68ce      	ldr	r6, [r1, #12]
 8002c04:	40be      	lsls	r6, r7
 8002c06:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c0a:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 8002c0c:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8002c10:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c14:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c18:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8002c1a:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8002c1c:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c1e:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c22:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c24:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c28:	fa02 f207 	lsl.w	r2, r2, r7
 8002c2c:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8002c30:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c32:	d0ab      	beq.n	8002b8c <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 8002c34:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c36:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c3a:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c3c:	fa02 f707 	lsl.w	r7, r2, r7
 8002c40:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8002c42:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c44:	00e6      	lsls	r6, r4, #3
 8002c46:	d5bd      	bpl.n	8002bc4 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c48:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 8002c4c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c50:	f003 0203 	and.w	r2, r3, #3
 8002c54:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	f046 0602 	orr.w	r6, r6, #2
 8002c5a:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c5e:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c60:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 8002c64:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002c68:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c6c:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c70:	f006 0602 	and.w	r6, r6, #2
 8002c74:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c76:	4e42      	ldr	r6, [pc, #264]	; (8002d80 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c78:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c7a:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c7e:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c82:	d020      	beq.n	8002cc6 <HAL_GPIO_Init+0x156>
 8002c84:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002c88:	42b0      	cmp	r0, r6
 8002c8a:	d056      	beq.n	8002d3a <HAL_GPIO_Init+0x1ca>
 8002c8c:	4e3d      	ldr	r6, [pc, #244]	; (8002d84 <HAL_GPIO_Init+0x214>)
 8002c8e:	42b0      	cmp	r0, r6
 8002c90:	d058      	beq.n	8002d44 <HAL_GPIO_Init+0x1d4>
 8002c92:	4e3d      	ldr	r6, [pc, #244]	; (8002d88 <HAL_GPIO_Init+0x218>)
 8002c94:	42b0      	cmp	r0, r6
 8002c96:	d04b      	beq.n	8002d30 <HAL_GPIO_Init+0x1c0>
 8002c98:	4e3c      	ldr	r6, [pc, #240]	; (8002d8c <HAL_GPIO_Init+0x21c>)
 8002c9a:	42b0      	cmp	r0, r6
 8002c9c:	d05c      	beq.n	8002d58 <HAL_GPIO_Init+0x1e8>
 8002c9e:	4e3c      	ldr	r6, [pc, #240]	; (8002d90 <HAL_GPIO_Init+0x220>)
 8002ca0:	42b0      	cmp	r0, r6
 8002ca2:	d05e      	beq.n	8002d62 <HAL_GPIO_Init+0x1f2>
 8002ca4:	4e3b      	ldr	r6, [pc, #236]	; (8002d94 <HAL_GPIO_Init+0x224>)
 8002ca6:	42b0      	cmp	r0, r6
 8002ca8:	d051      	beq.n	8002d4e <HAL_GPIO_Init+0x1de>
 8002caa:	4e3b      	ldr	r6, [pc, #236]	; (8002d98 <HAL_GPIO_Init+0x228>)
 8002cac:	42b0      	cmp	r0, r6
 8002cae:	d05d      	beq.n	8002d6c <HAL_GPIO_Init+0x1fc>
 8002cb0:	4e3a      	ldr	r6, [pc, #232]	; (8002d9c <HAL_GPIO_Init+0x22c>)
 8002cb2:	42b0      	cmp	r0, r6
 8002cb4:	d05f      	beq.n	8002d76 <HAL_GPIO_Init+0x206>
 8002cb6:	4e3a      	ldr	r6, [pc, #232]	; (8002da0 <HAL_GPIO_Init+0x230>)
 8002cb8:	42b0      	cmp	r0, r6
 8002cba:	bf0c      	ite	eq
 8002cbc:	2609      	moveq	r6, #9
 8002cbe:	260a      	movne	r6, #10
 8002cc0:	fa06 f202 	lsl.w	r2, r6, r2
 8002cc4:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cc6:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8002cc8:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 8002ccc:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cd0:	03e5      	lsls	r5, r4, #15
    position++;
 8002cd2:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 8002cd6:	bf54      	ite	pl
 8002cd8:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8002cda:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8002cde:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ce2:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 8002ce4:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8002ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8002cec:	bf54      	ite	pl
 8002cee:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002cf0:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cf4:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 8002cf6:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8002cfa:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 8002cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8002d00:	bf54      	ite	pl
 8002d02:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002d04:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d08:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 8002d0a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 8002d0e:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8002d10:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 8002d12:	bf54      	ite	pl
 8002d14:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8002d16:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8002d1a:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d1c:	fa39 f203 	lsrs.w	r2, r9, r3
 8002d20:	f47f af55 	bne.w	8002bce <HAL_GPIO_Init+0x5e>
  }
}
 8002d24:	b005      	add	sp, #20
 8002d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d2a:	40bd      	lsls	r5, r7
 8002d2c:	43ed      	mvns	r5, r5
 8002d2e:	e775      	b.n	8002c1c <HAL_GPIO_Init+0xac>
 8002d30:	2603      	movs	r6, #3
 8002d32:	fa06 f202 	lsl.w	r2, r6, r2
 8002d36:	4315      	orrs	r5, r2
 8002d38:	e7c5      	b.n	8002cc6 <HAL_GPIO_Init+0x156>
 8002d3a:	2601      	movs	r6, #1
 8002d3c:	fa06 f202 	lsl.w	r2, r6, r2
 8002d40:	4315      	orrs	r5, r2
 8002d42:	e7c0      	b.n	8002cc6 <HAL_GPIO_Init+0x156>
 8002d44:	2602      	movs	r6, #2
 8002d46:	fa06 f202 	lsl.w	r2, r6, r2
 8002d4a:	4315      	orrs	r5, r2
 8002d4c:	e7bb      	b.n	8002cc6 <HAL_GPIO_Init+0x156>
 8002d4e:	2606      	movs	r6, #6
 8002d50:	fa06 f202 	lsl.w	r2, r6, r2
 8002d54:	4315      	orrs	r5, r2
 8002d56:	e7b6      	b.n	8002cc6 <HAL_GPIO_Init+0x156>
 8002d58:	2604      	movs	r6, #4
 8002d5a:	fa06 f202 	lsl.w	r2, r6, r2
 8002d5e:	4315      	orrs	r5, r2
 8002d60:	e7b1      	b.n	8002cc6 <HAL_GPIO_Init+0x156>
 8002d62:	2605      	movs	r6, #5
 8002d64:	fa06 f202 	lsl.w	r2, r6, r2
 8002d68:	4315      	orrs	r5, r2
 8002d6a:	e7ac      	b.n	8002cc6 <HAL_GPIO_Init+0x156>
 8002d6c:	2607      	movs	r6, #7
 8002d6e:	fa06 f202 	lsl.w	r2, r6, r2
 8002d72:	4315      	orrs	r5, r2
 8002d74:	e7a7      	b.n	8002cc6 <HAL_GPIO_Init+0x156>
 8002d76:	2608      	movs	r6, #8
 8002d78:	fa06 f202 	lsl.w	r2, r6, r2
 8002d7c:	4315      	orrs	r5, r2
 8002d7e:	e7a2      	b.n	8002cc6 <HAL_GPIO_Init+0x156>
 8002d80:	58020000 	.word	0x58020000
 8002d84:	58020800 	.word	0x58020800
 8002d88:	58020c00 	.word	0x58020c00
 8002d8c:	58021000 	.word	0x58021000
 8002d90:	58021400 	.word	0x58021400
 8002d94:	58021800 	.word	0x58021800
 8002d98:	58021c00 	.word	0x58021c00
 8002d9c:	58022000 	.word	0x58022000
 8002da0:	58022400 	.word	0x58022400
 8002da4:	58024400 	.word	0x58024400
 8002da8:	58000080 	.word	0x58000080

08002dac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dac:	b902      	cbnz	r2, 8002db0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002dae:	0409      	lsls	r1, r1, #16
 8002db0:	6181      	str	r1, [r0, #24]
  }
}
 8002db2:	4770      	bx	lr

08002db4 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002db4:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <HAL_HSEM_FastTake+0x14>)
 8002db6:	3020      	adds	r0, #32
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <HAL_HSEM_FastTake+0x18>)
 8002dba:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8002dbe:	1ac0      	subs	r0, r0, r3
 8002dc0:	bf18      	it	ne
 8002dc2:	2001      	movne	r0, #1
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	58026400 	.word	0x58026400
 8002dcc:	80000300 	.word	0x80000300

08002dd0 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002dd0:	4b02      	ldr	r3, [pc, #8]	; (8002ddc <HAL_HSEM_Release+0xc>)
 8002dd2:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8002dd6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8002dda:	4770      	bx	lr
 8002ddc:	58026400 	.word	0x58026400

08002de0 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002de0:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002de2:	f04f 0c00 	mov.w	ip, #0
{
 8002de6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002dea:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002dec:	6804      	ldr	r4, [r0, #0]
 8002dee:	6848      	ldr	r0, [r1, #4]
{
 8002df0:	b083      	sub	sp, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002df2:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002df4:	68e5      	ldr	r5, [r4, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002df6:	f8d1 800c 	ldr.w	r8, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002dfa:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002dfe:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002e02:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002e04:	eb05 0a00 	add.w	sl, r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002e08:	f40e 4570 	and.w	r5, lr, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002e0c:	9001      	str	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002e0e:	f106 0b01 	add.w	fp, r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002e12:	6888      	ldr	r0, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002e14:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002e16:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002e18:	f100 0901 	add.w	r9, r0, #1
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002e1c:	f8d1 e010 	ldr.w	lr, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002e20:	f3c5 450b 	ubfx	r5, r5, #16, #12
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002e24:	4f38      	ldr	r7, [pc, #224]	; (8002f08 <LTDC_SetConfig+0x128>)
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002e26:	445d      	add	r5, fp
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002e28:	f8d1 b018 	ldr.w	fp, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002e2c:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8002e30:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002e32:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002e36:	689d      	ldr	r5, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002e38:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002e3c:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002e40:	44c2      	add	sl, r8
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002e42:	f8d1 8014 	ldr.w	r8, [r1, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002e46:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002e48:	68e5      	ldr	r5, [r4, #12]
 8002e4a:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8002e4e:	444d      	add	r5, r9
 8002e50:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8002e54:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002e56:	691d      	ldr	r5, [r3, #16]
 8002e58:	f025 0507 	bic.w	r5, r5, #7
 8002e5c:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002e5e:	f8c3 e010 	str.w	lr, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002e62:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002e64:	f891 a031 	ldrb.w	sl, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002e68:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002e6c:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002e70:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8002e74:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 8002e78:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
 8002e7c:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8002e80:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002e82:	695d      	ldr	r5, [r3, #20]
 8002e84:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8002e88:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002e8a:	f8c3 8014 	str.w	r8, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002e8e:	69dd      	ldr	r5, [r3, #28]
 8002e90:	402f      	ands	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002e92:	69cd      	ldr	r5, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002e94:	61df      	str	r7, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002e96:	e9d1 0708 	ldrd	r0, r7, [r1, #32]
 8002e9a:	4305      	orrs	r5, r0
 8002e9c:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002e9e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8002ea0:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002ea4:	629f      	str	r7, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002ea6:	f1be 0f00 	cmp.w	lr, #0
 8002eaa:	d00b      	beq.n	8002ec4 <LTDC_SetConfig+0xe4>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002eac:	f1be 0f01 	cmp.w	lr, #1
 8002eb0:	d026      	beq.n	8002f00 <LTDC_SetConfig+0x120>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002eb2:	f1ae 0502 	sub.w	r5, lr, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002eb6:	2d02      	cmp	r5, #2
 8002eb8:	d902      	bls.n	8002ec0 <LTDC_SetConfig+0xe0>
 8002eba:	f1be 0f07 	cmp.w	lr, #7
 8002ebe:	d121      	bne.n	8002f04 <LTDC_SetConfig+0x124>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8002ec0:	2702      	movs	r7, #2
 8002ec2:	e000      	b.n	8002ec6 <LTDC_SetConfig+0xe6>
    tmp = 4U;
 8002ec4:	2704      	movs	r7, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8002ec6:	9801      	ldr	r0, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002ec8:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8002eca:	1b80      	subs	r0, r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002ecc:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8002ed0:	fb07 f000 	mul.w	r0, r7, r0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002ed4:	e9d1 6c0a 	ldrd	r6, ip, [r1, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8002ed8:	3007      	adds	r0, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002eda:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8002edc:	fb06 f607 	mul.w	r6, r6, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002ee0:	490a      	ldr	r1, [pc, #40]	; (8002f0c <LTDC_SetConfig+0x12c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8002ee2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8002ee6:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002ee8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002eea:	4001      	ands	r1, r0
 8002eec:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002eee:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002ef2:	58a3      	ldr	r3, [r4, r2]
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	50a3      	str	r3, [r4, r2]
}
 8002efa:	b003      	add	sp, #12
 8002efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3U;
 8002f00:	2703      	movs	r7, #3
 8002f02:	e7e0      	b.n	8002ec6 <LTDC_SetConfig+0xe6>
    tmp = 1U;
 8002f04:	2701      	movs	r7, #1
 8002f06:	e7de      	b.n	8002ec6 <LTDC_SetConfig+0xe6>
 8002f08:	fffff8f8 	.word	0xfffff8f8
 8002f0c:	fffff800 	.word	0xfffff800

08002f10 <HAL_LTDC_MspInit>:
}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop

08002f14 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8002f14:	2800      	cmp	r0, #0
 8002f16:	d06d      	beq.n	8002ff4 <HAL_LTDC_Init+0xe0>
{
 8002f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002f1a:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8002f1e:	4604      	mov	r4, r0
 8002f20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d060      	beq.n	8002fea <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002f28:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002f2a:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002f2c:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002f2e:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002f30:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002f34:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002f36:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002f38:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002f3c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002f40:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002f42:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002f44:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002f46:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002f4a:	4e2b      	ldr	r6, [pc, #172]	; (8002ff8 <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002f4c:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002f4e:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002f50:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8002f52:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002f54:	4302      	orrs	r2, r0
 8002f56:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	4032      	ands	r2, r6
 8002f5c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002f5e:	6898      	ldr	r0, [r3, #8]
 8002f60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002f64:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002f66:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002f6a:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002f6e:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002f70:	68d8      	ldr	r0, [r3, #12]
 8002f72:	4030      	ands	r0, r6
 8002f74:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002f7c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002f7e:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002f82:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002f86:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	4032      	ands	r2, r6
 8002f8c:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002f8e:	6918      	ldr	r0, [r3, #16]
 8002f90:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002f94:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002f96:	ea40 000c 	orr.w	r0, r0, ip
 8002f9a:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002f9c:	6958      	ldr	r0, [r3, #20]
 8002f9e:	4006      	ands	r6, r0
 8002fa0:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002fa6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8002faa:	4302      	orrs	r2, r0
 8002fac:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002fae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002fb0:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002fb4:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002fb8:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002fbc:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002fbe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002fc0:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8002fc4:	4302      	orrs	r2, r0
  return HAL_OK;
 8002fc6:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002fc8:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002fcc:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd4:	f042 0206 	orr.w	r2, r2, #6
 8002fd8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002fda:	699a      	ldr	r2, [r3, #24]
 8002fdc:	432a      	orrs	r2, r5
 8002fde:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002fe0:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002fe4:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 8002fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8002fea:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002fee:	f7ff ff8f 	bl	8002f10 <HAL_LTDC_MspInit>
 8002ff2:	e799      	b.n	8002f28 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8002ff4:	2001      	movs	r0, #1
}
 8002ff6:	4770      	bx	lr
 8002ff8:	f000f800 	.word	0xf000f800

08002ffc <HAL_LTDC_ErrorCallback>:
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop

08003000 <HAL_LTDC_LineEventCallback>:
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop

08003004 <HAL_LTDC_ReloadEventCallback>:
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop

08003008 <HAL_LTDC_IRQHandler>:
{
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800300a:	6803      	ldr	r3, [r0, #0]
{
 800300c:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800300e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003010:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003012:	0769      	lsls	r1, r5, #29
 8003014:	d501      	bpl.n	800301a <HAL_LTDC_IRQHandler+0x12>
 8003016:	0772      	lsls	r2, r6, #29
 8003018:	d41d      	bmi.n	8003056 <HAL_LTDC_IRQHandler+0x4e>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800301a:	07ab      	lsls	r3, r5, #30
 800301c:	d501      	bpl.n	8003022 <HAL_LTDC_IRQHandler+0x1a>
 800301e:	07b7      	lsls	r7, r6, #30
 8003020:	d42d      	bmi.n	800307e <HAL_LTDC_IRQHandler+0x76>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003022:	07e8      	lsls	r0, r5, #31
 8003024:	d501      	bpl.n	800302a <HAL_LTDC_IRQHandler+0x22>
 8003026:	07f1      	lsls	r1, r6, #31
 8003028:	d440      	bmi.n	80030ac <HAL_LTDC_IRQHandler+0xa4>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800302a:	072a      	lsls	r2, r5, #28
 800302c:	d501      	bpl.n	8003032 <HAL_LTDC_IRQHandler+0x2a>
 800302e:	0733      	lsls	r3, r6, #28
 8003030:	d400      	bmi.n	8003034 <HAL_LTDC_IRQHandler+0x2c>
}
 8003032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003034:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003036:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 8003038:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 800303a:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800303c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 800303e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003040:	f022 0208 	bic.w	r2, r2, #8
 8003044:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003046:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003048:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800304c:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003050:	f7ff ffd8 	bl	8003004 <HAL_LTDC_ReloadEventCallback>
}
 8003054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003058:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 800305a:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800305c:	f022 0204 	bic.w	r2, r2, #4
 8003060:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003062:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003064:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8003068:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003074:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 8003078:	f7ff ffc0 	bl	8002ffc <HAL_LTDC_ErrorCallback>
 800307c:	e7cd      	b.n	800301a <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800307e:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003080:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003082:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003086:	f022 0202 	bic.w	r2, r2, #2
 800308a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 800308c:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800308e:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 8003090:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003092:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8003096:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800309a:	f043 0302 	orr.w	r3, r3, #2
 800309e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80030a2:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 80030a6:	f7ff ffa9 	bl	8002ffc <HAL_LTDC_ErrorCallback>
 80030aa:	e7ba      	b.n	8003022 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80030ac:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80030ae:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 80030b0:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 80030b2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80030b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80030bc:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80030be:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80030c2:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80030c6:	f7ff ff9b 	bl	8003000 <HAL_LTDC_LineEventCallback>
 80030ca:	e7ae      	b.n	800302a <HAL_LTDC_IRQHandler+0x22>

080030cc <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 80030cc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d028      	beq.n	8003126 <HAL_LTDC_ConfigLayer+0x5a>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80030d4:	2302      	movs	r3, #2
 80030d6:	4694      	mov	ip, r2
{
 80030d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80030dc:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80030de:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80030e2:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80030e4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80030e8:	fb04 0402 	mla	r4, r4, r2, r0
 80030ec:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 80030ee:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80030f2:	460f      	mov	r7, r1
 80030f4:	3438      	adds	r4, #56	; 0x38
 80030f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003102:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003104:	4662      	mov	r2, ip
 8003106:	4630      	mov	r0, r6
 8003108:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800310a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800310c:	f7ff fe68 	bl	8002de0 <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8003110:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003112:	6832      	ldr	r2, [r6, #0]
  return HAL_OK;
 8003114:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003116:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800311a:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800311e:	f886 30a0 	strb.w	r3, [r6, #160]	; 0xa0
}
 8003122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8003126:	2002      	movs	r0, #2
}
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop

0800312c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800312c:	b538      	push	{r3, r4, r5, lr}
 800312e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003130:	f7fe ff20 	bl	8001f74 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003134:	2c00      	cmp	r4, #0
 8003136:	d05a      	beq.n	80031ee <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8003138:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800313a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800313c:	2100      	movs	r1, #0
 800313e:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8003140:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 8003144:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003150:	e005      	b.n	800315e <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8003152:	f7fe ff0f 	bl	8001f74 <HAL_GetTick>
 8003156:	1b43      	subs	r3, r0, r5
 8003158:	2b05      	cmp	r3, #5
 800315a:	d841      	bhi.n	80031e0 <HAL_MDMA_Init+0xb4>
 800315c:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	07d2      	lsls	r2, r2, #31
 8003162:	d4f6      	bmi.n	8003152 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003164:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8003168:	69e1      	ldr	r1, [r4, #28]
 800316a:	4302      	orrs	r2, r0
 800316c:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 8003170:	430a      	orrs	r2, r1
 8003172:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003174:	432a      	orrs	r2, r5
 8003176:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003178:	4302      	orrs	r2, r0
 800317a:	68a0      	ldr	r0, [r4, #8]
 800317c:	430a      	orrs	r2, r1
 800317e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003180:	432a      	orrs	r2, r5
 8003182:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8003184:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003186:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8003188:	6920      	ldr	r0, [r4, #16]
 800318a:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800318c:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800318e:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8003192:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8003196:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003198:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800319a:	d103      	bne.n	80031a4 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80031a2:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80031a4:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80031a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80031a8:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 80031aa:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80031ac:	db30      	blt.n	8003210 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80031ae:	b292      	uxth	r2, r2
 80031b0:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80031b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80031b4:	2a00      	cmp	r2, #0
 80031b6:	db1c      	blt.n	80031f2 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80031b8:	6a18      	ldr	r0, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80031ba:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80031be:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 80031c2:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80031c4:	d021      	beq.n	800320a <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80031c6:	b2c9      	uxtb	r1, r1
 80031c8:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80031ca:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 80031cc:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 80031d0:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80031d2:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 80031d4:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 80031d6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 80031da:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 80031de:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80031e0:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80031e2:	2303      	movs	r3, #3
      return HAL_ERROR;
 80031e4:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80031e6:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80031e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80031ec:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80031ee:	2001      	movs	r0, #1
}
 80031f0:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80031f2:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80031f4:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80031f6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80031fa:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 80031fe:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003200:	6a18      	ldr	r0, [r3, #32]
 8003202:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8003206:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8003208:	d1dd      	bne.n	80031c6 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 800320a:	2200      	movs	r2, #0
 800320c:	629a      	str	r2, [r3, #40]	; 0x28
 800320e:	e7dc      	b.n	80031ca <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8003210:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8003212:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8003214:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8003218:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800321a:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800321c:	621a      	str	r2, [r3, #32]
 800321e:	e7c8      	b.n	80031b2 <HAL_MDMA_Init+0x86>

08003220 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8003220:	b1f0      	cbz	r0, 8003260 <HAL_MDMA_DeInit+0x40>
  __HAL_MDMA_DISABLE(hmdma);
 8003222:	6802      	ldr	r2, [r0, #0]
  hmdma->Instance->CCR  = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	4601      	mov	r1, r0
  return HAL_OK;
 8003228:	4618      	mov	r0, r3
{
 800322a:	b430      	push	{r4, r5}
  __HAL_MDMA_DISABLE(hmdma);
 800322c:	68d4      	ldr	r4, [r2, #12]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800322e:	251f      	movs	r5, #31
  __HAL_MDMA_DISABLE(hmdma);
 8003230:	f024 0401 	bic.w	r4, r4, #1
 8003234:	60d4      	str	r4, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8003236:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8003238:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800323a:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800323c:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800323e:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8003240:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8003242:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8003244:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8003246:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8003248:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800324a:	6055      	str	r5, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800324c:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
 800324e:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 8003252:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
  hmdma->LinkedListNodeCounter  = 0;
 8003256:	664b      	str	r3, [r1, #100]	; 0x64
}
 8003258:	bc30      	pop	{r4, r5}
  hmdma->LastLinkedListNodeAddress   = 0;
 800325a:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
 800325e:	4770      	bx	lr
    return HAL_ERROR;
 8003260:	2001      	movs	r0, #1
}
 8003262:	4770      	bx	lr

08003264 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003264:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <HAL_PWREx_ConfigSupply+0x74>)
 8003266:	68d3      	ldr	r3, [r2, #12]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800326e:	68d3      	ldr	r3, [r2, #12]
{
 8003270:	b570      	push	{r4, r5, r6, lr}
 8003272:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003274:	d005      	beq.n	8003282 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800327a:	1a18      	subs	r0, r3, r0
 800327c:	bf18      	it	ne
 800327e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003280:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003282:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003286:	4616      	mov	r6, r2
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003288:	4303      	orrs	r3, r0
 800328a:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 800328c:	f7fe fe72 	bl	8001f74 <HAL_GetTick>
 8003290:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003292:	e005      	b.n	80032a0 <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003294:	f7fe fe6e 	bl	8001f74 <HAL_GetTick>
 8003298:	1b43      	subs	r3, r0, r5
 800329a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800329e:	d819      	bhi.n	80032d4 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032a0:	6873      	ldr	r3, [r6, #4]
 80032a2:	049a      	lsls	r2, r3, #18
 80032a4:	d5f6      	bpl.n	8003294 <HAL_PWREx_ConfigSupply+0x30>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80032a6:	f1a4 031d 	sub.w	r3, r4, #29
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d905      	bls.n	80032ba <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 80032ae:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80032b2:	2801      	cmp	r0, #1
 80032b4:	d901      	bls.n	80032ba <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 80032b6:	2000      	movs	r0, #0
}
 80032b8:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 80032ba:	f7fe fe5b 	bl	8001f74 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032be:	4d06      	ldr	r5, [pc, #24]	; (80032d8 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 80032c0:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032c2:	68eb      	ldr	r3, [r5, #12]
 80032c4:	03db      	lsls	r3, r3, #15
 80032c6:	d4f6      	bmi.n	80032b6 <HAL_PWREx_ConfigSupply+0x52>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032c8:	f7fe fe54 	bl	8001f74 <HAL_GetTick>
 80032cc:	1b00      	subs	r0, r0, r4
 80032ce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80032d2:	d9f6      	bls.n	80032c2 <HAL_PWREx_ConfigSupply+0x5e>
      return HAL_ERROR;
 80032d4:	2001      	movs	r0, #1
}
 80032d6:	bd70      	pop	{r4, r5, r6, pc}
 80032d8:	58024800 	.word	0x58024800

080032dc <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032dc:	2800      	cmp	r0, #0
 80032de:	f000 81f7 	beq.w	80036d0 <HAL_RCC_OscConfig+0x3f4>
{
 80032e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e4:	6803      	ldr	r3, [r0, #0]
 80032e6:	4604      	mov	r4, r0
 80032e8:	07d9      	lsls	r1, r3, #31
 80032ea:	d52e      	bpl.n	800334a <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ec:	49b4      	ldr	r1, [pc, #720]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
 80032ee:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032f0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f2:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80032f6:	2a10      	cmp	r2, #16
 80032f8:	f000 812c 	beq.w	8003554 <HAL_RCC_OscConfig+0x278>
 80032fc:	2a18      	cmp	r2, #24
 80032fe:	f000 8124 	beq.w	800354a <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003302:	6863      	ldr	r3, [r4, #4]
 8003304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003308:	f000 8167 	beq.w	80035da <HAL_RCC_OscConfig+0x2fe>
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 817f 	beq.w	8003610 <HAL_RCC_OscConfig+0x334>
 8003312:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003316:	4baa      	ldr	r3, [pc, #680]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	f000 8278 	beq.w	800380e <HAL_RCC_OscConfig+0x532>
 800331e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800332a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe fe22 	bl	8001f74 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003330:	4ea3      	ldr	r6, [pc, #652]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 8003332:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003334:	e005      	b.n	8003342 <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003336:	f7fe fe1d 	bl	8001f74 <HAL_GetTick>
 800333a:	1b40      	subs	r0, r0, r5
 800333c:	2864      	cmp	r0, #100	; 0x64
 800333e:	f200 8165 	bhi.w	800360c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003342:	6833      	ldr	r3, [r6, #0]
 8003344:	039f      	lsls	r7, r3, #14
 8003346:	d5f6      	bpl.n	8003336 <HAL_RCC_OscConfig+0x5a>
 8003348:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800334a:	0799      	lsls	r1, r3, #30
 800334c:	d521      	bpl.n	8003392 <HAL_RCC_OscConfig+0xb6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800334e:	4a9c      	ldr	r2, [pc, #624]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
 8003350:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003352:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003354:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8003358:	f040 80a8 	bne.w	80034ac <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800335c:	4b98      	ldr	r3, [pc, #608]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	075b      	lsls	r3, r3, #29
 8003362:	d503      	bpl.n	800336c <HAL_RCC_OscConfig+0x90>
 8003364:	68e3      	ldr	r3, [r4, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80ed 	beq.w	8003546 <HAL_RCC_OscConfig+0x26a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336c:	f7fe fe1a 	bl	8001fa4 <HAL_GetREVID>
 8003370:	f241 0303 	movw	r3, #4099	; 0x1003
 8003374:	4298      	cmp	r0, r3
 8003376:	f200 8189 	bhi.w	800368c <HAL_RCC_OscConfig+0x3b0>
 800337a:	6922      	ldr	r2, [r4, #16]
 800337c:	2a40      	cmp	r2, #64	; 0x40
 800337e:	f000 824e 	beq.w	800381e <HAL_RCC_OscConfig+0x542>
 8003382:	498f      	ldr	r1, [pc, #572]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
 8003384:	684b      	ldr	r3, [r1, #4]
 8003386:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800338a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800338e:	604b      	str	r3, [r1, #4]
 8003390:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003392:	06d9      	lsls	r1, r3, #27
 8003394:	d456      	bmi.n	8003444 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003396:	071d      	lsls	r5, r3, #28
 8003398:	d517      	bpl.n	80033ca <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800339a:	6963      	ldr	r3, [r4, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80b4 	beq.w	800350a <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a2:	4b87      	ldr	r3, [pc, #540]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
 80033a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033a6:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 80033a8:	f042 0201 	orr.w	r2, r2, #1
 80033ac:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80033ae:	f7fe fde1 	bl	8001f74 <HAL_GetTick>
 80033b2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033b4:	e005      	b.n	80033c2 <HAL_RCC_OscConfig+0xe6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b6:	f7fe fddd 	bl	8001f74 <HAL_GetTick>
 80033ba:	1b40      	subs	r0, r0, r5
 80033bc:	2802      	cmp	r0, #2
 80033be:	f200 8125 	bhi.w	800360c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033c2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80033c4:	0798      	lsls	r0, r3, #30
 80033c6:	d5f6      	bpl.n	80033b6 <HAL_RCC_OscConfig+0xda>
 80033c8:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033ca:	069a      	lsls	r2, r3, #26
 80033cc:	d517      	bpl.n	80033fe <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80033ce:	69a3      	ldr	r3, [r4, #24]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 8134 	beq.w	800363e <HAL_RCC_OscConfig+0x362>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033d6:	4b7a      	ldr	r3, [pc, #488]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
 80033d8:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033da:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 80033dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033e0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80033e2:	f7fe fdc7 	bl	8001f74 <HAL_GetTick>
 80033e6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033e8:	e005      	b.n	80033f6 <HAL_RCC_OscConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80033ea:	f7fe fdc3 	bl	8001f74 <HAL_GetTick>
 80033ee:	1b40      	subs	r0, r0, r5
 80033f0:	2802      	cmp	r0, #2
 80033f2:	f200 810b 	bhi.w	800360c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033f6:	6833      	ldr	r3, [r6, #0]
 80033f8:	049f      	lsls	r7, r3, #18
 80033fa:	d5f6      	bpl.n	80033ea <HAL_RCC_OscConfig+0x10e>
 80033fc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033fe:	0759      	lsls	r1, r3, #29
 8003400:	f100 80b2 	bmi.w	8003568 <HAL_RCC_OscConfig+0x28c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003404:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003406:	b1d8      	cbz	r0, 8003440 <HAL_RCC_OscConfig+0x164>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003408:	4b6d      	ldr	r3, [pc, #436]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003410:	2a18      	cmp	r2, #24
 8003412:	f000 81ce 	beq.w	80037b2 <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003416:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003418:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800341a:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800341c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003420:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003422:	f000 8161 	beq.w	80036e8 <HAL_RCC_OscConfig+0x40c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003426:	f7fe fda5 	bl	8001f74 <HAL_GetTick>
 800342a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800342c:	e005      	b.n	800343a <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342e:	f7fe fda1 	bl	8001f74 <HAL_GetTick>
 8003432:	1b00      	subs	r0, r0, r4
 8003434:	2802      	cmp	r0, #2
 8003436:	f200 80e9 	bhi.w	800360c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800343a:	682b      	ldr	r3, [r5, #0]
 800343c:	019b      	lsls	r3, r3, #6
 800343e:	d4f6      	bmi.n	800342e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003440:	2000      	movs	r0, #0
}
 8003442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003444:	4a5e      	ldr	r2, [pc, #376]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
 8003446:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003448:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800344a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800344e:	2b08      	cmp	r3, #8
 8003450:	d072      	beq.n	8003538 <HAL_RCC_OscConfig+0x25c>
 8003452:	2b18      	cmp	r3, #24
 8003454:	d06c      	beq.n	8003530 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003456:	69e3      	ldr	r3, [r4, #28]
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8103 	beq.w	8003664 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 800345e:	4b58      	ldr	r3, [pc, #352]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
 8003460:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003462:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8003464:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003468:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800346a:	f7fe fd83 	bl	8001f74 <HAL_GetTick>
 800346e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003470:	e005      	b.n	800347e <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003472:	f7fe fd7f 	bl	8001f74 <HAL_GetTick>
 8003476:	1b40      	subs	r0, r0, r5
 8003478:	2802      	cmp	r0, #2
 800347a:	f200 80c7 	bhi.w	800360c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800347e:	6833      	ldr	r3, [r6, #0]
 8003480:	05db      	lsls	r3, r3, #23
 8003482:	d5f6      	bpl.n	8003472 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003484:	f7fe fd8e 	bl	8001fa4 <HAL_GetREVID>
 8003488:	f241 0303 	movw	r3, #4099	; 0x1003
 800348c:	4298      	cmp	r0, r3
 800348e:	f200 81e9 	bhi.w	8003864 <HAL_RCC_OscConfig+0x588>
 8003492:	6a22      	ldr	r2, [r4, #32]
 8003494:	6873      	ldr	r3, [r6, #4]
 8003496:	2a20      	cmp	r2, #32
 8003498:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800349c:	bf0c      	ite	eq
 800349e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80034a2:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80034a6:	6073      	str	r3, [r6, #4]
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	e774      	b.n	8003396 <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80034ac:	2b18      	cmp	r3, #24
 80034ae:	f000 810b 	beq.w	80036c8 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b2:	68e2      	ldr	r2, [r4, #12]
 80034b4:	2a00      	cmp	r2, #0
 80034b6:	f000 80f3 	beq.w	80036a0 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034ba:	4941      	ldr	r1, [pc, #260]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
 80034bc:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034be:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034c0:	f023 0319 	bic.w	r3, r3, #25
 80034c4:	4313      	orrs	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80034c8:	f7fe fd54 	bl	8001f74 <HAL_GetTick>
 80034cc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034ce:	e005      	b.n	80034dc <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d0:	f7fe fd50 	bl	8001f74 <HAL_GetTick>
 80034d4:	1b40      	subs	r0, r0, r5
 80034d6:	2802      	cmp	r0, #2
 80034d8:	f200 8098 	bhi.w	800360c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034dc:	6833      	ldr	r3, [r6, #0]
 80034de:	075f      	lsls	r7, r3, #29
 80034e0:	d5f6      	bpl.n	80034d0 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e2:	f7fe fd5f 	bl	8001fa4 <HAL_GetREVID>
 80034e6:	f241 0303 	movw	r3, #4099	; 0x1003
 80034ea:	4298      	cmp	r0, r3
 80034ec:	f200 81c3 	bhi.w	8003876 <HAL_RCC_OscConfig+0x59a>
 80034f0:	6922      	ldr	r2, [r4, #16]
 80034f2:	6873      	ldr	r3, [r6, #4]
 80034f4:	2a40      	cmp	r2, #64	; 0x40
 80034f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80034fa:	bf0c      	ite	eq
 80034fc:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8003500:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8003504:	6073      	str	r3, [r6, #4]
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	e743      	b.n	8003392 <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
 800350c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800350e:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003516:	f7fe fd2d 	bl	8001f74 <HAL_GetTick>
 800351a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800351c:	e004      	b.n	8003528 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800351e:	f7fe fd29 	bl	8001f74 <HAL_GetTick>
 8003522:	1b40      	subs	r0, r0, r5
 8003524:	2802      	cmp	r0, #2
 8003526:	d871      	bhi.n	800360c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003528:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800352a:	0799      	lsls	r1, r3, #30
 800352c:	d4f7      	bmi.n	800351e <HAL_RCC_OscConfig+0x242>
 800352e:	e74b      	b.n	80033c8 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003530:	f002 0203 	and.w	r2, r2, #3
 8003534:	2a01      	cmp	r2, #1
 8003536:	d18e      	bne.n	8003456 <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003538:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	05da      	lsls	r2, r3, #23
 800353e:	d552      	bpl.n	80035e6 <HAL_RCC_OscConfig+0x30a>
 8003540:	69e3      	ldr	r3, [r4, #28]
 8003542:	2b80      	cmp	r3, #128	; 0x80
 8003544:	d04f      	beq.n	80035e6 <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8003546:	2001      	movs	r0, #1
}
 8003548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800354a:	f001 0103 	and.w	r1, r1, #3
 800354e:	2902      	cmp	r1, #2
 8003550:	f47f aed7 	bne.w	8003302 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	4a1a      	ldr	r2, [pc, #104]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	0392      	lsls	r2, r2, #14
 800355a:	f57f aef6 	bpl.w	800334a <HAL_RCC_OscConfig+0x6e>
 800355e:	6862      	ldr	r2, [r4, #4]
 8003560:	2a00      	cmp	r2, #0
 8003562:	f47f aef2 	bne.w	800334a <HAL_RCC_OscConfig+0x6e>
 8003566:	e7ee      	b.n	8003546 <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 8003568:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_RCC_OscConfig+0x2e8>)
 800356a:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800356c:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 800356e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003572:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003574:	f7fe fcfe 	bl	8001f74 <HAL_GetTick>
 8003578:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800357a:	e004      	b.n	8003586 <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800357c:	f7fe fcfa 	bl	8001f74 <HAL_GetTick>
 8003580:	1b40      	subs	r0, r0, r5
 8003582:	2864      	cmp	r0, #100	; 0x64
 8003584:	d842      	bhi.n	800360c <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003586:	6833      	ldr	r3, [r6, #0]
 8003588:	05da      	lsls	r2, r3, #23
 800358a:	d5f7      	bpl.n	800357c <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800358c:	68a3      	ldr	r3, [r4, #8]
 800358e:	2b01      	cmp	r3, #1
 8003590:	f000 817a 	beq.w	8003888 <HAL_RCC_OscConfig+0x5ac>
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 814b 	beq.w	8003830 <HAL_RCC_OscConfig+0x554>
 800359a:	2b05      	cmp	r3, #5
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
 800359e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035a0:	f000 8187 	beq.w	80038b2 <HAL_RCC_OscConfig+0x5d6>
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	671a      	str	r2, [r3, #112]	; 0x70
 80035aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035ac:	f022 0204 	bic.w	r2, r2, #4
 80035b0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80035b2:	f7fe fcdf 	bl	8001f74 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035b6:	4e02      	ldr	r6, [pc, #8]	; (80035c0 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80035bc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x2f6>
 80035c0:	58024400 	.word	0x58024400
 80035c4:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c8:	f7fe fcd4 	bl	8001f74 <HAL_GetTick>
 80035cc:	1b40      	subs	r0, r0, r5
 80035ce:	42b8      	cmp	r0, r7
 80035d0:	d81c      	bhi.n	800360c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035d2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80035d4:	079b      	lsls	r3, r3, #30
 80035d6:	d5f7      	bpl.n	80035c8 <HAL_RCC_OscConfig+0x2ec>
 80035d8:	e714      	b.n	8003404 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035da:	4aae      	ldr	r2, [pc, #696]	; (8003894 <HAL_RCC_OscConfig+0x5b8>)
 80035dc:	6813      	ldr	r3, [r2, #0]
 80035de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e2:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e4:	e6a2      	b.n	800332c <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035e6:	f7fe fcdd 	bl	8001fa4 <HAL_GetREVID>
 80035ea:	f241 0303 	movw	r3, #4099	; 0x1003
 80035ee:	4298      	cmp	r0, r3
 80035f0:	d870      	bhi.n	80036d4 <HAL_RCC_OscConfig+0x3f8>
 80035f2:	6a22      	ldr	r2, [r4, #32]
 80035f4:	2a20      	cmp	r2, #32
 80035f6:	f000 8153 	beq.w	80038a0 <HAL_RCC_OscConfig+0x5c4>
 80035fa:	49a6      	ldr	r1, [pc, #664]	; (8003894 <HAL_RCC_OscConfig+0x5b8>)
 80035fc:	684b      	ldr	r3, [r1, #4]
 80035fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003602:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003606:	604b      	str	r3, [r1, #4]
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	e6c4      	b.n	8003396 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 800360c:	2003      	movs	r0, #3
}
 800360e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003610:	4ba0      	ldr	r3, [pc, #640]	; (8003894 <HAL_RCC_OscConfig+0x5b8>)
 8003612:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003614:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003616:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003622:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003624:	f7fe fca6 	bl	8001f74 <HAL_GetTick>
 8003628:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800362a:	e004      	b.n	8003636 <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800362c:	f7fe fca2 	bl	8001f74 <HAL_GetTick>
 8003630:	1b40      	subs	r0, r0, r5
 8003632:	2864      	cmp	r0, #100	; 0x64
 8003634:	d8ea      	bhi.n	800360c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003636:	6833      	ldr	r3, [r6, #0]
 8003638:	0398      	lsls	r0, r3, #14
 800363a:	d4f7      	bmi.n	800362c <HAL_RCC_OscConfig+0x350>
 800363c:	e684      	b.n	8003348 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 800363e:	4b95      	ldr	r3, [pc, #596]	; (8003894 <HAL_RCC_OscConfig+0x5b8>)
 8003640:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003642:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 8003644:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003648:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800364a:	f7fe fc93 	bl	8001f74 <HAL_GetTick>
 800364e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003650:	e004      	b.n	800365c <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003652:	f7fe fc8f 	bl	8001f74 <HAL_GetTick>
 8003656:	1b40      	subs	r0, r0, r5
 8003658:	2802      	cmp	r0, #2
 800365a:	d8d7      	bhi.n	800360c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800365c:	6833      	ldr	r3, [r6, #0]
 800365e:	0498      	lsls	r0, r3, #18
 8003660:	d4f7      	bmi.n	8003652 <HAL_RCC_OscConfig+0x376>
 8003662:	e6cb      	b.n	80033fc <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 8003664:	4b8b      	ldr	r3, [pc, #556]	; (8003894 <HAL_RCC_OscConfig+0x5b8>)
 8003666:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003668:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 800366a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800366e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003670:	f7fe fc80 	bl	8001f74 <HAL_GetTick>
 8003674:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003676:	e004      	b.n	8003682 <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003678:	f7fe fc7c 	bl	8001f74 <HAL_GetTick>
 800367c:	1b40      	subs	r0, r0, r5
 800367e:	2802      	cmp	r0, #2
 8003680:	d8c4      	bhi.n	800360c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003682:	6833      	ldr	r3, [r6, #0]
 8003684:	05df      	lsls	r7, r3, #23
 8003686:	d4f7      	bmi.n	8003678 <HAL_RCC_OscConfig+0x39c>
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	e684      	b.n	8003396 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368c:	4a81      	ldr	r2, [pc, #516]	; (8003894 <HAL_RCC_OscConfig+0x5b8>)
 800368e:	6921      	ldr	r1, [r4, #16]
 8003690:	6853      	ldr	r3, [r2, #4]
 8003692:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003696:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800369a:	6053      	str	r3, [r2, #4]
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	e678      	b.n	8003392 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 80036a0:	4b7c      	ldr	r3, [pc, #496]	; (8003894 <HAL_RCC_OscConfig+0x5b8>)
 80036a2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036a4:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 80036a6:	f022 0201 	bic.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80036ac:	f7fe fc62 	bl	8001f74 <HAL_GetTick>
 80036b0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036b2:	e004      	b.n	80036be <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b4:	f7fe fc5e 	bl	8001f74 <HAL_GetTick>
 80036b8:	1b40      	subs	r0, r0, r5
 80036ba:	2802      	cmp	r0, #2
 80036bc:	d8a6      	bhi.n	800360c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036be:	6833      	ldr	r3, [r6, #0]
 80036c0:	0758      	lsls	r0, r3, #29
 80036c2:	d4f7      	bmi.n	80036b4 <HAL_RCC_OscConfig+0x3d8>
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	e664      	b.n	8003392 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80036c8:	0792      	lsls	r2, r2, #30
 80036ca:	f47f aef2 	bne.w	80034b2 <HAL_RCC_OscConfig+0x1d6>
 80036ce:	e645      	b.n	800335c <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 80036d0:	2001      	movs	r0, #1
}
 80036d2:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036d4:	4a6f      	ldr	r2, [pc, #444]	; (8003894 <HAL_RCC_OscConfig+0x5b8>)
 80036d6:	6a21      	ldr	r1, [r4, #32]
 80036d8:	68d3      	ldr	r3, [r2, #12]
 80036da:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80036de:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80036e2:	60d3      	str	r3, [r2, #12]
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	e656      	b.n	8003396 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 80036e8:	f7fe fc44 	bl	8001f74 <HAL_GetTick>
 80036ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036ee:	e004      	b.n	80036fa <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fe fc40 	bl	8001f74 <HAL_GetTick>
 80036f4:	1b80      	subs	r0, r0, r6
 80036f6:	2802      	cmp	r0, #2
 80036f8:	d888      	bhi.n	800360c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036fa:	682b      	ldr	r3, [r5, #0]
 80036fc:	0199      	lsls	r1, r3, #6
 80036fe:	d4f7      	bmi.n	80036f0 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003700:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003702:	4b65      	ldr	r3, [pc, #404]	; (8003898 <HAL_RCC_OscConfig+0x5bc>)
 8003704:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003706:	4013      	ands	r3, r2
 8003708:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800370a:	4964      	ldr	r1, [pc, #400]	; (800389c <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800370c:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800370e:	4e61      	ldr	r6, [pc, #388]	; (8003894 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003710:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003714:	62ab      	str	r3, [r5, #40]	; 0x28
 8003716:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8003718:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800371c:	3f01      	subs	r7, #1
 800371e:	1e50      	subs	r0, r2, #1
 8003720:	3b01      	subs	r3, #1
 8003722:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003724:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8003728:	025b      	lsls	r3, r3, #9
 800372a:	0400      	lsls	r0, r0, #16
 800372c:	3a01      	subs	r2, #1
 800372e:	b29b      	uxth	r3, r3
 8003730:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8003734:	0612      	lsls	r2, r2, #24
 8003736:	4303      	orrs	r3, r0
 8003738:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800373c:	433b      	orrs	r3, r7
 800373e:	4313      	orrs	r3, r2
 8003740:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8003742:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800374a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800374c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800374e:	4011      	ands	r1, r2
 8003750:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8003754:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003756:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003758:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800375a:	f023 030c 	bic.w	r3, r3, #12
 800375e:	4313      	orrs	r3, r2
 8003760:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003762:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003764:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003766:	f023 0302 	bic.w	r3, r3, #2
 800376a:	4313      	orrs	r3, r2
 800376c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800376e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003774:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003776:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800377e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003784:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8003786:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800378e:	682b      	ldr	r3, [r5, #0]
 8003790:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003794:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003796:	f7fe fbed 	bl	8001f74 <HAL_GetTick>
 800379a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800379c:	e005      	b.n	80037aa <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800379e:	f7fe fbe9 	bl	8001f74 <HAL_GetTick>
 80037a2:	1b00      	subs	r0, r0, r4
 80037a4:	2802      	cmp	r0, #2
 80037a6:	f63f af31 	bhi.w	800360c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037aa:	6833      	ldr	r3, [r6, #0]
 80037ac:	019a      	lsls	r2, r3, #6
 80037ae:	d5f6      	bpl.n	800379e <HAL_RCC_OscConfig+0x4c2>
 80037b0:	e646      	b.n	8003440 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b2:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037b6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b8:	f43f ae43 	beq.w	8003442 <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037bc:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80037c2:	428b      	cmp	r3, r1
 80037c4:	f47f aebf 	bne.w	8003546 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037c8:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037ce:	429a      	cmp	r2, r3
 80037d0:	f47f aeb9 	bne.w	8003546 <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037d6:	f3c5 0208 	ubfx	r2, r5, #0, #9
 80037da:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	f47f aeb2 	bne.w	8003546 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037e4:	f3c5 2246 	ubfx	r2, r5, #9, #7
 80037e8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	f47f aeab 	bne.w	8003546 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037f2:	f3c5 4206 	ubfx	r2, r5, #16, #7
 80037f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	f47f aea4 	bne.w	8003546 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80037fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003800:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8003804:	3801      	subs	r0, #1
  return HAL_OK;
 8003806:	1a28      	subs	r0, r5, r0
 8003808:	bf18      	it	ne
 800380a:	2001      	movne	r0, #1
}
 800380c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800380e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e586      	b.n	800332c <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381e:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <HAL_RCC_OscConfig+0x5b8>)
 8003820:	6853      	ldr	r3, [r2, #4]
 8003822:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382a:	6053      	str	r3, [r2, #4]
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	e5b0      	b.n	8003392 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003830:	4b18      	ldr	r3, [pc, #96]	; (8003894 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003832:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003836:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003838:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	671a      	str	r2, [r3, #112]	; 0x70
 8003840:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003842:	f022 0204 	bic.w	r2, r2, #4
 8003846:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003848:	f7fe fb94 	bl	8001f74 <HAL_GetTick>
 800384c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800384e:	e005      	b.n	800385c <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fe fb90 	bl	8001f74 <HAL_GetTick>
 8003854:	1b40      	subs	r0, r0, r5
 8003856:	42b8      	cmp	r0, r7
 8003858:	f63f aed8 	bhi.w	800360c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800385c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800385e:	0798      	lsls	r0, r3, #30
 8003860:	d4f6      	bmi.n	8003850 <HAL_RCC_OscConfig+0x574>
 8003862:	e5cf      	b.n	8003404 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003864:	68f3      	ldr	r3, [r6, #12]
 8003866:	6a22      	ldr	r2, [r4, #32]
 8003868:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800386c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003870:	60f3      	str	r3, [r6, #12]
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	e58f      	b.n	8003396 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003876:	6873      	ldr	r3, [r6, #4]
 8003878:	6922      	ldr	r2, [r4, #16]
 800387a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800387e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003882:	6073      	str	r3, [r6, #4]
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	e584      	b.n	8003392 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003888:	4a02      	ldr	r2, [pc, #8]	; (8003894 <HAL_RCC_OscConfig+0x5b8>)
 800388a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003892:	e68e      	b.n	80035b2 <HAL_RCC_OscConfig+0x2d6>
 8003894:	58024400 	.word	0x58024400
 8003898:	fffffc0c 	.word	0xfffffc0c
 800389c:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038a0:	4a08      	ldr	r2, [pc, #32]	; (80038c4 <HAL_RCC_OscConfig+0x5e8>)
 80038a2:	6853      	ldr	r3, [r2, #4]
 80038a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038ac:	6053      	str	r3, [r2, #4]
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	e571      	b.n	8003396 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b2:	f042 0204 	orr.w	r2, r2, #4
 80038b6:	671a      	str	r2, [r3, #112]	; 0x70
 80038b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	671a      	str	r2, [r3, #112]	; 0x70
 80038c0:	e677      	b.n	80035b2 <HAL_RCC_OscConfig+0x2d6>
 80038c2:	bf00      	nop
 80038c4:	58024400 	.word	0x58024400

080038c8 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038c8:	4a47      	ldr	r2, [pc, #284]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x120>)
 80038ca:	6913      	ldr	r3, [r2, #16]
 80038cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038d0:	2b10      	cmp	r3, #16
 80038d2:	d004      	beq.n	80038de <HAL_RCC_GetSysClockFreq+0x16>
 80038d4:	2b18      	cmp	r3, #24
 80038d6:	d00d      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x2c>
 80038d8:	b11b      	cbz	r3, 80038e2 <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80038da:	4844      	ldr	r0, [pc, #272]	; (80039ec <HAL_RCC_GetSysClockFreq+0x124>)
 80038dc:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038de:	4844      	ldr	r0, [pc, #272]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x128>)
 80038e0:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038e2:	6813      	ldr	r3, [r2, #0]
 80038e4:	0699      	lsls	r1, r3, #26
 80038e6:	d54a      	bpl.n	800397e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038e8:	6813      	ldr	r3, [r2, #0]
 80038ea:	4842      	ldr	r0, [pc, #264]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80038ec:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80038f0:	40d8      	lsrs	r0, r3
 80038f2:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038f4:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 80038f6:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80038f8:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80038fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 80038fc:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003900:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003904:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8003906:	d038      	beq.n	800397a <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003908:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800390c:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003910:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003914:	fb01 f105 	mul.w	r1, r1, r5
 8003918:	2b01      	cmp	r3, #1
 800391a:	ee07 1a90 	vmov	s15, r1
 800391e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8003922:	d002      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0x62>
 8003924:	2b02      	cmp	r3, #2
 8003926:	d02c      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0xba>
 8003928:	b393      	cbz	r3, 8003990 <HAL_RCC_GetSysClockFreq+0xc8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800392a:	ee07 0a90 	vmov	s15, r0
 800392e:	ed9f 5a32 	vldr	s10, [pc, #200]	; 80039f8 <HAL_RCC_GetSysClockFreq+0x130>
 8003932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003936:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003938:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800393c:	eddf 5a2f 	vldr	s11, [pc, #188]	; 80039fc <HAL_RCC_GetSysClockFreq+0x134>
 8003940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003944:	ee07 3a90 	vmov	s15, r3
 8003948:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800394c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003950:	eee7 7a25 	vfma.f32	s15, s14, s11
 8003954:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003958:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800395c:	4b22      	ldr	r3, [pc, #136]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x120>)
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003964:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800396e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003976:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800397a:	bc30      	pop	{r4, r5}
 800397c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800397e:	481d      	ldr	r0, [pc, #116]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8003980:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003982:	ee07 0a90 	vmov	s15, r0
 8003986:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8003a00 <HAL_RCC_GetSysClockFreq+0x138>
 800398a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800398e:	e7d2      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003990:	6813      	ldr	r3, [r2, #0]
 8003992:	069b      	lsls	r3, r3, #26
 8003994:	d520      	bpl.n	80039d8 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003996:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003998:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800399c:	4915      	ldr	r1, [pc, #84]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800399e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039a2:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039ac:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039ae:	eddf 4a13 	vldr	s9, [pc, #76]	; 80039fc <HAL_RCC_GetSysClockFreq+0x134>
 80039b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b6:	ee06 1a10 	vmov	s12, r1
 80039ba:	ee06 3a90 	vmov	s13, r3
 80039be:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80039c2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80039c6:	eec6 5a27 	vdiv.f32	s11, s12, s15
 80039ca:	eee7 6a24 	vfma.f32	s13, s14, s9
 80039ce:	ee76 6a85 	vadd.f32	s13, s13, s10
 80039d2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80039d6:	e7c1      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039d8:	ee07 0a90 	vmov	s15, r0
 80039dc:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8003a04 <HAL_RCC_GetSysClockFreq+0x13c>
 80039e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039e4:	e7a7      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x6e>
 80039e6:	bf00      	nop
 80039e8:	58024400 	.word	0x58024400
 80039ec:	003d0900 	.word	0x003d0900
 80039f0:	017d7840 	.word	0x017d7840
 80039f4:	03d09000 	.word	0x03d09000
 80039f8:	4a742400 	.word	0x4a742400
 80039fc:	39000000 	.word	0x39000000
 8003a00:	4bbebc20 	.word	0x4bbebc20
 8003a04:	4c742400 	.word	0x4c742400

08003a08 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	f000 810e 	beq.w	8003c2a <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a0e:	4a8d      	ldr	r2, [pc, #564]	; (8003c44 <HAL_RCC_ClockConfig+0x23c>)
 8003a10:	6813      	ldr	r3, [r2, #0]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	428b      	cmp	r3, r1
{
 8003a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a1c:	4604      	mov	r4, r0
 8003a1e:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a20:	d20c      	bcs.n	8003a3c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	6813      	ldr	r3, [r2, #0]
 8003a24:	f023 030f 	bic.w	r3, r3, #15
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2c:	6813      	ldr	r3, [r2, #0]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	428b      	cmp	r3, r1
 8003a34:	d002      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003a36:	2001      	movs	r0, #1
}
 8003a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	075f      	lsls	r7, r3, #29
 8003a40:	d50b      	bpl.n	8003a5a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a42:	4981      	ldr	r1, [pc, #516]	; (8003c48 <HAL_RCC_ClockConfig+0x240>)
 8003a44:	6920      	ldr	r0, [r4, #16]
 8003a46:	698a      	ldr	r2, [r1, #24]
 8003a48:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003a4c:	4290      	cmp	r0, r2
 8003a4e:	d904      	bls.n	8003a5a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a50:	698a      	ldr	r2, [r1, #24]
 8003a52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a56:	4302      	orrs	r2, r0
 8003a58:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5a:	071e      	lsls	r6, r3, #28
 8003a5c:	d50b      	bpl.n	8003a76 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a5e:	497a      	ldr	r1, [pc, #488]	; (8003c48 <HAL_RCC_ClockConfig+0x240>)
 8003a60:	6960      	ldr	r0, [r4, #20]
 8003a62:	69ca      	ldr	r2, [r1, #28]
 8003a64:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003a68:	4290      	cmp	r0, r2
 8003a6a:	d904      	bls.n	8003a76 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a6c:	69ca      	ldr	r2, [r1, #28]
 8003a6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a72:	4302      	orrs	r2, r0
 8003a74:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a76:	06d8      	lsls	r0, r3, #27
 8003a78:	d50b      	bpl.n	8003a92 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a7a:	4973      	ldr	r1, [pc, #460]	; (8003c48 <HAL_RCC_ClockConfig+0x240>)
 8003a7c:	69a0      	ldr	r0, [r4, #24]
 8003a7e:	69ca      	ldr	r2, [r1, #28]
 8003a80:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003a84:	4290      	cmp	r0, r2
 8003a86:	d904      	bls.n	8003a92 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a88:	69ca      	ldr	r2, [r1, #28]
 8003a8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a8e:	4302      	orrs	r2, r0
 8003a90:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a92:	0699      	lsls	r1, r3, #26
 8003a94:	d50b      	bpl.n	8003aae <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a96:	496c      	ldr	r1, [pc, #432]	; (8003c48 <HAL_RCC_ClockConfig+0x240>)
 8003a98:	69e0      	ldr	r0, [r4, #28]
 8003a9a:	6a0a      	ldr	r2, [r1, #32]
 8003a9c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003aa0:	4290      	cmp	r0, r2
 8003aa2:	d904      	bls.n	8003aae <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003aa4:	6a0a      	ldr	r2, [r1, #32]
 8003aa6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003aaa:	4302      	orrs	r2, r0
 8003aac:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aae:	079a      	lsls	r2, r3, #30
 8003ab0:	f140 80ad 	bpl.w	8003c0e <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ab4:	4864      	ldr	r0, [pc, #400]	; (8003c48 <HAL_RCC_ClockConfig+0x240>)
 8003ab6:	68e1      	ldr	r1, [r4, #12]
 8003ab8:	6982      	ldr	r2, [r0, #24]
 8003aba:	f002 020f 	and.w	r2, r2, #15
 8003abe:	4291      	cmp	r1, r2
 8003ac0:	d904      	bls.n	8003acc <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac2:	6982      	ldr	r2, [r0, #24]
 8003ac4:	f022 020f 	bic.w	r2, r2, #15
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003acc:	07d8      	lsls	r0, r3, #31
 8003ace:	d531      	bpl.n	8003b34 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ad0:	4a5d      	ldr	r2, [pc, #372]	; (8003c48 <HAL_RCC_ClockConfig+0x240>)
 8003ad2:	68a1      	ldr	r1, [r4, #8]
 8003ad4:	6993      	ldr	r3, [r2, #24]
 8003ad6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ada:	430b      	orrs	r3, r1
 8003adc:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ade:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ae0:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae2:	2902      	cmp	r1, #2
 8003ae4:	f000 80a3 	beq.w	8003c2e <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ae8:	2903      	cmp	r1, #3
 8003aea:	f000 809a 	beq.w	8003c22 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003aee:	2901      	cmp	r1, #1
 8003af0:	f000 80a3 	beq.w	8003c3a <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003af4:	0758      	lsls	r0, r3, #29
 8003af6:	d59e      	bpl.n	8003a36 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003af8:	4a53      	ldr	r2, [pc, #332]	; (8003c48 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003afa:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003afe:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b00:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b02:	f023 0307 	bic.w	r3, r3, #7
 8003b06:	430b      	orrs	r3, r1
 8003b08:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 8003b0a:	f7fe fa33 	bl	8001f74 <HAL_GetTick>
 8003b0e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b10:	e005      	b.n	8003b1e <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b12:	f7fe fa2f 	bl	8001f74 <HAL_GetTick>
 8003b16:	1b80      	subs	r0, r0, r6
 8003b18:	4540      	cmp	r0, r8
 8003b1a:	f200 808c 	bhi.w	8003c36 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	6862      	ldr	r2, [r4, #4]
 8003b22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b26:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8003b2a:	d1f2      	bne.n	8003b12 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	0799      	lsls	r1, r3, #30
 8003b30:	d506      	bpl.n	8003b40 <HAL_RCC_ClockConfig+0x138>
 8003b32:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b34:	4844      	ldr	r0, [pc, #272]	; (8003c48 <HAL_RCC_ClockConfig+0x240>)
 8003b36:	6982      	ldr	r2, [r0, #24]
 8003b38:	f002 020f 	and.w	r2, r2, #15
 8003b3c:	428a      	cmp	r2, r1
 8003b3e:	d86a      	bhi.n	8003c16 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b40:	4940      	ldr	r1, [pc, #256]	; (8003c44 <HAL_RCC_ClockConfig+0x23c>)
 8003b42:	680a      	ldr	r2, [r1, #0]
 8003b44:	f002 020f 	and.w	r2, r2, #15
 8003b48:	42aa      	cmp	r2, r5
 8003b4a:	d90a      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4c:	680a      	ldr	r2, [r1, #0]
 8003b4e:	f022 020f 	bic.w	r2, r2, #15
 8003b52:	432a      	orrs	r2, r5
 8003b54:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	680a      	ldr	r2, [r1, #0]
 8003b58:	f002 020f 	and.w	r2, r2, #15
 8003b5c:	42aa      	cmp	r2, r5
 8003b5e:	f47f af6a 	bne.w	8003a36 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b62:	075a      	lsls	r2, r3, #29
 8003b64:	d50b      	bpl.n	8003b7e <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b66:	4938      	ldr	r1, [pc, #224]	; (8003c48 <HAL_RCC_ClockConfig+0x240>)
 8003b68:	6920      	ldr	r0, [r4, #16]
 8003b6a:	698a      	ldr	r2, [r1, #24]
 8003b6c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003b70:	4290      	cmp	r0, r2
 8003b72:	d204      	bcs.n	8003b7e <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b74:	698a      	ldr	r2, [r1, #24]
 8003b76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b7a:	4302      	orrs	r2, r0
 8003b7c:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7e:	071f      	lsls	r7, r3, #28
 8003b80:	d50b      	bpl.n	8003b9a <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b82:	4931      	ldr	r1, [pc, #196]	; (8003c48 <HAL_RCC_ClockConfig+0x240>)
 8003b84:	6960      	ldr	r0, [r4, #20]
 8003b86:	69ca      	ldr	r2, [r1, #28]
 8003b88:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003b8c:	4290      	cmp	r0, r2
 8003b8e:	d204      	bcs.n	8003b9a <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b90:	69ca      	ldr	r2, [r1, #28]
 8003b92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b96:	4302      	orrs	r2, r0
 8003b98:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9a:	06de      	lsls	r6, r3, #27
 8003b9c:	d50b      	bpl.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b9e:	492a      	ldr	r1, [pc, #168]	; (8003c48 <HAL_RCC_ClockConfig+0x240>)
 8003ba0:	69a0      	ldr	r0, [r4, #24]
 8003ba2:	69ca      	ldr	r2, [r1, #28]
 8003ba4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003ba8:	4290      	cmp	r0, r2
 8003baa:	d204      	bcs.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bac:	69ca      	ldr	r2, [r1, #28]
 8003bae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bb2:	4302      	orrs	r2, r0
 8003bb4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bb6:	069d      	lsls	r5, r3, #26
 8003bb8:	d50b      	bpl.n	8003bd2 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bba:	4a23      	ldr	r2, [pc, #140]	; (8003c48 <HAL_RCC_ClockConfig+0x240>)
 8003bbc:	69e1      	ldr	r1, [r4, #28]
 8003bbe:	6a13      	ldr	r3, [r2, #32]
 8003bc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bc4:	4299      	cmp	r1, r3
 8003bc6:	d204      	bcs.n	8003bd2 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003bc8:	6a13      	ldr	r3, [r2, #32]
 8003bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003bd2:	f7ff fe79 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 8003bd6:	4b1c      	ldr	r3, [pc, #112]	; (8003c48 <HAL_RCC_ClockConfig+0x240>)
 8003bd8:	4602      	mov	r2, r0
 8003bda:	481c      	ldr	r0, [pc, #112]	; (8003c4c <HAL_RCC_ClockConfig+0x244>)
 8003bdc:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bde:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003be0:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8003be4:	4d1a      	ldr	r5, [pc, #104]	; (8003c50 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	4c1a      	ldr	r4, [pc, #104]	; (8003c54 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003bec:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bee:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003bf0:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8003bf4:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bf6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8003bfa:	4d17      	ldr	r5, [pc, #92]	; (8003c58 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003bfc:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bfe:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8003c02:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c04:	6023      	str	r3, [r4, #0]
}
 8003c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8003c0a:	f7fe b951 	b.w	8001eb0 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0e:	07da      	lsls	r2, r3, #31
 8003c10:	f53f af5e 	bmi.w	8003ad0 <HAL_RCC_ClockConfig+0xc8>
 8003c14:	e794      	b.n	8003b40 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c16:	6982      	ldr	r2, [r0, #24]
 8003c18:	f022 020f 	bic.w	r2, r2, #15
 8003c1c:	4311      	orrs	r1, r2
 8003c1e:	6181      	str	r1, [r0, #24]
 8003c20:	e78e      	b.n	8003b40 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c22:	019f      	lsls	r7, r3, #6
 8003c24:	f53f af68 	bmi.w	8003af8 <HAL_RCC_ClockConfig+0xf0>
 8003c28:	e705      	b.n	8003a36 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003c2a:	2001      	movs	r0, #1
}
 8003c2c:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c2e:	039b      	lsls	r3, r3, #14
 8003c30:	f53f af62 	bmi.w	8003af8 <HAL_RCC_ClockConfig+0xf0>
 8003c34:	e6ff      	b.n	8003a36 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8003c36:	2003      	movs	r0, #3
 8003c38:	e6fe      	b.n	8003a38 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c3a:	05de      	lsls	r6, r3, #23
 8003c3c:	f53f af5c 	bmi.w	8003af8 <HAL_RCC_ClockConfig+0xf0>
 8003c40:	e6f9      	b.n	8003a36 <HAL_RCC_ClockConfig+0x2e>
 8003c42:	bf00      	nop
 8003c44:	52002000 	.word	0x52002000
 8003c48:	58024400 	.word	0x58024400
 8003c4c:	08004d38 	.word	0x08004d38
 8003c50:	24000058 	.word	0x24000058
 8003c54:	24000004 	.word	0x24000004
 8003c58:	24000000 	.word	0x24000000

08003c5c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c5c:	4a3b      	ldr	r2, [pc, #236]	; (8003d4c <RCCEx_PLL2_Config+0xf0>)
{
 8003c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c60:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d069      	beq.n	8003d3e <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003c6a:	6813      	ldr	r3, [r2, #0]
 8003c6c:	4606      	mov	r6, r0
 8003c6e:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c70:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8003c72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c76:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003c78:	f7fe f97c 	bl	8001f74 <HAL_GetTick>
 8003c7c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c7e:	e004      	b.n	8003c8a <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003c80:	f7fe f978 	bl	8001f74 <HAL_GetTick>
 8003c84:	1b43      	subs	r3, r0, r5
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d857      	bhi.n	8003d3a <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	011a      	lsls	r2, r3, #4
 8003c8e:	d4f7      	bmi.n	8003c80 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003c90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c92:	6832      	ldr	r2, [r6, #0]
 8003c94:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c98:	492d      	ldr	r1, [pc, #180]	; (8003d50 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003c9a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003c9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ca0:	6875      	ldr	r5, [r6, #4]
 8003ca2:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003ca6:	3d01      	subs	r5, #1
 8003ca8:	1e50      	subs	r0, r2, #1
 8003caa:	3b01      	subs	r3, #1
 8003cac:	6932      	ldr	r2, [r6, #16]
 8003cae:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8003cb2:	025b      	lsls	r3, r3, #9
 8003cb4:	0400      	lsls	r0, r0, #16
 8003cb6:	3a01      	subs	r2, #1
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8003cbe:	0612      	lsls	r2, r2, #24
 8003cc0:	4303      	orrs	r3, r0
 8003cc2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003cc6:	432b      	orrs	r3, r5
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ccc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003cce:	6972      	ldr	r2, [r6, #20]
 8003cd0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003cd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003cda:	69b2      	ldr	r2, [r6, #24]
 8003cdc:	f023 0320 	bic.w	r3, r3, #32
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ce4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ce6:	f023 0310 	bic.w	r3, r3, #16
 8003cea:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003cec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003cee:	69f3      	ldr	r3, [r6, #28]
 8003cf0:	4011      	ands	r1, r2
 8003cf2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8003cf6:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003cf8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003cfa:	f043 0310 	orr.w	r3, r3, #16
 8003cfe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003d02:	b1f7      	cbz	r7, 8003d42 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003d04:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d06:	bf0c      	ite	eq
 8003d08:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d0c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8003d10:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003d12:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <RCCEx_PLL2_Config+0xf0>)
 8003d14:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d16:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 8003d18:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d1c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003d1e:	f7fe f929 	bl	8001f74 <HAL_GetTick>
 8003d22:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d24:	e004      	b.n	8003d30 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d26:	f7fe f925 	bl	8001f74 <HAL_GetTick>
 8003d2a:	1b00      	subs	r0, r0, r4
 8003d2c:	2802      	cmp	r0, #2
 8003d2e:	d804      	bhi.n	8003d3a <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d30:	682b      	ldr	r3, [r5, #0]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	d5f7      	bpl.n	8003d26 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8003d36:	2000      	movs	r0, #0
}
 8003d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003d3a:	2003      	movs	r0, #3
}
 8003d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003d3e:	2001      	movs	r0, #1
}
 8003d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d48:	e7e3      	b.n	8003d12 <RCCEx_PLL2_Config+0xb6>
 8003d4a:	bf00      	nop
 8003d4c:	58024400 	.word	0x58024400
 8003d50:	ffff0007 	.word	0xffff0007

08003d54 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d54:	4a3b      	ldr	r2, [pc, #236]	; (8003e44 <RCCEx_PLL3_Config+0xf0>)
{
 8003d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d58:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d069      	beq.n	8003e36 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003d62:	6813      	ldr	r3, [r2, #0]
 8003d64:	4606      	mov	r6, r0
 8003d66:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d68:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8003d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003d70:	f7fe f900 	bl	8001f74 <HAL_GetTick>
 8003d74:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d76:	e004      	b.n	8003d82 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d78:	f7fe f8fc 	bl	8001f74 <HAL_GetTick>
 8003d7c:	1b43      	subs	r3, r0, r5
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d857      	bhi.n	8003e32 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	009a      	lsls	r2, r3, #2
 8003d86:	d4f7      	bmi.n	8003d78 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d8a:	6832      	ldr	r2, [r6, #0]
 8003d8c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003d90:	492d      	ldr	r1, [pc, #180]	; (8003e48 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d92:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8003d96:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d98:	6875      	ldr	r5, [r6, #4]
 8003d9a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003d9e:	3d01      	subs	r5, #1
 8003da0:	1e50      	subs	r0, r2, #1
 8003da2:	3b01      	subs	r3, #1
 8003da4:	6932      	ldr	r2, [r6, #16]
 8003da6:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8003daa:	025b      	lsls	r3, r3, #9
 8003dac:	0400      	lsls	r0, r0, #16
 8003dae:	3a01      	subs	r2, #1
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8003db6:	0612      	lsls	r2, r2, #24
 8003db8:	4303      	orrs	r3, r0
 8003dba:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003dbe:	432b      	orrs	r3, r5
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003dc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003dc6:	6972      	ldr	r2, [r6, #20]
 8003dc8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003dd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003dd2:	69b2      	ldr	r2, [r6, #24]
 8003dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ddc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003dde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003de4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003de6:	69f3      	ldr	r3, [r6, #28]
 8003de8:	4011      	ands	r1, r2
 8003dea:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8003dee:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003df0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003df8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003dfa:	b1f7      	cbz	r7, 8003e3a <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003dfc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003dfe:	bf0c      	ite	eq
 8003e00:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003e04:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8003e08:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003e0a:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <RCCEx_PLL3_Config+0xf0>)
 8003e0c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e0e:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 8003e10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e14:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003e16:	f7fe f8ad 	bl	8001f74 <HAL_GetTick>
 8003e1a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e1c:	e004      	b.n	8003e28 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e1e:	f7fe f8a9 	bl	8001f74 <HAL_GetTick>
 8003e22:	1b00      	subs	r0, r0, r4
 8003e24:	2802      	cmp	r0, #2
 8003e26:	d804      	bhi.n	8003e32 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e28:	682b      	ldr	r3, [r5, #0]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	d5f7      	bpl.n	8003e1e <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8003e2e:	2000      	movs	r0, #0
}
 8003e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003e32:	2003      	movs	r0, #3
}
 8003e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003e36:	2001      	movs	r0, #1
}
 8003e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e40:	e7e3      	b.n	8003e0a <RCCEx_PLL3_Config+0xb6>
 8003e42:	bf00      	nop
 8003e44:	58024400 	.word	0x58024400
 8003e48:	ffff0007 	.word	0xffff0007

08003e4c <HAL_RCCEx_PeriphCLKConfig>:
{
 8003e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e50:	6803      	ldr	r3, [r0, #0]
{
 8003e52:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e54:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8003e58:	d01c      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003e5a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8003e5c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003e60:	f000 84c7 	beq.w	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8003e64:	d823      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003e66:	2a00      	cmp	r2, #0
 8003e68:	f000 842c 	beq.w	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8003e6c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003e70:	d120      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e72:	2102      	movs	r1, #2
 8003e74:	3004      	adds	r0, #4
 8003e76:	f7ff fef1 	bl	8003c5c <RCCEx_PLL2_Config>
 8003e7a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003e7c:	2e00      	cmp	r6, #0
 8003e7e:	f040 84c0 	bne.w	8004802 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
 8003e82:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003e84:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e86:	48b0      	ldr	r0, [pc, #704]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003e88:	2600      	movs	r6, #0
 8003e8a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003e8c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8003e90:	430a      	orrs	r2, r1
 8003e92:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e94:	05da      	lsls	r2, r3, #23
 8003e96:	d511      	bpl.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003e98:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003e9a:	2a04      	cmp	r2, #4
 8003e9c:	f200 8580 	bhi.w	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xb54>
 8003ea0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003ea4:	04c104ba 	.word	0x04c104ba
 8003ea8:	033b04b2 	.word	0x033b04b2
 8003eac:	033b      	.short	0x033b
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003eae:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8003eb2:	d0e8      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003eb4:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003eb6:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003eba:	d4ed      	bmi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003ebc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ebe:	059f      	lsls	r7, r3, #22
 8003ec0:	d51b      	bpl.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003ec2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003ec4:	2a80      	cmp	r2, #128	; 0x80
 8003ec6:	f000 84b7 	beq.w	8004838 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 8003eca:	f200 8127 	bhi.w	800411c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003ece:	2a00      	cmp	r2, #0
 8003ed0:	f000 83e6 	beq.w	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x854>
 8003ed4:	2a40      	cmp	r2, #64	; 0x40
 8003ed6:	f040 8128 	bne.w	800412a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003eda:	2100      	movs	r1, #0
 8003edc:	1d20      	adds	r0, r4, #4
 8003ede:	f7ff febd 	bl	8003c5c <RCCEx_PLL2_Config>
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003ee6:	2d00      	cmp	r5, #0
 8003ee8:	f040 83cc 	bne.w	8004684 <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003eec:	4996      	ldr	r1, [pc, #600]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003eee:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003ef0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8003ef2:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8003ef6:	4302      	orrs	r2, r0
 8003ef8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003efa:	0558      	lsls	r0, r3, #21
 8003efc:	d51f      	bpl.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003efe:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8003f02:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8003f06:	f000 8462 	beq.w	80047ce <HAL_RCCEx_PeriphCLKConfig+0x982>
 8003f0a:	f200 8111 	bhi.w	8004130 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8003f0e:	2a00      	cmp	r2, #0
 8003f10:	f000 83c0 	beq.w	8004694 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8003f14:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003f18:	f040 8112 	bne.w	8004140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	1d20      	adds	r0, r4, #4
 8003f20:	f7ff fe9c 	bl	8003c5c <RCCEx_PLL2_Config>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f28:	2d00      	cmp	r5, #0
 8003f2a:	f040 83b1 	bne.w	8004690 <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f2e:	4986      	ldr	r1, [pc, #536]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003f30:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8003f34:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8003f36:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8003f3a:	4302      	orrs	r2, r0
 8003f3c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f3e:	0519      	lsls	r1, r3, #20
 8003f40:	d51f      	bpl.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003f42:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8003f46:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8003f4a:	f000 8437 	beq.w	80047bc <HAL_RCCEx_PeriphCLKConfig+0x970>
 8003f4e:	f200 80fd 	bhi.w	800414c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003f52:	2a00      	cmp	r2, #0
 8003f54:	f000 83aa 	beq.w	80046ac <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003f58:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8003f5c:	f040 80fe 	bne.w	800415c <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f60:	2100      	movs	r1, #0
 8003f62:	1d20      	adds	r0, r4, #4
 8003f64:	f7ff fe7a 	bl	8003c5c <RCCEx_PLL2_Config>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f6c:	2d00      	cmp	r5, #0
 8003f6e:	f040 8387 	bne.w	8004680 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f72:	4975      	ldr	r1, [pc, #468]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003f74:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8003f78:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8003f7a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8003f7e:	4302      	orrs	r2, r0
 8003f80:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f82:	019a      	lsls	r2, r3, #6
 8003f84:	d518      	bpl.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 8003f86:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003f88:	2a20      	cmp	r2, #32
 8003f8a:	f000 840d 	beq.w	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f8e:	f200 80e8 	bhi.w	8004162 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003f92:	b13a      	cbz	r2, 8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003f94:	2a10      	cmp	r2, #16
 8003f96:	f040 80e7 	bne.w	8004168 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f9a:	496b      	ldr	r1, [pc, #428]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003f9c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003f9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003fa2:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8003fa4:	2d00      	cmp	r5, #0
 8003fa6:	f040 83ba 	bne.w	800471e <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003faa:	4967      	ldr	r1, [pc, #412]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003fac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003fae:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003fb0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003fb4:	4302      	orrs	r2, r0
 8003fb6:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fb8:	04df      	lsls	r7, r3, #19
 8003fba:	d51d      	bpl.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003fbc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003fbe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003fc2:	f000 840d 	beq.w	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8003fc6:	f200 80d2 	bhi.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x322>
 8003fca:	2a00      	cmp	r2, #0
 8003fcc:	f000 8374 	beq.w	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8003fd0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003fd4:	f040 80d3 	bne.w	800417e <HAL_RCCEx_PeriphCLKConfig+0x332>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fd8:	2100      	movs	r1, #0
 8003fda:	1d20      	adds	r0, r4, #4
 8003fdc:	f7ff fe3e 	bl	8003c5c <RCCEx_PLL2_Config>
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003fe4:	2d00      	cmp	r5, #0
 8003fe6:	f040 834f 	bne.w	8004688 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003fea:	4957      	ldr	r1, [pc, #348]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003fec:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003fee:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8003ff0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003ff4:	4302      	orrs	r2, r0
 8003ff6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ff8:	0498      	lsls	r0, r3, #18
 8003ffa:	d51b      	bpl.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003ffc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ffe:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8004002:	f000 83bd 	beq.w	8004780 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004006:	f200 80bd 	bhi.w	8004184 <HAL_RCCEx_PeriphCLKConfig+0x338>
 800400a:	b14a      	cbz	r2, 8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800400c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004010:	f040 80c2 	bne.w	8004198 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004014:	2101      	movs	r1, #1
 8004016:	1d20      	adds	r0, r4, #4
 8004018:	f7ff fe20 	bl	8003c5c <RCCEx_PLL2_Config>
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004020:	2d00      	cmp	r5, #0
 8004022:	f040 837e 	bne.w	8004722 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004026:	4948      	ldr	r1, [pc, #288]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004028:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800402a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800402c:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8004030:	4302      	orrs	r2, r0
 8004032:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004034:	0459      	lsls	r1, r3, #17
 8004036:	d51d      	bpl.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004038:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800403c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8004040:	f000 83a8 	beq.w	8004794 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8004044:	f200 80ab 	bhi.w	800419e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004048:	b14a      	cbz	r2, 800405e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800404a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800404e:	f040 80b0 	bne.w	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004052:	2101      	movs	r1, #1
 8004054:	1d20      	adds	r0, r4, #4
 8004056:	f7ff fe01 	bl	8003c5c <RCCEx_PLL2_Config>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800405e:	2d00      	cmp	r5, #0
 8004060:	f040 8363 	bne.w	800472a <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004064:	4938      	ldr	r1, [pc, #224]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004066:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800406a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800406c:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8004070:	4302      	orrs	r2, r0
 8004072:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	d509      	bpl.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->DsiClockSelection)
 8004078:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800407a:	2a00      	cmp	r2, #0
 800407c:	f000 8264 	beq.w	8004548 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 8004080:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004084:	f000 825a 	beq.w	800453c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004088:	2601      	movs	r6, #1
 800408a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800408c:	041f      	lsls	r7, r3, #16
 800408e:	d50d      	bpl.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch(PeriphClkInit->FdcanClockSelection)
 8004090:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004092:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8004096:	f000 8420 	beq.w	80048da <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 800409a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800409e:	f000 82ce 	beq.w	800463e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80040a2:	2a00      	cmp	r2, #0
 80040a4:	f000 82d1 	beq.w	800464a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 80040a8:	2601      	movs	r6, #1
 80040aa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040ac:	01d8      	lsls	r0, r3, #7
 80040ae:	f100 81cf 	bmi.w	8004450 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040b2:	0259      	lsls	r1, r3, #9
 80040b4:	f100 81ef 	bmi.w	8004496 <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040b8:	07df      	lsls	r7, r3, #31
 80040ba:	f140 8088 	bpl.w	80041ce <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch(PeriphClkInit->Usart16ClockSelection)
 80040be:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80040c0:	2a28      	cmp	r2, #40	; 0x28
 80040c2:	f200 81cf 	bhi.w	8004464 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80040c6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80040ca:	007e      	.short	0x007e
 80040cc:	01cd01cd 	.word	0x01cd01cd
 80040d0:	01cd01cd 	.word	0x01cd01cd
 80040d4:	01cd01cd 	.word	0x01cd01cd
 80040d8:	03d401cd 	.word	0x03d401cd
 80040dc:	01cd01cd 	.word	0x01cd01cd
 80040e0:	01cd01cd 	.word	0x01cd01cd
 80040e4:	01cd01cd 	.word	0x01cd01cd
 80040e8:	007701cd 	.word	0x007701cd
 80040ec:	01cd01cd 	.word	0x01cd01cd
 80040f0:	01cd01cd 	.word	0x01cd01cd
 80040f4:	01cd01cd 	.word	0x01cd01cd
 80040f8:	007e01cd 	.word	0x007e01cd
 80040fc:	01cd01cd 	.word	0x01cd01cd
 8004100:	01cd01cd 	.word	0x01cd01cd
 8004104:	01cd01cd 	.word	0x01cd01cd
 8004108:	007e01cd 	.word	0x007e01cd
 800410c:	01cd01cd 	.word	0x01cd01cd
 8004110:	01cd01cd 	.word	0x01cd01cd
 8004114:	01cd01cd 	.word	0x01cd01cd
 8004118:	007e01cd 	.word	0x007e01cd
    switch(PeriphClkInit->Sai23ClockSelection)
 800411c:	2ac0      	cmp	r2, #192	; 0xc0
 800411e:	f43f aee2 	beq.w	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8004122:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004126:	f43f aede 	beq.w	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800412a:	2601      	movs	r6, #1
 800412c:	4635      	mov	r5, r6
 800412e:	e6e4      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004130:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8004134:	f43f aef8 	beq.w	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004138:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800413c:	f43f aef4 	beq.w	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004140:	2601      	movs	r6, #1
 8004142:	4635      	mov	r5, r6
 8004144:	e6fb      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8004146:	bf00      	nop
 8004148:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 800414c:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8004150:	f43f af0c 	beq.w	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8004154:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8004158:	f43f af08 	beq.w	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x120>
 800415c:	2601      	movs	r6, #1
 800415e:	4635      	mov	r5, r6
 8004160:	e70f      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 8004162:	2a30      	cmp	r2, #48	; 0x30
 8004164:	f43f af1e 	beq.w	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8004168:	2601      	movs	r6, #1
 800416a:	4635      	mov	r5, r6
 800416c:	e724      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800416e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8004172:	f43f af37 	beq.w	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004176:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800417a:	f43f af33 	beq.w	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800417e:	2601      	movs	r6, #1
 8004180:	4635      	mov	r5, r6
 8004182:	e739      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004184:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004188:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800418c:	f43f af48 	beq.w	8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004190:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8004194:	f43f af44 	beq.w	8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004198:	2601      	movs	r6, #1
 800419a:	4635      	mov	r5, r6
 800419c:	e74a      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 800419e:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80041a2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80041a6:	f43f af5a 	beq.w	800405e <HAL_RCCEx_PeriphCLKConfig+0x212>
 80041aa:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80041ae:	f43f af56 	beq.w	800405e <HAL_RCCEx_PeriphCLKConfig+0x212>
 80041b2:	2601      	movs	r6, #1
 80041b4:	4635      	mov	r5, r6
 80041b6:	e75d      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041b8:	2101      	movs	r1, #1
 80041ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80041be:	f7ff fdc9 	bl	8003d54 <RCCEx_PLL3_Config>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80041c6:	2d00      	cmp	r5, #0
 80041c8:	f000 82c0 	beq.w	800474c <HAL_RCCEx_PeriphCLKConfig+0x900>
 80041cc:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041ce:	0798      	lsls	r0, r3, #30
 80041d0:	d516      	bpl.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80041d2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80041d4:	2a05      	cmp	r2, #5
 80041d6:	f200 83e6 	bhi.w	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 80041da:	e8df f012 	tbh	[pc, r2, lsl #1]
 80041de:	000d      	.short	0x000d
 80041e0:	00060336 	.word	0x00060336
 80041e4:	000d000d 	.word	0x000d000d
 80041e8:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041ea:	2101      	movs	r1, #1
 80041ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80041f0:	f7ff fdb0 	bl	8003d54 <RCCEx_PLL3_Config>
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80041f8:	2d00      	cmp	r5, #0
 80041fa:	f000 8279 	beq.w	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80041fe:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004200:	0759      	lsls	r1, r3, #29
 8004202:	d517      	bpl.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004204:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8004208:	2a05      	cmp	r2, #5
 800420a:	f200 83c6 	bhi.w	800499a <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 800420e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004212:	000d      	.short	0x000d
 8004214:	00060326 	.word	0x00060326
 8004218:	000d000d 	.word	0x000d000d
 800421c:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800421e:	2101      	movs	r1, #1
 8004220:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004224:	f7ff fd96 	bl	8003d54 <RCCEx_PLL3_Config>
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800422c:	2d00      	cmp	r5, #0
 800422e:	f000 826a 	beq.w	8004706 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 8004232:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004234:	069a      	lsls	r2, r3, #26
 8004236:	d51d      	bpl.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004238:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800423c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8004240:	f000 8340 	beq.w	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xa78>
 8004244:	f200 81af 	bhi.w	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004248:	b14a      	cbz	r2, 800425e <HAL_RCCEx_PeriphCLKConfig+0x412>
 800424a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800424e:	f040 81b4 	bne.w	80045ba <HAL_RCCEx_PeriphCLKConfig+0x76e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004252:	2100      	movs	r1, #0
 8004254:	1d20      	adds	r0, r4, #4
 8004256:	f7ff fd01 	bl	8003c5c <RCCEx_PLL2_Config>
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800425e:	2d00      	cmp	r5, #0
 8004260:	f040 823c 	bne.w	80046dc <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004264:	49b3      	ldr	r1, [pc, #716]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004266:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800426a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800426c:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8004270:	4302      	orrs	r2, r0
 8004272:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004274:	065f      	lsls	r7, r3, #25
 8004276:	d51d      	bpl.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004278:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800427c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004280:	f000 8334 	beq.w	80048ec <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8004284:	f200 817f 	bhi.w	8004586 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004288:	b14a      	cbz	r2, 800429e <HAL_RCCEx_PeriphCLKConfig+0x452>
 800428a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800428e:	f040 8184 	bne.w	800459a <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004292:	2100      	movs	r1, #0
 8004294:	1d20      	adds	r0, r4, #4
 8004296:	f7ff fce1 	bl	8003c5c <RCCEx_PLL2_Config>
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800429e:	2d00      	cmp	r5, #0
 80042a0:	f040 8221 	bne.w	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042a4:	49a3      	ldr	r1, [pc, #652]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80042a6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80042aa:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80042ac:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80042b0:	4302      	orrs	r2, r0
 80042b2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042b4:	0618      	lsls	r0, r3, #24
 80042b6:	d51d      	bpl.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80042b8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80042bc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80042c0:	f000 831f 	beq.w	8004902 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80042c4:	f200 814f 	bhi.w	8004566 <HAL_RCCEx_PeriphCLKConfig+0x71a>
 80042c8:	b14a      	cbz	r2, 80042de <HAL_RCCEx_PeriphCLKConfig+0x492>
 80042ca:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80042ce:	f040 8154 	bne.w	800457a <HAL_RCCEx_PeriphCLKConfig+0x72e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042d2:	2100      	movs	r1, #0
 80042d4:	1d20      	adds	r0, r4, #4
 80042d6:	f7ff fcc1 	bl	8003c5c <RCCEx_PLL2_Config>
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80042de:	2d00      	cmp	r5, #0
 80042e0:	f040 81f7 	bne.w	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042e4:	4993      	ldr	r1, [pc, #588]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80042e6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80042ea:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80042ec:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80042f0:	4302      	orrs	r2, r0
 80042f2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042f4:	0719      	lsls	r1, r3, #28
 80042f6:	d50b      	bpl.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80042f8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80042fc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004300:	f000 831e 	beq.w	8004940 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004304:	488b      	ldr	r0, [pc, #556]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004306:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004308:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800430c:	430a      	orrs	r2, r1
 800430e:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004310:	06da      	lsls	r2, r3, #27
 8004312:	d50b      	bpl.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004314:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8004318:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800431c:	f000 8305 	beq.w	800492a <HAL_RCCEx_PeriphCLKConfig+0xade>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004320:	4884      	ldr	r0, [pc, #528]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004322:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8004324:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004328:	430a      	orrs	r2, r1
 800432a:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800432c:	031f      	lsls	r7, r3, #12
 800432e:	d50e      	bpl.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->AdcClockSelection)
 8004330:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004334:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004338:	f000 816b 	beq.w	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800433c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8004340:	f000 816e 	beq.w	8004620 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8004344:	2900      	cmp	r1, #0
 8004346:	f000 82e7 	beq.w	8004918 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800434a:	2601      	movs	r6, #1
 800434c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800434e:	0358      	lsls	r0, r3, #13
 8004350:	d50f      	bpl.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->UsbClockSelection)
 8004352:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8004356:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800435a:	f000 8144 	beq.w	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800435e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8004362:	f000 8147 	beq.w	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 8004366:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800436a:	f000 82a2 	beq.w	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800436e:	2601      	movs	r6, #1
 8004370:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004372:	03d9      	lsls	r1, r3, #15
 8004374:	d517      	bpl.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->SdmmcClockSelection)
 8004376:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004378:	2a00      	cmp	r2, #0
 800437a:	f000 8288 	beq.w	800488e <HAL_RCCEx_PeriphCLKConfig+0xa42>
 800437e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004382:	f040 817a 	bne.w	800467a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004386:	2102      	movs	r1, #2
 8004388:	1d20      	adds	r0, r4, #4
 800438a:	f7ff fc67 	bl	8003c5c <RCCEx_PLL2_Config>
 800438e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	2d00      	cmp	r5, #0
 8004394:	f040 81e5 	bne.w	8004762 <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004398:	4966      	ldr	r1, [pc, #408]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800439a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800439c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800439e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043a2:	4302      	orrs	r2, r0
 80043a4:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043a6:	009a      	lsls	r2, r3, #2
 80043a8:	f100 815c 	bmi.w	8004664 <HAL_RCCEx_PeriphCLKConfig+0x818>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043ac:	039f      	lsls	r7, r3, #14
 80043ae:	d43f      	bmi.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 80043b0:	1e30      	subs	r0, r6, #0
 80043b2:	bf18      	it	ne
 80043b4:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043b6:	02de      	lsls	r6, r3, #11
 80043b8:	d506      	bpl.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043ba:	495e      	ldr	r1, [pc, #376]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80043bc:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80043be:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80043c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043c4:	432a      	orrs	r2, r5
 80043c6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043c8:	00dd      	lsls	r5, r3, #3
 80043ca:	d507      	bpl.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043cc:	4959      	ldr	r1, [pc, #356]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80043ce:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80043d2:	690a      	ldr	r2, [r1, #16]
 80043d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043d8:	432a      	orrs	r2, r5
 80043da:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043dc:	0299      	lsls	r1, r3, #10
 80043de:	d506      	bpl.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043e0:	4954      	ldr	r1, [pc, #336]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80043e2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80043e4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80043e6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80043ea:	432a      	orrs	r2, r5
 80043ec:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043ee:	005a      	lsls	r2, r3, #1
 80043f0:	d509      	bpl.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043f2:	4a50      	ldr	r2, [pc, #320]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80043f4:	6911      	ldr	r1, [r2, #16]
 80043f6:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80043fa:	6111      	str	r1, [r2, #16]
 80043fc:	6911      	ldr	r1, [r2, #16]
 80043fe:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 8004402:	4329      	orrs	r1, r5
 8004404:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004406:	2b00      	cmp	r3, #0
 8004408:	da06      	bge.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800440a:	494a      	ldr	r1, [pc, #296]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800440c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800440e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004410:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004414:	432a      	orrs	r2, r5
 8004416:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	d507      	bpl.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800441c:	4a45      	ldr	r2, [pc, #276]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800441e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004422:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004424:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004428:	430b      	orrs	r3, r1
 800442a:	6553      	str	r3, [r2, #84]	; 0x54
}
 800442c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8004430:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8004434:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004438:	f000 8232 	beq.w	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800443c:	f240 80c3 	bls.w	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
 8004440:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8004444:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004448:	f000 80c0 	beq.w	80045cc <HAL_RCCEx_PeriphCLKConfig+0x780>
 800444c:	2001      	movs	r0, #1
 800444e:	e7b2      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->FmcClockSelection)
 8004450:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004452:	2a03      	cmp	r2, #3
 8004454:	f200 82aa 	bhi.w	80049ac <HAL_RCCEx_PeriphCLKConfig+0xb60>
 8004458:	e8df f012 	tbh	[pc, r2, lsl #1]
 800445c:	018a0010 	.word	0x018a0010
 8004460:	0010000a 	.word	0x0010000a
    switch(PeriphClkInit->Usart16ClockSelection)
 8004464:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004466:	0798      	lsls	r0, r3, #30
    switch(PeriphClkInit->Usart16ClockSelection)
 8004468:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800446a:	f57f aec9 	bpl.w	8004200 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800446e:	e6b0      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004470:	2102      	movs	r1, #2
 8004472:	1d20      	adds	r0, r4, #4
 8004474:	f7ff fbf2 	bl	8003c5c <RCCEx_PLL2_Config>
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800447c:	2d00      	cmp	r5, #0
 800447e:	f040 8152 	bne.w	8004726 <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004482:	492c      	ldr	r1, [pc, #176]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004484:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004486:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004488:	f022 0203 	bic.w	r2, r2, #3
 800448c:	4302      	orrs	r2, r0
 800448e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004490:	0259      	lsls	r1, r3, #9
 8004492:	f57f ae11 	bpl.w	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004496:	4b28      	ldr	r3, [pc, #160]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8004498:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800449a:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800449c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80044a2:	f7fd fd67 	bl	8001f74 <HAL_GetTick>
 80044a6:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044a8:	e005      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044aa:	f7fd fd63 	bl	8001f74 <HAL_GetTick>
 80044ae:	1bc0      	subs	r0, r0, r7
 80044b0:	2864      	cmp	r0, #100	; 0x64
 80044b2:	f200 81e8 	bhi.w	8004886 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044b6:	f8d8 3000 	ldr.w	r3, [r8]
 80044ba:	05da      	lsls	r2, r3, #23
 80044bc:	d5f5      	bpl.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x65e>
    if(ret == HAL_OK)
 80044be:	2d00      	cmp	r5, #0
 80044c0:	f040 8267 	bne.w	8004992 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80044c4:	4a1b      	ldr	r2, [pc, #108]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80044c6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 80044ca:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80044cc:	4059      	eors	r1, r3
 80044ce:	f411 7f40 	tst.w	r1, #768	; 0x300
 80044d2:	d00b      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044d4:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80044d6:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044d8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80044dc:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80044e0:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044e2:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80044e4:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80044e8:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80044ea:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80044ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f0:	f000 8231 	beq.w	8004956 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044f4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80044f8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80044fc:	f000 823f 	beq.w	800497e <HAL_RCCEx_PeriphCLKConfig+0xb32>
 8004500:	490c      	ldr	r1, [pc, #48]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004502:	690a      	ldr	r2, [r1, #16]
 8004504:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004508:	610a      	str	r2, [r1, #16]
 800450a:	4a0a      	ldr	r2, [pc, #40]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800450c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004510:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004512:	430b      	orrs	r3, r1
 8004514:	6713      	str	r3, [r2, #112]	; 0x70
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	e5ce      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800451a:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800451c:	2d00      	cmp	r5, #0
 800451e:	f040 80b5 	bne.w	800468c <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004522:	4904      	ldr	r1, [pc, #16]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8004524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004526:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004528:	f022 0207 	bic.w	r2, r2, #7
 800452c:	4302      	orrs	r2, r0
 800452e:	650a      	str	r2, [r1, #80]	; 0x50
 8004530:	e4c5      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004532:	bf00      	nop
 8004534:	58024400 	.word	0x58024400
 8004538:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800453c:	2101      	movs	r1, #1
 800453e:	1d20      	adds	r0, r4, #4
 8004540:	f7ff fb8c 	bl	8003c5c <RCCEx_PLL2_Config>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004548:	2d00      	cmp	r5, #0
 800454a:	f040 810c 	bne.w	8004766 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800454e:	49b9      	ldr	r1, [pc, #740]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004550:	041f      	lsls	r7, r3, #16
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004552:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004554:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004556:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800455a:	ea42 0200 	orr.w	r2, r2, r0
 800455e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004560:	f57f ada4 	bpl.w	80040ac <HAL_RCCEx_PeriphCLKConfig+0x260>
 8004564:	e594      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004566:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800456a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800456e:	f43f aeb6 	beq.w	80042de <HAL_RCCEx_PeriphCLKConfig+0x492>
 8004572:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8004576:	f43f aeb2 	beq.w	80042de <HAL_RCCEx_PeriphCLKConfig+0x492>
 800457a:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800457c:	0719      	lsls	r1, r3, #28
    switch(PeriphClkInit->Lptim345ClockSelection)
 800457e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004580:	f57f aec6 	bpl.w	8004310 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8004584:	e6b8      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004586:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 800458a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800458e:	f43f ae86 	beq.w	800429e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004592:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8004596:	f43f ae82 	beq.w	800429e <HAL_RCCEx_PeriphCLKConfig+0x452>
 800459a:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800459c:	0618      	lsls	r0, r3, #24
    switch(PeriphClkInit->Lptim2ClockSelection)
 800459e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80045a0:	f57f aea8 	bpl.w	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80045a4:	e688      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80045a6:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80045aa:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80045ae:	f43f ae56 	beq.w	800425e <HAL_RCCEx_PeriphCLKConfig+0x412>
 80045b2:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80045b6:	f43f ae52 	beq.w	800425e <HAL_RCCEx_PeriphCLKConfig+0x412>
 80045ba:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045bc:	065f      	lsls	r7, r3, #25
    switch(PeriphClkInit->Lptim1ClockSelection)
 80045be:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045c0:	f57f ae78 	bpl.w	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
 80045c4:	e658      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->RngClockSelection)
 80045c6:	2a00      	cmp	r2, #0
 80045c8:	f47f af40 	bne.w	800444c <HAL_RCCEx_PeriphCLKConfig+0x600>
    if(ret == HAL_OK)
 80045cc:	2d00      	cmp	r5, #0
 80045ce:	f47f af3d 	bne.w	800444c <HAL_RCCEx_PeriphCLKConfig+0x600>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045d2:	4d98      	ldr	r5, [pc, #608]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80045d4:	1e30      	subs	r0, r6, #0
 80045d6:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80045d8:	bf18      	it	ne
 80045da:	2001      	movne	r0, #1
 80045dc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80045e0:	430a      	orrs	r2, r1
 80045e2:	656a      	str	r2, [r5, #84]	; 0x54
 80045e4:	e6e7      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x56a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045e6:	2101      	movs	r1, #1
 80045e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80045ec:	f7ff fbb2 	bl	8003d54 <RCCEx_PLL3_Config>
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80045f4:	2d00      	cmp	r5, #0
 80045f6:	f040 80a4 	bne.w	8004742 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045fa:	498e      	ldr	r1, [pc, #568]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80045fc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004600:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8004602:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004606:	4302      	orrs	r2, r0
 8004608:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800460a:	03d9      	lsls	r1, r3, #15
 800460c:	f57f aecb 	bpl.w	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8004610:	e6b1      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004612:	2102      	movs	r1, #2
 8004614:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004618:	f7ff fb9c 	bl	8003d54 <RCCEx_PLL3_Config>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004620:	2d00      	cmp	r5, #0
 8004622:	f040 8089 	bne.w	8004738 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004626:	4983      	ldr	r1, [pc, #524]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8004628:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800462c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800462e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004632:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004634:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004636:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004638:	f57f ae9b 	bpl.w	8004372 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800463c:	e689      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800463e:	2101      	movs	r1, #1
 8004640:	1d20      	adds	r0, r4, #4
 8004642:	f7ff fb0b 	bl	8003c5c <RCCEx_PLL2_Config>
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800464a:	2d00      	cmp	r5, #0
 800464c:	d16f      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800464e:	4979      	ldr	r1, [pc, #484]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8004650:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004652:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004654:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004658:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800465a:	01d8      	lsls	r0, r3, #7
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800465c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800465e:	f57f ad28 	bpl.w	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004662:	e6f5      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004664:	2102      	movs	r1, #2
 8004666:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800466a:	f7ff fb73 	bl	8003d54 <RCCEx_PLL3_Config>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	2800      	cmp	r0, #0
 8004672:	f43f ae9b 	beq.w	80043ac <HAL_RCCEx_PeriphCLKConfig+0x560>
      status=HAL_ERROR;
 8004676:	2601      	movs	r6, #1
 8004678:	e698      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->SdmmcClockSelection)
 800467a:	2601      	movs	r6, #1
 800467c:	4635      	mov	r5, r6
 800467e:	e692      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8004680:	462e      	mov	r6, r5
 8004682:	e47e      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004684:	462e      	mov	r6, r5
 8004686:	e438      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xae>
 8004688:	462e      	mov	r6, r5
 800468a:	e4b5      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800468c:	462e      	mov	r6, r5
 800468e:	e416      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004690:	462e      	mov	r6, r5
 8004692:	e454      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004694:	4967      	ldr	r1, [pc, #412]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8004696:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004698:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800469c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800469e:	e443      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a0:	4964      	ldr	r1, [pc, #400]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80046a2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80046a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80046a8:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80046aa:	e41c      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ac:	4961      	ldr	r1, [pc, #388]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80046ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80046b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80046b4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80046b6:	e459      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b8:	495e      	ldr	r1, [pc, #376]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80046ba:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80046bc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80046c0:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80046c2:	e48f      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c4:	485b      	ldr	r0, [pc, #364]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80046c6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80046c8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80046cc:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80046ce:	f7ff bbda 	b.w	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80046d2:	0719      	lsls	r1, r3, #28
 80046d4:	462e      	mov	r6, r5
 80046d6:	f57f ae1b 	bpl.w	8004310 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 80046da:	e60d      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046dc:	065f      	lsls	r7, r3, #25
 80046de:	462e      	mov	r6, r5
 80046e0:	f57f ade8 	bpl.w	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
 80046e4:	e5c8      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046e6:	0618      	lsls	r0, r3, #24
 80046e8:	462e      	mov	r6, r5
 80046ea:	f57f ae03 	bpl.w	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80046ee:	e5e3      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80046f0:	4950      	ldr	r1, [pc, #320]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80046f2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80046f4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80046f6:	f022 0207 	bic.w	r2, r2, #7
 80046fa:	4302      	orrs	r2, r0
 80046fc:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046fe:	0759      	lsls	r1, r3, #29
 8004700:	f57f ad98 	bpl.w	8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004704:	e57e      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004706:	494b      	ldr	r1, [pc, #300]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8004708:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800470c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800470e:	f022 0207 	bic.w	r2, r2, #7
 8004712:	4302      	orrs	r2, r0
 8004714:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004716:	069a      	lsls	r2, r3, #26
 8004718:	f57f adac 	bpl.w	8004274 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800471c:	e58c      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800471e:	462e      	mov	r6, r5
 8004720:	e44a      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004722:	462e      	mov	r6, r5
 8004724:	e486      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004726:	462e      	mov	r6, r5
 8004728:	e4c3      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800472a:	462e      	mov	r6, r5
 800472c:	e4a2      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x228>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800472e:	01d8      	lsls	r0, r3, #7
 8004730:	462e      	mov	r6, r5
 8004732:	f57f acbe 	bpl.w	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004736:	e68b      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x604>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004738:	0358      	lsls	r0, r3, #13
 800473a:	462e      	mov	r6, r5
 800473c:	f57f ae19 	bpl.w	8004372 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004740:	e607      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x506>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004742:	03d9      	lsls	r1, r3, #15
 8004744:	462e      	mov	r6, r5
 8004746:	f57f ae2e 	bpl.w	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800474a:	e614      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800474c:	4939      	ldr	r1, [pc, #228]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800474e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004750:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8004752:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8004756:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004758:	0798      	lsls	r0, r3, #30
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800475a:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800475c:	f57f ad50 	bpl.w	8004200 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8004760:	e537      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004762:	462e      	mov	r6, r5
 8004764:	e61f      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004766:	041f      	lsls	r7, r3, #16
 8004768:	462e      	mov	r6, r5
 800476a:	f57f ac9f 	bpl.w	80040ac <HAL_RCCEx_PeriphCLKConfig+0x260>
 800476e:	e48f      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004770:	4930      	ldr	r1, [pc, #192]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8004772:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004774:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004778:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800477a:	2d00      	cmp	r5, #0
 800477c:	d1d3      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800477e:	e680      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004780:	2101      	movs	r1, #1
 8004782:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004786:	f7ff fae5 	bl	8003d54 <RCCEx_PLL3_Config>
 800478a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	2d00      	cmp	r5, #0
 8004790:	d1c7      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8004792:	e448      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004794:	2101      	movs	r1, #1
 8004796:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800479a:	f7ff fadb 	bl	8003d54 <RCCEx_PLL3_Config>
 800479e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	2d00      	cmp	r5, #0
 80047a4:	d1c1      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x8de>
 80047a6:	e45d      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047a8:	2102      	movs	r1, #2
 80047aa:	1d20      	adds	r0, r4, #4
 80047ac:	f7ff fa56 	bl	8003c5c <RCCEx_PLL2_Config>
 80047b0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	2d00      	cmp	r5, #0
 80047b6:	d1b2      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 80047b8:	f7ff bbf7 	b.w	8003faa <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047bc:	2100      	movs	r1, #0
 80047be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80047c2:	f7ff fac7 	bl	8003d54 <RCCEx_PLL3_Config>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	4605      	mov	r5, r0
      break;
 80047ca:	f7ff bbcf 	b.w	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047ce:	2100      	movs	r1, #0
 80047d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80047d4:	f7ff fabe 	bl	8003d54 <RCCEx_PLL3_Config>
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	4605      	mov	r5, r0
      break;
 80047dc:	f7ff bba4 	b.w	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047e0:	2100      	movs	r1, #0
 80047e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80047e6:	f7ff fab5 	bl	8003d54 <RCCEx_PLL3_Config>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	4605      	mov	r5, r0
      break;
 80047ee:	f7ff bbf9 	b.w	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047f2:	2102      	movs	r1, #2
 80047f4:	3024      	adds	r0, #36	; 0x24
 80047f6:	f7ff faad 	bl	8003d54 <RCCEx_PLL3_Config>
 80047fa:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80047fc:	2e00      	cmp	r6, #0
 80047fe:	f43f ab40 	beq.w	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	f7ff bb46 	b.w	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004808:	2100      	movs	r1, #0
 800480a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800480e:	f7ff faa1 	bl	8003d54 <RCCEx_PLL3_Config>
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	4605      	mov	r5, r0
      break;
 8004816:	e681      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004818:	4906      	ldr	r1, [pc, #24]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 800481a:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800481c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800481e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004822:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8004824:	e67a      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004826:	2100      	movs	r1, #0
 8004828:	1d20      	adds	r0, r4, #4
 800482a:	f7ff fa17 	bl	8003c5c <RCCEx_PLL2_Config>
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	4605      	mov	r5, r0
      break;
 8004832:	e673      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8004834:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004838:	2100      	movs	r1, #0
 800483a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800483e:	f7ff fa89 	bl	8003d54 <RCCEx_PLL3_Config>
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	4605      	mov	r5, r0
      break;
 8004846:	f7ff bb4e 	b.w	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800484a:	2101      	movs	r1, #1
 800484c:	1d20      	adds	r0, r4, #4
 800484e:	f7ff fa05 	bl	8003c5c <RCCEx_PLL2_Config>
 8004852:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	2d00      	cmp	r5, #0
 8004858:	f47f acd1 	bne.w	80041fe <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800485c:	e748      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800485e:	2101      	movs	r1, #1
 8004860:	1d20      	adds	r0, r4, #4
 8004862:	f7ff f9fb 	bl	8003c5c <RCCEx_PLL2_Config>
 8004866:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	2d00      	cmp	r5, #0
 800486c:	f47f ace1 	bne.w	8004232 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004870:	e749      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004872:	2101      	movs	r1, #1
 8004874:	1d20      	adds	r0, r4, #4
 8004876:	f7ff f9f1 	bl	8003c5c <RCCEx_PLL2_Config>
 800487a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	2d00      	cmp	r5, #0
 8004880:	f47f aca4 	bne.w	80041cc <HAL_RCCEx_PeriphCLKConfig+0x380>
 8004884:	e762      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x900>
            ret = HAL_TIMEOUT;
 8004886:	2603      	movs	r6, #3
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	4635      	mov	r5, r6
 800488c:	e414      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800488e:	4949      	ldr	r1, [pc, #292]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8004890:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004892:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004896:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8004898:	2d00      	cmp	r5, #0
 800489a:	f47f af62 	bne.w	8004762 <HAL_RCCEx_PeriphCLKConfig+0x916>
 800489e:	e57b      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a0:	4844      	ldr	r0, [pc, #272]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 80048a2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80048a4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80048a8:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80048aa:	2d00      	cmp	r5, #0
 80048ac:	f47f adce 	bne.w	800444c <HAL_RCCEx_PeriphCLKConfig+0x600>
 80048b0:	e68f      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048b2:	4940      	ldr	r1, [pc, #256]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 80048b4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80048b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80048ba:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80048bc:	2d00      	cmp	r5, #0
 80048be:	f47f af40 	bne.w	8004742 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80048c2:	e69a      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048c4:	2102      	movs	r1, #2
 80048c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80048ca:	f7ff fa43 	bl	8003d54 <RCCEx_PLL3_Config>
 80048ce:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	2d00      	cmp	r5, #0
 80048d4:	f47f af02 	bne.w	80046dc <HAL_RCCEx_PeriphCLKConfig+0x890>
 80048d8:	e4c4      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048da:	4936      	ldr	r1, [pc, #216]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 80048dc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80048de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80048e2:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80048e4:	2d00      	cmp	r5, #0
 80048e6:	f47f af22 	bne.w	800472e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80048ea:	e6b0      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x802>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048ec:	2102      	movs	r1, #2
 80048ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80048f2:	f7ff fa2f 	bl	8003d54 <RCCEx_PLL3_Config>
 80048f6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	2d00      	cmp	r5, #0
 80048fc:	f47f aef3 	bne.w	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8004900:	e4d0      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x458>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004902:	2102      	movs	r1, #2
 8004904:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004908:	f7ff fa24 	bl	8003d54 <RCCEx_PLL3_Config>
 800490c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	2d00      	cmp	r5, #0
 8004912:	f47f aede 	bne.w	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8004916:	e4e5      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004918:	1d20      	adds	r0, r4, #4
 800491a:	f7ff f99f 	bl	8003c5c <RCCEx_PLL2_Config>
 800491e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	2d00      	cmp	r5, #0
 8004924:	f47f af08 	bne.w	8004738 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004928:	e67d      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800492a:	2102      	movs	r1, #2
 800492c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004930:	f7ff fa10 	bl	8003d54 <RCCEx_PLL3_Config>
 8004934:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8004938:	b100      	cbz	r0, 800493c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
        status = HAL_ERROR;
 800493a:	2601      	movs	r6, #1
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	e4ef      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004940:	2102      	movs	r1, #2
 8004942:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004946:	f7ff fa05 	bl	8003d54 <RCCEx_PLL3_Config>
 800494a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800494e:	b100      	cbz	r0, 8004952 <HAL_RCCEx_PeriphCLKConfig+0xb06>
          status = HAL_ERROR;
 8004950:	2601      	movs	r6, #1
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	e4d6      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        tickstart = HAL_GetTick();
 8004956:	f7fd fb0d 	bl	8001f74 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800495a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80049b4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004962:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004964:	e004      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xb24>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004966:	f7fd fb05 	bl	8001f74 <HAL_GetTick>
 800496a:	1bc0      	subs	r0, r0, r7
 800496c:	4548      	cmp	r0, r9
 800496e:	d88a      	bhi.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004970:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8004974:	079b      	lsls	r3, r3, #30
 8004976:	d5f6      	bpl.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004978:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800497c:	e5ba      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800497e:	480d      	ldr	r0, [pc, #52]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
 8004980:	4a0d      	ldr	r2, [pc, #52]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
 8004982:	6901      	ldr	r1, [r0, #16]
 8004984:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8004988:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800498c:	430a      	orrs	r2, r1
 800498e:	6102      	str	r2, [r0, #16]
 8004990:	e5bb      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8004992:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004994:	462e      	mov	r6, r5
 8004996:	f7ff bb8f 	b.w	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800499a:	2601      	movs	r6, #1
 800499c:	4635      	mov	r5, r6
 800499e:	e449      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Sai1ClockSelection)
 80049a0:	2601      	movs	r6, #1
 80049a2:	f7ff ba8b 	b.w	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80049a6:	2601      	movs	r6, #1
 80049a8:	4635      	mov	r5, r6
 80049aa:	e429      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 80049ac:	2601      	movs	r6, #1
 80049ae:	4635      	mov	r5, r6
 80049b0:	f7ff bb7f 	b.w	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80049b4:	58024400 	.word	0x58024400
 80049b8:	00ffffcf 	.word	0x00ffffcf

080049bc <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop

080049c0 <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 80049c0:	b318      	cbz	r0, 8004a0a <HAL_SDRAM_Init+0x4a>
{
 80049c2:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80049c4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80049c8:	460d      	mov	r5, r1
 80049ca:	4604      	mov	r4, r0
 80049cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049d0:	b1b3      	cbz	r3, 8004a00 <HAL_SDRAM_Init+0x40>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80049d2:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80049d4:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80049d6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80049da:	f851 0b04 	ldr.w	r0, [r1], #4
 80049de:	f000 f851 	bl	8004a84 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80049e2:	4629      	mov	r1, r5
 80049e4:	e9d4 0200 	ldrd	r0, r2, [r4]
 80049e8:	f000 f888 	bl	8004afc <FMC_SDRAM_Timing_Init>
  __FMC_ENABLE();
 80049ec:	4a08      	ldr	r2, [pc, #32]	; (8004a10 <HAL_SDRAM_Init+0x50>)
  hsdram->State = HAL_SDRAM_STATE_READY;
 80049ee:	2101      	movs	r1, #1
  return HAL_OK;
 80049f0:	2000      	movs	r0, #0
  __FMC_ENABLE();
 80049f2:	6813      	ldr	r3, [r2, #0]
 80049f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049f8:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 80049fa:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8004a00:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004a04:	f7ff ffda 	bl	80049bc <HAL_SDRAM_MspInit>
 8004a08:	e7e3      	b.n	80049d2 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8004a0a:	2001      	movs	r0, #1
}
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	52004000 	.word	0x52004000

08004a14 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004a14:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004a16:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8004a1a:	4605      	mov	r5, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004a1c:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004a1e:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8004a20:	d004      	beq.n	8004a2c <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004a22:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8004a26:	2c01      	cmp	r4, #1
 8004a28:	d001      	beq.n	8004a2e <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8004a2a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8004a2c:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004a2e:	2302      	movs	r3, #2
 8004a30:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004a32:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004a34:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004a38:	f000 f8ac 	bl	8004b94 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004a3c:	6833      	ldr	r3, [r6, #0]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d003      	beq.n	8004a4a <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 8004a42:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 8004a44:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
 8004a48:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004a4a:	2305      	movs	r3, #5
  return HAL_OK;
 8004a4c:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004a4e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 8004a52:	bd70      	pop	{r4, r5, r6, pc}

08004a54 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004a54:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004a56:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8004a5a:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	b2d8      	uxtb	r0, r3
 8004a60:	d005      	beq.n	8004a6e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8004a62:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	b2dd      	uxtb	r5, r3
 8004a6a:	d001      	beq.n	8004a70 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8004a6c:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004a70:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004a72:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004a74:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004a78:	f000 f8a2 	bl	8004bc0 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 8004a7c:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004a7e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8004a82:	bd38      	pop	{r3, r4, r5, pc}

08004a84 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004a84:	680b      	ldr	r3, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004a86:	6802      	ldr	r2, [r0, #0]
{
 8004a88:	b470      	push	{r4, r5, r6}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004a8a:	b9c3      	cbnz	r3, 8004abe <FMC_SDRAM_Init+0x3a>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004a8c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8004a90:	684c      	ldr	r4, [r1, #4]
 8004a92:	698e      	ldr	r6, [r1, #24]
 8004a94:	4013      	ands	r3, r2
 8004a96:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8004a9a:	4323      	orrs	r3, r4
 8004a9c:	690c      	ldr	r4, [r1, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	694a      	ldr	r2, [r1, #20]
 8004aa2:	432b      	orrs	r3, r5
 8004aa4:	69cd      	ldr	r5, [r1, #28]
 8004aa6:	4323      	orrs	r3, r4
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	4333      	orrs	r3, r6
 8004aac:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 8004ab0:	432b      	orrs	r3, r5
 8004ab2:	4323      	orrs	r3, r4
 8004ab4:	4313      	orrs	r3, r2
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8004ab6:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004ab8:	6003      	str	r3, [r0, #0]
}
 8004aba:	2000      	movs	r0, #0
 8004abc:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004abe:	69cb      	ldr	r3, [r1, #28]
 8004ac0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004ac4:	68ce      	ldr	r6, [r1, #12]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004ac6:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <FMC_SDRAM_Init+0x74>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004aca:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
 8004ace:	432a      	orrs	r2, r5
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004ad0:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004ad2:	4322      	orrs	r2, r4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004ad4:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004ad6:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004ad8:	6842      	ldr	r2, [r0, #4]
 8004ada:	4013      	ands	r3, r2
 8004adc:	432b      	orrs	r3, r5
 8004ade:	690d      	ldr	r5, [r1, #16]
 8004ae0:	4323      	orrs	r3, r4
 8004ae2:	4333      	orrs	r3, r6
 8004ae4:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 8004ae8:	432b      	orrs	r3, r5
 8004aea:	4323      	orrs	r3, r4
 8004aec:	4313      	orrs	r3, r2
}
 8004aee:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004af0:	6043      	str	r3, [r0, #4]
}
 8004af2:	2000      	movs	r0, #0
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	ffff8000 	.word	0xffff8000

08004afc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004afc:	b470      	push	{r4, r5, r6}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8004afe:	bb0a      	cbnz	r2, 8004b44 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004b00:	684c      	ldr	r4, [r1, #4]
 8004b02:	6882      	ldr	r2, [r0, #8]
 8004b04:	680d      	ldr	r5, [r1, #0]
 8004b06:	1e63      	subs	r3, r4, #1
 8004b08:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8004b0c:	688c      	ldr	r4, [r1, #8]
 8004b0e:	1e6e      	subs	r6, r5, #1
 8004b10:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8004b14:	1e65      	subs	r5, r4, #1
 8004b16:	68cc      	ldr	r4, [r1, #12]
 8004b18:	4333      	orrs	r3, r6
 8004b1a:	690a      	ldr	r2, [r1, #16]
 8004b1c:	1e66      	subs	r6, r4, #1
 8004b1e:	694c      	ldr	r4, [r1, #20]
 8004b20:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004b24:	1e55      	subs	r5, r2, #1
 8004b26:	698a      	ldr	r2, [r1, #24]
 8004b28:	1e61      	subs	r1, r4, #1
 8004b2a:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 8004b2e:	3a01      	subs	r2, #1
 8004b30:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004b34:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8004b38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8004b3c:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004b3e:	6083      	str	r3, [r0, #8]
}
 8004b40:	2000      	movs	r0, #0
 8004b42:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004b44:	6882      	ldr	r2, [r0, #8]
 8004b46:	68cb      	ldr	r3, [r1, #12]
 8004b48:	4c11      	ldr	r4, [pc, #68]	; (8004b90 <FMC_SDRAM_Timing_Init+0x94>)
 8004b4a:	1e5d      	subs	r5, r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004b4c:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004b4e:	4014      	ands	r4, r2
 8004b50:	694a      	ldr	r2, [r1, #20]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004b52:	1e5e      	subs	r6, r3, #1
 8004b54:	680b      	ldr	r3, [r1, #0]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004b56:	3a01      	subs	r2, #1
 8004b58:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004b5c:	688d      	ldr	r5, [r1, #8]
 8004b5e:	3b01      	subs	r3, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004b60:	ea44 5402 	orr.w	r4, r4, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004b64:	3d01      	subs	r5, #1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004b66:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004b68:	68c2      	ldr	r2, [r0, #12]
 8004b6a:	690c      	ldr	r4, [r1, #16]
 8004b6c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8004b70:	6989      	ldr	r1, [r1, #24]
 8004b72:	3c01      	subs	r4, #1
 8004b74:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 8004b78:	3901      	subs	r1, #1
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004b80:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004b84:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
 8004b88:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004b8a:	60c3      	str	r3, [r0, #12]
}
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	4770      	bx	lr
 8004b90:	ff0f0fff 	.word	0xff0f0fff

08004b94 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004b94:	b470      	push	{r4, r5, r6}
 8004b96:	4602      	mov	r2, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8004b98:	68ce      	ldr	r6, [r1, #12]
 8004b9a:	4c08      	ldr	r4, [pc, #32]	; (8004bbc <FMC_SDRAM_SendCommand+0x28>)
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8004b9c:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8004b9e:	e9d1 3500 	ldrd	r3, r5, [r1]
 8004ba2:	6889      	ldr	r1, [r1, #8]
 8004ba4:	432b      	orrs	r3, r5
 8004ba6:	6915      	ldr	r5, [r2, #16]
 8004ba8:	3901      	subs	r1, #1
 8004baa:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 8004bae:	402c      	ands	r4, r5
 8004bb0:	4323      	orrs	r3, r4
 8004bb2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
}
 8004bb6:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8004bb8:	6113      	str	r3, [r2, #16]
}
 8004bba:	4770      	bx	lr
 8004bbc:	ffc00000 	.word	0xffc00000

08004bc0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8004bc0:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 8004bc4:	2000      	movs	r0, #0
{
 8004bc6:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8004bc8:	6954      	ldr	r4, [r2, #20]
 8004bca:	4023      	ands	r3, r4
}
 8004bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8004bd0:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8004bd4:	6151      	str	r1, [r2, #20]
}
 8004bd6:	4770      	bx	lr
 8004bd8:	ffffc001 	.word	0xffffc001

08004bdc <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8004bdc:	4603      	mov	r3, r0
 8004bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8004be2:	4c15      	ldr	r4, [pc, #84]	; (8004c38 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 8004be4:	2500      	movs	r5, #0
 8004be6:	4e15      	ldr	r6, [pc, #84]	; (8004c3c <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8004be8:	4628      	mov	r0, r5
 8004bea:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8004bee:	e9d3 7200 	ldrd	r7, r2, [r3]
 8004bf2:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8004bf6:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  DrawProp->LcdLayer = 0;
 8004bfa:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8004bfc:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 8004c00:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 8004c02:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 8004c04:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8004c06:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 8004c0a:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8004c0e:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 8004c12:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8004c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8004c18:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8004c1a:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8004c1c:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8004c1e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8004c20:	6a23      	ldr	r3, [r4, #32]
 8004c22:	f106 0118 	add.w	r1, r6, #24
 8004c26:	4628      	mov	r0, r5
 8004c28:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8004c2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c2c:	f106 011c 	add.w	r1, r6, #28
 8004c30:	4628      	mov	r0, r5
}
 8004c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8004c36:	4718      	bx	r3
 8004c38:	24000188 	.word	0x24000188
 8004c3c:	24000148 	.word	0x24000148

08004c40 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 8004c40:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 8004c42:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <UTIL_LCD_SetLayer+0x18>)
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	b133      	cbz	r3, 8004c56 <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 8004c48:	4d04      	ldr	r5, [pc, #16]	; (8004c5c <UTIL_LCD_SetLayer+0x1c>)
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4601      	mov	r1, r0
 8004c4e:	6928      	ldr	r0, [r5, #16]
 8004c50:	4798      	blx	r3
 8004c52:	b900      	cbnz	r0, 8004c56 <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 8004c54:	60ec      	str	r4, [r5, #12]
    }
  }
}
 8004c56:	bd38      	pop	{r3, r4, r5, pc}
 8004c58:	24000188 	.word	0x24000188
 8004c5c:	24000148 	.word	0x24000148

08004c60 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8004c60:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8004c62:	4e13      	ldr	r6, [pc, #76]	; (8004cb0 <UTIL_LCD_FillRect+0x50>)
{
 8004c64:	4615      	mov	r5, r2
 8004c66:	b083      	sub	sp, #12
 8004c68:	461c      	mov	r4, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8004c6a:	69f7      	ldr	r7, [r6, #28]
{
 8004c6c:	462b      	mov	r3, r5
 8004c6e:	460a      	mov	r2, r1
 8004c70:	9d08      	ldr	r5, [sp, #32]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8004c72:	2f02      	cmp	r7, #2
 8004c74:	d008      	beq.n	8004c88 <UTIL_LCD_FillRect+0x28>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8004c76:	4f0f      	ldr	r7, [pc, #60]	; (8004cb4 <UTIL_LCD_FillRect+0x54>)
 8004c78:	4601      	mov	r1, r0
 8004c7a:	e9cd 4500 	strd	r4, r5, [sp]
 8004c7e:	693c      	ldr	r4, [r7, #16]
 8004c80:	6930      	ldr	r0, [r6, #16]
 8004c82:	47a0      	blx	r4
  }
}
 8004c84:	b003      	add	sp, #12
 8004c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8004c88:	096f      	lsrs	r7, r5, #5
 8004c8a:	9400      	str	r4, [sp, #0]
 8004c8c:	0a29      	lsrs	r1, r5, #8
 8004c8e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8004c92:	f407 64fc 	and.w	r4, r7, #2016	; 0x7e0
 8004c96:	f401 4778 	and.w	r7, r1, #63488	; 0xf800
 8004c9a:	4601      	mov	r1, r0
 8004c9c:	6930      	ldr	r0, [r6, #16]
 8004c9e:	433c      	orrs	r4, r7
 8004ca0:	4e04      	ldr	r6, [pc, #16]	; (8004cb4 <UTIL_LCD_FillRect+0x54>)
 8004ca2:	4325      	orrs	r5, r4
 8004ca4:	6934      	ldr	r4, [r6, #16]
 8004ca6:	9501      	str	r5, [sp, #4]
 8004ca8:	47a0      	blx	r4
}
 8004caa:	b003      	add	sp, #12
 8004cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	24000148 	.word	0x24000148
 8004cb4:	24000188 	.word	0x24000188

08004cb8 <UTIL_LCD_Clear>:
{
 8004cb8:	b500      	push	{lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8004cba:	2100      	movs	r1, #0
{
 8004cbc:	b083      	sub	sp, #12
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8004cbe:	4a05      	ldr	r2, [pc, #20]	; (8004cd4 <UTIL_LCD_Clear+0x1c>)
 8004cc0:	9000      	str	r0, [sp, #0]
 8004cc2:	4608      	mov	r0, r1
 8004cc4:	6993      	ldr	r3, [r2, #24]
 8004cc6:	6952      	ldr	r2, [r2, #20]
 8004cc8:	f7ff ffca 	bl	8004c60 <UTIL_LCD_FillRect>
}
 8004ccc:	b003      	add	sp, #12
 8004cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cd2:	bf00      	nop
 8004cd4:	24000148 	.word	0x24000148

08004cd8 <__libc_init_array>:
 8004cd8:	b570      	push	{r4, r5, r6, lr}
 8004cda:	4d0d      	ldr	r5, [pc, #52]	; (8004d10 <__libc_init_array+0x38>)
 8004cdc:	4c0d      	ldr	r4, [pc, #52]	; (8004d14 <__libc_init_array+0x3c>)
 8004cde:	1b64      	subs	r4, r4, r5
 8004ce0:	10a4      	asrs	r4, r4, #2
 8004ce2:	2600      	movs	r6, #0
 8004ce4:	42a6      	cmp	r6, r4
 8004ce6:	d109      	bne.n	8004cfc <__libc_init_array+0x24>
 8004ce8:	4d0b      	ldr	r5, [pc, #44]	; (8004d18 <__libc_init_array+0x40>)
 8004cea:	4c0c      	ldr	r4, [pc, #48]	; (8004d1c <__libc_init_array+0x44>)
 8004cec:	f000 f818 	bl	8004d20 <_init>
 8004cf0:	1b64      	subs	r4, r4, r5
 8004cf2:	10a4      	asrs	r4, r4, #2
 8004cf4:	2600      	movs	r6, #0
 8004cf6:	42a6      	cmp	r6, r4
 8004cf8:	d105      	bne.n	8004d06 <__libc_init_array+0x2e>
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}
 8004cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d00:	4798      	blx	r3
 8004d02:	3601      	adds	r6, #1
 8004d04:	e7ee      	b.n	8004ce4 <__libc_init_array+0xc>
 8004d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d0a:	4798      	blx	r3
 8004d0c:	3601      	adds	r6, #1
 8004d0e:	e7f2      	b.n	8004cf6 <__libc_init_array+0x1e>
 8004d10:	08004ee0 	.word	0x08004ee0
 8004d14:	08004ee0 	.word	0x08004ee0
 8004d18:	08004ee0 	.word	0x08004ee0
 8004d1c:	08004ee4 	.word	0x08004ee4

08004d20 <_init>:
 8004d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d22:	bf00      	nop
 8004d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d26:	bc08      	pop	{r3}
 8004d28:	469e      	mov	lr, r3
 8004d2a:	4770      	bx	lr

08004d2c <_fini>:
 8004d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2e:	bf00      	nop
 8004d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d32:	bc08      	pop	{r3}
 8004d34:	469e      	mov	lr, r3
 8004d36:	4770      	bx	lr
